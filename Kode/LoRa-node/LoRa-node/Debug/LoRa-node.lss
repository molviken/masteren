
LoRa-node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000358  00800100  0000231c  000023b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000231c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000dc  00800458  00800458  00002708  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002708  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002764  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  000027a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003865  00000000  00000000  00002a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a31  00000000  00000000  000062c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001deb  00000000  00000000  00007cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000750  00000000  00000000  00009ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010e3  00000000  00000000  0000a230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001abf  00000000  00000000  0000b313  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0000cdd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__ctors_end>
       4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
       8:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_2>
       c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      10:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      14:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      18:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      1c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      20:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      24:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      28:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      2c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__vector_11>
      30:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      34:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      38:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      3c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      40:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      44:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      48:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      4c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      50:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      54:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      58:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      5c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      60:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      64:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      68:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      6c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      70:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      74:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      78:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      7c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      80:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      84:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      88:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      8c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      90:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      94:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      98:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      9c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      ac:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      bc:	0c 94 36 03 	jmp	0x66c	; 0x66c <__vector_47>
      c0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      c4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      c8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>

000000cc <__trampolines_end>:
      cc:	6e 61       	ori	r22, 0x1E	; 30
      ce:	6e 00       	.word	0x006e	; ????

000000d0 <__c.2332>:
      d0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      e0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      f0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     100:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     110:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     120:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     130:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     140:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     150:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     160:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     170:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     180:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     190:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1a0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1b0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1c0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001ce <__ctors_end>:
     1ce:	11 24       	eor	r1, r1
     1d0:	1f be       	out	0x3f, r1	; 63
     1d2:	cf ef       	ldi	r28, 0xFF	; 255
     1d4:	d8 e0       	ldi	r29, 0x08	; 8
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	cd bf       	out	0x3d, r28	; 61

000001da <__do_copy_data>:
     1da:	14 e0       	ldi	r17, 0x04	; 4
     1dc:	a0 e0       	ldi	r26, 0x00	; 0
     1de:	b1 e0       	ldi	r27, 0x01	; 1
     1e0:	ec e1       	ldi	r30, 0x1C	; 28
     1e2:	f3 e2       	ldi	r31, 0x23	; 35
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <__do_copy_data+0x10>
     1e6:	05 90       	lpm	r0, Z+
     1e8:	0d 92       	st	X+, r0
     1ea:	a8 35       	cpi	r26, 0x58	; 88
     1ec:	b1 07       	cpc	r27, r17
     1ee:	d9 f7       	brne	.-10     	; 0x1e6 <__do_copy_data+0xc>

000001f0 <__do_clear_bss>:
     1f0:	25 e0       	ldi	r18, 0x05	; 5
     1f2:	a8 e5       	ldi	r26, 0x58	; 88
     1f4:	b4 e0       	ldi	r27, 0x04	; 4
     1f6:	01 c0       	rjmp	.+2      	; 0x1fa <.do_clear_bss_start>

000001f8 <.do_clear_bss_loop>:
     1f8:	1d 92       	st	X+, r1

000001fa <.do_clear_bss_start>:
     1fa:	a4 33       	cpi	r26, 0x34	; 52
     1fc:	b2 07       	cpc	r27, r18
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <.do_clear_bss_loop>
     200:	0e 94 06 01 	call	0x20c	; 0x20c <main>
     204:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <_exit>

00000208 <__bad_interrupt>:
     208:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020c <main>:




int main(void){
	MCUSR &= ~(1 << WDRF);
     20c:	84 b7       	in	r24, 0x34	; 52
     20e:	87 7f       	andi	r24, 0xF7	; 247
     210:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	a8 95       	wdr
     218:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     21c:	88 61       	ori	r24, 0x18	; 24
     21e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     222:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     226:	0f be       	out	0x3f, r0	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     228:	2f ef       	ldi	r18, 0xFF	; 255
     22a:	83 ec       	ldi	r24, 0xC3	; 195
     22c:	99 e0       	ldi	r25, 0x09	; 9
     22e:	21 50       	subi	r18, 0x01	; 1
     230:	80 40       	sbci	r24, 0x00	; 0
     232:	90 40       	sbci	r25, 0x00	; 0
     234:	e1 f7       	brne	.-8      	; 0x22e <main+0x22>
     236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x2c>
     238:	00 00       	nop
	_delay_ms(400); // Start-up time after pressing reset button
	
	#ifdef DEBUG_M
	set_bit(LEDS,LED3);
	#endif
	FSM_run();
     23a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <FSM_run>
	puts("Program ended");
     23e:	84 e1       	ldi	r24, 0x14	; 20
     240:	92 e0       	ldi	r25, 0x02	; 2
     242:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <puts>
	return 0;
}
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	08 95       	ret

0000024c <adc_init>:




void adc_init(){
	ADMUX = 0;
     24c:	ac e7       	ldi	r26, 0x7C	; 124
     24e:	b0 e0       	ldi	r27, 0x00	; 0
     250:	1c 92       	st	X, r1
	ADCSRA = 0;
     252:	ea e7       	ldi	r30, 0x7A	; 122
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	10 82       	st	Z, r1
	ADMUX |= ADC_VOLTAGE_REF_AVCC;											// Sets adc voltage reference
     258:	8c 91       	ld	r24, X
     25a:	80 64       	ori	r24, 0x40	; 64
     25c:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESCALAR_128;											// ADC prescaler = 128 ---> 8MHz goes to 62.5 kHz
     25e:	80 81       	ld	r24, Z
     260:	86 60       	ori	r24, 0x06	; 6
     262:	80 83       	st	Z, r24
	//ADCSRA |= (0 << ADIE);												// Enables ADC interrupt
	ADCSRA |= (1 << ADEN);													// Enabling the ADC
     264:	80 81       	ld	r24, Z
     266:	80 68       	ori	r24, 0x80	; 128
     268:	80 83       	st	Z, r24
     26a:	08 95       	ret

0000026c <adc_read>:
}


uint16_t adc_read(){
	uint16_t val;					
	ADCSRA |= (1 << ADSC);													// Starts single conversion
     26c:	ea e7       	ldi	r30, 0x7A	; 122
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	80 64       	ori	r24, 0x40	; 64
     274:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));
     276:	80 81       	ld	r24, Z
     278:	84 ff       	sbrs	r24, 4
     27a:	fd cf       	rjmp	.-6      	; 0x276 <adc_read+0xa>
	val = ADCW;
     27c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     280:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	if ((int)val > 1000){val = 1000;}
     284:	89 3e       	cpi	r24, 0xE9	; 233
     286:	23 e0       	ldi	r18, 0x03	; 3
     288:	92 07       	cpc	r25, r18
     28a:	14 f0       	brlt	.+4      	; 0x290 <adc_read+0x24>
     28c:	88 ee       	ldi	r24, 0xE8	; 232
     28e:	93 e0       	ldi	r25, 0x03	; 3
	return val;
}
     290:	08 95       	ret

00000292 <adc_change_channel>:

void adc_change_channel(uint8_t channel){
	ADMUX |= channel;														// Setting adc channel to be read
     292:	ec e7       	ldi	r30, 0x7C	; 124
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	90 81       	ld	r25, Z
     298:	89 2b       	or	r24, r25
     29a:	80 83       	st	Z, r24
	adc_read();																// Discard first measurement after channel change
     29c:	0e 94 36 01 	call	0x26c	; 0x26c <adc_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a0:	8a e1       	ldi	r24, 0x1A	; 26
     2a2:	8a 95       	dec	r24
     2a4:	f1 f7       	brne	.-4      	; 0x2a2 <adc_change_channel+0x10>
     2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <adc_change_channel+0x16>
     2a8:	08 95       	ret

000002aa <board_charge>:
	DDRD |= (1 << DDRD4);	  // Set PD4 as output
	
}

void board_charge(int off){
	if (off){
     2aa:	89 2b       	or	r24, r25
     2ac:	11 f0       	breq	.+4      	; 0x2b2 <board_charge+0x8>
		clear_bit(PORTD, PORTD4);
     2ae:	5c 98       	cbi	0x0b, 4	; 11
     2b0:	08 95       	ret
		//clear_bit(LEDS, LED1);
	}
	else {
		set_bit(PORTD, PORTD4);
     2b2:	5c 9a       	sbi	0x0b, 4	; 11
     2b4:	08 95       	ret

000002b6 <board_setup>:
		//set_bit(LEDS, LED1);
	}
}

void board_setup(uint8_t *joined_err){
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	ec 01       	movw	r28, r24
	#ifndef LORA_NODE
	USART_init();
	#endif
	adc_init();
     2bc:	0e 94 26 01 	call	0x24c	; 0x24c <adc_init>

static void board_dmy_btn_init();
static void board_gpio_init();

void board_dmy_btn_init(void){
	DDRD &= ~(1 << DDD3);     // Clear the PD2 pin
     2c0:	53 98       	cbi	0x0a, 3	; 10
	EICRA |= (1 << ISC11);    // set INT1 to trigger on falling edge
     2c2:	e9 e6       	ldi	r30, 0x69	; 105
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	88 60       	ori	r24, 0x08	; 8
     2ca:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);     // Turns on INT1
     2cc:	e9 9a       	sbi	0x1d, 1	; 29
}

void board_gpio_init(void){
	DDRD |= (1 << DDRD4);	  // Set PD4 as output
     2ce:	54 9a       	sbi	0x0a, 4	; 10
	USART_init();
	#endif
	adc_init();
	board_dmy_btn_init();
	board_gpio_init();
	board_charge(0);
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 55 01 	call	0x2aa	; 0x2aa <board_charge>
	#ifdef LORA_NODE
		lora_init(joined_err);
     2d8:	ce 01       	movw	r24, r28
     2da:	0e 94 fd 05 	call	0xbfa	; 0xbfa <lora_init>
	#else
		*joined_err = 0;
	#endif

	i2c_init();
     2de:	0e 94 82 03 	call	0x704	; 0x704 <i2c_init>
	INA219_init();
     2e2:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <INA219_init>
	timers_init();
     2e6:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <timers_init>
	sei();
     2ea:	78 94       	sei
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <board_get_battery_level>:
	
	r1 = 174;
	r2 = 255;
	battery_max = 4.2;
	
	adc_change_channel(VBAT);
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	0e 94 49 01 	call	0x292	; 0x292 <adc_change_channel>
	val = adc_read();
     2f8:	0e 94 36 01 	call	0x26c	; 0x26c <adc_read>
	
	v_div_tick = (((r2)/(r1+r2))*battery_max) / 1024;
	vbat = v_div_tick*val*(r1+r2)/r2;
	bat_percentage = vbat*100/battery_max;
	
	return bat_percentage;
     2fc:	bc 01       	movw	r22, r24
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__floatunsisf>
     306:	26 eb       	ldi	r18, 0xB6	; 182
     308:	36 ec       	ldi	r19, 0xC6	; 198
     30a:	4f e1       	ldi	r20, 0x1F	; 31
     30c:	5b e3       	ldi	r21, 0x3B	; 59
     30e:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__mulsf3>
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e8       	ldi	r19, 0x80	; 128
     316:	46 ed       	ldi	r20, 0xD6	; 214
     318:	53 e4       	ldi	r21, 0x43	; 67
     31a:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__mulsf3>
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	4f e7       	ldi	r20, 0x7F	; 127
     324:	53 e4       	ldi	r21, 0x43	; 67
     326:	0e 94 ce 0c 	call	0x199c	; 0x199c <__divsf3>
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	48 ec       	ldi	r20, 0xC8	; 200
     330:	52 e4       	ldi	r21, 0x42	; 66
     332:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__mulsf3>
     336:	26 e6       	ldi	r18, 0x66	; 102
     338:	36 e6       	ldi	r19, 0x66	; 102
     33a:	46 e8       	ldi	r20, 0x86	; 134
     33c:	50 e4       	ldi	r21, 0x40	; 64
     33e:	0e 94 ce 0c 	call	0x199c	; 0x199c <__divsf3>
     342:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fixsfsi>
     346:	86 2f       	mov	r24, r22
     348:	08 95       	ret

0000034a <FSM_system_reset>:
	#ifdef DEBUG_M
	puts("Init complete, FSM running");
	#endif
}
void FSM_system_reset(){
	cli();	
     34a:	f8 94       	cli
	WDTCSR = 0x00;
     34c:	e0 e6       	ldi	r30, 0x60	; 96
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	10 82       	st	Z, r1
	WDTCSR = (1<<WDE);
     352:	88 e0       	ldi	r24, 0x08	; 8
     354:	80 83       	st	Z, r24
     356:	08 95       	ret

00000358 <FSM_assert_downlink>:
}
void FSM_assert_downlink(){
	uint32_t ts = 0;
	uint16_t sample_size_new;
	size_t str_len = strlen(downlink);
     358:	eb e5       	ldi	r30, 0x5B	; 91
     35a:	f4 e0       	ldi	r31, 0x04	; 4
     35c:	01 90       	ld	r0, Z+
     35e:	00 20       	and	r0, r0
     360:	e9 f7       	brne	.-6      	; 0x35c <FSM_assert_downlink+0x4>
     362:	31 97       	sbiw	r30, 0x01	; 1
     364:	bf 01       	movw	r22, r30
     366:	6b 55       	subi	r22, 0x5B	; 91
     368:	74 40       	sbci	r23, 0x04	; 4
	#ifdef LORA_NODE
		if (str_len > 28) ascii_hex_decode(downlink, str_len, downlink_pairs, LORA_RX_PAYLOAD_OFFSET);
     36a:	6d 31       	cpi	r22, 0x1D	; 29
     36c:	71 05       	cpc	r23, r1
     36e:	48 f0       	brcs	.+18     	; 0x382 <FSM_assert_downlink+0x2a>
     370:	29 e0       	ldi	r18, 0x09	; 9
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	45 ec       	ldi	r20, 0xC5	; 197
     376:	54 e0       	ldi	r21, 0x04	; 4
     378:	8b e5       	ldi	r24, 0x5B	; 91
     37a:	94 e0       	ldi	r25, 0x04	; 4
     37c:	0e 94 23 08 	call	0x1046	; 0x1046 <ascii_hex_decode>
     380:	08 c0       	rjmp	.+16     	; 0x392 <FSM_assert_downlink+0x3a>
		else hex_decode(downlink, str_len, downlink_pairs, LORA_RX_PAYLOAD_OFFSET);
     382:	29 e0       	ldi	r18, 0x09	; 9
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	45 ec       	ldi	r20, 0xC5	; 197
     388:	54 e0       	ldi	r21, 0x04	; 4
     38a:	8b e5       	ldi	r24, 0x5B	; 91
     38c:	94 e0       	ldi	r25, 0x04	; 4
     38e:	0e 94 9a 08 	call	0x1134	; 0x1134 <hex_decode>
	
	#else
		hex_decode(downlink, str_len, downlink_pairs, 0);
	#endif
	//printf("%02X %02X %02X\n", downlink_pairs[0], downlink_pairs[1], downlink_pairs[2]);
	switch (downlink_pairs[0]){
     392:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <downlink_pairs>
     396:	82 32       	cpi	r24, 0x22	; 34
     398:	e9 f0       	breq	.+58     	; 0x3d4 <FSM_assert_downlink+0x7c>
     39a:	89 39       	cpi	r24, 0x99	; 153
     39c:	49 f1       	breq	.+82     	; 0x3f0 <FSM_assert_downlink+0x98>
     39e:	81 31       	cpi	r24, 0x11	; 17
     3a0:	49 f5       	brne	.+82     	; 0x3f4 <FSM_assert_downlink+0x9c>
		case 0x11:
			set_bit(LEDS,LED3);
     3a2:	2a 9a       	sbi	0x05, 2	; 5
			ts = (uint32_t)downlink_pairs[4] | ((uint32_t)downlink_pairs[3] << 8) | ((uint32_t)downlink_pairs[2] << 16) | ((uint32_t)downlink_pairs[1] << 24);
     3a4:	e5 ec       	ldi	r30, 0xC5	; 197
     3a6:	f4 e0       	ldi	r31, 0x04	; 4
     3a8:	23 81       	ldd	r18, Z+3	; 0x03
     3aa:	82 81       	ldd	r24, Z+2	; 0x02
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	a0 e0       	ldi	r26, 0x00	; 0
     3b0:	b0 e0       	ldi	r27, 0x00	; 0
     3b2:	dc 01       	movw	r26, r24
     3b4:	99 27       	eor	r25, r25
     3b6:	88 27       	eor	r24, r24
     3b8:	92 2b       	or	r25, r18
     3ba:	24 81       	ldd	r18, Z+4	; 0x04
     3bc:	82 2b       	or	r24, r18
     3be:	21 81       	ldd	r18, Z+1	; 0x01
     3c0:	b2 2b       	or	r27, r18
			current_time = ts;
     3c2:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <current_time>
     3c6:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <current_time+0x1>
     3ca:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <current_time+0x2>
     3ce:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <current_time+0x3>
			break;
     3d2:	08 95       	ret
		
		case 0x22:
			set_bit(LEDS,LED3);
     3d4:	2a 9a       	sbi	0x05, 2	; 5
			sample_size_new = (uint16_t)downlink_pairs[2] | ((uint16_t)downlink_pairs[1] << 8);
     3d6:	e5 ec       	ldi	r30, 0xC5	; 197
     3d8:	f4 e0       	ldi	r31, 0x04	; 4
			sample_size = sample_size_new;
     3da:	81 81       	ldd	r24, Z+1	; 0x01
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	98 2f       	mov	r25, r24
     3e0:	88 27       	eor	r24, r24
     3e2:	22 81       	ldd	r18, Z+2	; 0x02
     3e4:	82 2b       	or	r24, r18
     3e6:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <sample_size+0x1>
     3ea:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <sample_size>
			break;
     3ee:	08 95       	ret
		
		case 0x99:
			//USART_putstring2("Resetting...");
			FSM_system_reset();
     3f0:	0e 94 a5 01 	call	0x34a	; 0x34a <FSM_system_reset>
     3f4:	08 95       	ret

000003f6 <FSM_run>:
			break;
	}
}

void FSM_run(void){
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	63 97       	sbiw	r28, 0x13	; 19
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	de bf       	out	0x3e, r29	; 62
     406:	0f be       	out	0x3f, r0	; 63
     408:	cd bf       	out	0x3d, r28	; 61
	data_receive_flag = 0;
     40a:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <data_receive_flag>
	sample_size = BOARD_SAMPLE_SIZE;
     40e:	8c e3       	ldi	r24, 0x3C	; 60
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <sample_size+0x1>
     416:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <sample_size>
	board_t board1 = {0, 100, {0, 0, 0, 0}, 0, sample_size, ""};
     41a:	19 82       	std	Y+1, r1	; 0x01
     41c:	24 e6       	ldi	r18, 0x64	; 100
     41e:	2a 83       	std	Y+2, r18	; 0x02
     420:	1c 82       	std	Y+4, r1	; 0x04
     422:	1b 82       	std	Y+3, r1	; 0x03
     424:	1e 82       	std	Y+6, r1	; 0x06
     426:	1d 82       	std	Y+5, r1	; 0x05
     428:	1f 82       	std	Y+7, r1	; 0x07
     42a:	18 86       	std	Y+8, r1	; 0x08
     42c:	19 86       	std	Y+9, r1	; 0x09
     42e:	1a 86       	std	Y+10, r1	; 0x0a
     430:	1b 86       	std	Y+11, r1	; 0x0b
     432:	1c 86       	std	Y+12, r1	; 0x0c
     434:	1d 86       	std	Y+13, r1	; 0x0d
     436:	1e 86       	std	Y+14, r1	; 0x0e
     438:	1f 86       	std	Y+15, r1	; 0x0f
     43a:	99 8b       	std	Y+17, r25	; 0x11
     43c:	88 8b       	std	Y+16, r24	; 0x10
     43e:	8d e0       	ldi	r24, 0x0D	; 13
     440:	93 e0       	ldi	r25, 0x03	; 3
     442:	9b 8b       	std	Y+19, r25	; 0x13
     444:	8a 8b       	std	Y+18, r24	; 0x12
		
	int rejoin_attempts = 0;
     446:	00 e0       	ldi	r16, 0x00	; 0
     448:	10 e0       	ldi	r17, 0x00	; 0
			
			case ST_DATA_RECEIVED:
				
			
			case ST_ACTIVE:
				PORTB ^= (1<<LED2);
     44a:	68 94       	set
     44c:	ee 24       	eor	r14, r14
     44e:	e1 f8       	bld	r14, 1
						lora_transmit(board1.msg);
					#endif
					board1.ina219.bus_voltage_avg = 0;
					board1.ina219.current_avg = 0;
				}
				nextState = ST_SLEEP;
     450:	ff 24       	eor	r15, r15
     452:	f3 94       	inc	r15
		}
		switch (nextState){
			
			case ST_INIT:
				FSM_system_init(&board1.lora_joined_err);
				if (board1.lora_joined_err) nextState = ST_NOT_JOINED;
     454:	0f 2e       	mov	r0, r31
     456:	f3 e0       	ldi	r31, 0x03	; 3
     458:	df 2e       	mov	r13, r31
     45a:	f0 2d       	mov	r31, r0
		
	int rejoin_attempts = 0;
	uint8_t lora_wait_rejoin_minutes = 3;
	
	while (1){
		if (data_receive_flag){
     45c:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <data_receive_flag>
     460:	88 23       	and	r24, r24
     462:	21 f0       	breq	.+8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			data_receive_flag = 0;
     464:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <data_receive_flag>
			FSM_assert_downlink();
     468:	0e 94 ac 01 	call	0x358	; 0x358 <FSM_assert_downlink>
			
		}
		if (tx_test_flag){
     46c:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <__data_end>
     470:	88 23       	and	r24, r24
     472:	51 f0       	breq	.+20     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
			tx_test_flag = 0;
     474:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <__data_end>
			printf("Transmit test\n");
     478:	82 e2       	ldi	r24, 0x22	; 34
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <puts>
			#ifdef LORA_NODE
				lora_transmit("025403210876");
     480:	80 e3       	ldi	r24, 0x30	; 48
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	0e 94 16 07 	call	0xe2c	; 0xe2c <lora_transmit>
			#else
				USART_putstring2("025403210876");
			#endif
		}
		switch (nextState){
     488:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <nextState>
     48c:	82 30       	cpi	r24, 0x02	; 2
     48e:	51 f1       	breq	.+84     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     490:	30 f4       	brcc	.+12     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     492:	88 23       	and	r24, r24
     494:	49 f0       	breq	.+18     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     496:	81 30       	cpi	r24, 0x01	; 1
     498:	09 f4       	brne	.+2      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     49a:	c8 c0       	rjmp	.+400    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     49c:	df cf       	rjmp	.-66     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     49e:	83 30       	cpi	r24, 0x03	; 3
     4a0:	81 f0       	breq	.+32     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4a2:	84 30       	cpi	r24, 0x04	; 4
     4a4:	f9 f0       	breq	.+62     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4a6:	da cf       	rjmp	.-76     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
static volatile int rec_flag = 0;
static void FSM_system_init(uint8_t *joined_flag);
static uint8_t tx_test_flag;

void FSM_system_init(uint8_t *joined_flag){
	board_setup(joined_flag);
     4a8:	ce 01       	movw	r24, r28
     4aa:	0f 96       	adiw	r24, 0x0f	; 15
     4ac:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <board_setup>
		}
		switch (nextState){
			
			case ST_INIT:
				FSM_system_init(&board1.lora_joined_err);
				if (board1.lora_joined_err) nextState = ST_NOT_JOINED;
     4b0:	8f 85       	ldd	r24, Y+15	; 0x0f
     4b2:	88 23       	and	r24, r24
     4b4:	19 f0       	breq	.+6      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4b6:	d0 92 5a 04 	sts	0x045A, r13	; 0x80045a <nextState>
     4ba:	d0 cf       	rjmp	.-96     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
				else nextState = ST_ACTIVE;
     4bc:	e0 92 5a 04 	sts	0x045A, r14	; 0x80045a <nextState>
     4c0:	cd cf       	rjmp	.-102    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			case ST_NOT_JOINED:
				#ifdef DEBUG_M
					puts("Not joined");
				#endif
				
				rejoin_attempts++;
     4c2:	0f 5f       	subi	r16, 0xFF	; 255
     4c4:	1f 4f       	sbci	r17, 0xFF	; 255
				if (rejoin_attempts < 3) board1.lora_joined_err = lora_join_OTAA();
     4c6:	03 30       	cpi	r16, 0x03	; 3
     4c8:	11 05       	cpc	r17, r1
     4ca:	24 f4       	brge	.+8      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4cc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lora_join_OTAA>
     4d0:	8f 87       	std	Y+15, r24	; 0x0f
     4d2:	05 c0       	rjmp	.+10     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
				else if (rejoin_attempts >= lora_wait_rejoin_minutes*60) rejoin_attempts = 0;
     4d4:	04 3b       	cpi	r16, 0xB4	; 180
     4d6:	11 05       	cpc	r17, r1
     4d8:	14 f0       	brlt	.+4      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4da:	00 e0       	ldi	r16, 0x00	; 0
     4dc:	10 e0       	ldi	r17, 0x00	; 0

				nextState = ST_SLEEP;
     4de:	f0 92 5a 04 	sts	0x045A, r15	; 0x80045a <nextState>
				break;
     4e2:	bc cf       	rjmp	.-136    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			
			case ST_DATA_RECEIVED:
				
			
			case ST_ACTIVE:
				PORTB ^= (1<<LED2);
     4e4:	85 b1       	in	r24, 0x05	; 5
     4e6:	8e 25       	eor	r24, r14
     4e8:	85 b9       	out	0x05, r24	; 5
				#ifdef DEBUG_M
					//puts("Active");
				#endif
				board1.ina219.bus_voltage_avg	+= INA219_readBusVoltageReg();
     4ea:	0e 94 8a 04 	call	0x914	; 0x914 <INA219_readBusVoltageReg>
     4ee:	09 2e       	mov	r0, r25
     4f0:	00 0c       	add	r0, r0
     4f2:	aa 0b       	sbc	r26, r26
     4f4:	bb 0b       	sbc	r27, r27
     4f6:	4f 81       	ldd	r20, Y+7	; 0x07
     4f8:	58 85       	ldd	r21, Y+8	; 0x08
     4fa:	69 85       	ldd	r22, Y+9	; 0x09
     4fc:	7a 85       	ldd	r23, Y+10	; 0x0a
     4fe:	84 0f       	add	r24, r20
     500:	95 1f       	adc	r25, r21
     502:	a6 1f       	adc	r26, r22
     504:	b7 1f       	adc	r27, r23
     506:	8f 83       	std	Y+7, r24	; 0x07
     508:	98 87       	std	Y+8, r25	; 0x08
     50a:	a9 87       	std	Y+9, r26	; 0x09
     50c:	ba 87       	std	Y+10, r27	; 0x0a
				board1.ina219.current_avg		+= INA219_readCurrentReg();
     50e:	0e 94 bb 04 	call	0x976	; 0x976 <INA219_readCurrentReg>
     512:	4b 85       	ldd	r20, Y+11	; 0x0b
     514:	5c 85       	ldd	r21, Y+12	; 0x0c
     516:	6d 85       	ldd	r22, Y+13	; 0x0d
     518:	7e 85       	ldd	r23, Y+14	; 0x0e
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	61 1d       	adc	r22, r1
     520:	71 1d       	adc	r23, r1
     522:	4b 87       	std	Y+11, r20	; 0x0b
     524:	5c 87       	std	Y+12, r21	; 0x0c
     526:	6d 87       	std	Y+13, r22	; 0x0d
     528:	7e 87       	std	Y+14, r23	; 0x0e
				board1.batteryLevel = board_get_battery_level();
     52a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <board_get_battery_level>
     52e:	8a 83       	std	Y+2, r24	; 0x02
				board1.sample_size = sample_size;
     530:	20 91 c3 04 	lds	r18, 0x04C3	; 0x8004c3 <sample_size>
     534:	30 91 c4 04 	lds	r19, 0x04C4	; 0x8004c4 <sample_size+0x1>
     538:	39 8b       	std	Y+17, r19	; 0x11
     53a:	28 8b       	std	Y+16, r18	; 0x10
				if (board1.batteryLevel < 70) board_charge(BOARD_CHARGE_ON);
     53c:	86 34       	cpi	r24, 0x46	; 70
     53e:	28 f4       	brcc	.+10     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 55 01 	call	0x2aa	; 0x2aa <board_charge>
     548:	06 c0       	rjmp	.+12     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
				else if (board1.batteryLevel > 95) board_charge(BOARD_CHARGE_OFF);
     54a:	80 36       	cpi	r24, 0x60	; 96
     54c:	20 f0       	brcs	.+8      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 55 01 	call	0x2aa	; 0x2aa <board_charge>
				if(!(current_time%board1.sample_size) && (current_time != 0)){
     556:	60 91 bf 04 	lds	r22, 0x04BF	; 0x8004bf <current_time>
     55a:	70 91 c0 04 	lds	r23, 0x04C0	; 0x8004c0 <current_time+0x1>
     55e:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <current_time+0x2>
     562:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <current_time+0x3>
     566:	88 88       	ldd	r8, Y+16	; 0x10
     568:	99 88       	ldd	r9, Y+17	; 0x11
     56a:	a1 2c       	mov	r10, r1
     56c:	b1 2c       	mov	r11, r1
     56e:	a5 01       	movw	r20, r10
     570:	94 01       	movw	r18, r8
     572:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__udivmodsi4>
     576:	67 2b       	or	r22, r23
     578:	68 2b       	or	r22, r24
     57a:	69 2b       	or	r22, r25
     57c:	09 f0       	breq	.+2      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     57e:	53 c0       	rjmp	.+166    	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
     580:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <current_time>
     584:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <current_time+0x1>
     588:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <current_time+0x2>
     58c:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <current_time+0x3>
     590:	89 2b       	or	r24, r25
     592:	8a 2b       	or	r24, r26
     594:	8b 2b       	or	r24, r27
     596:	09 f4       	brne	.+2      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     598:	46 c0       	rjmp	.+140    	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
					#ifdef DEBUG_M
						puts("It's time");
					#endif
					if (frame_counter == 0xFF) frame_counter = 0;
     59a:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <frame_counter>
     59e:	8f 3f       	cpi	r24, 0xFF	; 255
     5a0:	11 f4       	brne	.+4      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     5a2:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <frame_counter>
					board1.frame_counter = frame_counter++;
     5a6:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <frame_counter>
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	98 0f       	add	r25, r24
     5ae:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <frame_counter>
     5b2:	89 83       	std	Y+1, r24	; 0x01
					board1.ina219.bus_voltage	= board1.ina219.bus_voltage_avg / board1.sample_size;
     5b4:	6f 81       	ldd	r22, Y+7	; 0x07
     5b6:	78 85       	ldd	r23, Y+8	; 0x08
     5b8:	89 85       	ldd	r24, Y+9	; 0x09
     5ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     5bc:	a5 01       	movw	r20, r10
     5be:	94 01       	movw	r18, r8
     5c0:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__udivmodsi4>
     5c4:	3c 83       	std	Y+4, r19	; 0x04
     5c6:	2b 83       	std	Y+3, r18	; 0x03
					board1.ina219.current		= board1.ina219.current_avg / board1.sample_size;
     5c8:	6b 85       	ldd	r22, Y+11	; 0x0b
     5ca:	7c 85       	ldd	r23, Y+12	; 0x0c
     5cc:	8d 85       	ldd	r24, Y+13	; 0x0d
     5ce:	9e 85       	ldd	r25, Y+14	; 0x0e
     5d0:	a5 01       	movw	r20, r10
     5d2:	94 01       	movw	r18, r8
     5d4:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__udivmodsi4>
     5d8:	3e 83       	std	Y+6, r19	; 0x06
     5da:	2d 83       	std	Y+5, r18	; 0x05
					board1.msg = hex_encode(board1);
     5dc:	8d b7       	in	r24, 0x3d	; 61
     5de:	9e b7       	in	r25, 0x3e	; 62
     5e0:	43 97       	sbiw	r24, 0x13	; 19
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	9e bf       	out	0x3e, r25	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	8d bf       	out	0x3d, r24	; 61
     5ec:	ad b7       	in	r26, 0x3d	; 61
     5ee:	be b7       	in	r27, 0x3e	; 62
     5f0:	11 96       	adiw	r26, 0x01	; 1
     5f2:	83 e1       	ldi	r24, 0x13	; 19
     5f4:	fe 01       	movw	r30, r28
     5f6:	31 96       	adiw	r30, 0x01	; 1
     5f8:	01 90       	ld	r0, Z+
     5fa:	0d 92       	st	X+, r0
     5fc:	8a 95       	dec	r24
     5fe:	e1 f7       	brne	.-8      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
     600:	0e 94 ca 08 	call	0x1194	; 0x1194 <hex_encode>
     604:	9b 8b       	std	Y+19, r25	; 0x13
     606:	8a 8b       	std	Y+18, r24	; 0x12
						puts(board1.msg);
					#else 
						#ifdef DEBUG_M
						//puts(board1.msg);
						#endif
						lora_transmit(board1.msg);
     608:	0e 94 16 07 	call	0xe2c	; 0xe2c <lora_transmit>
					#endif
					board1.ina219.bus_voltage_avg = 0;
     60c:	1f 82       	std	Y+7, r1	; 0x07
     60e:	18 86       	std	Y+8, r1	; 0x08
     610:	19 86       	std	Y+9, r1	; 0x09
     612:	1a 86       	std	Y+10, r1	; 0x0a
					board1.ina219.current_avg = 0;
     614:	1b 86       	std	Y+11, r1	; 0x0b
     616:	1c 86       	std	Y+12, r1	; 0x0c
     618:	1d 86       	std	Y+13, r1	; 0x0d
     61a:	1e 86       	std	Y+14, r1	; 0x0e
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	f8 94       	cli
     620:	de bf       	out	0x3e, r29	; 62
     622:	0f be       	out	0x3f, r0	; 63
     624:	cd bf       	out	0x3d, r28	; 61
				}
				nextState = ST_SLEEP;
     626:	f0 92 5a 04 	sts	0x045A, r15	; 0x80045a <nextState>
				break;
     62a:	18 cf       	rjmp	.-464    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     62c:	8f e9       	ldi	r24, 0x9F	; 159
     62e:	9f e0       	ldi	r25, 0x0F	; 15
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     634:	00 c0       	rjmp	.+0      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
     636:	00 00       	nop
				_delay_ms(2); // Delay to allow a print to be written over serial before sleep
				
				#ifndef TIMER2
				_delay_ms(1000);
				#else
				enter_powerSave();
     638:	0e 94 06 08 	call	0x100c	; 0x100c <enter_powerSave>
				#endif

				if(board1.lora_joined_err) nextState = ST_NOT_JOINED;
     63c:	8f 85       	ldd	r24, Y+15	; 0x0f
     63e:	88 23       	and	r24, r24
     640:	19 f0       	breq	.+6      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
     642:	d0 92 5a 04 	sts	0x045A, r13	; 0x80045a <nextState>
     646:	0a cf       	rjmp	.-492    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
				else nextState = ST_ACTIVE;
     648:	e0 92 5a 04 	sts	0x045A, r14	; 0x80045a <nextState>
     64c:	07 cf       	rjmp	.-498    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>

0000064e <__vector_2>:
		}
	}
}

ISR (INT1_vect)          //External interrupt_zero ISR
{	
     64e:	1f 92       	push	r1
     650:	0f 92       	push	r0
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	0f 92       	push	r0
     656:	11 24       	eor	r1, r1
     658:	8f 93       	push	r24
	tx_test_flag = 1;
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <__data_end>
}
     660:	8f 91       	pop	r24
     662:	0f 90       	pop	r0
     664:	0f be       	out	0x3f, r0	; 63
     666:	0f 90       	pop	r0
     668:	1f 90       	pop	r1
     66a:	18 95       	reti

0000066c <__vector_47>:

ISR (USART2_RX_vect){
     66c:	1f 92       	push	r1
     66e:	0f 92       	push	r0
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	0f 92       	push	r0
     674:	11 24       	eor	r1, r1
     676:	2f 93       	push	r18
     678:	3f 93       	push	r19
     67a:	4f 93       	push	r20
     67c:	5f 93       	push	r21
     67e:	6f 93       	push	r22
     680:	7f 93       	push	r23
     682:	8f 93       	push	r24
     684:	9f 93       	push	r25
     686:	af 93       	push	r26
     688:	bf 93       	push	r27
     68a:	ef 93       	push	r30
     68c:	ff 93       	push	r31
	USART_receiveString2();
     68e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <USART_receiveString2>
	data_receive_flag = 1;
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <data_receive_flag>
}
     698:	ff 91       	pop	r31
     69a:	ef 91       	pop	r30
     69c:	bf 91       	pop	r27
     69e:	af 91       	pop	r26
     6a0:	9f 91       	pop	r25
     6a2:	8f 91       	pop	r24
     6a4:	7f 91       	pop	r23
     6a6:	6f 91       	pop	r22
     6a8:	5f 91       	pop	r21
     6aa:	4f 91       	pop	r20
     6ac:	3f 91       	pop	r19
     6ae:	2f 91       	pop	r18
     6b0:	0f 90       	pop	r0
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	0f 90       	pop	r0
     6b6:	1f 90       	pop	r1
     6b8:	18 95       	reti

000006ba <__vector_11>:


ISR(TIMER2_OVF_vect){
     6ba:	1f 92       	push	r1
     6bc:	0f 92       	push	r0
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	0f 92       	push	r0
     6c2:	11 24       	eor	r1, r1
     6c4:	8f 93       	push	r24
     6c6:	9f 93       	push	r25
     6c8:	af 93       	push	r26
     6ca:	bf 93       	push	r27
	current_time ++;
     6cc:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <current_time>
     6d0:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <current_time+0x1>
     6d4:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <current_time+0x2>
     6d8:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <current_time+0x3>
     6dc:	01 96       	adiw	r24, 0x01	; 1
     6de:	a1 1d       	adc	r26, r1
     6e0:	b1 1d       	adc	r27, r1
     6e2:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <current_time>
     6e6:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <current_time+0x1>
     6ea:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <current_time+0x2>
     6ee:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <current_time+0x3>
     6f2:	bf 91       	pop	r27
     6f4:	af 91       	pop	r26
     6f6:	9f 91       	pop	r25
     6f8:	8f 91       	pop	r24
     6fa:	0f 90       	pop	r0
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	0f 90       	pop	r0
     700:	1f 90       	pop	r1
     702:	18 95       	reti

00000704 <i2c_init>:
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address){
    return i2c_start( address );

}
     704:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     708:	80 e2       	ldi	r24, 0x20	; 32
     70a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     70e:	08 95       	ret

00000710 <i2c_sync>:
     710:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     714:	88 23       	and	r24, r24
     716:	bc f0       	brlt	.+46     	; 0x746 <i2c_sync+0x36>
     718:	24 e6       	ldi	r18, 0x64	; 100
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	ec ed       	ldi	r30, 0xDC	; 220
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	8a 95       	dec	r24
     724:	f1 f7       	brne	.-4      	; 0x722 <i2c_sync+0x12>
     726:	00 c0       	rjmp	.+0      	; 0x728 <i2c_sync+0x18>
     728:	21 50       	subi	r18, 0x01	; 1
     72a:	31 09       	sbc	r19, r1
     72c:	80 81       	ld	r24, Z
     72e:	88 23       	and	r24, r24
     730:	24 f0       	brlt	.+8      	; 0x73a <i2c_sync+0x2a>
     732:	21 15       	cp	r18, r1
     734:	31 05       	cpc	r19, r1
     736:	a1 f7       	brne	.-24     	; 0x720 <i2c_sync+0x10>
     738:	03 c0       	rjmp	.+6      	; 0x740 <i2c_sync+0x30>
     73a:	21 15       	cp	r18, r1
     73c:	31 05       	cpc	r19, r1
     73e:	29 f4       	brne	.+10     	; 0x74a <i2c_sync+0x3a>
     740:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     744:	02 c0       	rjmp	.+4      	; 0x74a <i2c_sync+0x3a>
     746:	24 e6       	ldi	r18, 0x64	; 100
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	23 2b       	or	r18, r19
     74e:	09 f4       	brne	.+2      	; 0x752 <i2c_sync+0x42>
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	08 95       	ret

00000754 <i2c_waitStop>:
     754:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     758:	84 ff       	sbrs	r24, 4
     75a:	17 c0       	rjmp	.+46     	; 0x78a <i2c_waitStop+0x36>
     75c:	24 e6       	ldi	r18, 0x64	; 100
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	ec ed       	ldi	r30, 0xDC	; 220
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	82 e0       	ldi	r24, 0x02	; 2
     766:	8a 95       	dec	r24
     768:	f1 f7       	brne	.-4      	; 0x766 <i2c_waitStop+0x12>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <i2c_waitStop+0x18>
     76c:	21 50       	subi	r18, 0x01	; 1
     76e:	31 09       	sbc	r19, r1
     770:	80 81       	ld	r24, Z
     772:	84 ff       	sbrs	r24, 4
     774:	04 c0       	rjmp	.+8      	; 0x77e <i2c_waitStop+0x2a>
     776:	21 15       	cp	r18, r1
     778:	31 05       	cpc	r19, r1
     77a:	a1 f7       	brne	.-24     	; 0x764 <i2c_waitStop+0x10>
     77c:	03 c0       	rjmp	.+6      	; 0x784 <i2c_waitStop+0x30>
     77e:	21 15       	cp	r18, r1
     780:	31 05       	cpc	r19, r1
     782:	29 f4       	brne	.+10     	; 0x78e <i2c_waitStop+0x3a>
     784:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     788:	02 c0       	rjmp	.+4      	; 0x78e <i2c_waitStop+0x3a>
     78a:	24 e6       	ldi	r18, 0x64	; 100
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	23 2b       	or	r18, r19
     792:	09 f4       	brne	.+2      	; 0x796 <i2c_waitStop+0x42>
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	08 95       	ret

00000798 <i2c_start>:
     798:	cf 93       	push	r28
     79a:	c8 2f       	mov	r28, r24
     79c:	84 ea       	ldi	r24, 0xA4	; 164
     79e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     7a2:	0e 94 88 03 	call	0x710	; 0x710 <i2c_sync>
     7a6:	88 23       	and	r24, r24
     7a8:	e9 f0       	breq	.+58     	; 0x7e4 <i2c_start+0x4c>
     7aa:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     7ae:	88 7f       	andi	r24, 0xF8	; 248
     7b0:	88 30       	cpi	r24, 0x08	; 8
     7b2:	11 f0       	breq	.+4      	; 0x7b8 <i2c_start+0x20>
     7b4:	80 31       	cpi	r24, 0x10	; 16
     7b6:	99 f4       	brne	.+38     	; 0x7de <i2c_start+0x46>
     7b8:	c0 93 db 00 	sts	0x00DB, r28	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
     7bc:	84 e8       	ldi	r24, 0x84	; 132
     7be:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     7c2:	0e 94 88 03 	call	0x710	; 0x710 <i2c_sync>
     7c6:	88 23       	and	r24, r24
     7c8:	69 f0       	breq	.+26     	; 0x7e4 <i2c_start+0x4c>
     7ca:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     7ce:	98 7f       	andi	r25, 0xF8	; 248
     7d0:	98 31       	cpi	r25, 0x18	; 24
     7d2:	39 f0       	breq	.+14     	; 0x7e2 <i2c_start+0x4a>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 34       	cpi	r25, 0x40	; 64
     7d8:	29 f4       	brne	.+10     	; 0x7e4 <i2c_start+0x4c>
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <i2c_start+0x4c>
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <i2c_start+0x4c>
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <i2c_stop>:
/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void){
    /* send stop condition */
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     7e8:	84 e9       	ldi	r24, 0x94	; 148
     7ea:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	
	// wait until stop condition is executed and bus released
	i2c_waitStop(); 
     7ee:	0e 94 aa 03 	call	0x754	; 0x754 <i2c_waitStop>
     7f2:	08 95       	ret

000007f4 <i2c_write>:
*************************************************************************/
unsigned char i2c_write( unsigned char data ){	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR1 = data;
     7f4:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	TWCR1 = (1<<TWINT) | (1<<TWEN);
     7f8:	84 e8       	ldi	r24, 0x84	; 132
     7fa:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

	// wait until transmission completed
	i2c_sync();
     7fe:	0e 94 88 03 	call	0x710	; 0x710 <i2c_sync>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     802:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     806:	98 7f       	andi	r25, 0xF8	; 248
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	98 32       	cpi	r25, 0x28	; 40
     80c:	09 f4       	brne	.+2      	; 0x810 <i2c_write+0x1c>
     80e:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}
     810:	08 95       	ret

00000812 <i2c_readAck>:
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void){
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     812:	84 ec       	ldi	r24, 0xC4	; 196
     814:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	i2c_sync();    
     818:	0e 94 88 03 	call	0x710	; 0x710 <i2c_sync>
	return TWDR1;
     81c:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
}
     820:	08 95       	ret

00000822 <i2c_readNak>:
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void){
	TWCR1 = (1<<TWINT) | (1<<TWEN);
     822:	84 e8       	ldi	r24, 0x84	; 132
     824:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	i2c_sync(); 
     828:	0e 94 88 03 	call	0x710	; 0x710 <i2c_sync>
	return TWDR1;
     82c:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
}
     830:	08 95       	ret

00000832 <i2c_read2ByteRegister>:
  
  Input:    device address, register address, buffer for storage
  Return:   0 write successful 
            1 write failed
*************************************************************************/
uint8_t i2c_read2ByteRegister(uint8_t adr, uint8_t regAddr, uint8_t *data){
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	d8 2f       	mov	r29, r24
     83e:	f6 2e       	mov	r15, r22
     840:	8a 01       	movw	r16, r20
	uint8_t error = 0;
	error += i2c_start(adr | I2C_WRITE);
     842:	0e 94 cc 03 	call	0x798	; 0x798 <i2c_start>
     846:	c8 2f       	mov	r28, r24
	error += i2c_write(regAddr);
     848:	8f 2d       	mov	r24, r15
     84a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <i2c_write>
     84e:	c8 0f       	add	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     850:	8a e1       	ldi	r24, 0x1A	; 26
     852:	8a 95       	dec	r24
     854:	f1 f7       	brne	.-4      	; 0x852 <i2c_read2ByteRegister+0x20>
     856:	00 c0       	rjmp	.+0      	; 0x858 <i2c_read2ByteRegister+0x26>
	_delay_us(10);
	//read data
	error += i2c_start(adr | I2C_READ);
     858:	8d 2f       	mov	r24, r29
     85a:	81 60       	ori	r24, 0x01	; 1
     85c:	0e 94 cc 03 	call	0x798	; 0x798 <i2c_start>
     860:	c8 0f       	add	r28, r24
	data[1] = i2c_readAck();
     862:	0e 94 09 04 	call	0x812	; 0x812 <i2c_readAck>
     866:	f8 01       	movw	r30, r16
     868:	81 83       	std	Z+1, r24	; 0x01
	data[0] = i2c_readNak();
     86a:	0e 94 11 04 	call	0x822	; 0x822 <i2c_readNak>
     86e:	f8 01       	movw	r30, r16
     870:	80 83       	st	Z, r24
	i2c_stop();
     872:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <i2c_stop>
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	c1 11       	cpse	r28, r1
     87a:	01 c0       	rjmp	.+2      	; 0x87e <i2c_read2ByteRegister+0x4c>
     87c:	80 e0       	ldi	r24, 0x00	; 0
	
	if (error) return 1;
	else return 0;
}
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	ff 90       	pop	r15
     888:	08 95       	ret

0000088a <i2c_write2ByteRegister>:
  
  Input:    device address, register address, bytes to be transfered 
  Return:   0 write successful
			1 write failed
*************************************************************************/
uint8_t i2c_write2ByteRegister(uint8_t adr, uint8_t regAddr, uint16_t data){
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	06 2f       	mov	r16, r22
     894:	d4 2f       	mov	r29, r20
     896:	15 2f       	mov	r17, r21
	uint8_t error = 0;
	error += i2c_start(adr | I2C_WRITE);
     898:	0e 94 cc 03 	call	0x798	; 0x798 <i2c_start>
     89c:	c8 2f       	mov	r28, r24
	error += i2c_write(regAddr);
     89e:	80 2f       	mov	r24, r16
     8a0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <i2c_write>
     8a4:	c8 0f       	add	r28, r24
     8a6:	8a e1       	ldi	r24, 0x1A	; 26
     8a8:	8a 95       	dec	r24
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <i2c_write2ByteRegister+0x1e>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <i2c_write2ByteRegister+0x24>
	_delay_us(10);
	error += i2c_write((uint8_t)(data >> 8));
     8ae:	81 2f       	mov	r24, r17
     8b0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <i2c_write>
     8b4:	c8 0f       	add	r28, r24
	error += i2c_write((uint8_t)(data & 0xFF));
     8b6:	8d 2f       	mov	r24, r29
     8b8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <i2c_write>
     8bc:	c8 0f       	add	r28, r24
	i2c_stop();
     8be:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <i2c_stop>
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	c1 11       	cpse	r28, r1
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <i2c_write2ByteRegister+0x40>
     8c8:	80 e0       	ldi	r24, 0x00	; 0
	if (error) return 1;
	else return 0;
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	1f 91       	pop	r17
     8d0:	0f 91       	pop	r16
     8d2:	08 95       	ret

000008d4 <INA219_trigger_oneshow_conversion>:

uint16_t INA219_readShuntVoltageReg(){ // Not operational
	uint8_t value[2];
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_SHUNTVOLTAGE, value)) return 1;
	return ((value[1] << 8) | value[0]);
}
     8d4:	4b e9       	ldi	r20, 0x9B	; 155
     8d6:	51 e0       	ldi	r21, 0x01	; 1
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	80 e8       	ldi	r24, 0x80	; 128
     8dc:	0e 94 45 04 	call	0x88a	; 0x88a <i2c_write2ByteRegister>
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	81 11       	cpse	r24, r1
     8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <INA219_trigger_oneshow_conversion+0x14>
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	89 2f       	mov	r24, r25
     8ea:	08 95       	ret

000008ec <INA219_setCalibration_16V_400mA>:
     8ec:	cf 93       	push	r28
     8ee:	40 e8       	ldi	r20, 0x80	; 128
     8f0:	5a e6       	ldi	r21, 0x6A	; 106
     8f2:	65 e0       	ldi	r22, 0x05	; 5
     8f4:	80 e8       	ldi	r24, 0x80	; 128
     8f6:	0e 94 45 04 	call	0x88a	; 0x88a <i2c_write2ByteRegister>
     8fa:	c8 2f       	mov	r28, r24
     8fc:	4b e9       	ldi	r20, 0x9B	; 155
     8fe:	51 e0       	ldi	r21, 0x01	; 1
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	80 e8       	ldi	r24, 0x80	; 128
     904:	0e 94 45 04 	call	0x88a	; 0x88a <i2c_write2ByteRegister>
     908:	c8 0f       	add	r28, r24
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	09 f4       	brne	.+2      	; 0x910 <__stack+0x11>
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	cf 91       	pop	r28
     912:	08 95       	ret

00000914 <INA219_readBusVoltageReg>:
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	00 d0       	rcall	.+0      	; 0x91a <INA219_readBusVoltageReg+0x6>
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <INA219_trigger_oneshow_conversion>
     922:	8f ea       	ldi	r24, 0xAF	; 175
     924:	94 e0       	ldi	r25, 0x04	; 4
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	f1 f7       	brne	.-4      	; 0x926 <INA219_readBusVoltageReg+0x12>
     92a:	00 c0       	rjmp	.+0      	; 0x92c <INA219_readBusVoltageReg+0x18>
     92c:	00 00       	nop
     92e:	ae 01       	movw	r20, r28
     930:	4f 5f       	subi	r20, 0xFF	; 255
     932:	5f 4f       	sbci	r21, 0xFF	; 255
     934:	62 e0       	ldi	r22, 0x02	; 2
     936:	80 e8       	ldi	r24, 0x80	; 128
     938:	0e 94 19 04 	call	0x832	; 0x832 <i2c_read2ByteRegister>
     93c:	81 11       	cpse	r24, r1
     93e:	11 c0       	rjmp	.+34     	; 0x962 <INA219_readBusVoltageReg+0x4e>
     940:	8a 81       	ldd	r24, Y+2	; 0x02
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	98 2f       	mov	r25, r24
     946:	88 27       	eor	r24, r24
     948:	29 81       	ldd	r18, Y+1	; 0x01
     94a:	82 2b       	or	r24, r18
     94c:	95 95       	asr	r25
     94e:	87 95       	ror	r24
     950:	95 95       	asr	r25
     952:	87 95       	ror	r24
     954:	95 95       	asr	r25
     956:	87 95       	ror	r24
     958:	81 30       	cpi	r24, 0x01	; 1
     95a:	20 e1       	ldi	r18, 0x10	; 16
     95c:	92 07       	cpc	r25, r18
     95e:	30 f0       	brcs	.+12     	; 0x96c <INA219_readBusVoltageReg+0x58>
     960:	03 c0       	rjmp	.+6      	; 0x968 <INA219_readBusVoltageReg+0x54>
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	02 c0       	rjmp	.+4      	; 0x96c <INA219_readBusVoltageReg+0x58>
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <INA219_readCurrentReg>:
uint16_t INA219_readCurrentReg(){
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	00 d0       	rcall	.+0      	; 0x97c <INA219_readCurrentReg+0x6>
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
	uint8_t value[2];
	INA219_trigger_oneshow_conversion();
     980:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <INA219_trigger_oneshow_conversion>
     984:	8f ea       	ldi	r24, 0xAF	; 175
     986:	94 e0       	ldi	r25, 0x04	; 4
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	f1 f7       	brne	.-4      	; 0x988 <INA219_readCurrentReg+0x12>
     98c:	00 c0       	rjmp	.+0      	; 0x98e <INA219_readCurrentReg+0x18>
     98e:	00 00       	nop
	_delay_us(600);
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_CURRENT, value)) return 0;
     990:	ae 01       	movw	r20, r28
     992:	4f 5f       	subi	r20, 0xFF	; 255
     994:	5f 4f       	sbci	r21, 0xFF	; 255
     996:	64 e0       	ldi	r22, 0x04	; 4
     998:	80 e8       	ldi	r24, 0x80	; 128
     99a:	0e 94 19 04 	call	0x832	; 0x832 <i2c_read2ByteRegister>
     99e:	81 11       	cpse	r24, r1
     9a0:	0d c0       	rjmp	.+26     	; 0x9bc <INA219_readCurrentReg+0x46>
	uint16_t total = (value[1] << 8) | value[0];
     9a2:	2a 81       	ldd	r18, Y+2	; 0x02
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	32 2f       	mov	r19, r18
     9a8:	22 27       	eor	r18, r18
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	28 2b       	or	r18, r24
	#ifdef INA219_debug
	printf("curr: %u\n", total);
	#endif
	if(total>0x8000) return 0x00;  // Remove possibility of corruption with a bug where total is above 0xFFAE with no connected source.
     9ae:	21 30       	cpi	r18, 0x01	; 1
     9b0:	90 e8       	ldi	r25, 0x80	; 128
     9b2:	39 07       	cpc	r19, r25
     9b4:	30 f4       	brcc	.+12     	; 0x9c2 <INA219_readCurrentReg+0x4c>
	return total;
     9b6:	82 2f       	mov	r24, r18
     9b8:	93 2f       	mov	r25, r19
     9ba:	05 c0       	rjmp	.+10     	; 0x9c6 <INA219_readCurrentReg+0x50>
}
uint16_t INA219_readCurrentReg(){
	uint8_t value[2];
	INA219_trigger_oneshow_conversion();
	_delay_us(600);
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_CURRENT, value)) return 0;
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <INA219_readCurrentReg+0x50>
	uint16_t total = (value[1] << 8) | value[0];
	#ifdef INA219_debug
	printf("curr: %u\n", total);
	#endif
	if(total>0x8000) return 0x00;  // Remove possibility of corruption with a bug where total is above 0xFFAE with no connected source.
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
	return total;
}
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	08 95       	ret

000009d0 <INA219_init>:


uint8_t INA219_init(){
	if (INA219_setCalibration_16V_400mA()) {
     9d0:	0e 94 76 04 	call	0x8ec	; 0x8ec <INA219_setCalibration_16V_400mA>
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	81 11       	cpse	r24, r1
     9d8:	01 c0       	rjmp	.+2      	; 0x9dc <INA219_init+0xc>
     9da:	90 e0       	ldi	r25, 0x00	; 0
		INA219_readCalibrationReg();
		INA219_readConfigReg();
		#endif
		return 0;
	}
     9dc:	89 2f       	mov	r24, r25
     9de:	08 95       	ret

000009e0 <lora_send_command>:
	lora_send_command("mac join abp");
	err = lora_receive_response();
	printf("Mac join ABP result: ");
	err = lora_receive_response();

}
     9e0:	0e 94 81 07 	call	0xf02	; 0xf02 <USART_putstring0>
     9e4:	8d e0       	ldi	r24, 0x0D	; 13
     9e6:	0e 94 79 07 	call	0xef2	; 0xef2 <USART_transmit0>
     9ea:	8a e0       	ldi	r24, 0x0A	; 10
     9ec:	0e 94 79 07 	call	0xef2	; 0xef2 <USART_transmit0>
     9f0:	08 95       	ret

000009f2 <lora_assert_response>:
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	ec 01       	movw	r28, r24
     9f8:	42 e0       	ldi	r20, 0x02	; 2
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	6d e4       	ldi	r22, 0x4D	; 77
     9fe:	72 e0       	ldi	r23, 0x02	; 2
     a00:	0e 94 87 10 	call	0x210e	; 0x210e <strncmp>
     a04:	89 2b       	or	r24, r25
     a06:	09 f4       	brne	.+2      	; 0xa0a <lora_assert_response+0x18>
     a08:	8f c0       	rjmp	.+286    	; 0xb28 <lora_assert_response+0x136>
     a0a:	48 e0       	ldi	r20, 0x08	; 8
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	6d e3       	ldi	r22, 0x3D	; 61
     a10:	72 e0       	ldi	r23, 0x02	; 2
     a12:	ce 01       	movw	r24, r28
     a14:	0e 94 87 10 	call	0x210e	; 0x210e <strncmp>
     a18:	89 2b       	or	r24, r25
     a1a:	09 f4       	brne	.+2      	; 0xa1e <lora_assert_response+0x2c>
     a1c:	87 c0       	rjmp	.+270    	; 0xb2c <lora_assert_response+0x13a>
     a1e:	49 e0       	ldi	r20, 0x09	; 9
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	66 e4       	ldi	r22, 0x46	; 70
     a24:	72 e0       	ldi	r23, 0x02	; 2
     a26:	ce 01       	movw	r24, r28
     a28:	0e 94 87 10 	call	0x210e	; 0x210e <strncmp>
     a2c:	89 2b       	or	r24, r25
     a2e:	09 f4       	brne	.+2      	; 0xa32 <lora_assert_response+0x40>
     a30:	7f c0       	rjmp	.+254    	; 0xb30 <lora_assert_response+0x13e>
     a32:	47 e0       	ldi	r20, 0x07	; 7
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	60 e5       	ldi	r22, 0x50	; 80
     a38:	72 e0       	ldi	r23, 0x02	; 2
     a3a:	ce 01       	movw	r24, r28
     a3c:	0e 94 87 10 	call	0x210e	; 0x210e <strncmp>
     a40:	89 2b       	or	r24, r25
     a42:	39 f4       	brne	.+14     	; 0xa52 <lora_assert_response+0x60>
     a44:	be 01       	movw	r22, r28
     a46:	8b e5       	ldi	r24, 0x5B	; 91
     a48:	94 e0       	ldi	r25, 0x04	; 4
     a4a:	0e 94 80 10 	call	0x2100	; 0x2100 <strcpy>
     a4e:	81 e1       	ldi	r24, 0x11	; 17
     a50:	86 c0       	rjmp	.+268    	; 0xb5e <lora_assert_response+0x16c>
     a52:	46 e0       	ldi	r20, 0x06	; 6
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	68 e5       	ldi	r22, 0x58	; 88
     a58:	72 e0       	ldi	r23, 0x02	; 2
     a5a:	ce 01       	movw	r24, r28
     a5c:	0e 94 87 10 	call	0x210e	; 0x210e <strncmp>
     a60:	89 2b       	or	r24, r25
     a62:	09 f4       	brne	.+2      	; 0xa66 <lora_assert_response+0x74>
     a64:	67 c0       	rjmp	.+206    	; 0xb34 <lora_assert_response+0x142>
     a66:	4d e0       	ldi	r20, 0x0D	; 13
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	6f e5       	ldi	r22, 0x5F	; 95
     a6c:	72 e0       	ldi	r23, 0x02	; 2
     a6e:	ce 01       	movw	r24, r28
     a70:	0e 94 87 10 	call	0x210e	; 0x210e <strncmp>
     a74:	89 2b       	or	r24, r25
     a76:	09 f4       	brne	.+2      	; 0xa7a <lora_assert_response+0x88>
     a78:	5f c0       	rjmp	.+190    	; 0xb38 <lora_assert_response+0x146>
     a7a:	4c e0       	ldi	r20, 0x0C	; 12
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	6d e6       	ldi	r22, 0x6D	; 109
     a80:	72 e0       	ldi	r23, 0x02	; 2
     a82:	ce 01       	movw	r24, r28
     a84:	0e 94 87 10 	call	0x210e	; 0x210e <strncmp>
     a88:	89 2b       	or	r24, r25
     a8a:	09 f4       	brne	.+2      	; 0xa8e <lora_assert_response+0x9c>
     a8c:	57 c0       	rjmp	.+174    	; 0xb3c <lora_assert_response+0x14a>
     a8e:	46 e0       	ldi	r20, 0x06	; 6
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	6a e7       	ldi	r22, 0x7A	; 122
     a94:	72 e0       	ldi	r23, 0x02	; 2
     a96:	ce 01       	movw	r24, r28
     a98:	0e 94 87 10 	call	0x210e	; 0x210e <strncmp>
     a9c:	89 2b       	or	r24, r25
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <lora_assert_response+0xb0>
     aa0:	4f c0       	rjmp	.+158    	; 0xb40 <lora_assert_response+0x14e>
     aa2:	44 e0       	ldi	r20, 0x04	; 4
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	61 e8       	ldi	r22, 0x81	; 129
     aa8:	72 e0       	ldi	r23, 0x02	; 2
     aaa:	ce 01       	movw	r24, r28
     aac:	0e 94 87 10 	call	0x210e	; 0x210e <strncmp>
     ab0:	89 2b       	or	r24, r25
     ab2:	09 f4       	brne	.+2      	; 0xab6 <lora_assert_response+0xc4>
     ab4:	47 c0       	rjmp	.+142    	; 0xb44 <lora_assert_response+0x152>
     ab6:	4a e0       	ldi	r20, 0x0A	; 10
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	66 e8       	ldi	r22, 0x86	; 134
     abc:	72 e0       	ldi	r23, 0x02	; 2
     abe:	ce 01       	movw	r24, r28
     ac0:	0e 94 87 10 	call	0x210e	; 0x210e <strncmp>
     ac4:	89 2b       	or	r24, r25
     ac6:	09 f4       	brne	.+2      	; 0xaca <lora_assert_response+0xd8>
     ac8:	3f c0       	rjmp	.+126    	; 0xb48 <lora_assert_response+0x156>
     aca:	4d e0       	ldi	r20, 0x0D	; 13
     acc:	50 e0       	ldi	r21, 0x00	; 0
     ace:	61 e9       	ldi	r22, 0x91	; 145
     ad0:	72 e0       	ldi	r23, 0x02	; 2
     ad2:	ce 01       	movw	r24, r28
     ad4:	0e 94 87 10 	call	0x210e	; 0x210e <strncmp>
     ad8:	89 2b       	or	r24, r25
     ada:	c1 f1       	breq	.+112    	; 0xb4c <lora_assert_response+0x15a>
     adc:	4a e0       	ldi	r20, 0x0A	; 10
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	6f e9       	ldi	r22, 0x9F	; 159
     ae2:	72 e0       	ldi	r23, 0x02	; 2
     ae4:	ce 01       	movw	r24, r28
     ae6:	0e 94 87 10 	call	0x210e	; 0x210e <strncmp>
     aea:	89 2b       	or	r24, r25
     aec:	89 f1       	breq	.+98     	; 0xb50 <lora_assert_response+0x15e>
     aee:	4f e1       	ldi	r20, 0x1F	; 31
     af0:	50 e0       	ldi	r21, 0x00	; 0
     af2:	6a ea       	ldi	r22, 0xAA	; 170
     af4:	72 e0       	ldi	r23, 0x02	; 2
     af6:	ce 01       	movw	r24, r28
     af8:	0e 94 87 10 	call	0x210e	; 0x210e <strncmp>
     afc:	89 2b       	or	r24, r25
     afe:	51 f1       	breq	.+84     	; 0xb54 <lora_assert_response+0x162>
     b00:	40 e1       	ldi	r20, 0x10	; 16
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	6a ec       	ldi	r22, 0xCA	; 202
     b06:	72 e0       	ldi	r23, 0x02	; 2
     b08:	ce 01       	movw	r24, r28
     b0a:	0e 94 87 10 	call	0x210e	; 0x210e <strncmp>
     b0e:	89 2b       	or	r24, r25
     b10:	19 f1       	breq	.+70     	; 0xb58 <lora_assert_response+0x166>
     b12:	47 e0       	ldi	r20, 0x07	; 7
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	6b ed       	ldi	r22, 0xDB	; 219
     b18:	72 e0       	ldi	r23, 0x02	; 2
     b1a:	ce 01       	movw	r24, r28
     b1c:	0e 94 87 10 	call	0x210e	; 0x210e <strncmp>
     b20:	89 2b       	or	r24, r25
     b22:	e1 f0       	breq	.+56     	; 0xb5c <lora_assert_response+0x16a>
     b24:	8a ea       	ldi	r24, 0xAA	; 170
     b26:	1b c0       	rjmp	.+54     	; 0xb5e <lora_assert_response+0x16c>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	19 c0       	rjmp	.+50     	; 0xb5e <lora_assert_response+0x16c>
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	17 c0       	rjmp	.+46     	; 0xb5e <lora_assert_response+0x16c>
     b30:	80 e1       	ldi	r24, 0x10	; 16
     b32:	15 c0       	rjmp	.+42     	; 0xb5e <lora_assert_response+0x16c>
     b34:	8a e0       	ldi	r24, 0x0A	; 10
     b36:	13 c0       	rjmp	.+38     	; 0xb5e <lora_assert_response+0x16c>
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	11 c0       	rjmp	.+34     	; 0xb5e <lora_assert_response+0x16c>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	0f c0       	rjmp	.+30     	; 0xb5e <lora_assert_response+0x16c>
     b40:	83 e0       	ldi	r24, 0x03	; 3
     b42:	0d c0       	rjmp	.+26     	; 0xb5e <lora_assert_response+0x16c>
     b44:	84 e0       	ldi	r24, 0x04	; 4
     b46:	0b c0       	rjmp	.+22     	; 0xb5e <lora_assert_response+0x16c>
     b48:	85 e0       	ldi	r24, 0x05	; 5
     b4a:	09 c0       	rjmp	.+18     	; 0xb5e <lora_assert_response+0x16c>
     b4c:	86 e0       	ldi	r24, 0x06	; 6
     b4e:	07 c0       	rjmp	.+14     	; 0xb5e <lora_assert_response+0x16c>
     b50:	87 e0       	ldi	r24, 0x07	; 7
     b52:	05 c0       	rjmp	.+10     	; 0xb5e <lora_assert_response+0x16c>
     b54:	88 e0       	ldi	r24, 0x08	; 8
     b56:	03 c0       	rjmp	.+6      	; 0xb5e <lora_assert_response+0x16c>
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	01 c0       	rjmp	.+2      	; 0xb5e <lora_assert_response+0x16c>
     b5c:	8d e0       	ldi	r24, 0x0D	; 13
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	08 95       	ret

00000b64 <lora_receive_response>:
     b64:	ef 92       	push	r14
     b66:	ff 92       	push	r15
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
     b74:	ca 5f       	subi	r28, 0xFA	; 250
     b76:	d1 09       	sbc	r29, r1
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	de bf       	out	0x3e, r29	; 62
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	ce 01       	movw	r24, r28
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	7c 01       	movw	r14, r24
     b88:	00 e0       	ldi	r16, 0x00	; 0
     b8a:	10 e0       	ldi	r17, 0x00	; 0
     b8c:	0e 94 71 07 	call	0xee2	; 0xee2 <USART_receive0>
     b90:	8d 30       	cpi	r24, 0x0D	; 13
     b92:	71 f4       	brne	.+28     	; 0xbb0 <lora_receive_response+0x4c>
     b94:	0e 94 71 07 	call	0xee2	; 0xee2 <USART_receive0>
     b98:	e1 e0       	ldi	r30, 0x01	; 1
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	ec 0f       	add	r30, r28
     b9e:	fd 1f       	adc	r31, r29
     ba0:	e0 0f       	add	r30, r16
     ba2:	f1 1f       	adc	r31, r17
     ba4:	10 82       	st	Z, r1
     ba6:	ce 01       	movw	r24, r28
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <lora_assert_response>
     bae:	06 c0       	rjmp	.+12     	; 0xbbc <lora_receive_response+0x58>
     bb0:	f7 01       	movw	r30, r14
     bb2:	81 93       	st	Z+, r24
     bb4:	7f 01       	movw	r14, r30
     bb6:	0f 5f       	subi	r16, 0xFF	; 255
     bb8:	1f 4f       	sbci	r17, 0xFF	; 255
     bba:	e8 cf       	rjmp	.-48     	; 0xb8c <lora_receive_response+0x28>
     bbc:	c6 50       	subi	r28, 0x06	; 6
     bbe:	df 4f       	sbci	r29, 0xFF	; 255
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	ff 90       	pop	r15
     bd4:	ef 90       	pop	r14
     bd6:	08 95       	ret

00000bd8 <lora_join_OTAA>:
     bd8:	8d ee       	ldi	r24, 0xED	; 237
     bda:	92 e0       	ldi	r25, 0x02	; 2
     bdc:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lora_send_command>
     be0:	0e 94 b2 05 	call	0xb64	; 0xb64 <lora_receive_response>
     be4:	81 11       	cpse	r24, r1
     be6:	05 c0       	rjmp	.+10     	; 0xbf2 <lora_join_OTAA+0x1a>
     be8:	0e 94 b2 05 	call	0xb64	; 0xb64 <lora_receive_response>
     bec:	81 11       	cpse	r24, r1
     bee:	03 c0       	rjmp	.+6      	; 0xbf6 <lora_join_OTAA+0x1e>
     bf0:	08 95       	ret
     bf2:	82 e2       	ldi	r24, 0x22	; 34
     bf4:	08 95       	ret
     bf6:	83 e2       	ldi	r24, 0x23	; 35
     bf8:	08 95       	ret

00000bfa <lora_init>:



uint8_t lora_init(uint8_t *joined_err){
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	e2 97       	sbiw	r28, 0x32	; 50
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	7c 01       	movw	r14, r24

static uint8_t lora_set_dcycle(void);
static uint8_t lora_save_settings(void);

void lora_auto_baud_detect(void){
	DDRD |= (1<<PORTD1);
     c18:	51 9a       	sbi	0x0a, 1	; 10
	PORTD &= ~(1<<PORTD1);
     c1a:	59 98       	cbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c1c:	8f e1       	ldi	r24, 0x1F	; 31
     c1e:	9e e4       	ldi	r25, 0x4E	; 78
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <lora_init+0x26>
     c24:	00 c0       	rjmp	.+0      	; 0xc26 <lora_init+0x2c>
     c26:	00 00       	nop
	_delay_ms(10);
	DDRD = 0x00;
     c28:	1a b8       	out	0x0a, r1	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c2a:	9a e1       	ldi	r25, 0x1A	; 26
     c2c:	9a 95       	dec	r25
     c2e:	f1 f7       	brne	.-4      	; 0xc2c <lora_init+0x32>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <lora_init+0x38>
	_delay_us(10);
	USART_init();
     c32:	0e 94 51 07 	call	0xea2	; 0xea2 <USART_init>
	USART_transmit0(0x55);
     c36:	85 e5       	ldi	r24, 0x55	; 85
     c38:	0e 94 79 07 	call	0xef2	; 0xef2 <USART_transmit0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c3c:	af ef       	ldi	r26, 0xFF	; 255
     c3e:	b0 e7       	ldi	r27, 0x70	; 112
     c40:	e2 e0       	ldi	r30, 0x02	; 2
     c42:	a1 50       	subi	r26, 0x01	; 1
     c44:	b0 40       	sbci	r27, 0x00	; 0
     c46:	e0 40       	sbci	r30, 0x00	; 0
     c48:	e1 f7       	brne	.-8      	; 0xc42 <lora_init+0x48>
     c4a:	00 c0       	rjmp	.+0      	; 0xc4c <lora_init+0x52>
     c4c:	00 00       	nop

uint8_t lora_reset_to_band(){

	char cmd[20];
	#ifdef LORA_BAND
		sprintf(cmd, "mac reset %d", LORA_BAND);
     c4e:	83 e0       	ldi	r24, 0x03	; 3
     c50:	8f 93       	push	r24
     c52:	84 e6       	ldi	r24, 0x64	; 100
     c54:	8f 93       	push	r24
     c56:	81 e3       	ldi	r24, 0x31	; 49
     c58:	93 e0       	ldi	r25, 0x03	; 3
     c5a:	9f 93       	push	r25
     c5c:	8f 93       	push	r24
     c5e:	8e 01       	movw	r16, r28
     c60:	0f 5f       	subi	r16, 0xFF	; 255
     c62:	1f 4f       	sbci	r17, 0xFF	; 255
     c64:	1f 93       	push	r17
     c66:	0f 93       	push	r16
     c68:	0e 94 0c 11 	call	0x2218	; 0x2218 <sprintf>
	#endif
	
	#ifdef DEBUG_M
		printf("%s: ",cmd);
	#endif
	lora_send_command(cmd);
     c6c:	c8 01       	movw	r24, r16
     c6e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lora_send_command>
	return lora_receive_response();
     c72:	0e 94 b2 05 	call	0xb64	; 0xb64 <lora_receive_response>
	#endif	
	


	err = lora_reset_to_band();
	if (err) return 1;
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	81 11       	cpse	r24, r1
     c84:	bc c0       	rjmp	.+376    	; 0xdfe <lora_init+0x204>
	#ifdef DEBUG_M
		printf("Set ADR: ");
	#endif
	
	#ifdef LORA_ADR
		lora_send_command("mac set adr on");
     c86:	8e e3       	ldi	r24, 0x3E	; 62
     c88:	93 e0       	ldi	r25, 0x03	; 3
     c8a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lora_send_command>
	#else
		lora_send_command("mac set adr off");
	#endif
	return lora_receive_response();
     c8e:	0e 94 b2 05 	call	0xb64	; 0xb64 <lora_receive_response>
	err = lora_reset_to_band();
	if (err) return 1;
	
		
	err = lora_set_adr() ;
	if (err) return 2;
     c92:	81 11       	cpse	r24, r1
     c94:	b6 c0       	rjmp	.+364    	; 0xe02 <lora_init+0x208>
	return lora_receive_response();
}
uint8_t lora_set_dr(){
	char cmd[20];
	#ifdef LORA_DR
	sprintf(cmd, "mac set dr %d",LORA_DR);
     c96:	1f 92       	push	r1
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	8f 93       	push	r24
     c9c:	8d e4       	ldi	r24, 0x4D	; 77
     c9e:	93 e0       	ldi	r25, 0x03	; 3
     ca0:	9f 93       	push	r25
     ca2:	8f 93       	push	r24
     ca4:	1f 93       	push	r17
     ca6:	0f 93       	push	r16
     ca8:	0e 94 0c 11 	call	0x2218	; 0x2218 <sprintf>
	#endif
	#ifdef DEBUG_M
		printf("%s: ",cmd);
	#endif
	lora_send_command(cmd);
     cac:	c8 01       	movw	r24, r16
     cae:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lora_send_command>
	return lora_receive_response();
     cb2:	0e 94 b2 05 	call	0xb64	; 0xb64 <lora_receive_response>
	err = lora_set_adr() ;
	if (err) return 2;
	
		
	err = lora_set_dr();
	if (err) return 3;
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	81 11       	cpse	r24, r1
     cc4:	a0 c0       	rjmp	.+320    	; 0xe06 <lora_init+0x20c>
}
uint8_t lora_set_pwridx(){
	
	char cmd[20];
	#ifdef LORA_PWRIDX
	sprintf(cmd, "mac set pwridx %d",LORA_PWRIDX);
     cc6:	1f 92       	push	r1
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	8f 93       	push	r24
     ccc:	8b e5       	ldi	r24, 0x5B	; 91
     cce:	93 e0       	ldi	r25, 0x03	; 3
     cd0:	9f 93       	push	r25
     cd2:	8f 93       	push	r24
     cd4:	1f 93       	push	r17
     cd6:	0f 93       	push	r16
     cd8:	0e 94 0c 11 	call	0x2218	; 0x2218 <sprintf>
	#endif
	#ifdef DEBUG_M
		printf("%s: ",cmd);
	#endif
	lora_send_command(cmd);
     cdc:	c8 01       	movw	r24, r16
     cde:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lora_send_command>
	return lora_receive_response();
     ce2:	0e 94 b2 05 	call	0xb64	; 0xb64 <lora_receive_response>
	err = lora_set_dr();
	if (err) return 3;
	
	
	err = lora_set_pwridx();
	if (err) return 4;
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	81 11       	cpse	r24, r1
     cf4:	8a c0       	rjmp	.+276    	; 0xe0a <lora_init+0x210>
uint8_t lora_set_dcycle(void){
	uint8_t err;
	#ifdef DEBUG_M
		printf("Setting dcycle for ch 0: ");
	#endif
	lora_send_command("mac set ch dcycle 0 9");
     cf6:	8d e6       	ldi	r24, 0x6D	; 109
     cf8:	93 e0       	ldi	r25, 0x03	; 3
     cfa:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lora_send_command>
	err = lora_receive_response();
     cfe:	0e 94 b2 05 	call	0xb64	; 0xb64 <lora_receive_response>
	if (err) return 0xB1;
     d02:	81 11       	cpse	r24, r1
     d04:	0e c0       	rjmp	.+28     	; 0xd22 <lora_init+0x128>
	
	#ifdef DEBUG_M
	printf("Setting dcycle for ch 1: ");
	#endif
	lora_send_command("mac set ch dcycle 1 9");
     d06:	83 e8       	ldi	r24, 0x83	; 131
     d08:	93 e0       	ldi	r25, 0x03	; 3
     d0a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lora_send_command>
	err = lora_receive_response();
     d0e:	0e 94 b2 05 	call	0xb64	; 0xb64 <lora_receive_response>
	if (err) return 0xB2;
     d12:	81 11       	cpse	r24, r1
     d14:	06 c0       	rjmp	.+12     	; 0xd22 <lora_init+0x128>
	
	#ifdef DEBUG_M
	printf("Setting dcycle for ch 2: ");
	#endif
	lora_send_command("mac set ch dcycle 2 9");
     d16:	89 e9       	ldi	r24, 0x99	; 153
     d18:	93 e0       	ldi	r25, 0x03	; 3
     d1a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lora_send_command>
	err = lora_receive_response();
     d1e:	0e 94 b2 05 	call	0xb64	; 0xb64 <lora_receive_response>
#endif

uint8_t lora_set_deveui(){

	
	char cmd[50] = "mac set deveui ";
     d22:	80 e1       	ldi	r24, 0x10	; 16
     d24:	ea e1       	ldi	r30, 0x1A	; 26
     d26:	f1 e0       	ldi	r31, 0x01	; 1
     d28:	de 01       	movw	r26, r28
     d2a:	11 96       	adiw	r26, 0x01	; 1
     d2c:	01 90       	ld	r0, Z+
     d2e:	0d 92       	st	X+, r0
     d30:	8a 95       	dec	r24
     d32:	e1 f7       	brne	.-8      	; 0xd2c <lora_init+0x132>
     d34:	fe 01       	movw	r30, r28
     d36:	71 96       	adiw	r30, 0x11	; 17
     d38:	82 e2       	ldi	r24, 0x22	; 34
     d3a:	df 01       	movw	r26, r30
     d3c:	1d 92       	st	X+, r1
     d3e:	8a 95       	dec	r24
     d40:	e9 f7       	brne	.-6      	; 0xd3c <lora_init+0x142>
	strcat(cmd, devEui);
     d42:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <devEui>
     d46:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <devEui+0x1>
     d4a:	ce 01       	movw	r24, r28
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	0e 94 75 10 	call	0x20ea	; 0x20ea <strcat>
	
	#ifdef DEBUG_M
		printf("%s:  ", cmd);
	#endif
	lora_send_command(cmd);
     d52:	ce 01       	movw	r24, r28
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lora_send_command>
	return lora_receive_response();
     d5a:	0e 94 b2 05 	call	0xb64	; 0xb64 <lora_receive_response>
		puts("Loading OTAA settings...");
	#endif
	uint8_t err = 0;
	
	err = lora_set_deveui();
	if (err) return 7;
     d5e:	81 11       	cpse	r24, r1
     d60:	56 c0       	rjmp	.+172    	; 0xe0e <lora_init+0x214>
uint8_t lora_set_appeui(){
	#ifdef DEBUG_M
		printf("Set appeui: ");
	#endif	
	
	char cmd[50] = "mac set appeui ";
     d62:	80 e1       	ldi	r24, 0x10	; 16
     d64:	ec e4       	ldi	r30, 0x4C	; 76
     d66:	f1 e0       	ldi	r31, 0x01	; 1
     d68:	de 01       	movw	r26, r28
     d6a:	11 96       	adiw	r26, 0x01	; 1
     d6c:	01 90       	ld	r0, Z+
     d6e:	0d 92       	st	X+, r0
     d70:	8a 95       	dec	r24
     d72:	e1 f7       	brne	.-8      	; 0xd6c <lora_init+0x172>
     d74:	fe 01       	movw	r30, r28
     d76:	71 96       	adiw	r30, 0x11	; 17
     d78:	82 e2       	ldi	r24, 0x22	; 34
     d7a:	df 01       	movw	r26, r30
     d7c:	1d 92       	st	X+, r1
     d7e:	8a 95       	dec	r24
     d80:	e9 f7       	brne	.-6      	; 0xd7c <lora_init+0x182>
 	strcat(cmd, appEui);
     d82:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <appEui>
     d86:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <appEui+0x1>
     d8a:	ce 01       	movw	r24, r28
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	0e 94 75 10 	call	0x20ea	; 0x20ea <strcat>
 	lora_send_command(cmd);
     d92:	ce 01       	movw	r24, r28
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lora_send_command>
	return lora_receive_response();
     d9a:	0e 94 b2 05 	call	0xb64	; 0xb64 <lora_receive_response>
	
	err = lora_set_deveui();
	if (err) return 7;
		
	err = lora_set_appeui();
	if (err) return 8;
     d9e:	81 11       	cpse	r24, r1
     da0:	36 c0       	rjmp	.+108    	; 0xe0e <lora_init+0x214>
 	strcat(cmd, appEui);
 	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_set_appkey(){
	char cmd[50] = "mac set appkey ";
     da2:	80 e1       	ldi	r24, 0x10	; 16
     da4:	ee e7       	ldi	r30, 0x7E	; 126
     da6:	f1 e0       	ldi	r31, 0x01	; 1
     da8:	de 01       	movw	r26, r28
     daa:	11 96       	adiw	r26, 0x01	; 1
     dac:	01 90       	ld	r0, Z+
     dae:	0d 92       	st	X+, r0
     db0:	8a 95       	dec	r24
     db2:	e1 f7       	brne	.-8      	; 0xdac <lora_init+0x1b2>
     db4:	fe 01       	movw	r30, r28
     db6:	71 96       	adiw	r30, 0x11	; 17
     db8:	82 e2       	ldi	r24, 0x22	; 34
     dba:	df 01       	movw	r26, r30
     dbc:	1d 92       	st	X+, r1
     dbe:	8a 95       	dec	r24
     dc0:	e9 f7       	brne	.-6      	; 0xdbc <lora_init+0x1c2>
	strcat(cmd, appKey);
     dc2:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <appKey>
     dc6:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <appKey+0x1>
     dca:	ce 01       	movw	r24, r28
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	0e 94 75 10 	call	0x20ea	; 0x20ea <strcat>
	#ifdef DEBUG_M
		printf("mac set appkey ****: ");
	#endif
	lora_send_command(cmd);
     dd2:	ce 01       	movw	r24, r28
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lora_send_command>
	return lora_receive_response();
     dda:	0e 94 b2 05 	call	0xb64	; 0xb64 <lora_receive_response>
		
	err = lora_set_appeui();
	if (err) return 8;
			
	err = lora_set_appkey();
	if (err) return 9;
     dde:	81 11       	cpse	r24, r1
     de0:	16 c0       	rjmp	.+44     	; 0xe0e <lora_init+0x214>
uint8_t lora_save_settings(){
	#ifdef DEBUG_M
		printf("Save settings: ");
	#endif
	
	lora_send_command("mac save");
     de2:	8f ea       	ldi	r24, 0xAF	; 175
     de4:	93 e0       	ldi	r25, 0x03	; 3
     de6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lora_send_command>
	return lora_receive_response();
     dea:	0e 94 b2 05 	call	0xb64	; 0xb64 <lora_receive_response>
     dee:	18 2f       	mov	r17, r24
			
	err = lora_set_appkey();
	if (err) return 9;

	err = lora_save_settings();
	if (err) return 10;
     df0:	81 11       	cpse	r24, r1
     df2:	0d c0       	rjmp	.+26     	; 0xe0e <lora_init+0x214>
	
	*joined_err = lora_join_OTAA();
     df4:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lora_join_OTAA>
     df8:	f7 01       	movw	r30, r14
     dfa:	80 83       	st	Z, r24
     dfc:	09 c0       	rjmp	.+18     	; 0xe10 <lora_init+0x216>
	#endif	
	


	err = lora_reset_to_band();
	if (err) return 1;
     dfe:	11 e0       	ldi	r17, 0x01	; 1
     e00:	07 c0       	rjmp	.+14     	; 0xe10 <lora_init+0x216>
	
		
	err = lora_set_adr() ;
	if (err) return 2;
     e02:	12 e0       	ldi	r17, 0x02	; 2
     e04:	05 c0       	rjmp	.+10     	; 0xe10 <lora_init+0x216>
	
		
	err = lora_set_dr();
	if (err) return 3;
     e06:	13 e0       	ldi	r17, 0x03	; 3
     e08:	03 c0       	rjmp	.+6      	; 0xe10 <lora_init+0x216>
	
	
	err = lora_set_pwridx();
	if (err) return 4;
     e0a:	14 e0       	ldi	r17, 0x04	; 4
     e0c:	01 c0       	rjmp	.+2      	; 0xe10 <lora_init+0x216>
	
	lora_set_dcycle();
	#ifdef OTAA
		err = lora_set_OTAA_settings(joined_err);
		if (err) return 5;	
     e0e:	15 e0       	ldi	r17, 0x05	; 5
	puts("Init success");
	#endif
	
	return 0;

}
     e10:	81 2f       	mov	r24, r17
     e12:	e2 96       	adiw	r28, 0x32	; 50
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	ff 90       	pop	r15
     e28:	ef 90       	pop	r14
     e2a:	08 95       	ret

00000e2c <lora_transmit>:
void lora_transmit(const char *payload){
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	c4 56       	subi	r28, 0x64	; 100
     e36:	d1 09       	sbc	r29, r1
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	bc 01       	movw	r22, r24
	uint8_t err;
	char buf[100] = "mac tx uncnf 3 ";
     e44:	90 e1       	ldi	r25, 0x10	; 16
     e46:	e0 eb       	ldi	r30, 0xB0	; 176
     e48:	f1 e0       	ldi	r31, 0x01	; 1
     e4a:	de 01       	movw	r26, r28
     e4c:	11 96       	adiw	r26, 0x01	; 1
     e4e:	01 90       	ld	r0, Z+
     e50:	0d 92       	st	X+, r0
     e52:	9a 95       	dec	r25
     e54:	e1 f7       	brne	.-8      	; 0xe4e <lora_transmit+0x22>
     e56:	fe 01       	movw	r30, r28
     e58:	71 96       	adiw	r30, 0x11	; 17
     e5a:	84 e5       	ldi	r24, 0x54	; 84
     e5c:	df 01       	movw	r26, r30
     e5e:	1d 92       	st	X+, r1
     e60:	8a 95       	dec	r24
     e62:	e9 f7       	brne	.-6      	; 0xe5e <lora_transmit+0x32>
	strcat(buf, payload);
     e64:	ce 01       	movw	r24, r28
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	0e 94 75 10 	call	0x20ea	; 0x20ea <strcat>

	lora_send_command(buf);
     e6c:	ce 01       	movw	r24, r28
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lora_send_command>
	err = lora_receive_response();
     e74:	0e 94 b2 05 	call	0xb64	; 0xb64 <lora_receive_response>
	if (!err){
     e78:	81 11       	cpse	r24, r1
     e7a:	08 c0       	rjmp	.+16     	; 0xe8c <lora_transmit+0x60>
		err = lora_receive_response();
     e7c:	0e 94 b2 05 	call	0xb64	; 0xb64 <lora_receive_response>
		if(err == RESP_MAC_RX_INC){
     e80:	81 31       	cpi	r24, 0x11	; 17
     e82:	29 f4       	brne	.+10     	; 0xe8e <lora_transmit+0x62>
			data_receive_flag = 1;
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <data_receive_flag>
     e8a:	01 c0       	rjmp	.+2      	; 0xe8e <lora_transmit+0x62>
		}
	}
	else set_bit(LEDS,LED3);
     e8c:	2a 9a       	sbi	0x05, 2	; 5
}
     e8e:	cc 59       	subi	r28, 0x9C	; 156
     e90:	df 4f       	sbci	r29, 0xFF	; 255
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	cd bf       	out	0x3d, r28	; 61
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <USART_init>:
	for(; *string; ++string){
		USART_transmit2(*string);
	}
	//USART_transmit2(0x0D);
	USART_transmit2(0x0A);
}
     ea2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     ea6:	93 e3       	ldi	r25, 0x33	; 51
     ea8:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     eac:	88 e1       	ldi	r24, 0x18	; 24
     eae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     eb2:	e2 ec       	ldi	r30, 0xC2	; 194
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	86 60       	ori	r24, 0x06	; 6
     eba:	80 83       	st	Z, r24
     ebc:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7e00d5>
     ec0:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7e00d4>
     ec4:	88 e9       	ldi	r24, 0x98	; 152
     ec6:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
     eca:	e2 ed       	ldi	r30, 0xD2	; 210
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	86 60       	ori	r24, 0x06	; 6
     ed2:	80 83       	st	Z, r24
     ed4:	8c e0       	ldi	r24, 0x0C	; 12
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	90 93 31 05 	sts	0x0531, r25	; 0x800531 <__iob+0x3>
     edc:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <__iob+0x2>
     ee0:	08 95       	ret

00000ee2 <USART_receive0>:
     ee2:	e0 ec       	ldi	r30, 0xC0	; 192
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	88 23       	and	r24, r24
     eea:	ec f7       	brge	.-6      	; 0xee6 <USART_receive0+0x4>
     eec:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     ef0:	08 95       	ret

00000ef2 <USART_transmit0>:
     ef2:	e0 ec       	ldi	r30, 0xC0	; 192
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	90 81       	ld	r25, Z
     ef8:	95 ff       	sbrs	r25, 5
     efa:	fd cf       	rjmp	.-6      	; 0xef6 <USART_transmit0+0x4>
     efc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     f00:	08 95       	ret

00000f02 <USART_putstring0>:
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	ec 01       	movw	r28, r24
     f08:	88 81       	ld	r24, Y
     f0a:	88 23       	and	r24, r24
     f0c:	31 f0       	breq	.+12     	; 0xf1a <USART_putstring0+0x18>
     f0e:	21 96       	adiw	r28, 0x01	; 1
     f10:	0e 94 79 07 	call	0xef2	; 0xef2 <USART_transmit0>
     f14:	89 91       	ld	r24, Y+
     f16:	81 11       	cpse	r24, r1
     f18:	fb cf       	rjmp	.-10     	; 0xf10 <USART_putstring0+0xe>
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <USART_transmit2>:
     f20:	e0 ed       	ldi	r30, 0xD0	; 208
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	90 81       	ld	r25, Z
     f26:	95 ff       	sbrs	r25, 5
     f28:	fd cf       	rjmp	.-6      	; 0xf24 <USART_transmit2+0x4>
     f2a:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
     f2e:	08 95       	ret

00000f30 <USART_TRANSMIT_printf>:
     f30:	cf 93       	push	r28
     f32:	c8 2f       	mov	r28, r24
     f34:	8a 30       	cpi	r24, 0x0A	; 10
     f36:	19 f4       	brne	.+6      	; 0xf3e <USART_TRANSMIT_printf+0xe>
     f38:	8d e0       	ldi	r24, 0x0D	; 13
     f3a:	0e 94 90 07 	call	0xf20	; 0xf20 <USART_transmit2>
     f3e:	8c 2f       	mov	r24, r28
     f40:	0e 94 90 07 	call	0xf20	; 0xf20 <USART_transmit2>
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	cf 91       	pop	r28
     f4a:	08 95       	ret

00000f4c <USART_receive2>:
     f4c:	e0 ed       	ldi	r30, 0xD0	; 208
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	88 23       	and	r24, r24
     f54:	ec f7       	brge	.-6      	; 0xf50 <USART_receive2+0x4>
     f56:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
     f5a:	08 95       	ret

00000f5c <USART_receiveString2>:

void USART_receiveString2(void){
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	ca 5f       	subi	r28, 0xFA	; 250
     f6e:	d1 09       	sbc	r29, r1
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	ce 01       	movw	r24, r28
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	7c 01       	movw	r14, r24
	char rx_buf[250];
	unsigned char rec = 0;
	int i = 0;
     f80:	00 e0       	ldi	r16, 0x00	; 0
     f82:	10 e0       	ldi	r17, 0x00	; 0
	while (1){
		rec = USART_receive2();
     f84:	0e 94 a6 07 	call	0xf4c	; 0xf4c <USART_receive2>
		if (rec == 0x0A){
     f88:	8a 30       	cpi	r24, 0x0A	; 10
     f8a:	79 f4       	brne	.+30     	; 0xfaa <USART_receiveString2+0x4e>
			rx_buf[i] = '\0';
     f8c:	e1 e0       	ldi	r30, 0x01	; 1
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	ec 0f       	add	r30, r28
     f92:	fd 1f       	adc	r31, r29
     f94:	e0 0f       	add	r30, r16
     f96:	f1 1f       	adc	r31, r17
     f98:	10 82       	st	Z, r1
		i++;
	}
	#ifdef DEBUG_M
	printf("rx int: %s\n", rx_buf);
	#endif
	strcpy(downlink, rx_buf);
     f9a:	be 01       	movw	r22, r28
     f9c:	6f 5f       	subi	r22, 0xFF	; 255
     f9e:	7f 4f       	sbci	r23, 0xFF	; 255
     fa0:	8b e5       	ldi	r24, 0x5B	; 91
     fa2:	94 e0       	ldi	r25, 0x04	; 4
     fa4:	0e 94 80 10 	call	0x2100	; 0x2100 <strcpy>
}
     fa8:	06 c0       	rjmp	.+12     	; 0xfb6 <USART_receiveString2+0x5a>
		rec = USART_receive2();
		if (rec == 0x0A){
			rx_buf[i] = '\0';
			break;
		}
		rx_buf[i] = rec;
     faa:	f7 01       	movw	r30, r14
     fac:	81 93       	st	Z+, r24
     fae:	7f 01       	movw	r14, r30
		i++;
     fb0:	0f 5f       	subi	r16, 0xFF	; 255
     fb2:	1f 4f       	sbci	r17, 0xFF	; 255
	}
     fb4:	e7 cf       	rjmp	.-50     	; 0xf84 <USART_receiveString2+0x28>
	#ifdef DEBUG_M
	printf("rx int: %s\n", rx_buf);
	#endif
	strcpy(downlink, rx_buf);
}
     fb6:	c6 50       	subi	r28, 0x06	; 6
     fb8:	df 4f       	sbci	r29, 0xFF	; 255
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	ff 90       	pop	r15
     fce:	ef 90       	pop	r14
     fd0:	08 95       	ret

00000fd2 <timers_init>:
		OCR1A = 31250;
		TIMSK1 |= (1 << OCIE1A);
	#endif

	#ifdef TIMER2
		TIMSK2 = 0;
     fd2:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		ASSR = 0b00100000;
     fd6:	80 e2       	ldi	r24, 0x20	; 32
     fd8:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
     fdc:	2f ef       	ldi	r18, 0xFF	; 255
     fde:	89 e6       	ldi	r24, 0x69	; 105
     fe0:	98 e1       	ldi	r25, 0x18	; 24
     fe2:	21 50       	subi	r18, 0x01	; 1
     fe4:	80 40       	sbci	r24, 0x00	; 0
     fe6:	90 40       	sbci	r25, 0x00	; 0
     fe8:	e1 f7       	brne	.-8      	; 0xfe2 <timers_init+0x10>
     fea:	00 c0       	rjmp	.+0      	; 0xfec <timers_init+0x1a>
     fec:	00 00       	nop
		_delay_ms(1000);
		TCCR2A = 0b00000000;
     fee:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		TCCR2B = 0b00000101;
     ff2:	85 e0       	ldi	r24, 0x05	; 5
     ff4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		//Synchronize registers
		while (ASSR & ( (1 << TCN2UB) | (1 << TCR2AUB) | (1 << TCR2BUB) )) ;
     ff8:	e6 eb       	ldi	r30, 0xB6	; 182
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	83 71       	andi	r24, 0x13	; 19
    1000:	e9 f7       	brne	.-6      	; 0xffc <timers_init+0x2a>
		TIFR2 = 0; //Clear interrupt flags
    1002:	17 ba       	out	0x17, r1	; 23
		TIMSK2 = (1 << TOIE2); //Enable overflow interrupt
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    100a:	08 95       	ret

0000100c <enter_powerSave>:
}


void enter_powerSave(){
	#ifdef USART2_START_COND_INTERRUPT
	UCSR2D |= (1<<SFDE) | (0<<RXSIE);			// Enable start condition detection with interrupt on RXCIE
    100c:	e3 ed       	ldi	r30, 0xD3	; 211
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	80 62       	ori	r24, 0x20	; 32
    1014:	80 83       	st	Z, r24
	#endif
	
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
    1016:	83 b7       	in	r24, 0x33	; 51
    1018:	81 7f       	andi	r24, 0xF1	; 241
    101a:	86 60       	ori	r24, 0x06	; 6
    101c:	83 bf       	out	0x33, r24	; 51
	sleep_mode();
    101e:	83 b7       	in	r24, 0x33	; 51
    1020:	81 60       	ori	r24, 0x01	; 1
    1022:	83 bf       	out	0x33, r24	; 51
    1024:	88 95       	sleep
    1026:	83 b7       	in	r24, 0x33	; 51
    1028:	8e 7f       	andi	r24, 0xFE	; 254
    102a:	83 bf       	out	0x33, r24	; 51
    102c:	2f e7       	ldi	r18, 0x7F	; 127
    102e:	85 eb       	ldi	r24, 0xB5	; 181
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	21 50       	subi	r18, 0x01	; 1
    1034:	80 40       	sbci	r24, 0x00	; 0
    1036:	90 40       	sbci	r25, 0x00	; 0
    1038:	e1 f7       	brne	.-8      	; 0x1032 <enter_powerSave+0x26>
    103a:	00 c0       	rjmp	.+0      	; 0x103c <enter_powerSave+0x30>
    103c:	00 00       	nop
	_delay_ms(70);
	
	#ifdef USART2_START_COND_INTERRUPT
	UCSR2D &= ~(1<<SFDE);						// Disable start condition detection while awake.
    103e:	80 81       	ld	r24, Z
    1040:	8f 7d       	andi	r24, 0xDF	; 223
    1042:	80 83       	st	Z, r24
    1044:	08 95       	ret

00001046 <ascii_hex_decode>:
#include "USART.h"
#include <math.h>
#include <string.h>
//const char* test2 = "6363 3131 3535 6262 6666"; = "cc 11 55 bb ff" = "204 17 85 187 255"
//const char* test = "3565623838383532";
void ascii_hex_decode(const char *in, size_t len, uint8_t *out, int start){
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	e2 97       	sbiw	r28, 0x32	; 50
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
    1062:	dc 01       	movw	r26, r24
    1064:	79 01       	movw	r14, r18
	char buf[50];
	uint8_t i, t, j, h, hn, ln, p1, p2;
	for (t = 0, i = start; i<len; i+=2, t++){
    1066:	32 2f       	mov	r19, r18
    1068:	f7 01       	movw	r30, r14
    106a:	ff 27       	eor	r31, r31
    106c:	e6 17       	cp	r30, r22
    106e:	f7 07       	cpc	r31, r23
    1070:	c8 f4       	brcc	.+50     	; 0x10a4 <ascii_hex_decode+0x5e>
    1072:	80 e0       	ldi	r24, 0x00	; 0
		p1 = ((uint8_t)(in[i]) - '0')*16;
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
    1074:	01 e0       	ldi	r16, 0x01	; 1
    1076:	10 e0       	ldi	r17, 0x00	; 0
    1078:	0c 0f       	add	r16, r28
    107a:	1d 1f       	adc	r17, r29
    107c:	08 0f       	add	r16, r24
    107e:	11 1d       	adc	r17, r1
//const char* test = "3565623838383532";
void ascii_hex_decode(const char *in, size_t len, uint8_t *out, int start){
	char buf[50];
	uint8_t i, t, j, h, hn, ln, p1, p2;
	for (t = 0, i = start; i<len; i+=2, t++){
		p1 = ((uint8_t)(in[i]) - '0')*16;
    1080:	ea 0f       	add	r30, r26
    1082:	fb 1f       	adc	r31, r27
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
    1084:	20 81       	ld	r18, Z
    1086:	91 81       	ldd	r25, Z+1	; 0x01
    1088:	90 53       	subi	r25, 0x30	; 48
    108a:	e0 e1       	ldi	r30, 0x10	; 16
    108c:	2e 9f       	mul	r18, r30
    108e:	90 0d       	add	r25, r0
    1090:	11 24       	eor	r1, r1
    1092:	f8 01       	movw	r30, r16
    1094:	90 83       	st	Z, r25
//const char* test2 = "6363 3131 3535 6262 6666"; = "cc 11 55 bb ff" = "204 17 85 187 255"
//const char* test = "3565623838383532";
void ascii_hex_decode(const char *in, size_t len, uint8_t *out, int start){
	char buf[50];
	uint8_t i, t, j, h, hn, ln, p1, p2;
	for (t = 0, i = start; i<len; i+=2, t++){
    1096:	3e 5f       	subi	r19, 0xFE	; 254
    1098:	8f 5f       	subi	r24, 0xFF	; 255
    109a:	e3 2f       	mov	r30, r19
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	e6 17       	cp	r30, r22
    10a0:	f7 07       	cpc	r31, r23
    10a2:	40 f3       	brcs	.-48     	; 0x1074 <ascii_hex_decode+0x2e>
		p1 = ((uint8_t)(in[i]) - '0')*16;
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
	}
	for (h= 0,j = 0; j<(len-start)/2; j+=2, h++){
    10a4:	6e 19       	sub	r22, r14
    10a6:	7f 09       	sbc	r23, r15
    10a8:	7b 01       	movw	r14, r22
    10aa:	f6 94       	lsr	r15
    10ac:	e7 94       	ror	r14
    10ae:	e1 14       	cp	r14, r1
    10b0:	f1 04       	cpc	r15, r1
    10b2:	99 f1       	breq	.+102    	; 0x111a <ascii_hex_decode+0xd4>
    10b4:	e0 e0       	ldi	r30, 0x00	; 0
    10b6:	70 e0       	ldi	r23, 0x00	; 0
		hn = buf[j] > '9' ? buf[j] - 'a' + 10 : buf[j] - '0';
    10b8:	27 2f       	mov	r18, r23
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	8c 0f       	add	r24, r28
    10c2:	9d 1f       	adc	r25, r29
    10c4:	82 0f       	add	r24, r18
    10c6:	93 1f       	adc	r25, r19
    10c8:	dc 01       	movw	r26, r24
    10ca:	8c 91       	ld	r24, X
    10cc:	8a 33       	cpi	r24, 0x3A	; 58
    10ce:	18 f0       	brcs	.+6      	; 0x10d6 <ascii_hex_decode+0x90>
    10d0:	99 ea       	ldi	r25, 0xA9	; 169
    10d2:	98 0f       	add	r25, r24
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <ascii_hex_decode+0x94>
    10d6:	90 ed       	ldi	r25, 0xD0	; 208
    10d8:	98 0f       	add	r25, r24
		ln = buf[j+1] > '9' ? buf[j+1] - 'a' + 10 : buf[j+1] - '0';
    10da:	a2 e0       	ldi	r26, 0x02	; 2
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	ac 0f       	add	r26, r28
    10e0:	bd 1f       	adc	r27, r29
    10e2:	2a 0f       	add	r18, r26
    10e4:	3b 1f       	adc	r19, r27
    10e6:	d9 01       	movw	r26, r18
    10e8:	8c 91       	ld	r24, X
    10ea:	8a 33       	cpi	r24, 0x3A	; 58
    10ec:	18 f0       	brcs	.+6      	; 0x10f4 <ascii_hex_decode+0xae>
    10ee:	29 ea       	ldi	r18, 0xA9	; 169
    10f0:	28 0f       	add	r18, r24
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <ascii_hex_decode+0xb2>
    10f4:	20 ed       	ldi	r18, 0xD0	; 208
    10f6:	28 0f       	add	r18, r24
		out[h] = (hn << 4) | ln;
    10f8:	8a 01       	movw	r16, r20
    10fa:	0e 0f       	add	r16, r30
    10fc:	11 1d       	adc	r17, r1
    10fe:	b0 e1       	ldi	r27, 0x10	; 16
    1100:	9b 9f       	mul	r25, r27
    1102:	c0 01       	movw	r24, r0
    1104:	11 24       	eor	r1, r1
    1106:	82 2b       	or	r24, r18
    1108:	d8 01       	movw	r26, r16
    110a:	8c 93       	st	X, r24
	for (t = 0, i = start; i<len; i+=2, t++){
		p1 = ((uint8_t)(in[i]) - '0')*16;
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
	}
	for (h= 0,j = 0; j<(len-start)/2; j+=2, h++){
    110c:	7e 5f       	subi	r23, 0xFE	; 254
    110e:	ef 5f       	subi	r30, 0xFF	; 255
    1110:	87 2f       	mov	r24, r23
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	8e 15       	cp	r24, r14
    1116:	9f 05       	cpc	r25, r15
    1118:	78 f2       	brcs	.-98     	; 0x10b8 <ascii_hex_decode+0x72>
		hn = buf[j] > '9' ? buf[j] - 'a' + 10 : buf[j] - '0';
		ln = buf[j+1] > '9' ? buf[j+1] - 'a' + 10 : buf[j+1] - '0';
		out[h] = (hn << 4) | ln;
	}
	//puts("");
}
    111a:	e2 96       	adiw	r28, 0x32	; 50
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	08 95       	ret

00001134 <hex_decode>:

uint8_t* hex_decode(const char *in, size_t len,uint8_t *out, int start){
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	ec 01       	movw	r28, r24
    113e:	95 2f       	mov	r25, r21
	unsigned int i, t, hn, ln;
	for (t = 0,i = start; i < len; i+=2,++t) {
    1140:	26 17       	cp	r18, r22
    1142:	37 07       	cpc	r19, r23
    1144:	08 f5       	brcc	.+66     	; 0x1188 <hex_decode+0x54>
    1146:	c2 0f       	add	r28, r18
    1148:	d3 1f       	adc	r29, r19
    114a:	04 2f       	mov	r16, r20
    114c:	15 2f       	mov	r17, r21
    114e:	fe 01       	movw	r30, r28
		hn = in[i] > '9' ? in[i] - 'A' + 10 : in[i] - '0';
    1150:	a8 81       	ld	r26, Y
    1152:	aa 33       	cpi	r26, 0x3A	; 58
    1154:	18 f0       	brcs	.+6      	; 0x115c <hex_decode+0x28>
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	d7 97       	sbiw	r26, 0x37	; 55
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <hex_decode+0x2c>
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	d0 97       	sbiw	r26, 0x30	; 48
		ln = in[i+1] > '9' ? in[i+1] - 'A' + 10 : in[i+1] - '0';
    1160:	e1 81       	ldd	r30, Z+1	; 0x01
    1162:	ea 33       	cpi	r30, 0x3A	; 58
    1164:	18 f0       	brcs	.+6      	; 0x116c <hex_decode+0x38>
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	f7 97       	sbiw	r30, 0x37	; 55
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <hex_decode+0x3c>
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	f0 97       	sbiw	r30, 0x30	; 48
		out[t] = (hn << 4 ) | ln;
    1170:	a2 95       	swap	r26
    1172:	a0 7f       	andi	r26, 0xF0	; 240
    1174:	ea 2b       	or	r30, r26
    1176:	d8 01       	movw	r26, r16
    1178:	ed 93       	st	X+, r30
    117a:	8d 01       	movw	r16, r26
	//puts("");
}

uint8_t* hex_decode(const char *in, size_t len,uint8_t *out, int start){
	unsigned int i, t, hn, ln;
	for (t = 0,i = start; i < len; i+=2,++t) {
    117c:	2e 5f       	subi	r18, 0xFE	; 254
    117e:	3f 4f       	sbci	r19, 0xFF	; 255
    1180:	22 96       	adiw	r28, 0x02	; 2
    1182:	26 17       	cp	r18, r22
    1184:	37 07       	cpc	r19, r23
    1186:	18 f3       	brcs	.-58     	; 0x114e <hex_decode+0x1a>
		hn = in[i] > '9' ? in[i] - 'A' + 10 : in[i] - '0';
		ln = in[i+1] > '9' ? in[i+1] - 'A' + 10 : in[i+1] - '0';
		out[t] = (hn << 4 ) | ln;
	}
	return out;
}
    1188:	84 2f       	mov	r24, r20
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	08 95       	ret

00001194 <hex_encode>:

//				1  2  3  4  5  6  7  8  9 10 11 byte pair
//  MSG STYLE: xx xx xx xx xx xx xx xx xx xx xx
//  1: frame, 2-5: timestamp, 6: battery, 7+8: bus voltage, 9+10: current

char* hex_encode(board_t board){
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
	char *msg = malloc(30);
    11a0:	8e e1       	ldi	r24, 0x1E	; 30
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <malloc>
    11a8:	08 2f       	mov	r16, r24
    11aa:	19 2f       	mov	r17, r25
	sprintf(msg, "%02X%02X%04X%04X", board.frame_counter, board.batteryLevel, board.ina219.bus_voltage, board.ina219.current);
    11ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    11ae:	8f 93       	push	r24
    11b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11b2:	8f 93       	push	r24
    11b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    11b6:	8f 93       	push	r24
    11b8:	89 85       	ldd	r24, Y+9	; 0x09
    11ba:	8f 93       	push	r24
    11bc:	88 85       	ldd	r24, Y+8	; 0x08
    11be:	1f 92       	push	r1
    11c0:	8f 93       	push	r24
    11c2:	8f 81       	ldd	r24, Y+7	; 0x07
    11c4:	1f 92       	push	r1
    11c6:	8f 93       	push	r24
    11c8:	86 e4       	ldi	r24, 0x46	; 70
    11ca:	94 e0       	ldi	r25, 0x04	; 4
    11cc:	9f 93       	push	r25
    11ce:	8f 93       	push	r24
    11d0:	1f 93       	push	r17
    11d2:	0f 93       	push	r16
    11d4:	0e 94 0c 11 	call	0x2218	; 0x2218 <sprintf>
	return msg;
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
}
    11e2:	80 2f       	mov	r24, r16
    11e4:	91 2f       	mov	r25, r17
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	08 95       	ret

000011f0 <vfprintf>:
    11f0:	a0 e1       	ldi	r26, 0x10	; 16
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ee ef       	ldi	r30, 0xFE	; 254
    11f6:	f8 e0       	ldi	r31, 0x08	; 8
    11f8:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__prologue_saves__>
    11fc:	7c 01       	movw	r14, r24
    11fe:	1b 01       	movw	r2, r22
    1200:	6a 01       	movw	r12, r20
    1202:	fc 01       	movw	r30, r24
    1204:	17 82       	std	Z+7, r1	; 0x07
    1206:	16 82       	std	Z+6, r1	; 0x06
    1208:	83 81       	ldd	r24, Z+3	; 0x03
    120a:	81 ff       	sbrs	r24, 1
    120c:	44 c3       	rjmp	.+1672   	; 0x1896 <vfprintf+0x6a6>
    120e:	9e 01       	movw	r18, r28
    1210:	2f 5f       	subi	r18, 0xFF	; 255
    1212:	3f 4f       	sbci	r19, 0xFF	; 255
    1214:	39 01       	movw	r6, r18
    1216:	f7 01       	movw	r30, r14
    1218:	93 81       	ldd	r25, Z+3	; 0x03
    121a:	f1 01       	movw	r30, r2
    121c:	93 fd       	sbrc	r25, 3
    121e:	85 91       	lpm	r24, Z+
    1220:	93 ff       	sbrs	r25, 3
    1222:	81 91       	ld	r24, Z+
    1224:	1f 01       	movw	r2, r30
    1226:	88 23       	and	r24, r24
    1228:	09 f4       	brne	.+2      	; 0x122c <vfprintf+0x3c>
    122a:	31 c3       	rjmp	.+1634   	; 0x188e <vfprintf+0x69e>
    122c:	85 32       	cpi	r24, 0x25	; 37
    122e:	39 f4       	brne	.+14     	; 0x123e <vfprintf+0x4e>
    1230:	93 fd       	sbrc	r25, 3
    1232:	85 91       	lpm	r24, Z+
    1234:	93 ff       	sbrs	r25, 3
    1236:	81 91       	ld	r24, Z+
    1238:	1f 01       	movw	r2, r30
    123a:	85 32       	cpi	r24, 0x25	; 37
    123c:	39 f4       	brne	.+14     	; 0x124c <vfprintf+0x5c>
    123e:	b7 01       	movw	r22, r14
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1246:	56 01       	movw	r10, r12
    1248:	65 01       	movw	r12, r10
    124a:	e5 cf       	rjmp	.-54     	; 0x1216 <vfprintf+0x26>
    124c:	10 e0       	ldi	r17, 0x00	; 0
    124e:	51 2c       	mov	r5, r1
    1250:	91 2c       	mov	r9, r1
    1252:	ff e1       	ldi	r31, 0x1F	; 31
    1254:	f9 15       	cp	r31, r9
    1256:	d8 f0       	brcs	.+54     	; 0x128e <vfprintf+0x9e>
    1258:	8b 32       	cpi	r24, 0x2B	; 43
    125a:	79 f0       	breq	.+30     	; 0x127a <vfprintf+0x8a>
    125c:	38 f4       	brcc	.+14     	; 0x126c <vfprintf+0x7c>
    125e:	80 32       	cpi	r24, 0x20	; 32
    1260:	79 f0       	breq	.+30     	; 0x1280 <vfprintf+0x90>
    1262:	83 32       	cpi	r24, 0x23	; 35
    1264:	a1 f4       	brne	.+40     	; 0x128e <vfprintf+0x9e>
    1266:	f9 2d       	mov	r31, r9
    1268:	f0 61       	ori	r31, 0x10	; 16
    126a:	2e c0       	rjmp	.+92     	; 0x12c8 <vfprintf+0xd8>
    126c:	8d 32       	cpi	r24, 0x2D	; 45
    126e:	61 f0       	breq	.+24     	; 0x1288 <vfprintf+0x98>
    1270:	80 33       	cpi	r24, 0x30	; 48
    1272:	69 f4       	brne	.+26     	; 0x128e <vfprintf+0x9e>
    1274:	29 2d       	mov	r18, r9
    1276:	21 60       	ori	r18, 0x01	; 1
    1278:	2d c0       	rjmp	.+90     	; 0x12d4 <vfprintf+0xe4>
    127a:	39 2d       	mov	r19, r9
    127c:	32 60       	ori	r19, 0x02	; 2
    127e:	93 2e       	mov	r9, r19
    1280:	89 2d       	mov	r24, r9
    1282:	84 60       	ori	r24, 0x04	; 4
    1284:	98 2e       	mov	r9, r24
    1286:	2a c0       	rjmp	.+84     	; 0x12dc <vfprintf+0xec>
    1288:	e9 2d       	mov	r30, r9
    128a:	e8 60       	ori	r30, 0x08	; 8
    128c:	15 c0       	rjmp	.+42     	; 0x12b8 <vfprintf+0xc8>
    128e:	97 fc       	sbrc	r9, 7
    1290:	2d c0       	rjmp	.+90     	; 0x12ec <vfprintf+0xfc>
    1292:	20 ed       	ldi	r18, 0xD0	; 208
    1294:	28 0f       	add	r18, r24
    1296:	2a 30       	cpi	r18, 0x0A	; 10
    1298:	88 f4       	brcc	.+34     	; 0x12bc <vfprintf+0xcc>
    129a:	96 fe       	sbrs	r9, 6
    129c:	06 c0       	rjmp	.+12     	; 0x12aa <vfprintf+0xba>
    129e:	3a e0       	ldi	r19, 0x0A	; 10
    12a0:	13 9f       	mul	r17, r19
    12a2:	20 0d       	add	r18, r0
    12a4:	11 24       	eor	r1, r1
    12a6:	12 2f       	mov	r17, r18
    12a8:	19 c0       	rjmp	.+50     	; 0x12dc <vfprintf+0xec>
    12aa:	8a e0       	ldi	r24, 0x0A	; 10
    12ac:	58 9e       	mul	r5, r24
    12ae:	20 0d       	add	r18, r0
    12b0:	11 24       	eor	r1, r1
    12b2:	52 2e       	mov	r5, r18
    12b4:	e9 2d       	mov	r30, r9
    12b6:	e0 62       	ori	r30, 0x20	; 32
    12b8:	9e 2e       	mov	r9, r30
    12ba:	10 c0       	rjmp	.+32     	; 0x12dc <vfprintf+0xec>
    12bc:	8e 32       	cpi	r24, 0x2E	; 46
    12be:	31 f4       	brne	.+12     	; 0x12cc <vfprintf+0xdc>
    12c0:	96 fc       	sbrc	r9, 6
    12c2:	e5 c2       	rjmp	.+1482   	; 0x188e <vfprintf+0x69e>
    12c4:	f9 2d       	mov	r31, r9
    12c6:	f0 64       	ori	r31, 0x40	; 64
    12c8:	9f 2e       	mov	r9, r31
    12ca:	08 c0       	rjmp	.+16     	; 0x12dc <vfprintf+0xec>
    12cc:	8c 36       	cpi	r24, 0x6C	; 108
    12ce:	21 f4       	brne	.+8      	; 0x12d8 <vfprintf+0xe8>
    12d0:	29 2d       	mov	r18, r9
    12d2:	20 68       	ori	r18, 0x80	; 128
    12d4:	92 2e       	mov	r9, r18
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <vfprintf+0xec>
    12d8:	88 36       	cpi	r24, 0x68	; 104
    12da:	41 f4       	brne	.+16     	; 0x12ec <vfprintf+0xfc>
    12dc:	f1 01       	movw	r30, r2
    12de:	93 fd       	sbrc	r25, 3
    12e0:	85 91       	lpm	r24, Z+
    12e2:	93 ff       	sbrs	r25, 3
    12e4:	81 91       	ld	r24, Z+
    12e6:	1f 01       	movw	r2, r30
    12e8:	81 11       	cpse	r24, r1
    12ea:	b3 cf       	rjmp	.-154    	; 0x1252 <vfprintf+0x62>
    12ec:	9b eb       	ldi	r25, 0xBB	; 187
    12ee:	98 0f       	add	r25, r24
    12f0:	93 30       	cpi	r25, 0x03	; 3
    12f2:	20 f4       	brcc	.+8      	; 0x12fc <vfprintf+0x10c>
    12f4:	99 2d       	mov	r25, r9
    12f6:	90 61       	ori	r25, 0x10	; 16
    12f8:	80 5e       	subi	r24, 0xE0	; 224
    12fa:	07 c0       	rjmp	.+14     	; 0x130a <vfprintf+0x11a>
    12fc:	9b e9       	ldi	r25, 0x9B	; 155
    12fe:	98 0f       	add	r25, r24
    1300:	93 30       	cpi	r25, 0x03	; 3
    1302:	08 f0       	brcs	.+2      	; 0x1306 <vfprintf+0x116>
    1304:	66 c1       	rjmp	.+716    	; 0x15d2 <vfprintf+0x3e2>
    1306:	99 2d       	mov	r25, r9
    1308:	9f 7e       	andi	r25, 0xEF	; 239
    130a:	96 ff       	sbrs	r25, 6
    130c:	16 e0       	ldi	r17, 0x06	; 6
    130e:	9f 73       	andi	r25, 0x3F	; 63
    1310:	99 2e       	mov	r9, r25
    1312:	85 36       	cpi	r24, 0x65	; 101
    1314:	19 f4       	brne	.+6      	; 0x131c <vfprintf+0x12c>
    1316:	90 64       	ori	r25, 0x40	; 64
    1318:	99 2e       	mov	r9, r25
    131a:	08 c0       	rjmp	.+16     	; 0x132c <vfprintf+0x13c>
    131c:	86 36       	cpi	r24, 0x66	; 102
    131e:	21 f4       	brne	.+8      	; 0x1328 <vfprintf+0x138>
    1320:	39 2f       	mov	r19, r25
    1322:	30 68       	ori	r19, 0x80	; 128
    1324:	93 2e       	mov	r9, r19
    1326:	02 c0       	rjmp	.+4      	; 0x132c <vfprintf+0x13c>
    1328:	11 11       	cpse	r17, r1
    132a:	11 50       	subi	r17, 0x01	; 1
    132c:	97 fe       	sbrs	r9, 7
    132e:	07 c0       	rjmp	.+14     	; 0x133e <vfprintf+0x14e>
    1330:	1c 33       	cpi	r17, 0x3C	; 60
    1332:	50 f4       	brcc	.+20     	; 0x1348 <vfprintf+0x158>
    1334:	44 24       	eor	r4, r4
    1336:	43 94       	inc	r4
    1338:	41 0e       	add	r4, r17
    133a:	27 e0       	ldi	r18, 0x07	; 7
    133c:	0b c0       	rjmp	.+22     	; 0x1354 <vfprintf+0x164>
    133e:	18 30       	cpi	r17, 0x08	; 8
    1340:	38 f0       	brcs	.+14     	; 0x1350 <vfprintf+0x160>
    1342:	27 e0       	ldi	r18, 0x07	; 7
    1344:	17 e0       	ldi	r17, 0x07	; 7
    1346:	05 c0       	rjmp	.+10     	; 0x1352 <vfprintf+0x162>
    1348:	27 e0       	ldi	r18, 0x07	; 7
    134a:	9c e3       	ldi	r25, 0x3C	; 60
    134c:	49 2e       	mov	r4, r25
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <vfprintf+0x164>
    1350:	21 2f       	mov	r18, r17
    1352:	41 2c       	mov	r4, r1
    1354:	56 01       	movw	r10, r12
    1356:	84 e0       	ldi	r24, 0x04	; 4
    1358:	a8 0e       	add	r10, r24
    135a:	b1 1c       	adc	r11, r1
    135c:	f6 01       	movw	r30, r12
    135e:	60 81       	ld	r22, Z
    1360:	71 81       	ldd	r23, Z+1	; 0x01
    1362:	82 81       	ldd	r24, Z+2	; 0x02
    1364:	93 81       	ldd	r25, Z+3	; 0x03
    1366:	04 2d       	mov	r16, r4
    1368:	a3 01       	movw	r20, r6
    136a:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__ftoa_engine>
    136e:	6c 01       	movw	r12, r24
    1370:	f9 81       	ldd	r31, Y+1	; 0x01
    1372:	fc 87       	std	Y+12, r31	; 0x0c
    1374:	f0 ff       	sbrs	r31, 0
    1376:	02 c0       	rjmp	.+4      	; 0x137c <vfprintf+0x18c>
    1378:	f3 ff       	sbrs	r31, 3
    137a:	06 c0       	rjmp	.+12     	; 0x1388 <vfprintf+0x198>
    137c:	91 fc       	sbrc	r9, 1
    137e:	06 c0       	rjmp	.+12     	; 0x138c <vfprintf+0x19c>
    1380:	92 fe       	sbrs	r9, 2
    1382:	06 c0       	rjmp	.+12     	; 0x1390 <vfprintf+0x1a0>
    1384:	00 e2       	ldi	r16, 0x20	; 32
    1386:	05 c0       	rjmp	.+10     	; 0x1392 <vfprintf+0x1a2>
    1388:	0d e2       	ldi	r16, 0x2D	; 45
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <vfprintf+0x1a2>
    138c:	0b e2       	ldi	r16, 0x2B	; 43
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <vfprintf+0x1a2>
    1390:	00 e0       	ldi	r16, 0x00	; 0
    1392:	8c 85       	ldd	r24, Y+12	; 0x0c
    1394:	8c 70       	andi	r24, 0x0C	; 12
    1396:	19 f0       	breq	.+6      	; 0x139e <vfprintf+0x1ae>
    1398:	01 11       	cpse	r16, r1
    139a:	5a c2       	rjmp	.+1204   	; 0x1850 <vfprintf+0x660>
    139c:	9b c2       	rjmp	.+1334   	; 0x18d4 <vfprintf+0x6e4>
    139e:	97 fe       	sbrs	r9, 7
    13a0:	10 c0       	rjmp	.+32     	; 0x13c2 <vfprintf+0x1d2>
    13a2:	4c 0c       	add	r4, r12
    13a4:	fc 85       	ldd	r31, Y+12	; 0x0c
    13a6:	f4 ff       	sbrs	r31, 4
    13a8:	04 c0       	rjmp	.+8      	; 0x13b2 <vfprintf+0x1c2>
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	81 33       	cpi	r24, 0x31	; 49
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <vfprintf+0x1c2>
    13b0:	4a 94       	dec	r4
    13b2:	14 14       	cp	r1, r4
    13b4:	74 f5       	brge	.+92     	; 0x1412 <vfprintf+0x222>
    13b6:	28 e0       	ldi	r18, 0x08	; 8
    13b8:	24 15       	cp	r18, r4
    13ba:	78 f5       	brcc	.+94     	; 0x141a <vfprintf+0x22a>
    13bc:	88 e0       	ldi	r24, 0x08	; 8
    13be:	48 2e       	mov	r4, r24
    13c0:	2c c0       	rjmp	.+88     	; 0x141a <vfprintf+0x22a>
    13c2:	96 fc       	sbrc	r9, 6
    13c4:	2a c0       	rjmp	.+84     	; 0x141a <vfprintf+0x22a>
    13c6:	81 2f       	mov	r24, r17
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	8c 15       	cp	r24, r12
    13cc:	9d 05       	cpc	r25, r13
    13ce:	9c f0       	brlt	.+38     	; 0x13f6 <vfprintf+0x206>
    13d0:	3c ef       	ldi	r19, 0xFC	; 252
    13d2:	c3 16       	cp	r12, r19
    13d4:	3f ef       	ldi	r19, 0xFF	; 255
    13d6:	d3 06       	cpc	r13, r19
    13d8:	74 f0       	brlt	.+28     	; 0x13f6 <vfprintf+0x206>
    13da:	89 2d       	mov	r24, r9
    13dc:	80 68       	ori	r24, 0x80	; 128
    13de:	98 2e       	mov	r9, r24
    13e0:	0a c0       	rjmp	.+20     	; 0x13f6 <vfprintf+0x206>
    13e2:	e2 e0       	ldi	r30, 0x02	; 2
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	ec 0f       	add	r30, r28
    13e8:	fd 1f       	adc	r31, r29
    13ea:	e1 0f       	add	r30, r17
    13ec:	f1 1d       	adc	r31, r1
    13ee:	80 81       	ld	r24, Z
    13f0:	80 33       	cpi	r24, 0x30	; 48
    13f2:	19 f4       	brne	.+6      	; 0x13fa <vfprintf+0x20a>
    13f4:	11 50       	subi	r17, 0x01	; 1
    13f6:	11 11       	cpse	r17, r1
    13f8:	f4 cf       	rjmp	.-24     	; 0x13e2 <vfprintf+0x1f2>
    13fa:	97 fe       	sbrs	r9, 7
    13fc:	0e c0       	rjmp	.+28     	; 0x141a <vfprintf+0x22a>
    13fe:	44 24       	eor	r4, r4
    1400:	43 94       	inc	r4
    1402:	41 0e       	add	r4, r17
    1404:	81 2f       	mov	r24, r17
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	c8 16       	cp	r12, r24
    140a:	d9 06       	cpc	r13, r25
    140c:	2c f4       	brge	.+10     	; 0x1418 <vfprintf+0x228>
    140e:	1c 19       	sub	r17, r12
    1410:	04 c0       	rjmp	.+8      	; 0x141a <vfprintf+0x22a>
    1412:	44 24       	eor	r4, r4
    1414:	43 94       	inc	r4
    1416:	01 c0       	rjmp	.+2      	; 0x141a <vfprintf+0x22a>
    1418:	10 e0       	ldi	r17, 0x00	; 0
    141a:	97 fe       	sbrs	r9, 7
    141c:	06 c0       	rjmp	.+12     	; 0x142a <vfprintf+0x23a>
    141e:	1c 14       	cp	r1, r12
    1420:	1d 04       	cpc	r1, r13
    1422:	34 f4       	brge	.+12     	; 0x1430 <vfprintf+0x240>
    1424:	c6 01       	movw	r24, r12
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	05 c0       	rjmp	.+10     	; 0x1434 <vfprintf+0x244>
    142a:	85 e0       	ldi	r24, 0x05	; 5
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <vfprintf+0x244>
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	01 11       	cpse	r16, r1
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	11 23       	and	r17, r17
    143a:	31 f0       	breq	.+12     	; 0x1448 <vfprintf+0x258>
    143c:	21 2f       	mov	r18, r17
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	2f 5f       	subi	r18, 0xFF	; 255
    1442:	3f 4f       	sbci	r19, 0xFF	; 255
    1444:	82 0f       	add	r24, r18
    1446:	93 1f       	adc	r25, r19
    1448:	25 2d       	mov	r18, r5
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	82 17       	cp	r24, r18
    144e:	93 07       	cpc	r25, r19
    1450:	14 f4       	brge	.+4      	; 0x1456 <vfprintf+0x266>
    1452:	58 1a       	sub	r5, r24
    1454:	01 c0       	rjmp	.+2      	; 0x1458 <vfprintf+0x268>
    1456:	51 2c       	mov	r5, r1
    1458:	89 2d       	mov	r24, r9
    145a:	89 70       	andi	r24, 0x09	; 9
    145c:	49 f4       	brne	.+18     	; 0x1470 <vfprintf+0x280>
    145e:	55 20       	and	r5, r5
    1460:	39 f0       	breq	.+14     	; 0x1470 <vfprintf+0x280>
    1462:	b7 01       	movw	r22, r14
    1464:	80 e2       	ldi	r24, 0x20	; 32
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    146c:	5a 94       	dec	r5
    146e:	f7 cf       	rjmp	.-18     	; 0x145e <vfprintf+0x26e>
    1470:	00 23       	and	r16, r16
    1472:	29 f0       	breq	.+10     	; 0x147e <vfprintf+0x28e>
    1474:	b7 01       	movw	r22, r14
    1476:	80 2f       	mov	r24, r16
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    147e:	93 fc       	sbrc	r9, 3
    1480:	09 c0       	rjmp	.+18     	; 0x1494 <vfprintf+0x2a4>
    1482:	55 20       	and	r5, r5
    1484:	39 f0       	breq	.+14     	; 0x1494 <vfprintf+0x2a4>
    1486:	b7 01       	movw	r22, r14
    1488:	80 e3       	ldi	r24, 0x30	; 48
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1490:	5a 94       	dec	r5
    1492:	f7 cf       	rjmp	.-18     	; 0x1482 <vfprintf+0x292>
    1494:	97 fe       	sbrs	r9, 7
    1496:	4c c0       	rjmp	.+152    	; 0x1530 <vfprintf+0x340>
    1498:	46 01       	movw	r8, r12
    149a:	d7 fe       	sbrs	r13, 7
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <vfprintf+0x2b2>
    149e:	81 2c       	mov	r8, r1
    14a0:	91 2c       	mov	r9, r1
    14a2:	c6 01       	movw	r24, r12
    14a4:	88 19       	sub	r24, r8
    14a6:	99 09       	sbc	r25, r9
    14a8:	f3 01       	movw	r30, r6
    14aa:	e8 0f       	add	r30, r24
    14ac:	f9 1f       	adc	r31, r25
    14ae:	fe 87       	std	Y+14, r31	; 0x0e
    14b0:	ed 87       	std	Y+13, r30	; 0x0d
    14b2:	96 01       	movw	r18, r12
    14b4:	24 19       	sub	r18, r4
    14b6:	31 09       	sbc	r19, r1
    14b8:	38 8b       	std	Y+16, r19	; 0x10
    14ba:	2f 87       	std	Y+15, r18	; 0x0f
    14bc:	01 2f       	mov	r16, r17
    14be:	10 e0       	ldi	r17, 0x00	; 0
    14c0:	11 95       	neg	r17
    14c2:	01 95       	neg	r16
    14c4:	11 09       	sbc	r17, r1
    14c6:	3f ef       	ldi	r19, 0xFF	; 255
    14c8:	83 16       	cp	r8, r19
    14ca:	93 06       	cpc	r9, r19
    14cc:	29 f4       	brne	.+10     	; 0x14d8 <vfprintf+0x2e8>
    14ce:	b7 01       	movw	r22, r14
    14d0:	8e e2       	ldi	r24, 0x2E	; 46
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    14d8:	c8 14       	cp	r12, r8
    14da:	d9 04       	cpc	r13, r9
    14dc:	4c f0       	brlt	.+18     	; 0x14f0 <vfprintf+0x300>
    14de:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e0:	98 89       	ldd	r25, Y+16	; 0x10
    14e2:	88 15       	cp	r24, r8
    14e4:	99 05       	cpc	r25, r9
    14e6:	24 f4       	brge	.+8      	; 0x14f0 <vfprintf+0x300>
    14e8:	ed 85       	ldd	r30, Y+13	; 0x0d
    14ea:	fe 85       	ldd	r31, Y+14	; 0x0e
    14ec:	81 81       	ldd	r24, Z+1	; 0x01
    14ee:	01 c0       	rjmp	.+2      	; 0x14f2 <vfprintf+0x302>
    14f0:	80 e3       	ldi	r24, 0x30	; 48
    14f2:	f1 e0       	ldi	r31, 0x01	; 1
    14f4:	8f 1a       	sub	r8, r31
    14f6:	91 08       	sbc	r9, r1
    14f8:	2d 85       	ldd	r18, Y+13	; 0x0d
    14fa:	3e 85       	ldd	r19, Y+14	; 0x0e
    14fc:	2f 5f       	subi	r18, 0xFF	; 255
    14fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1500:	3e 87       	std	Y+14, r19	; 0x0e
    1502:	2d 87       	std	Y+13, r18	; 0x0d
    1504:	80 16       	cp	r8, r16
    1506:	91 06       	cpc	r9, r17
    1508:	2c f0       	brlt	.+10     	; 0x1514 <vfprintf+0x324>
    150a:	b7 01       	movw	r22, r14
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1512:	d9 cf       	rjmp	.-78     	; 0x14c6 <vfprintf+0x2d6>
    1514:	c8 14       	cp	r12, r8
    1516:	d9 04       	cpc	r13, r9
    1518:	41 f4       	brne	.+16     	; 0x152a <vfprintf+0x33a>
    151a:	9a 81       	ldd	r25, Y+2	; 0x02
    151c:	96 33       	cpi	r25, 0x36	; 54
    151e:	20 f4       	brcc	.+8      	; 0x1528 <vfprintf+0x338>
    1520:	95 33       	cpi	r25, 0x35	; 53
    1522:	19 f4       	brne	.+6      	; 0x152a <vfprintf+0x33a>
    1524:	3c 85       	ldd	r19, Y+12	; 0x0c
    1526:	34 ff       	sbrs	r19, 4
    1528:	81 e3       	ldi	r24, 0x31	; 49
    152a:	b7 01       	movw	r22, r14
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	4e c0       	rjmp	.+156    	; 0x15cc <vfprintf+0x3dc>
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	81 33       	cpi	r24, 0x31	; 49
    1534:	19 f0       	breq	.+6      	; 0x153c <vfprintf+0x34c>
    1536:	9c 85       	ldd	r25, Y+12	; 0x0c
    1538:	9f 7e       	andi	r25, 0xEF	; 239
    153a:	9c 87       	std	Y+12, r25	; 0x0c
    153c:	b7 01       	movw	r22, r14
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1544:	11 11       	cpse	r17, r1
    1546:	05 c0       	rjmp	.+10     	; 0x1552 <vfprintf+0x362>
    1548:	94 fc       	sbrc	r9, 4
    154a:	18 c0       	rjmp	.+48     	; 0x157c <vfprintf+0x38c>
    154c:	85 e6       	ldi	r24, 0x65	; 101
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	17 c0       	rjmp	.+46     	; 0x1580 <vfprintf+0x390>
    1552:	b7 01       	movw	r22, r14
    1554:	8e e2       	ldi	r24, 0x2E	; 46
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    155c:	1e 5f       	subi	r17, 0xFE	; 254
    155e:	82 e0       	ldi	r24, 0x02	; 2
    1560:	01 e0       	ldi	r16, 0x01	; 1
    1562:	08 0f       	add	r16, r24
    1564:	f3 01       	movw	r30, r6
    1566:	e8 0f       	add	r30, r24
    1568:	f1 1d       	adc	r31, r1
    156a:	80 81       	ld	r24, Z
    156c:	b7 01       	movw	r22, r14
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1574:	80 2f       	mov	r24, r16
    1576:	01 13       	cpse	r16, r17
    1578:	f3 cf       	rjmp	.-26     	; 0x1560 <vfprintf+0x370>
    157a:	e6 cf       	rjmp	.-52     	; 0x1548 <vfprintf+0x358>
    157c:	85 e4       	ldi	r24, 0x45	; 69
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	b7 01       	movw	r22, r14
    1582:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1586:	d7 fc       	sbrc	r13, 7
    1588:	06 c0       	rjmp	.+12     	; 0x1596 <vfprintf+0x3a6>
    158a:	c1 14       	cp	r12, r1
    158c:	d1 04       	cpc	r13, r1
    158e:	41 f4       	brne	.+16     	; 0x15a0 <vfprintf+0x3b0>
    1590:	ec 85       	ldd	r30, Y+12	; 0x0c
    1592:	e4 ff       	sbrs	r30, 4
    1594:	05 c0       	rjmp	.+10     	; 0x15a0 <vfprintf+0x3b0>
    1596:	d1 94       	neg	r13
    1598:	c1 94       	neg	r12
    159a:	d1 08       	sbc	r13, r1
    159c:	8d e2       	ldi	r24, 0x2D	; 45
    159e:	01 c0       	rjmp	.+2      	; 0x15a2 <vfprintf+0x3b2>
    15a0:	8b e2       	ldi	r24, 0x2B	; 43
    15a2:	b7 01       	movw	r22, r14
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    15aa:	80 e3       	ldi	r24, 0x30	; 48
    15ac:	2a e0       	ldi	r18, 0x0A	; 10
    15ae:	c2 16       	cp	r12, r18
    15b0:	d1 04       	cpc	r13, r1
    15b2:	2c f0       	brlt	.+10     	; 0x15be <vfprintf+0x3ce>
    15b4:	8f 5f       	subi	r24, 0xFF	; 255
    15b6:	fa e0       	ldi	r31, 0x0A	; 10
    15b8:	cf 1a       	sub	r12, r31
    15ba:	d1 08       	sbc	r13, r1
    15bc:	f7 cf       	rjmp	.-18     	; 0x15ac <vfprintf+0x3bc>
    15be:	b7 01       	movw	r22, r14
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    15c6:	b7 01       	movw	r22, r14
    15c8:	c6 01       	movw	r24, r12
    15ca:	c0 96       	adiw	r24, 0x30	; 48
    15cc:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    15d0:	54 c1       	rjmp	.+680    	; 0x187a <vfprintf+0x68a>
    15d2:	83 36       	cpi	r24, 0x63	; 99
    15d4:	31 f0       	breq	.+12     	; 0x15e2 <vfprintf+0x3f2>
    15d6:	83 37       	cpi	r24, 0x73	; 115
    15d8:	79 f0       	breq	.+30     	; 0x15f8 <vfprintf+0x408>
    15da:	83 35       	cpi	r24, 0x53	; 83
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <vfprintf+0x3f0>
    15de:	56 c0       	rjmp	.+172    	; 0x168c <vfprintf+0x49c>
    15e0:	20 c0       	rjmp	.+64     	; 0x1622 <vfprintf+0x432>
    15e2:	56 01       	movw	r10, r12
    15e4:	32 e0       	ldi	r19, 0x02	; 2
    15e6:	a3 0e       	add	r10, r19
    15e8:	b1 1c       	adc	r11, r1
    15ea:	f6 01       	movw	r30, r12
    15ec:	80 81       	ld	r24, Z
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	01 e0       	ldi	r16, 0x01	; 1
    15f2:	10 e0       	ldi	r17, 0x00	; 0
    15f4:	63 01       	movw	r12, r6
    15f6:	12 c0       	rjmp	.+36     	; 0x161c <vfprintf+0x42c>
    15f8:	56 01       	movw	r10, r12
    15fa:	f2 e0       	ldi	r31, 0x02	; 2
    15fc:	af 0e       	add	r10, r31
    15fe:	b1 1c       	adc	r11, r1
    1600:	f6 01       	movw	r30, r12
    1602:	c0 80       	ld	r12, Z
    1604:	d1 80       	ldd	r13, Z+1	; 0x01
    1606:	96 fe       	sbrs	r9, 6
    1608:	03 c0       	rjmp	.+6      	; 0x1610 <vfprintf+0x420>
    160a:	61 2f       	mov	r22, r17
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <vfprintf+0x424>
    1610:	6f ef       	ldi	r22, 0xFF	; 255
    1612:	7f ef       	ldi	r23, 0xFF	; 255
    1614:	c6 01       	movw	r24, r12
    1616:	0e 94 95 10 	call	0x212a	; 0x212a <strnlen>
    161a:	8c 01       	movw	r16, r24
    161c:	f9 2d       	mov	r31, r9
    161e:	ff 77       	andi	r31, 0x7F	; 127
    1620:	14 c0       	rjmp	.+40     	; 0x164a <vfprintf+0x45a>
    1622:	56 01       	movw	r10, r12
    1624:	22 e0       	ldi	r18, 0x02	; 2
    1626:	a2 0e       	add	r10, r18
    1628:	b1 1c       	adc	r11, r1
    162a:	f6 01       	movw	r30, r12
    162c:	c0 80       	ld	r12, Z
    162e:	d1 80       	ldd	r13, Z+1	; 0x01
    1630:	96 fe       	sbrs	r9, 6
    1632:	03 c0       	rjmp	.+6      	; 0x163a <vfprintf+0x44a>
    1634:	61 2f       	mov	r22, r17
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	02 c0       	rjmp	.+4      	; 0x163e <vfprintf+0x44e>
    163a:	6f ef       	ldi	r22, 0xFF	; 255
    163c:	7f ef       	ldi	r23, 0xFF	; 255
    163e:	c6 01       	movw	r24, r12
    1640:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <strnlen_P>
    1644:	8c 01       	movw	r16, r24
    1646:	f9 2d       	mov	r31, r9
    1648:	f0 68       	ori	r31, 0x80	; 128
    164a:	9f 2e       	mov	r9, r31
    164c:	f3 fd       	sbrc	r31, 3
    164e:	1a c0       	rjmp	.+52     	; 0x1684 <vfprintf+0x494>
    1650:	85 2d       	mov	r24, r5
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	08 17       	cp	r16, r24
    1656:	19 07       	cpc	r17, r25
    1658:	a8 f4       	brcc	.+42     	; 0x1684 <vfprintf+0x494>
    165a:	b7 01       	movw	r22, r14
    165c:	80 e2       	ldi	r24, 0x20	; 32
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1664:	5a 94       	dec	r5
    1666:	f4 cf       	rjmp	.-24     	; 0x1650 <vfprintf+0x460>
    1668:	f6 01       	movw	r30, r12
    166a:	97 fc       	sbrc	r9, 7
    166c:	85 91       	lpm	r24, Z+
    166e:	97 fe       	sbrs	r9, 7
    1670:	81 91       	ld	r24, Z+
    1672:	6f 01       	movw	r12, r30
    1674:	b7 01       	movw	r22, r14
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    167c:	51 10       	cpse	r5, r1
    167e:	5a 94       	dec	r5
    1680:	01 50       	subi	r16, 0x01	; 1
    1682:	11 09       	sbc	r17, r1
    1684:	01 15       	cp	r16, r1
    1686:	11 05       	cpc	r17, r1
    1688:	79 f7       	brne	.-34     	; 0x1668 <vfprintf+0x478>
    168a:	f7 c0       	rjmp	.+494    	; 0x187a <vfprintf+0x68a>
    168c:	84 36       	cpi	r24, 0x64	; 100
    168e:	11 f0       	breq	.+4      	; 0x1694 <vfprintf+0x4a4>
    1690:	89 36       	cpi	r24, 0x69	; 105
    1692:	61 f5       	brne	.+88     	; 0x16ec <vfprintf+0x4fc>
    1694:	56 01       	movw	r10, r12
    1696:	97 fe       	sbrs	r9, 7
    1698:	09 c0       	rjmp	.+18     	; 0x16ac <vfprintf+0x4bc>
    169a:	24 e0       	ldi	r18, 0x04	; 4
    169c:	a2 0e       	add	r10, r18
    169e:	b1 1c       	adc	r11, r1
    16a0:	f6 01       	movw	r30, r12
    16a2:	60 81       	ld	r22, Z
    16a4:	71 81       	ldd	r23, Z+1	; 0x01
    16a6:	82 81       	ldd	r24, Z+2	; 0x02
    16a8:	93 81       	ldd	r25, Z+3	; 0x03
    16aa:	0a c0       	rjmp	.+20     	; 0x16c0 <vfprintf+0x4d0>
    16ac:	f2 e0       	ldi	r31, 0x02	; 2
    16ae:	af 0e       	add	r10, r31
    16b0:	b1 1c       	adc	r11, r1
    16b2:	f6 01       	movw	r30, r12
    16b4:	60 81       	ld	r22, Z
    16b6:	71 81       	ldd	r23, Z+1	; 0x01
    16b8:	07 2e       	mov	r0, r23
    16ba:	00 0c       	add	r0, r0
    16bc:	88 0b       	sbc	r24, r24
    16be:	99 0b       	sbc	r25, r25
    16c0:	f9 2d       	mov	r31, r9
    16c2:	ff 76       	andi	r31, 0x6F	; 111
    16c4:	9f 2e       	mov	r9, r31
    16c6:	97 ff       	sbrs	r25, 7
    16c8:	09 c0       	rjmp	.+18     	; 0x16dc <vfprintf+0x4ec>
    16ca:	90 95       	com	r25
    16cc:	80 95       	com	r24
    16ce:	70 95       	com	r23
    16d0:	61 95       	neg	r22
    16d2:	7f 4f       	sbci	r23, 0xFF	; 255
    16d4:	8f 4f       	sbci	r24, 0xFF	; 255
    16d6:	9f 4f       	sbci	r25, 0xFF	; 255
    16d8:	f0 68       	ori	r31, 0x80	; 128
    16da:	9f 2e       	mov	r9, r31
    16dc:	2a e0       	ldi	r18, 0x0A	; 10
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	a3 01       	movw	r20, r6
    16e2:	0e 94 2e 11 	call	0x225c	; 0x225c <__ultoa_invert>
    16e6:	c8 2e       	mov	r12, r24
    16e8:	c6 18       	sub	r12, r6
    16ea:	3f c0       	rjmp	.+126    	; 0x176a <vfprintf+0x57a>
    16ec:	09 2d       	mov	r16, r9
    16ee:	85 37       	cpi	r24, 0x75	; 117
    16f0:	21 f4       	brne	.+8      	; 0x16fa <vfprintf+0x50a>
    16f2:	0f 7e       	andi	r16, 0xEF	; 239
    16f4:	2a e0       	ldi	r18, 0x0A	; 10
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	1d c0       	rjmp	.+58     	; 0x1734 <vfprintf+0x544>
    16fa:	09 7f       	andi	r16, 0xF9	; 249
    16fc:	8f 36       	cpi	r24, 0x6F	; 111
    16fe:	91 f0       	breq	.+36     	; 0x1724 <vfprintf+0x534>
    1700:	18 f4       	brcc	.+6      	; 0x1708 <vfprintf+0x518>
    1702:	88 35       	cpi	r24, 0x58	; 88
    1704:	59 f0       	breq	.+22     	; 0x171c <vfprintf+0x52c>
    1706:	c3 c0       	rjmp	.+390    	; 0x188e <vfprintf+0x69e>
    1708:	80 37       	cpi	r24, 0x70	; 112
    170a:	19 f0       	breq	.+6      	; 0x1712 <vfprintf+0x522>
    170c:	88 37       	cpi	r24, 0x78	; 120
    170e:	11 f0       	breq	.+4      	; 0x1714 <vfprintf+0x524>
    1710:	be c0       	rjmp	.+380    	; 0x188e <vfprintf+0x69e>
    1712:	00 61       	ori	r16, 0x10	; 16
    1714:	04 ff       	sbrs	r16, 4
    1716:	09 c0       	rjmp	.+18     	; 0x172a <vfprintf+0x53a>
    1718:	04 60       	ori	r16, 0x04	; 4
    171a:	07 c0       	rjmp	.+14     	; 0x172a <vfprintf+0x53a>
    171c:	94 fe       	sbrs	r9, 4
    171e:	08 c0       	rjmp	.+16     	; 0x1730 <vfprintf+0x540>
    1720:	06 60       	ori	r16, 0x06	; 6
    1722:	06 c0       	rjmp	.+12     	; 0x1730 <vfprintf+0x540>
    1724:	28 e0       	ldi	r18, 0x08	; 8
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	05 c0       	rjmp	.+10     	; 0x1734 <vfprintf+0x544>
    172a:	20 e1       	ldi	r18, 0x10	; 16
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <vfprintf+0x544>
    1730:	20 e1       	ldi	r18, 0x10	; 16
    1732:	32 e0       	ldi	r19, 0x02	; 2
    1734:	56 01       	movw	r10, r12
    1736:	07 ff       	sbrs	r16, 7
    1738:	09 c0       	rjmp	.+18     	; 0x174c <vfprintf+0x55c>
    173a:	84 e0       	ldi	r24, 0x04	; 4
    173c:	a8 0e       	add	r10, r24
    173e:	b1 1c       	adc	r11, r1
    1740:	f6 01       	movw	r30, r12
    1742:	60 81       	ld	r22, Z
    1744:	71 81       	ldd	r23, Z+1	; 0x01
    1746:	82 81       	ldd	r24, Z+2	; 0x02
    1748:	93 81       	ldd	r25, Z+3	; 0x03
    174a:	08 c0       	rjmp	.+16     	; 0x175c <vfprintf+0x56c>
    174c:	f2 e0       	ldi	r31, 0x02	; 2
    174e:	af 0e       	add	r10, r31
    1750:	b1 1c       	adc	r11, r1
    1752:	f6 01       	movw	r30, r12
    1754:	60 81       	ld	r22, Z
    1756:	71 81       	ldd	r23, Z+1	; 0x01
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	a3 01       	movw	r20, r6
    175e:	0e 94 2e 11 	call	0x225c	; 0x225c <__ultoa_invert>
    1762:	c8 2e       	mov	r12, r24
    1764:	c6 18       	sub	r12, r6
    1766:	0f 77       	andi	r16, 0x7F	; 127
    1768:	90 2e       	mov	r9, r16
    176a:	96 fe       	sbrs	r9, 6
    176c:	0b c0       	rjmp	.+22     	; 0x1784 <vfprintf+0x594>
    176e:	09 2d       	mov	r16, r9
    1770:	0e 7f       	andi	r16, 0xFE	; 254
    1772:	c1 16       	cp	r12, r17
    1774:	50 f4       	brcc	.+20     	; 0x178a <vfprintf+0x59a>
    1776:	94 fe       	sbrs	r9, 4
    1778:	0a c0       	rjmp	.+20     	; 0x178e <vfprintf+0x59e>
    177a:	92 fc       	sbrc	r9, 2
    177c:	08 c0       	rjmp	.+16     	; 0x178e <vfprintf+0x59e>
    177e:	09 2d       	mov	r16, r9
    1780:	0e 7e       	andi	r16, 0xEE	; 238
    1782:	05 c0       	rjmp	.+10     	; 0x178e <vfprintf+0x59e>
    1784:	dc 2c       	mov	r13, r12
    1786:	09 2d       	mov	r16, r9
    1788:	03 c0       	rjmp	.+6      	; 0x1790 <vfprintf+0x5a0>
    178a:	dc 2c       	mov	r13, r12
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <vfprintf+0x5a0>
    178e:	d1 2e       	mov	r13, r17
    1790:	04 ff       	sbrs	r16, 4
    1792:	0d c0       	rjmp	.+26     	; 0x17ae <vfprintf+0x5be>
    1794:	fe 01       	movw	r30, r28
    1796:	ec 0d       	add	r30, r12
    1798:	f1 1d       	adc	r31, r1
    179a:	80 81       	ld	r24, Z
    179c:	80 33       	cpi	r24, 0x30	; 48
    179e:	11 f4       	brne	.+4      	; 0x17a4 <vfprintf+0x5b4>
    17a0:	09 7e       	andi	r16, 0xE9	; 233
    17a2:	09 c0       	rjmp	.+18     	; 0x17b6 <vfprintf+0x5c6>
    17a4:	02 ff       	sbrs	r16, 2
    17a6:	06 c0       	rjmp	.+12     	; 0x17b4 <vfprintf+0x5c4>
    17a8:	d3 94       	inc	r13
    17aa:	d3 94       	inc	r13
    17ac:	04 c0       	rjmp	.+8      	; 0x17b6 <vfprintf+0x5c6>
    17ae:	80 2f       	mov	r24, r16
    17b0:	86 78       	andi	r24, 0x86	; 134
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <vfprintf+0x5c6>
    17b4:	d3 94       	inc	r13
    17b6:	03 fd       	sbrc	r16, 3
    17b8:	11 c0       	rjmp	.+34     	; 0x17dc <vfprintf+0x5ec>
    17ba:	00 ff       	sbrs	r16, 0
    17bc:	06 c0       	rjmp	.+12     	; 0x17ca <vfprintf+0x5da>
    17be:	1c 2d       	mov	r17, r12
    17c0:	d5 14       	cp	r13, r5
    17c2:	80 f4       	brcc	.+32     	; 0x17e4 <vfprintf+0x5f4>
    17c4:	15 0d       	add	r17, r5
    17c6:	1d 19       	sub	r17, r13
    17c8:	0d c0       	rjmp	.+26     	; 0x17e4 <vfprintf+0x5f4>
    17ca:	d5 14       	cp	r13, r5
    17cc:	58 f4       	brcc	.+22     	; 0x17e4 <vfprintf+0x5f4>
    17ce:	b7 01       	movw	r22, r14
    17d0:	80 e2       	ldi	r24, 0x20	; 32
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    17d8:	d3 94       	inc	r13
    17da:	f7 cf       	rjmp	.-18     	; 0x17ca <vfprintf+0x5da>
    17dc:	d5 14       	cp	r13, r5
    17de:	10 f4       	brcc	.+4      	; 0x17e4 <vfprintf+0x5f4>
    17e0:	5d 18       	sub	r5, r13
    17e2:	01 c0       	rjmp	.+2      	; 0x17e6 <vfprintf+0x5f6>
    17e4:	51 2c       	mov	r5, r1
    17e6:	04 ff       	sbrs	r16, 4
    17e8:	10 c0       	rjmp	.+32     	; 0x180a <vfprintf+0x61a>
    17ea:	b7 01       	movw	r22, r14
    17ec:	80 e3       	ldi	r24, 0x30	; 48
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    17f4:	02 ff       	sbrs	r16, 2
    17f6:	17 c0       	rjmp	.+46     	; 0x1826 <vfprintf+0x636>
    17f8:	01 fd       	sbrc	r16, 1
    17fa:	03 c0       	rjmp	.+6      	; 0x1802 <vfprintf+0x612>
    17fc:	88 e7       	ldi	r24, 0x78	; 120
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <vfprintf+0x616>
    1802:	88 e5       	ldi	r24, 0x58	; 88
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	b7 01       	movw	r22, r14
    1808:	0c c0       	rjmp	.+24     	; 0x1822 <vfprintf+0x632>
    180a:	80 2f       	mov	r24, r16
    180c:	86 78       	andi	r24, 0x86	; 134
    180e:	59 f0       	breq	.+22     	; 0x1826 <vfprintf+0x636>
    1810:	01 ff       	sbrs	r16, 1
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <vfprintf+0x628>
    1814:	8b e2       	ldi	r24, 0x2B	; 43
    1816:	01 c0       	rjmp	.+2      	; 0x181a <vfprintf+0x62a>
    1818:	80 e2       	ldi	r24, 0x20	; 32
    181a:	07 fd       	sbrc	r16, 7
    181c:	8d e2       	ldi	r24, 0x2D	; 45
    181e:	b7 01       	movw	r22, r14
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1826:	c1 16       	cp	r12, r17
    1828:	38 f4       	brcc	.+14     	; 0x1838 <vfprintf+0x648>
    182a:	b7 01       	movw	r22, r14
    182c:	80 e3       	ldi	r24, 0x30	; 48
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1834:	11 50       	subi	r17, 0x01	; 1
    1836:	f7 cf       	rjmp	.-18     	; 0x1826 <vfprintf+0x636>
    1838:	ca 94       	dec	r12
    183a:	f3 01       	movw	r30, r6
    183c:	ec 0d       	add	r30, r12
    183e:	f1 1d       	adc	r31, r1
    1840:	80 81       	ld	r24, Z
    1842:	b7 01       	movw	r22, r14
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    184a:	c1 10       	cpse	r12, r1
    184c:	f5 cf       	rjmp	.-22     	; 0x1838 <vfprintf+0x648>
    184e:	15 c0       	rjmp	.+42     	; 0x187a <vfprintf+0x68a>
    1850:	f4 e0       	ldi	r31, 0x04	; 4
    1852:	f5 15       	cp	r31, r5
    1854:	60 f5       	brcc	.+88     	; 0x18ae <vfprintf+0x6be>
    1856:	84 e0       	ldi	r24, 0x04	; 4
    1858:	58 1a       	sub	r5, r24
    185a:	93 fe       	sbrs	r9, 3
    185c:	1f c0       	rjmp	.+62     	; 0x189c <vfprintf+0x6ac>
    185e:	01 11       	cpse	r16, r1
    1860:	27 c0       	rjmp	.+78     	; 0x18b0 <vfprintf+0x6c0>
    1862:	2c 85       	ldd	r18, Y+12	; 0x0c
    1864:	23 ff       	sbrs	r18, 3
    1866:	2a c0       	rjmp	.+84     	; 0x18bc <vfprintf+0x6cc>
    1868:	0c ec       	ldi	r16, 0xCC	; 204
    186a:	10 e0       	ldi	r17, 0x00	; 0
    186c:	39 2d       	mov	r19, r9
    186e:	30 71       	andi	r19, 0x10	; 16
    1870:	93 2e       	mov	r9, r19
    1872:	f8 01       	movw	r30, r16
    1874:	84 91       	lpm	r24, Z
    1876:	81 11       	cpse	r24, r1
    1878:	24 c0       	rjmp	.+72     	; 0x18c2 <vfprintf+0x6d2>
    187a:	55 20       	and	r5, r5
    187c:	09 f4       	brne	.+2      	; 0x1880 <vfprintf+0x690>
    187e:	e4 cc       	rjmp	.-1592   	; 0x1248 <vfprintf+0x58>
    1880:	b7 01       	movw	r22, r14
    1882:	80 e2       	ldi	r24, 0x20	; 32
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    188a:	5a 94       	dec	r5
    188c:	f6 cf       	rjmp	.-20     	; 0x187a <vfprintf+0x68a>
    188e:	f7 01       	movw	r30, r14
    1890:	86 81       	ldd	r24, Z+6	; 0x06
    1892:	97 81       	ldd	r25, Z+7	; 0x07
    1894:	26 c0       	rjmp	.+76     	; 0x18e2 <vfprintf+0x6f2>
    1896:	8f ef       	ldi	r24, 0xFF	; 255
    1898:	9f ef       	ldi	r25, 0xFF	; 255
    189a:	23 c0       	rjmp	.+70     	; 0x18e2 <vfprintf+0x6f2>
    189c:	b7 01       	movw	r22, r14
    189e:	80 e2       	ldi	r24, 0x20	; 32
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    18a6:	5a 94       	dec	r5
    18a8:	51 10       	cpse	r5, r1
    18aa:	f8 cf       	rjmp	.-16     	; 0x189c <vfprintf+0x6ac>
    18ac:	d8 cf       	rjmp	.-80     	; 0x185e <vfprintf+0x66e>
    18ae:	51 2c       	mov	r5, r1
    18b0:	b7 01       	movw	r22, r14
    18b2:	80 2f       	mov	r24, r16
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    18ba:	d3 cf       	rjmp	.-90     	; 0x1862 <vfprintf+0x672>
    18bc:	00 ed       	ldi	r16, 0xD0	; 208
    18be:	10 e0       	ldi	r17, 0x00	; 0
    18c0:	d5 cf       	rjmp	.-86     	; 0x186c <vfprintf+0x67c>
    18c2:	91 10       	cpse	r9, r1
    18c4:	80 52       	subi	r24, 0x20	; 32
    18c6:	b7 01       	movw	r22, r14
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    18ce:	0f 5f       	subi	r16, 0xFF	; 255
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
    18d2:	cf cf       	rjmp	.-98     	; 0x1872 <vfprintf+0x682>
    18d4:	23 e0       	ldi	r18, 0x03	; 3
    18d6:	25 15       	cp	r18, r5
    18d8:	10 f4       	brcc	.+4      	; 0x18de <vfprintf+0x6ee>
    18da:	83 e0       	ldi	r24, 0x03	; 3
    18dc:	bd cf       	rjmp	.-134    	; 0x1858 <vfprintf+0x668>
    18de:	51 2c       	mov	r5, r1
    18e0:	c0 cf       	rjmp	.-128    	; 0x1862 <vfprintf+0x672>
    18e2:	60 96       	adiw	r28, 0x10	; 16
    18e4:	e2 e1       	ldi	r30, 0x12	; 18
    18e6:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__epilogue_restores__>

000018ea <__udivmodsi4>:
    18ea:	a1 e2       	ldi	r26, 0x21	; 33
    18ec:	1a 2e       	mov	r1, r26
    18ee:	aa 1b       	sub	r26, r26
    18f0:	bb 1b       	sub	r27, r27
    18f2:	fd 01       	movw	r30, r26
    18f4:	0d c0       	rjmp	.+26     	; 0x1910 <__udivmodsi4_ep>

000018f6 <__udivmodsi4_loop>:
    18f6:	aa 1f       	adc	r26, r26
    18f8:	bb 1f       	adc	r27, r27
    18fa:	ee 1f       	adc	r30, r30
    18fc:	ff 1f       	adc	r31, r31
    18fe:	a2 17       	cp	r26, r18
    1900:	b3 07       	cpc	r27, r19
    1902:	e4 07       	cpc	r30, r20
    1904:	f5 07       	cpc	r31, r21
    1906:	20 f0       	brcs	.+8      	; 0x1910 <__udivmodsi4_ep>
    1908:	a2 1b       	sub	r26, r18
    190a:	b3 0b       	sbc	r27, r19
    190c:	e4 0b       	sbc	r30, r20
    190e:	f5 0b       	sbc	r31, r21

00001910 <__udivmodsi4_ep>:
    1910:	66 1f       	adc	r22, r22
    1912:	77 1f       	adc	r23, r23
    1914:	88 1f       	adc	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	1a 94       	dec	r1
    191a:	69 f7       	brne	.-38     	; 0x18f6 <__udivmodsi4_loop>
    191c:	60 95       	com	r22
    191e:	70 95       	com	r23
    1920:	80 95       	com	r24
    1922:	90 95       	com	r25
    1924:	9b 01       	movw	r18, r22
    1926:	ac 01       	movw	r20, r24
    1928:	bd 01       	movw	r22, r26
    192a:	cf 01       	movw	r24, r30
    192c:	08 95       	ret

0000192e <__prologue_saves__>:
    192e:	2f 92       	push	r2
    1930:	3f 92       	push	r3
    1932:	4f 92       	push	r4
    1934:	5f 92       	push	r5
    1936:	6f 92       	push	r6
    1938:	7f 92       	push	r7
    193a:	8f 92       	push	r8
    193c:	9f 92       	push	r9
    193e:	af 92       	push	r10
    1940:	bf 92       	push	r11
    1942:	cf 92       	push	r12
    1944:	df 92       	push	r13
    1946:	ef 92       	push	r14
    1948:	ff 92       	push	r15
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	ca 1b       	sub	r28, r26
    1958:	db 0b       	sbc	r29, r27
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	09 94       	ijmp

00001966 <__epilogue_restores__>:
    1966:	2a 88       	ldd	r2, Y+18	; 0x12
    1968:	39 88       	ldd	r3, Y+17	; 0x11
    196a:	48 88       	ldd	r4, Y+16	; 0x10
    196c:	5f 84       	ldd	r5, Y+15	; 0x0f
    196e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1970:	7d 84       	ldd	r7, Y+13	; 0x0d
    1972:	8c 84       	ldd	r8, Y+12	; 0x0c
    1974:	9b 84       	ldd	r9, Y+11	; 0x0b
    1976:	aa 84       	ldd	r10, Y+10	; 0x0a
    1978:	b9 84       	ldd	r11, Y+9	; 0x09
    197a:	c8 84       	ldd	r12, Y+8	; 0x08
    197c:	df 80       	ldd	r13, Y+7	; 0x07
    197e:	ee 80       	ldd	r14, Y+6	; 0x06
    1980:	fd 80       	ldd	r15, Y+5	; 0x05
    1982:	0c 81       	ldd	r16, Y+4	; 0x04
    1984:	1b 81       	ldd	r17, Y+3	; 0x03
    1986:	aa 81       	ldd	r26, Y+2	; 0x02
    1988:	b9 81       	ldd	r27, Y+1	; 0x01
    198a:	ce 0f       	add	r28, r30
    198c:	d1 1d       	adc	r29, r1
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	ed 01       	movw	r28, r26
    199a:	08 95       	ret

0000199c <__divsf3>:
    199c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__divsf3x>
    19a0:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__fp_round>
    19a4:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__fp_pscB>
    19a8:	58 f0       	brcs	.+22     	; 0x19c0 <__divsf3+0x24>
    19aa:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__fp_pscA>
    19ae:	40 f0       	brcs	.+16     	; 0x19c0 <__divsf3+0x24>
    19b0:	29 f4       	brne	.+10     	; 0x19bc <__divsf3+0x20>
    19b2:	5f 3f       	cpi	r21, 0xFF	; 255
    19b4:	29 f0       	breq	.+10     	; 0x19c0 <__divsf3+0x24>
    19b6:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__fp_inf>
    19ba:	51 11       	cpse	r21, r1
    19bc:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__fp_szero>
    19c0:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__fp_nan>

000019c4 <__divsf3x>:
    19c4:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__fp_split3>
    19c8:	68 f3       	brcs	.-38     	; 0x19a4 <__divsf3+0x8>

000019ca <__divsf3_pse>:
    19ca:	99 23       	and	r25, r25
    19cc:	b1 f3       	breq	.-20     	; 0x19ba <__divsf3+0x1e>
    19ce:	55 23       	and	r21, r21
    19d0:	91 f3       	breq	.-28     	; 0x19b6 <__divsf3+0x1a>
    19d2:	95 1b       	sub	r25, r21
    19d4:	55 0b       	sbc	r21, r21
    19d6:	bb 27       	eor	r27, r27
    19d8:	aa 27       	eor	r26, r26
    19da:	62 17       	cp	r22, r18
    19dc:	73 07       	cpc	r23, r19
    19de:	84 07       	cpc	r24, r20
    19e0:	38 f0       	brcs	.+14     	; 0x19f0 <__divsf3_pse+0x26>
    19e2:	9f 5f       	subi	r25, 0xFF	; 255
    19e4:	5f 4f       	sbci	r21, 0xFF	; 255
    19e6:	22 0f       	add	r18, r18
    19e8:	33 1f       	adc	r19, r19
    19ea:	44 1f       	adc	r20, r20
    19ec:	aa 1f       	adc	r26, r26
    19ee:	a9 f3       	breq	.-22     	; 0x19da <__divsf3_pse+0x10>
    19f0:	35 d0       	rcall	.+106    	; 0x1a5c <__divsf3_pse+0x92>
    19f2:	0e 2e       	mov	r0, r30
    19f4:	3a f0       	brmi	.+14     	; 0x1a04 <__divsf3_pse+0x3a>
    19f6:	e0 e8       	ldi	r30, 0x80	; 128
    19f8:	32 d0       	rcall	.+100    	; 0x1a5e <__divsf3_pse+0x94>
    19fa:	91 50       	subi	r25, 0x01	; 1
    19fc:	50 40       	sbci	r21, 0x00	; 0
    19fe:	e6 95       	lsr	r30
    1a00:	00 1c       	adc	r0, r0
    1a02:	ca f7       	brpl	.-14     	; 0x19f6 <__divsf3_pse+0x2c>
    1a04:	2b d0       	rcall	.+86     	; 0x1a5c <__divsf3_pse+0x92>
    1a06:	fe 2f       	mov	r31, r30
    1a08:	29 d0       	rcall	.+82     	; 0x1a5c <__divsf3_pse+0x92>
    1a0a:	66 0f       	add	r22, r22
    1a0c:	77 1f       	adc	r23, r23
    1a0e:	88 1f       	adc	r24, r24
    1a10:	bb 1f       	adc	r27, r27
    1a12:	26 17       	cp	r18, r22
    1a14:	37 07       	cpc	r19, r23
    1a16:	48 07       	cpc	r20, r24
    1a18:	ab 07       	cpc	r26, r27
    1a1a:	b0 e8       	ldi	r27, 0x80	; 128
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <__divsf3_pse+0x56>
    1a1e:	bb 0b       	sbc	r27, r27
    1a20:	80 2d       	mov	r24, r0
    1a22:	bf 01       	movw	r22, r30
    1a24:	ff 27       	eor	r31, r31
    1a26:	93 58       	subi	r25, 0x83	; 131
    1a28:	5f 4f       	sbci	r21, 0xFF	; 255
    1a2a:	3a f0       	brmi	.+14     	; 0x1a3a <__divsf3_pse+0x70>
    1a2c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a2e:	51 05       	cpc	r21, r1
    1a30:	78 f0       	brcs	.+30     	; 0x1a50 <__divsf3_pse+0x86>
    1a32:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__fp_inf>
    1a36:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__fp_szero>
    1a3a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a3c:	e4 f3       	brlt	.-8      	; 0x1a36 <__divsf3_pse+0x6c>
    1a3e:	98 3e       	cpi	r25, 0xE8	; 232
    1a40:	d4 f3       	brlt	.-12     	; 0x1a36 <__divsf3_pse+0x6c>
    1a42:	86 95       	lsr	r24
    1a44:	77 95       	ror	r23
    1a46:	67 95       	ror	r22
    1a48:	b7 95       	ror	r27
    1a4a:	f7 95       	ror	r31
    1a4c:	9f 5f       	subi	r25, 0xFF	; 255
    1a4e:	c9 f7       	brne	.-14     	; 0x1a42 <__divsf3_pse+0x78>
    1a50:	88 0f       	add	r24, r24
    1a52:	91 1d       	adc	r25, r1
    1a54:	96 95       	lsr	r25
    1a56:	87 95       	ror	r24
    1a58:	97 f9       	bld	r25, 7
    1a5a:	08 95       	ret
    1a5c:	e1 e0       	ldi	r30, 0x01	; 1
    1a5e:	66 0f       	add	r22, r22
    1a60:	77 1f       	adc	r23, r23
    1a62:	88 1f       	adc	r24, r24
    1a64:	bb 1f       	adc	r27, r27
    1a66:	62 17       	cp	r22, r18
    1a68:	73 07       	cpc	r23, r19
    1a6a:	84 07       	cpc	r24, r20
    1a6c:	ba 07       	cpc	r27, r26
    1a6e:	20 f0       	brcs	.+8      	; 0x1a78 <__divsf3_pse+0xae>
    1a70:	62 1b       	sub	r22, r18
    1a72:	73 0b       	sbc	r23, r19
    1a74:	84 0b       	sbc	r24, r20
    1a76:	ba 0b       	sbc	r27, r26
    1a78:	ee 1f       	adc	r30, r30
    1a7a:	88 f7       	brcc	.-30     	; 0x1a5e <__divsf3_pse+0x94>
    1a7c:	e0 95       	com	r30
    1a7e:	08 95       	ret

00001a80 <__fixsfsi>:
    1a80:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__fixunssfsi>
    1a84:	68 94       	set
    1a86:	b1 11       	cpse	r27, r1
    1a88:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__fp_szero>
    1a8c:	08 95       	ret

00001a8e <__fixunssfsi>:
    1a8e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__fp_splitA>
    1a92:	88 f0       	brcs	.+34     	; 0x1ab6 <__fixunssfsi+0x28>
    1a94:	9f 57       	subi	r25, 0x7F	; 127
    1a96:	98 f0       	brcs	.+38     	; 0x1abe <__fixunssfsi+0x30>
    1a98:	b9 2f       	mov	r27, r25
    1a9a:	99 27       	eor	r25, r25
    1a9c:	b7 51       	subi	r27, 0x17	; 23
    1a9e:	b0 f0       	brcs	.+44     	; 0x1acc <__fixunssfsi+0x3e>
    1aa0:	e1 f0       	breq	.+56     	; 0x1ada <__fixunssfsi+0x4c>
    1aa2:	66 0f       	add	r22, r22
    1aa4:	77 1f       	adc	r23, r23
    1aa6:	88 1f       	adc	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	1a f0       	brmi	.+6      	; 0x1ab2 <__fixunssfsi+0x24>
    1aac:	ba 95       	dec	r27
    1aae:	c9 f7       	brne	.-14     	; 0x1aa2 <__fixunssfsi+0x14>
    1ab0:	14 c0       	rjmp	.+40     	; 0x1ada <__fixunssfsi+0x4c>
    1ab2:	b1 30       	cpi	r27, 0x01	; 1
    1ab4:	91 f0       	breq	.+36     	; 0x1ada <__fixunssfsi+0x4c>
    1ab6:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__fp_zero>
    1aba:	b1 e0       	ldi	r27, 0x01	; 1
    1abc:	08 95       	ret
    1abe:	0c 94 fd 0d 	jmp	0x1bfa	; 0x1bfa <__fp_zero>
    1ac2:	67 2f       	mov	r22, r23
    1ac4:	78 2f       	mov	r23, r24
    1ac6:	88 27       	eor	r24, r24
    1ac8:	b8 5f       	subi	r27, 0xF8	; 248
    1aca:	39 f0       	breq	.+14     	; 0x1ada <__fixunssfsi+0x4c>
    1acc:	b9 3f       	cpi	r27, 0xF9	; 249
    1ace:	cc f3       	brlt	.-14     	; 0x1ac2 <__fixunssfsi+0x34>
    1ad0:	86 95       	lsr	r24
    1ad2:	77 95       	ror	r23
    1ad4:	67 95       	ror	r22
    1ad6:	b3 95       	inc	r27
    1ad8:	d9 f7       	brne	.-10     	; 0x1ad0 <__fixunssfsi+0x42>
    1ada:	3e f4       	brtc	.+14     	; 0x1aea <__fixunssfsi+0x5c>
    1adc:	90 95       	com	r25
    1ade:	80 95       	com	r24
    1ae0:	70 95       	com	r23
    1ae2:	61 95       	neg	r22
    1ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aea:	08 95       	ret

00001aec <__floatunsisf>:
    1aec:	e8 94       	clt
    1aee:	09 c0       	rjmp	.+18     	; 0x1b02 <__floatsisf+0x12>

00001af0 <__floatsisf>:
    1af0:	97 fb       	bst	r25, 7
    1af2:	3e f4       	brtc	.+14     	; 0x1b02 <__floatsisf+0x12>
    1af4:	90 95       	com	r25
    1af6:	80 95       	com	r24
    1af8:	70 95       	com	r23
    1afa:	61 95       	neg	r22
    1afc:	7f 4f       	sbci	r23, 0xFF	; 255
    1afe:	8f 4f       	sbci	r24, 0xFF	; 255
    1b00:	9f 4f       	sbci	r25, 0xFF	; 255
    1b02:	99 23       	and	r25, r25
    1b04:	a9 f0       	breq	.+42     	; 0x1b30 <__floatsisf+0x40>
    1b06:	f9 2f       	mov	r31, r25
    1b08:	96 e9       	ldi	r25, 0x96	; 150
    1b0a:	bb 27       	eor	r27, r27
    1b0c:	93 95       	inc	r25
    1b0e:	f6 95       	lsr	r31
    1b10:	87 95       	ror	r24
    1b12:	77 95       	ror	r23
    1b14:	67 95       	ror	r22
    1b16:	b7 95       	ror	r27
    1b18:	f1 11       	cpse	r31, r1
    1b1a:	f8 cf       	rjmp	.-16     	; 0x1b0c <__floatsisf+0x1c>
    1b1c:	fa f4       	brpl	.+62     	; 0x1b5c <__floatsisf+0x6c>
    1b1e:	bb 0f       	add	r27, r27
    1b20:	11 f4       	brne	.+4      	; 0x1b26 <__floatsisf+0x36>
    1b22:	60 ff       	sbrs	r22, 0
    1b24:	1b c0       	rjmp	.+54     	; 0x1b5c <__floatsisf+0x6c>
    1b26:	6f 5f       	subi	r22, 0xFF	; 255
    1b28:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2e:	16 c0       	rjmp	.+44     	; 0x1b5c <__floatsisf+0x6c>
    1b30:	88 23       	and	r24, r24
    1b32:	11 f0       	breq	.+4      	; 0x1b38 <__floatsisf+0x48>
    1b34:	96 e9       	ldi	r25, 0x96	; 150
    1b36:	11 c0       	rjmp	.+34     	; 0x1b5a <__floatsisf+0x6a>
    1b38:	77 23       	and	r23, r23
    1b3a:	21 f0       	breq	.+8      	; 0x1b44 <__floatsisf+0x54>
    1b3c:	9e e8       	ldi	r25, 0x8E	; 142
    1b3e:	87 2f       	mov	r24, r23
    1b40:	76 2f       	mov	r23, r22
    1b42:	05 c0       	rjmp	.+10     	; 0x1b4e <__floatsisf+0x5e>
    1b44:	66 23       	and	r22, r22
    1b46:	71 f0       	breq	.+28     	; 0x1b64 <__floatsisf+0x74>
    1b48:	96 e8       	ldi	r25, 0x86	; 134
    1b4a:	86 2f       	mov	r24, r22
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	2a f0       	brmi	.+10     	; 0x1b5c <__floatsisf+0x6c>
    1b52:	9a 95       	dec	r25
    1b54:	66 0f       	add	r22, r22
    1b56:	77 1f       	adc	r23, r23
    1b58:	88 1f       	adc	r24, r24
    1b5a:	da f7       	brpl	.-10     	; 0x1b52 <__floatsisf+0x62>
    1b5c:	88 0f       	add	r24, r24
    1b5e:	96 95       	lsr	r25
    1b60:	87 95       	ror	r24
    1b62:	97 f9       	bld	r25, 7
    1b64:	08 95       	ret

00001b66 <__fp_inf>:
    1b66:	97 f9       	bld	r25, 7
    1b68:	9f 67       	ori	r25, 0x7F	; 127
    1b6a:	80 e8       	ldi	r24, 0x80	; 128
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	60 e0       	ldi	r22, 0x00	; 0
    1b70:	08 95       	ret

00001b72 <__fp_nan>:
    1b72:	9f ef       	ldi	r25, 0xFF	; 255
    1b74:	80 ec       	ldi	r24, 0xC0	; 192
    1b76:	08 95       	ret

00001b78 <__fp_pscA>:
    1b78:	00 24       	eor	r0, r0
    1b7a:	0a 94       	dec	r0
    1b7c:	16 16       	cp	r1, r22
    1b7e:	17 06       	cpc	r1, r23
    1b80:	18 06       	cpc	r1, r24
    1b82:	09 06       	cpc	r0, r25
    1b84:	08 95       	ret

00001b86 <__fp_pscB>:
    1b86:	00 24       	eor	r0, r0
    1b88:	0a 94       	dec	r0
    1b8a:	12 16       	cp	r1, r18
    1b8c:	13 06       	cpc	r1, r19
    1b8e:	14 06       	cpc	r1, r20
    1b90:	05 06       	cpc	r0, r21
    1b92:	08 95       	ret

00001b94 <__fp_round>:
    1b94:	09 2e       	mov	r0, r25
    1b96:	03 94       	inc	r0
    1b98:	00 0c       	add	r0, r0
    1b9a:	11 f4       	brne	.+4      	; 0x1ba0 <__fp_round+0xc>
    1b9c:	88 23       	and	r24, r24
    1b9e:	52 f0       	brmi	.+20     	; 0x1bb4 <__fp_round+0x20>
    1ba0:	bb 0f       	add	r27, r27
    1ba2:	40 f4       	brcc	.+16     	; 0x1bb4 <__fp_round+0x20>
    1ba4:	bf 2b       	or	r27, r31
    1ba6:	11 f4       	brne	.+4      	; 0x1bac <__fp_round+0x18>
    1ba8:	60 ff       	sbrs	r22, 0
    1baa:	04 c0       	rjmp	.+8      	; 0x1bb4 <__fp_round+0x20>
    1bac:	6f 5f       	subi	r22, 0xFF	; 255
    1bae:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb4:	08 95       	ret

00001bb6 <__fp_split3>:
    1bb6:	57 fd       	sbrc	r21, 7
    1bb8:	90 58       	subi	r25, 0x80	; 128
    1bba:	44 0f       	add	r20, r20
    1bbc:	55 1f       	adc	r21, r21
    1bbe:	59 f0       	breq	.+22     	; 0x1bd6 <__fp_splitA+0x10>
    1bc0:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc2:	71 f0       	breq	.+28     	; 0x1be0 <__fp_splitA+0x1a>
    1bc4:	47 95       	ror	r20

00001bc6 <__fp_splitA>:
    1bc6:	88 0f       	add	r24, r24
    1bc8:	97 fb       	bst	r25, 7
    1bca:	99 1f       	adc	r25, r25
    1bcc:	61 f0       	breq	.+24     	; 0x1be6 <__fp_splitA+0x20>
    1bce:	9f 3f       	cpi	r25, 0xFF	; 255
    1bd0:	79 f0       	breq	.+30     	; 0x1bf0 <__fp_splitA+0x2a>
    1bd2:	87 95       	ror	r24
    1bd4:	08 95       	ret
    1bd6:	12 16       	cp	r1, r18
    1bd8:	13 06       	cpc	r1, r19
    1bda:	14 06       	cpc	r1, r20
    1bdc:	55 1f       	adc	r21, r21
    1bde:	f2 cf       	rjmp	.-28     	; 0x1bc4 <__fp_split3+0xe>
    1be0:	46 95       	lsr	r20
    1be2:	f1 df       	rcall	.-30     	; 0x1bc6 <__fp_splitA>
    1be4:	08 c0       	rjmp	.+16     	; 0x1bf6 <__fp_splitA+0x30>
    1be6:	16 16       	cp	r1, r22
    1be8:	17 06       	cpc	r1, r23
    1bea:	18 06       	cpc	r1, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	f1 cf       	rjmp	.-30     	; 0x1bd2 <__fp_splitA+0xc>
    1bf0:	86 95       	lsr	r24
    1bf2:	71 05       	cpc	r23, r1
    1bf4:	61 05       	cpc	r22, r1
    1bf6:	08 94       	sec
    1bf8:	08 95       	ret

00001bfa <__fp_zero>:
    1bfa:	e8 94       	clt

00001bfc <__fp_szero>:
    1bfc:	bb 27       	eor	r27, r27
    1bfe:	66 27       	eor	r22, r22
    1c00:	77 27       	eor	r23, r23
    1c02:	cb 01       	movw	r24, r22
    1c04:	97 f9       	bld	r25, 7
    1c06:	08 95       	ret

00001c08 <__mulsf3>:
    1c08:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__mulsf3x>
    1c0c:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__fp_round>
    1c10:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__fp_pscA>
    1c14:	38 f0       	brcs	.+14     	; 0x1c24 <__mulsf3+0x1c>
    1c16:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__fp_pscB>
    1c1a:	20 f0       	brcs	.+8      	; 0x1c24 <__mulsf3+0x1c>
    1c1c:	95 23       	and	r25, r21
    1c1e:	11 f0       	breq	.+4      	; 0x1c24 <__mulsf3+0x1c>
    1c20:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__fp_inf>
    1c24:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__fp_nan>
    1c28:	11 24       	eor	r1, r1
    1c2a:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__fp_szero>

00001c2e <__mulsf3x>:
    1c2e:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__fp_split3>
    1c32:	70 f3       	brcs	.-36     	; 0x1c10 <__mulsf3+0x8>

00001c34 <__mulsf3_pse>:
    1c34:	95 9f       	mul	r25, r21
    1c36:	c1 f3       	breq	.-16     	; 0x1c28 <__mulsf3+0x20>
    1c38:	95 0f       	add	r25, r21
    1c3a:	50 e0       	ldi	r21, 0x00	; 0
    1c3c:	55 1f       	adc	r21, r21
    1c3e:	62 9f       	mul	r22, r18
    1c40:	f0 01       	movw	r30, r0
    1c42:	72 9f       	mul	r23, r18
    1c44:	bb 27       	eor	r27, r27
    1c46:	f0 0d       	add	r31, r0
    1c48:	b1 1d       	adc	r27, r1
    1c4a:	63 9f       	mul	r22, r19
    1c4c:	aa 27       	eor	r26, r26
    1c4e:	f0 0d       	add	r31, r0
    1c50:	b1 1d       	adc	r27, r1
    1c52:	aa 1f       	adc	r26, r26
    1c54:	64 9f       	mul	r22, r20
    1c56:	66 27       	eor	r22, r22
    1c58:	b0 0d       	add	r27, r0
    1c5a:	a1 1d       	adc	r26, r1
    1c5c:	66 1f       	adc	r22, r22
    1c5e:	82 9f       	mul	r24, r18
    1c60:	22 27       	eor	r18, r18
    1c62:	b0 0d       	add	r27, r0
    1c64:	a1 1d       	adc	r26, r1
    1c66:	62 1f       	adc	r22, r18
    1c68:	73 9f       	mul	r23, r19
    1c6a:	b0 0d       	add	r27, r0
    1c6c:	a1 1d       	adc	r26, r1
    1c6e:	62 1f       	adc	r22, r18
    1c70:	83 9f       	mul	r24, r19
    1c72:	a0 0d       	add	r26, r0
    1c74:	61 1d       	adc	r22, r1
    1c76:	22 1f       	adc	r18, r18
    1c78:	74 9f       	mul	r23, r20
    1c7a:	33 27       	eor	r19, r19
    1c7c:	a0 0d       	add	r26, r0
    1c7e:	61 1d       	adc	r22, r1
    1c80:	23 1f       	adc	r18, r19
    1c82:	84 9f       	mul	r24, r20
    1c84:	60 0d       	add	r22, r0
    1c86:	21 1d       	adc	r18, r1
    1c88:	82 2f       	mov	r24, r18
    1c8a:	76 2f       	mov	r23, r22
    1c8c:	6a 2f       	mov	r22, r26
    1c8e:	11 24       	eor	r1, r1
    1c90:	9f 57       	subi	r25, 0x7F	; 127
    1c92:	50 40       	sbci	r21, 0x00	; 0
    1c94:	9a f0       	brmi	.+38     	; 0x1cbc <__mulsf3_pse+0x88>
    1c96:	f1 f0       	breq	.+60     	; 0x1cd4 <__mulsf3_pse+0xa0>
    1c98:	88 23       	and	r24, r24
    1c9a:	4a f0       	brmi	.+18     	; 0x1cae <__mulsf3_pse+0x7a>
    1c9c:	ee 0f       	add	r30, r30
    1c9e:	ff 1f       	adc	r31, r31
    1ca0:	bb 1f       	adc	r27, r27
    1ca2:	66 1f       	adc	r22, r22
    1ca4:	77 1f       	adc	r23, r23
    1ca6:	88 1f       	adc	r24, r24
    1ca8:	91 50       	subi	r25, 0x01	; 1
    1caa:	50 40       	sbci	r21, 0x00	; 0
    1cac:	a9 f7       	brne	.-22     	; 0x1c98 <__mulsf3_pse+0x64>
    1cae:	9e 3f       	cpi	r25, 0xFE	; 254
    1cb0:	51 05       	cpc	r21, r1
    1cb2:	80 f0       	brcs	.+32     	; 0x1cd4 <__mulsf3_pse+0xa0>
    1cb4:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__fp_inf>
    1cb8:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__fp_szero>
    1cbc:	5f 3f       	cpi	r21, 0xFF	; 255
    1cbe:	e4 f3       	brlt	.-8      	; 0x1cb8 <__mulsf3_pse+0x84>
    1cc0:	98 3e       	cpi	r25, 0xE8	; 232
    1cc2:	d4 f3       	brlt	.-12     	; 0x1cb8 <__mulsf3_pse+0x84>
    1cc4:	86 95       	lsr	r24
    1cc6:	77 95       	ror	r23
    1cc8:	67 95       	ror	r22
    1cca:	b7 95       	ror	r27
    1ccc:	f7 95       	ror	r31
    1cce:	e7 95       	ror	r30
    1cd0:	9f 5f       	subi	r25, 0xFF	; 255
    1cd2:	c1 f7       	brne	.-16     	; 0x1cc4 <__mulsf3_pse+0x90>
    1cd4:	fe 2b       	or	r31, r30
    1cd6:	88 0f       	add	r24, r24
    1cd8:	91 1d       	adc	r25, r1
    1cda:	96 95       	lsr	r25
    1cdc:	87 95       	ror	r24
    1cde:	97 f9       	bld	r25, 7
    1ce0:	08 95       	ret

00001ce2 <malloc>:
    1ce2:	0f 93       	push	r16
    1ce4:	1f 93       	push	r17
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	82 30       	cpi	r24, 0x02	; 2
    1cec:	91 05       	cpc	r25, r1
    1cee:	10 f4       	brcc	.+4      	; 0x1cf4 <malloc+0x12>
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	e0 91 2c 05 	lds	r30, 0x052C	; 0x80052c <__flp>
    1cf8:	f0 91 2d 05 	lds	r31, 0x052D	; 0x80052d <__flp+0x1>
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	a0 e0       	ldi	r26, 0x00	; 0
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	30 97       	sbiw	r30, 0x00	; 0
    1d06:	19 f1       	breq	.+70     	; 0x1d4e <malloc+0x6c>
    1d08:	40 81       	ld	r20, Z
    1d0a:	51 81       	ldd	r21, Z+1	; 0x01
    1d0c:	02 81       	ldd	r16, Z+2	; 0x02
    1d0e:	13 81       	ldd	r17, Z+3	; 0x03
    1d10:	48 17       	cp	r20, r24
    1d12:	59 07       	cpc	r21, r25
    1d14:	c8 f0       	brcs	.+50     	; 0x1d48 <malloc+0x66>
    1d16:	84 17       	cp	r24, r20
    1d18:	95 07       	cpc	r25, r21
    1d1a:	69 f4       	brne	.+26     	; 0x1d36 <malloc+0x54>
    1d1c:	10 97       	sbiw	r26, 0x00	; 0
    1d1e:	31 f0       	breq	.+12     	; 0x1d2c <malloc+0x4a>
    1d20:	12 96       	adiw	r26, 0x02	; 2
    1d22:	0c 93       	st	X, r16
    1d24:	12 97       	sbiw	r26, 0x02	; 2
    1d26:	13 96       	adiw	r26, 0x03	; 3
    1d28:	1c 93       	st	X, r17
    1d2a:	27 c0       	rjmp	.+78     	; 0x1d7a <malloc+0x98>
    1d2c:	00 93 2c 05 	sts	0x052C, r16	; 0x80052c <__flp>
    1d30:	10 93 2d 05 	sts	0x052D, r17	; 0x80052d <__flp+0x1>
    1d34:	22 c0       	rjmp	.+68     	; 0x1d7a <malloc+0x98>
    1d36:	21 15       	cp	r18, r1
    1d38:	31 05       	cpc	r19, r1
    1d3a:	19 f0       	breq	.+6      	; 0x1d42 <malloc+0x60>
    1d3c:	42 17       	cp	r20, r18
    1d3e:	53 07       	cpc	r21, r19
    1d40:	18 f4       	brcc	.+6      	; 0x1d48 <malloc+0x66>
    1d42:	9a 01       	movw	r18, r20
    1d44:	bd 01       	movw	r22, r26
    1d46:	ef 01       	movw	r28, r30
    1d48:	df 01       	movw	r26, r30
    1d4a:	f8 01       	movw	r30, r16
    1d4c:	db cf       	rjmp	.-74     	; 0x1d04 <malloc+0x22>
    1d4e:	21 15       	cp	r18, r1
    1d50:	31 05       	cpc	r19, r1
    1d52:	f9 f0       	breq	.+62     	; 0x1d92 <malloc+0xb0>
    1d54:	28 1b       	sub	r18, r24
    1d56:	39 0b       	sbc	r19, r25
    1d58:	24 30       	cpi	r18, 0x04	; 4
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	80 f4       	brcc	.+32     	; 0x1d7e <malloc+0x9c>
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	9b 81       	ldd	r25, Y+3	; 0x03
    1d62:	61 15       	cp	r22, r1
    1d64:	71 05       	cpc	r23, r1
    1d66:	21 f0       	breq	.+8      	; 0x1d70 <malloc+0x8e>
    1d68:	fb 01       	movw	r30, r22
    1d6a:	93 83       	std	Z+3, r25	; 0x03
    1d6c:	82 83       	std	Z+2, r24	; 0x02
    1d6e:	04 c0       	rjmp	.+8      	; 0x1d78 <malloc+0x96>
    1d70:	90 93 2d 05 	sts	0x052D, r25	; 0x80052d <__flp+0x1>
    1d74:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <__flp>
    1d78:	fe 01       	movw	r30, r28
    1d7a:	32 96       	adiw	r30, 0x02	; 2
    1d7c:	44 c0       	rjmp	.+136    	; 0x1e06 <malloc+0x124>
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e2 0f       	add	r30, r18
    1d82:	f3 1f       	adc	r31, r19
    1d84:	81 93       	st	Z+, r24
    1d86:	91 93       	st	Z+, r25
    1d88:	22 50       	subi	r18, 0x02	; 2
    1d8a:	31 09       	sbc	r19, r1
    1d8c:	39 83       	std	Y+1, r19	; 0x01
    1d8e:	28 83       	st	Y, r18
    1d90:	3a c0       	rjmp	.+116    	; 0x1e06 <malloc+0x124>
    1d92:	20 91 2a 05 	lds	r18, 0x052A	; 0x80052a <__brkval>
    1d96:	30 91 2b 05 	lds	r19, 0x052B	; 0x80052b <__brkval+0x1>
    1d9a:	23 2b       	or	r18, r19
    1d9c:	41 f4       	brne	.+16     	; 0x1dae <malloc+0xcc>
    1d9e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1da2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1da6:	30 93 2b 05 	sts	0x052B, r19	; 0x80052b <__brkval+0x1>
    1daa:	20 93 2a 05 	sts	0x052A, r18	; 0x80052a <__brkval>
    1dae:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1db2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1db6:	21 15       	cp	r18, r1
    1db8:	31 05       	cpc	r19, r1
    1dba:	41 f4       	brne	.+16     	; 0x1dcc <malloc+0xea>
    1dbc:	2d b7       	in	r18, 0x3d	; 61
    1dbe:	3e b7       	in	r19, 0x3e	; 62
    1dc0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1dc4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1dc8:	24 1b       	sub	r18, r20
    1dca:	35 0b       	sbc	r19, r21
    1dcc:	e0 91 2a 05 	lds	r30, 0x052A	; 0x80052a <__brkval>
    1dd0:	f0 91 2b 05 	lds	r31, 0x052B	; 0x80052b <__brkval+0x1>
    1dd4:	e2 17       	cp	r30, r18
    1dd6:	f3 07       	cpc	r31, r19
    1dd8:	a0 f4       	brcc	.+40     	; 0x1e02 <malloc+0x120>
    1dda:	2e 1b       	sub	r18, r30
    1ddc:	3f 0b       	sbc	r19, r31
    1dde:	28 17       	cp	r18, r24
    1de0:	39 07       	cpc	r19, r25
    1de2:	78 f0       	brcs	.+30     	; 0x1e02 <malloc+0x120>
    1de4:	ac 01       	movw	r20, r24
    1de6:	4e 5f       	subi	r20, 0xFE	; 254
    1de8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dea:	24 17       	cp	r18, r20
    1dec:	35 07       	cpc	r19, r21
    1dee:	48 f0       	brcs	.+18     	; 0x1e02 <malloc+0x120>
    1df0:	4e 0f       	add	r20, r30
    1df2:	5f 1f       	adc	r21, r31
    1df4:	50 93 2b 05 	sts	0x052B, r21	; 0x80052b <__brkval+0x1>
    1df8:	40 93 2a 05 	sts	0x052A, r20	; 0x80052a <__brkval>
    1dfc:	81 93       	st	Z+, r24
    1dfe:	91 93       	st	Z+, r25
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <malloc+0x124>
    1e02:	e0 e0       	ldi	r30, 0x00	; 0
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	cf 01       	movw	r24, r30
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	08 95       	ret

00001e12 <free>:
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <free+0xa>
    1e1a:	81 c0       	rjmp	.+258    	; 0x1f1e <free+0x10c>
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	32 97       	sbiw	r30, 0x02	; 2
    1e20:	13 82       	std	Z+3, r1	; 0x03
    1e22:	12 82       	std	Z+2, r1	; 0x02
    1e24:	a0 91 2c 05 	lds	r26, 0x052C	; 0x80052c <__flp>
    1e28:	b0 91 2d 05 	lds	r27, 0x052D	; 0x80052d <__flp+0x1>
    1e2c:	10 97       	sbiw	r26, 0x00	; 0
    1e2e:	81 f4       	brne	.+32     	; 0x1e50 <free+0x3e>
    1e30:	20 81       	ld	r18, Z
    1e32:	31 81       	ldd	r19, Z+1	; 0x01
    1e34:	82 0f       	add	r24, r18
    1e36:	93 1f       	adc	r25, r19
    1e38:	20 91 2a 05 	lds	r18, 0x052A	; 0x80052a <__brkval>
    1e3c:	30 91 2b 05 	lds	r19, 0x052B	; 0x80052b <__brkval+0x1>
    1e40:	28 17       	cp	r18, r24
    1e42:	39 07       	cpc	r19, r25
    1e44:	51 f5       	brne	.+84     	; 0x1e9a <free+0x88>
    1e46:	f0 93 2b 05 	sts	0x052B, r31	; 0x80052b <__brkval+0x1>
    1e4a:	e0 93 2a 05 	sts	0x052A, r30	; 0x80052a <__brkval>
    1e4e:	67 c0       	rjmp	.+206    	; 0x1f1e <free+0x10c>
    1e50:	ed 01       	movw	r28, r26
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	ce 17       	cp	r28, r30
    1e58:	df 07       	cpc	r29, r31
    1e5a:	40 f4       	brcc	.+16     	; 0x1e6c <free+0x5a>
    1e5c:	4a 81       	ldd	r20, Y+2	; 0x02
    1e5e:	5b 81       	ldd	r21, Y+3	; 0x03
    1e60:	9e 01       	movw	r18, r28
    1e62:	41 15       	cp	r20, r1
    1e64:	51 05       	cpc	r21, r1
    1e66:	f1 f0       	breq	.+60     	; 0x1ea4 <free+0x92>
    1e68:	ea 01       	movw	r28, r20
    1e6a:	f5 cf       	rjmp	.-22     	; 0x1e56 <free+0x44>
    1e6c:	d3 83       	std	Z+3, r29	; 0x03
    1e6e:	c2 83       	std	Z+2, r28	; 0x02
    1e70:	40 81       	ld	r20, Z
    1e72:	51 81       	ldd	r21, Z+1	; 0x01
    1e74:	84 0f       	add	r24, r20
    1e76:	95 1f       	adc	r25, r21
    1e78:	c8 17       	cp	r28, r24
    1e7a:	d9 07       	cpc	r29, r25
    1e7c:	59 f4       	brne	.+22     	; 0x1e94 <free+0x82>
    1e7e:	88 81       	ld	r24, Y
    1e80:	99 81       	ldd	r25, Y+1	; 0x01
    1e82:	84 0f       	add	r24, r20
    1e84:	95 1f       	adc	r25, r21
    1e86:	02 96       	adiw	r24, 0x02	; 2
    1e88:	91 83       	std	Z+1, r25	; 0x01
    1e8a:	80 83       	st	Z, r24
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e90:	93 83       	std	Z+3, r25	; 0x03
    1e92:	82 83       	std	Z+2, r24	; 0x02
    1e94:	21 15       	cp	r18, r1
    1e96:	31 05       	cpc	r19, r1
    1e98:	29 f4       	brne	.+10     	; 0x1ea4 <free+0x92>
    1e9a:	f0 93 2d 05 	sts	0x052D, r31	; 0x80052d <__flp+0x1>
    1e9e:	e0 93 2c 05 	sts	0x052C, r30	; 0x80052c <__flp>
    1ea2:	3d c0       	rjmp	.+122    	; 0x1f1e <free+0x10c>
    1ea4:	e9 01       	movw	r28, r18
    1ea6:	fb 83       	std	Y+3, r31	; 0x03
    1ea8:	ea 83       	std	Y+2, r30	; 0x02
    1eaa:	49 91       	ld	r20, Y+
    1eac:	59 91       	ld	r21, Y+
    1eae:	c4 0f       	add	r28, r20
    1eb0:	d5 1f       	adc	r29, r21
    1eb2:	ec 17       	cp	r30, r28
    1eb4:	fd 07       	cpc	r31, r29
    1eb6:	61 f4       	brne	.+24     	; 0x1ed0 <free+0xbe>
    1eb8:	80 81       	ld	r24, Z
    1eba:	91 81       	ldd	r25, Z+1	; 0x01
    1ebc:	84 0f       	add	r24, r20
    1ebe:	95 1f       	adc	r25, r21
    1ec0:	02 96       	adiw	r24, 0x02	; 2
    1ec2:	e9 01       	movw	r28, r18
    1ec4:	99 83       	std	Y+1, r25	; 0x01
    1ec6:	88 83       	st	Y, r24
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	93 81       	ldd	r25, Z+3	; 0x03
    1ecc:	9b 83       	std	Y+3, r25	; 0x03
    1ece:	8a 83       	std	Y+2, r24	; 0x02
    1ed0:	e0 e0       	ldi	r30, 0x00	; 0
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	12 96       	adiw	r26, 0x02	; 2
    1ed6:	8d 91       	ld	r24, X+
    1ed8:	9c 91       	ld	r25, X
    1eda:	13 97       	sbiw	r26, 0x03	; 3
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	19 f0       	breq	.+6      	; 0x1ee6 <free+0xd4>
    1ee0:	fd 01       	movw	r30, r26
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	f7 cf       	rjmp	.-18     	; 0x1ed4 <free+0xc2>
    1ee6:	8d 91       	ld	r24, X+
    1ee8:	9c 91       	ld	r25, X
    1eea:	11 97       	sbiw	r26, 0x01	; 1
    1eec:	9d 01       	movw	r18, r26
    1eee:	2e 5f       	subi	r18, 0xFE	; 254
    1ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef2:	82 0f       	add	r24, r18
    1ef4:	93 1f       	adc	r25, r19
    1ef6:	20 91 2a 05 	lds	r18, 0x052A	; 0x80052a <__brkval>
    1efa:	30 91 2b 05 	lds	r19, 0x052B	; 0x80052b <__brkval+0x1>
    1efe:	28 17       	cp	r18, r24
    1f00:	39 07       	cpc	r19, r25
    1f02:	69 f4       	brne	.+26     	; 0x1f1e <free+0x10c>
    1f04:	30 97       	sbiw	r30, 0x00	; 0
    1f06:	29 f4       	brne	.+10     	; 0x1f12 <free+0x100>
    1f08:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <__flp+0x1>
    1f0c:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <__flp>
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <free+0x104>
    1f12:	13 82       	std	Z+3, r1	; 0x03
    1f14:	12 82       	std	Z+2, r1	; 0x02
    1f16:	b0 93 2b 05 	sts	0x052B, r27	; 0x80052b <__brkval+0x1>
    1f1a:	a0 93 2a 05 	sts	0x052A, r26	; 0x80052a <__brkval>
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	08 95       	ret

00001f24 <__ftoa_engine>:
    1f24:	28 30       	cpi	r18, 0x08	; 8
    1f26:	08 f0       	brcs	.+2      	; 0x1f2a <__ftoa_engine+0x6>
    1f28:	27 e0       	ldi	r18, 0x07	; 7
    1f2a:	33 27       	eor	r19, r19
    1f2c:	da 01       	movw	r26, r20
    1f2e:	99 0f       	add	r25, r25
    1f30:	31 1d       	adc	r19, r1
    1f32:	87 fd       	sbrc	r24, 7
    1f34:	91 60       	ori	r25, 0x01	; 1
    1f36:	00 96       	adiw	r24, 0x00	; 0
    1f38:	61 05       	cpc	r22, r1
    1f3a:	71 05       	cpc	r23, r1
    1f3c:	39 f4       	brne	.+14     	; 0x1f4c <__ftoa_engine+0x28>
    1f3e:	32 60       	ori	r19, 0x02	; 2
    1f40:	2e 5f       	subi	r18, 0xFE	; 254
    1f42:	3d 93       	st	X+, r19
    1f44:	30 e3       	ldi	r19, 0x30	; 48
    1f46:	2a 95       	dec	r18
    1f48:	e1 f7       	brne	.-8      	; 0x1f42 <__ftoa_engine+0x1e>
    1f4a:	08 95       	ret
    1f4c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f4e:	30 f0       	brcs	.+12     	; 0x1f5c <__ftoa_engine+0x38>
    1f50:	80 38       	cpi	r24, 0x80	; 128
    1f52:	71 05       	cpc	r23, r1
    1f54:	61 05       	cpc	r22, r1
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <__ftoa_engine+0x36>
    1f58:	3c 5f       	subi	r19, 0xFC	; 252
    1f5a:	3c 5f       	subi	r19, 0xFC	; 252
    1f5c:	3d 93       	st	X+, r19
    1f5e:	91 30       	cpi	r25, 0x01	; 1
    1f60:	08 f0       	brcs	.+2      	; 0x1f64 <__ftoa_engine+0x40>
    1f62:	80 68       	ori	r24, 0x80	; 128
    1f64:	91 1d       	adc	r25, r1
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	1f 93       	push	r17
    1f6c:	0f 93       	push	r16
    1f6e:	ff 92       	push	r15
    1f70:	ef 92       	push	r14
    1f72:	19 2f       	mov	r17, r25
    1f74:	98 7f       	andi	r25, 0xF8	; 248
    1f76:	96 95       	lsr	r25
    1f78:	e9 2f       	mov	r30, r25
    1f7a:	96 95       	lsr	r25
    1f7c:	96 95       	lsr	r25
    1f7e:	e9 0f       	add	r30, r25
    1f80:	ff 27       	eor	r31, r31
    1f82:	e2 5d       	subi	r30, 0xD2	; 210
    1f84:	fe 4f       	sbci	r31, 0xFE	; 254
    1f86:	99 27       	eor	r25, r25
    1f88:	33 27       	eor	r19, r19
    1f8a:	ee 24       	eor	r14, r14
    1f8c:	ff 24       	eor	r15, r15
    1f8e:	a7 01       	movw	r20, r14
    1f90:	e7 01       	movw	r28, r14
    1f92:	05 90       	lpm	r0, Z+
    1f94:	08 94       	sec
    1f96:	07 94       	ror	r0
    1f98:	28 f4       	brcc	.+10     	; 0x1fa4 <__ftoa_engine+0x80>
    1f9a:	36 0f       	add	r19, r22
    1f9c:	e7 1e       	adc	r14, r23
    1f9e:	f8 1e       	adc	r15, r24
    1fa0:	49 1f       	adc	r20, r25
    1fa2:	51 1d       	adc	r21, r1
    1fa4:	66 0f       	add	r22, r22
    1fa6:	77 1f       	adc	r23, r23
    1fa8:	88 1f       	adc	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	06 94       	lsr	r0
    1fae:	a1 f7       	brne	.-24     	; 0x1f98 <__ftoa_engine+0x74>
    1fb0:	05 90       	lpm	r0, Z+
    1fb2:	07 94       	ror	r0
    1fb4:	28 f4       	brcc	.+10     	; 0x1fc0 <__ftoa_engine+0x9c>
    1fb6:	e7 0e       	add	r14, r23
    1fb8:	f8 1e       	adc	r15, r24
    1fba:	49 1f       	adc	r20, r25
    1fbc:	56 1f       	adc	r21, r22
    1fbe:	c1 1d       	adc	r28, r1
    1fc0:	77 0f       	add	r23, r23
    1fc2:	88 1f       	adc	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	66 1f       	adc	r22, r22
    1fc8:	06 94       	lsr	r0
    1fca:	a1 f7       	brne	.-24     	; 0x1fb4 <__ftoa_engine+0x90>
    1fcc:	05 90       	lpm	r0, Z+
    1fce:	07 94       	ror	r0
    1fd0:	28 f4       	brcc	.+10     	; 0x1fdc <__ftoa_engine+0xb8>
    1fd2:	f8 0e       	add	r15, r24
    1fd4:	49 1f       	adc	r20, r25
    1fd6:	56 1f       	adc	r21, r22
    1fd8:	c7 1f       	adc	r28, r23
    1fda:	d1 1d       	adc	r29, r1
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	66 1f       	adc	r22, r22
    1fe2:	77 1f       	adc	r23, r23
    1fe4:	06 94       	lsr	r0
    1fe6:	a1 f7       	brne	.-24     	; 0x1fd0 <__ftoa_engine+0xac>
    1fe8:	05 90       	lpm	r0, Z+
    1fea:	07 94       	ror	r0
    1fec:	20 f4       	brcc	.+8      	; 0x1ff6 <__ftoa_engine+0xd2>
    1fee:	49 0f       	add	r20, r25
    1ff0:	56 1f       	adc	r21, r22
    1ff2:	c7 1f       	adc	r28, r23
    1ff4:	d8 1f       	adc	r29, r24
    1ff6:	99 0f       	add	r25, r25
    1ff8:	66 1f       	adc	r22, r22
    1ffa:	77 1f       	adc	r23, r23
    1ffc:	88 1f       	adc	r24, r24
    1ffe:	06 94       	lsr	r0
    2000:	a9 f7       	brne	.-22     	; 0x1fec <__ftoa_engine+0xc8>
    2002:	84 91       	lpm	r24, Z
    2004:	10 95       	com	r17
    2006:	17 70       	andi	r17, 0x07	; 7
    2008:	41 f0       	breq	.+16     	; 0x201a <__ftoa_engine+0xf6>
    200a:	d6 95       	lsr	r29
    200c:	c7 95       	ror	r28
    200e:	57 95       	ror	r21
    2010:	47 95       	ror	r20
    2012:	f7 94       	ror	r15
    2014:	e7 94       	ror	r14
    2016:	1a 95       	dec	r17
    2018:	c1 f7       	brne	.-16     	; 0x200a <__ftoa_engine+0xe6>
    201a:	e4 ed       	ldi	r30, 0xD4	; 212
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	68 94       	set
    2020:	15 90       	lpm	r1, Z+
    2022:	15 91       	lpm	r17, Z+
    2024:	35 91       	lpm	r19, Z+
    2026:	65 91       	lpm	r22, Z+
    2028:	95 91       	lpm	r25, Z+
    202a:	05 90       	lpm	r0, Z+
    202c:	7f e2       	ldi	r23, 0x2F	; 47
    202e:	73 95       	inc	r23
    2030:	e1 18       	sub	r14, r1
    2032:	f1 0a       	sbc	r15, r17
    2034:	43 0b       	sbc	r20, r19
    2036:	56 0b       	sbc	r21, r22
    2038:	c9 0b       	sbc	r28, r25
    203a:	d0 09       	sbc	r29, r0
    203c:	c0 f7       	brcc	.-16     	; 0x202e <__ftoa_engine+0x10a>
    203e:	e1 0c       	add	r14, r1
    2040:	f1 1e       	adc	r15, r17
    2042:	43 1f       	adc	r20, r19
    2044:	56 1f       	adc	r21, r22
    2046:	c9 1f       	adc	r28, r25
    2048:	d0 1d       	adc	r29, r0
    204a:	7e f4       	brtc	.+30     	; 0x206a <__ftoa_engine+0x146>
    204c:	70 33       	cpi	r23, 0x30	; 48
    204e:	11 f4       	brne	.+4      	; 0x2054 <__ftoa_engine+0x130>
    2050:	8a 95       	dec	r24
    2052:	e6 cf       	rjmp	.-52     	; 0x2020 <__ftoa_engine+0xfc>
    2054:	e8 94       	clt
    2056:	01 50       	subi	r16, 0x01	; 1
    2058:	30 f0       	brcs	.+12     	; 0x2066 <__ftoa_engine+0x142>
    205a:	08 0f       	add	r16, r24
    205c:	0a f4       	brpl	.+2      	; 0x2060 <__ftoa_engine+0x13c>
    205e:	00 27       	eor	r16, r16
    2060:	02 17       	cp	r16, r18
    2062:	08 f4       	brcc	.+2      	; 0x2066 <__ftoa_engine+0x142>
    2064:	20 2f       	mov	r18, r16
    2066:	23 95       	inc	r18
    2068:	02 2f       	mov	r16, r18
    206a:	7a 33       	cpi	r23, 0x3A	; 58
    206c:	28 f0       	brcs	.+10     	; 0x2078 <__ftoa_engine+0x154>
    206e:	79 e3       	ldi	r23, 0x39	; 57
    2070:	7d 93       	st	X+, r23
    2072:	2a 95       	dec	r18
    2074:	e9 f7       	brne	.-6      	; 0x2070 <__ftoa_engine+0x14c>
    2076:	10 c0       	rjmp	.+32     	; 0x2098 <__ftoa_engine+0x174>
    2078:	7d 93       	st	X+, r23
    207a:	2a 95       	dec	r18
    207c:	89 f6       	brne	.-94     	; 0x2020 <__ftoa_engine+0xfc>
    207e:	06 94       	lsr	r0
    2080:	97 95       	ror	r25
    2082:	67 95       	ror	r22
    2084:	37 95       	ror	r19
    2086:	17 95       	ror	r17
    2088:	17 94       	ror	r1
    208a:	e1 18       	sub	r14, r1
    208c:	f1 0a       	sbc	r15, r17
    208e:	43 0b       	sbc	r20, r19
    2090:	56 0b       	sbc	r21, r22
    2092:	c9 0b       	sbc	r28, r25
    2094:	d0 09       	sbc	r29, r0
    2096:	98 f0       	brcs	.+38     	; 0x20be <__ftoa_engine+0x19a>
    2098:	23 95       	inc	r18
    209a:	7e 91       	ld	r23, -X
    209c:	73 95       	inc	r23
    209e:	7a 33       	cpi	r23, 0x3A	; 58
    20a0:	08 f0       	brcs	.+2      	; 0x20a4 <__ftoa_engine+0x180>
    20a2:	70 e3       	ldi	r23, 0x30	; 48
    20a4:	7c 93       	st	X, r23
    20a6:	20 13       	cpse	r18, r16
    20a8:	b8 f7       	brcc	.-18     	; 0x2098 <__ftoa_engine+0x174>
    20aa:	7e 91       	ld	r23, -X
    20ac:	70 61       	ori	r23, 0x10	; 16
    20ae:	7d 93       	st	X+, r23
    20b0:	30 f0       	brcs	.+12     	; 0x20be <__ftoa_engine+0x19a>
    20b2:	83 95       	inc	r24
    20b4:	71 e3       	ldi	r23, 0x31	; 49
    20b6:	7d 93       	st	X+, r23
    20b8:	70 e3       	ldi	r23, 0x30	; 48
    20ba:	2a 95       	dec	r18
    20bc:	e1 f7       	brne	.-8      	; 0x20b6 <__ftoa_engine+0x192>
    20be:	11 24       	eor	r1, r1
    20c0:	ef 90       	pop	r14
    20c2:	ff 90       	pop	r15
    20c4:	0f 91       	pop	r16
    20c6:	1f 91       	pop	r17
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	99 27       	eor	r25, r25
    20ce:	87 fd       	sbrc	r24, 7
    20d0:	90 95       	com	r25
    20d2:	08 95       	ret

000020d4 <strnlen_P>:
    20d4:	fc 01       	movw	r30, r24
    20d6:	05 90       	lpm	r0, Z+
    20d8:	61 50       	subi	r22, 0x01	; 1
    20da:	70 40       	sbci	r23, 0x00	; 0
    20dc:	01 10       	cpse	r0, r1
    20de:	d8 f7       	brcc	.-10     	; 0x20d6 <strnlen_P+0x2>
    20e0:	80 95       	com	r24
    20e2:	90 95       	com	r25
    20e4:	8e 0f       	add	r24, r30
    20e6:	9f 1f       	adc	r25, r31
    20e8:	08 95       	ret

000020ea <strcat>:
    20ea:	fb 01       	movw	r30, r22
    20ec:	dc 01       	movw	r26, r24
    20ee:	0d 90       	ld	r0, X+
    20f0:	00 20       	and	r0, r0
    20f2:	e9 f7       	brne	.-6      	; 0x20ee <strcat+0x4>
    20f4:	11 97       	sbiw	r26, 0x01	; 1
    20f6:	01 90       	ld	r0, Z+
    20f8:	0d 92       	st	X+, r0
    20fa:	00 20       	and	r0, r0
    20fc:	e1 f7       	brne	.-8      	; 0x20f6 <strcat+0xc>
    20fe:	08 95       	ret

00002100 <strcpy>:
    2100:	fb 01       	movw	r30, r22
    2102:	dc 01       	movw	r26, r24
    2104:	01 90       	ld	r0, Z+
    2106:	0d 92       	st	X+, r0
    2108:	00 20       	and	r0, r0
    210a:	e1 f7       	brne	.-8      	; 0x2104 <strcpy+0x4>
    210c:	08 95       	ret

0000210e <strncmp>:
    210e:	fb 01       	movw	r30, r22
    2110:	dc 01       	movw	r26, r24
    2112:	41 50       	subi	r20, 0x01	; 1
    2114:	50 40       	sbci	r21, 0x00	; 0
    2116:	30 f0       	brcs	.+12     	; 0x2124 <strncmp+0x16>
    2118:	8d 91       	ld	r24, X+
    211a:	01 90       	ld	r0, Z+
    211c:	80 19       	sub	r24, r0
    211e:	19 f4       	brne	.+6      	; 0x2126 <strncmp+0x18>
    2120:	00 20       	and	r0, r0
    2122:	b9 f7       	brne	.-18     	; 0x2112 <strncmp+0x4>
    2124:	88 1b       	sub	r24, r24
    2126:	99 0b       	sbc	r25, r25
    2128:	08 95       	ret

0000212a <strnlen>:
    212a:	fc 01       	movw	r30, r24
    212c:	61 50       	subi	r22, 0x01	; 1
    212e:	70 40       	sbci	r23, 0x00	; 0
    2130:	01 90       	ld	r0, Z+
    2132:	01 10       	cpse	r0, r1
    2134:	d8 f7       	brcc	.-10     	; 0x212c <strnlen+0x2>
    2136:	80 95       	com	r24
    2138:	90 95       	com	r25
    213a:	8e 0f       	add	r24, r30
    213c:	9f 1f       	adc	r25, r31
    213e:	08 95       	ret

00002140 <fputc>:
    2140:	0f 93       	push	r16
    2142:	1f 93       	push	r17
    2144:	cf 93       	push	r28
    2146:	df 93       	push	r29
    2148:	fb 01       	movw	r30, r22
    214a:	23 81       	ldd	r18, Z+3	; 0x03
    214c:	21 fd       	sbrc	r18, 1
    214e:	03 c0       	rjmp	.+6      	; 0x2156 <fputc+0x16>
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	9f ef       	ldi	r25, 0xFF	; 255
    2154:	2c c0       	rjmp	.+88     	; 0x21ae <fputc+0x6e>
    2156:	22 ff       	sbrs	r18, 2
    2158:	16 c0       	rjmp	.+44     	; 0x2186 <fputc+0x46>
    215a:	46 81       	ldd	r20, Z+6	; 0x06
    215c:	57 81       	ldd	r21, Z+7	; 0x07
    215e:	24 81       	ldd	r18, Z+4	; 0x04
    2160:	35 81       	ldd	r19, Z+5	; 0x05
    2162:	42 17       	cp	r20, r18
    2164:	53 07       	cpc	r21, r19
    2166:	44 f4       	brge	.+16     	; 0x2178 <fputc+0x38>
    2168:	a0 81       	ld	r26, Z
    216a:	b1 81       	ldd	r27, Z+1	; 0x01
    216c:	9d 01       	movw	r18, r26
    216e:	2f 5f       	subi	r18, 0xFF	; 255
    2170:	3f 4f       	sbci	r19, 0xFF	; 255
    2172:	31 83       	std	Z+1, r19	; 0x01
    2174:	20 83       	st	Z, r18
    2176:	8c 93       	st	X, r24
    2178:	26 81       	ldd	r18, Z+6	; 0x06
    217a:	37 81       	ldd	r19, Z+7	; 0x07
    217c:	2f 5f       	subi	r18, 0xFF	; 255
    217e:	3f 4f       	sbci	r19, 0xFF	; 255
    2180:	37 83       	std	Z+7, r19	; 0x07
    2182:	26 83       	std	Z+6, r18	; 0x06
    2184:	14 c0       	rjmp	.+40     	; 0x21ae <fputc+0x6e>
    2186:	8b 01       	movw	r16, r22
    2188:	ec 01       	movw	r28, r24
    218a:	fb 01       	movw	r30, r22
    218c:	00 84       	ldd	r0, Z+8	; 0x08
    218e:	f1 85       	ldd	r31, Z+9	; 0x09
    2190:	e0 2d       	mov	r30, r0
    2192:	09 95       	icall
    2194:	89 2b       	or	r24, r25
    2196:	e1 f6       	brne	.-72     	; 0x2150 <fputc+0x10>
    2198:	d8 01       	movw	r26, r16
    219a:	16 96       	adiw	r26, 0x06	; 6
    219c:	8d 91       	ld	r24, X+
    219e:	9c 91       	ld	r25, X
    21a0:	17 97       	sbiw	r26, 0x07	; 7
    21a2:	01 96       	adiw	r24, 0x01	; 1
    21a4:	17 96       	adiw	r26, 0x07	; 7
    21a6:	9c 93       	st	X, r25
    21a8:	8e 93       	st	-X, r24
    21aa:	16 97       	sbiw	r26, 0x06	; 6
    21ac:	ce 01       	movw	r24, r28
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	08 95       	ret

000021b8 <puts>:
    21b8:	0f 93       	push	r16
    21ba:	1f 93       	push	r17
    21bc:	cf 93       	push	r28
    21be:	df 93       	push	r29
    21c0:	e0 91 30 05 	lds	r30, 0x0530	; 0x800530 <__iob+0x2>
    21c4:	f0 91 31 05 	lds	r31, 0x0531	; 0x800531 <__iob+0x3>
    21c8:	23 81       	ldd	r18, Z+3	; 0x03
    21ca:	21 ff       	sbrs	r18, 1
    21cc:	1b c0       	rjmp	.+54     	; 0x2204 <puts+0x4c>
    21ce:	8c 01       	movw	r16, r24
    21d0:	d0 e0       	ldi	r29, 0x00	; 0
    21d2:	c0 e0       	ldi	r28, 0x00	; 0
    21d4:	f8 01       	movw	r30, r16
    21d6:	81 91       	ld	r24, Z+
    21d8:	8f 01       	movw	r16, r30
    21da:	60 91 30 05 	lds	r22, 0x0530	; 0x800530 <__iob+0x2>
    21de:	70 91 31 05 	lds	r23, 0x0531	; 0x800531 <__iob+0x3>
    21e2:	db 01       	movw	r26, r22
    21e4:	18 96       	adiw	r26, 0x08	; 8
    21e6:	ed 91       	ld	r30, X+
    21e8:	fc 91       	ld	r31, X
    21ea:	19 97       	sbiw	r26, 0x09	; 9
    21ec:	88 23       	and	r24, r24
    21ee:	31 f0       	breq	.+12     	; 0x21fc <puts+0x44>
    21f0:	09 95       	icall
    21f2:	89 2b       	or	r24, r25
    21f4:	79 f3       	breq	.-34     	; 0x21d4 <puts+0x1c>
    21f6:	df ef       	ldi	r29, 0xFF	; 255
    21f8:	cf ef       	ldi	r28, 0xFF	; 255
    21fa:	ec cf       	rjmp	.-40     	; 0x21d4 <puts+0x1c>
    21fc:	8a e0       	ldi	r24, 0x0A	; 10
    21fe:	09 95       	icall
    2200:	89 2b       	or	r24, r25
    2202:	19 f0       	breq	.+6      	; 0x220a <puts+0x52>
    2204:	8f ef       	ldi	r24, 0xFF	; 255
    2206:	9f ef       	ldi	r25, 0xFF	; 255
    2208:	02 c0       	rjmp	.+4      	; 0x220e <puts+0x56>
    220a:	8d 2f       	mov	r24, r29
    220c:	9c 2f       	mov	r25, r28
    220e:	df 91       	pop	r29
    2210:	cf 91       	pop	r28
    2212:	1f 91       	pop	r17
    2214:	0f 91       	pop	r16
    2216:	08 95       	ret

00002218 <sprintf>:
    2218:	ae e0       	ldi	r26, 0x0E	; 14
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e2 e1       	ldi	r30, 0x12	; 18
    221e:	f1 e1       	ldi	r31, 0x11	; 17
    2220:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__prologue_saves__+0x1c>
    2224:	0d 89       	ldd	r16, Y+21	; 0x15
    2226:	1e 89       	ldd	r17, Y+22	; 0x16
    2228:	86 e0       	ldi	r24, 0x06	; 6
    222a:	8c 83       	std	Y+4, r24	; 0x04
    222c:	1a 83       	std	Y+2, r17	; 0x02
    222e:	09 83       	std	Y+1, r16	; 0x01
    2230:	8f ef       	ldi	r24, 0xFF	; 255
    2232:	9f e7       	ldi	r25, 0x7F	; 127
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
    2238:	ae 01       	movw	r20, r28
    223a:	47 5e       	subi	r20, 0xE7	; 231
    223c:	5f 4f       	sbci	r21, 0xFF	; 255
    223e:	6f 89       	ldd	r22, Y+23	; 0x17
    2240:	78 8d       	ldd	r23, Y+24	; 0x18
    2242:	ce 01       	movw	r24, r28
    2244:	01 96       	adiw	r24, 0x01	; 1
    2246:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <vfprintf>
    224a:	ef 81       	ldd	r30, Y+7	; 0x07
    224c:	f8 85       	ldd	r31, Y+8	; 0x08
    224e:	e0 0f       	add	r30, r16
    2250:	f1 1f       	adc	r31, r17
    2252:	10 82       	st	Z, r1
    2254:	2e 96       	adiw	r28, 0x0e	; 14
    2256:	e4 e0       	ldi	r30, 0x04	; 4
    2258:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__epilogue_restores__+0x1c>

0000225c <__ultoa_invert>:
    225c:	fa 01       	movw	r30, r20
    225e:	aa 27       	eor	r26, r26
    2260:	28 30       	cpi	r18, 0x08	; 8
    2262:	51 f1       	breq	.+84     	; 0x22b8 <__ultoa_invert+0x5c>
    2264:	20 31       	cpi	r18, 0x10	; 16
    2266:	81 f1       	breq	.+96     	; 0x22c8 <__ultoa_invert+0x6c>
    2268:	e8 94       	clt
    226a:	6f 93       	push	r22
    226c:	6e 7f       	andi	r22, 0xFE	; 254
    226e:	6e 5f       	subi	r22, 0xFE	; 254
    2270:	7f 4f       	sbci	r23, 0xFF	; 255
    2272:	8f 4f       	sbci	r24, 0xFF	; 255
    2274:	9f 4f       	sbci	r25, 0xFF	; 255
    2276:	af 4f       	sbci	r26, 0xFF	; 255
    2278:	b1 e0       	ldi	r27, 0x01	; 1
    227a:	3e d0       	rcall	.+124    	; 0x22f8 <__ultoa_invert+0x9c>
    227c:	b4 e0       	ldi	r27, 0x04	; 4
    227e:	3c d0       	rcall	.+120    	; 0x22f8 <__ultoa_invert+0x9c>
    2280:	67 0f       	add	r22, r23
    2282:	78 1f       	adc	r23, r24
    2284:	89 1f       	adc	r24, r25
    2286:	9a 1f       	adc	r25, r26
    2288:	a1 1d       	adc	r26, r1
    228a:	68 0f       	add	r22, r24
    228c:	79 1f       	adc	r23, r25
    228e:	8a 1f       	adc	r24, r26
    2290:	91 1d       	adc	r25, r1
    2292:	a1 1d       	adc	r26, r1
    2294:	6a 0f       	add	r22, r26
    2296:	71 1d       	adc	r23, r1
    2298:	81 1d       	adc	r24, r1
    229a:	91 1d       	adc	r25, r1
    229c:	a1 1d       	adc	r26, r1
    229e:	20 d0       	rcall	.+64     	; 0x22e0 <__ultoa_invert+0x84>
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <__ultoa_invert+0x48>
    22a2:	68 94       	set
    22a4:	3f 91       	pop	r19
    22a6:	2a e0       	ldi	r18, 0x0A	; 10
    22a8:	26 9f       	mul	r18, r22
    22aa:	11 24       	eor	r1, r1
    22ac:	30 19       	sub	r19, r0
    22ae:	30 5d       	subi	r19, 0xD0	; 208
    22b0:	31 93       	st	Z+, r19
    22b2:	de f6       	brtc	.-74     	; 0x226a <__ultoa_invert+0xe>
    22b4:	cf 01       	movw	r24, r30
    22b6:	08 95       	ret
    22b8:	46 2f       	mov	r20, r22
    22ba:	47 70       	andi	r20, 0x07	; 7
    22bc:	40 5d       	subi	r20, 0xD0	; 208
    22be:	41 93       	st	Z+, r20
    22c0:	b3 e0       	ldi	r27, 0x03	; 3
    22c2:	0f d0       	rcall	.+30     	; 0x22e2 <__ultoa_invert+0x86>
    22c4:	c9 f7       	brne	.-14     	; 0x22b8 <__ultoa_invert+0x5c>
    22c6:	f6 cf       	rjmp	.-20     	; 0x22b4 <__ultoa_invert+0x58>
    22c8:	46 2f       	mov	r20, r22
    22ca:	4f 70       	andi	r20, 0x0F	; 15
    22cc:	40 5d       	subi	r20, 0xD0	; 208
    22ce:	4a 33       	cpi	r20, 0x3A	; 58
    22d0:	18 f0       	brcs	.+6      	; 0x22d8 <__ultoa_invert+0x7c>
    22d2:	49 5d       	subi	r20, 0xD9	; 217
    22d4:	31 fd       	sbrc	r19, 1
    22d6:	40 52       	subi	r20, 0x20	; 32
    22d8:	41 93       	st	Z+, r20
    22da:	02 d0       	rcall	.+4      	; 0x22e0 <__ultoa_invert+0x84>
    22dc:	a9 f7       	brne	.-22     	; 0x22c8 <__ultoa_invert+0x6c>
    22de:	ea cf       	rjmp	.-44     	; 0x22b4 <__ultoa_invert+0x58>
    22e0:	b4 e0       	ldi	r27, 0x04	; 4
    22e2:	a6 95       	lsr	r26
    22e4:	97 95       	ror	r25
    22e6:	87 95       	ror	r24
    22e8:	77 95       	ror	r23
    22ea:	67 95       	ror	r22
    22ec:	ba 95       	dec	r27
    22ee:	c9 f7       	brne	.-14     	; 0x22e2 <__ultoa_invert+0x86>
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	61 05       	cpc	r22, r1
    22f4:	71 05       	cpc	r23, r1
    22f6:	08 95       	ret
    22f8:	9b 01       	movw	r18, r22
    22fa:	ac 01       	movw	r20, r24
    22fc:	0a 2e       	mov	r0, r26
    22fe:	06 94       	lsr	r0
    2300:	57 95       	ror	r21
    2302:	47 95       	ror	r20
    2304:	37 95       	ror	r19
    2306:	27 95       	ror	r18
    2308:	ba 95       	dec	r27
    230a:	c9 f7       	brne	.-14     	; 0x22fe <__ultoa_invert+0xa2>
    230c:	62 0f       	add	r22, r18
    230e:	73 1f       	adc	r23, r19
    2310:	84 1f       	adc	r24, r20
    2312:	95 1f       	adc	r25, r21
    2314:	a0 1d       	adc	r26, r0
    2316:	08 95       	ret

00002318 <_exit>:
    2318:	f8 94       	cli

0000231a <__stop_program>:
    231a:	ff cf       	rjmp	.-2      	; 0x231a <__stop_program>
