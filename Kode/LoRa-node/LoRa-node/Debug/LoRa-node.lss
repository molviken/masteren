
LoRa-node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000450  00800100  000022fa  0000238e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000de  00800550  00800550  000027de  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000027de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000283c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  0000287c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c11  00000000  00000000  00002b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ab3  00000000  00000000  00006755  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f50  00000000  00000000  00008208  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000778  00000000  00000000  0000a158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001138  00000000  00000000  0000a8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b6f  00000000  00000000  0000ba08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000d577  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__ctors_end>
       4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
       8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
       c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      10:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      14:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      18:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      1c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      20:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      24:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      28:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      2c:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__vector_11>
      30:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      34:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      38:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      3c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      40:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      44:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      48:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      4c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      50:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      54:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      58:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      5c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      60:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      64:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      68:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      6c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      70:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      74:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      78:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      7c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      80:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      84:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      88:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      8c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      90:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      94:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      98:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      9c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      ac:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      bc:	0c 94 32 03 	jmp	0x664	; 0x664 <__vector_47>
      c0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      c4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      c8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>

000000cc <__trampolines_end>:
      cc:	6e 61       	ori	r22, 0x1E	; 30
      ce:	6e 00       	.word	0x006e	; ????

000000d0 <__c.2332>:
      d0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      e0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      f0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     100:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     110:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     120:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     130:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     140:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     150:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     160:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     170:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     180:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     190:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1a0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1b0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1c0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001ce <__ctors_end>:
     1ce:	11 24       	eor	r1, r1
     1d0:	1f be       	out	0x3f, r1	; 63
     1d2:	cf ef       	ldi	r28, 0xFF	; 255
     1d4:	d8 e0       	ldi	r29, 0x08	; 8
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	cd bf       	out	0x3d, r28	; 61

000001da <__do_copy_data>:
     1da:	15 e0       	ldi	r17, 0x05	; 5
     1dc:	a0 e0       	ldi	r26, 0x00	; 0
     1de:	b1 e0       	ldi	r27, 0x01	; 1
     1e0:	ea ef       	ldi	r30, 0xFA	; 250
     1e2:	f2 e2       	ldi	r31, 0x22	; 34
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <__do_copy_data+0x10>
     1e6:	05 90       	lpm	r0, Z+
     1e8:	0d 92       	st	X+, r0
     1ea:	a0 35       	cpi	r26, 0x50	; 80
     1ec:	b1 07       	cpc	r27, r17
     1ee:	d9 f7       	brne	.-10     	; 0x1e6 <__do_copy_data+0xc>

000001f0 <__do_clear_bss>:
     1f0:	26 e0       	ldi	r18, 0x06	; 6
     1f2:	a0 e5       	ldi	r26, 0x50	; 80
     1f4:	b5 e0       	ldi	r27, 0x05	; 5
     1f6:	01 c0       	rjmp	.+2      	; 0x1fa <.do_clear_bss_start>

000001f8 <.do_clear_bss_loop>:
     1f8:	1d 92       	st	X+, r1

000001fa <.do_clear_bss_start>:
     1fa:	ae 32       	cpi	r26, 0x2E	; 46
     1fc:	b2 07       	cpc	r27, r18
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <.do_clear_bss_loop>
     200:	0e 94 06 01 	call	0x20c	; 0x20c <main>
     204:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <_exit>

00000208 <__bad_interrupt>:
     208:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020c <main>:
	_delay_ms(100);
}


int main(void){
	MCUSR &= ~(1 << WDRF);
     20c:	84 b7       	in	r24, 0x34	; 52
     20e:	87 7f       	andi	r24, 0xF7	; 247
     210:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	a8 95       	wdr
     218:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     21c:	88 61       	ori	r24, 0x18	; 24
     21e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     222:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     226:	0f be       	out	0x3f, r0	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     228:	2f ef       	ldi	r18, 0xFF	; 255
     22a:	83 ec       	ldi	r24, 0xC3	; 195
     22c:	99 e0       	ldi	r25, 0x09	; 9
     22e:	21 50       	subi	r18, 0x01	; 1
     230:	80 40       	sbci	r24, 0x00	; 0
     232:	90 40       	sbci	r25, 0x00	; 0
     234:	e1 f7       	brne	.-8      	; 0x22e <main+0x22>
     236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x2c>
     238:	00 00       	nop
	wdt_disable();
	_delay_ms(400); // Start-up time after pressing reset button

	DDRB |= (1<<LED1) | (1<<LED2) | (1<<LED3);
     23a:	84 b1       	in	r24, 0x04	; 4
     23c:	87 60       	ori	r24, 0x07	; 7
     23e:	84 b9       	out	0x04, r24	; 4
	FSM_run();
     240:	0e 94 ff 01 	call	0x3fe	; 0x3fe <FSM_run>
	puts("Program ended");
     244:	8a ea       	ldi	r24, 0xAA	; 170
     246:	92 e0       	ldi	r25, 0x02	; 2
     248:	0e 94 cb 10 	call	0x2196	; 0x2196 <puts>
		//
		//_delay_ms(1500);
	//}
	
	return 0;
}
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	08 95       	ret

00000252 <adc_init>:




void adc_init(){
	ADMUX = 0;
     252:	ac e7       	ldi	r26, 0x7C	; 124
     254:	b0 e0       	ldi	r27, 0x00	; 0
     256:	1c 92       	st	X, r1
	ADCSRA = 0;
     258:	ea e7       	ldi	r30, 0x7A	; 122
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	10 82       	st	Z, r1
	ADMUX |= ADC_VOLTAGE_REF_AVCC;											// Sets adc voltage reference
     25e:	8c 91       	ld	r24, X
     260:	80 64       	ori	r24, 0x40	; 64
     262:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESCALAR_128;											// ADC prescaler = 128 ---> 8MHz goes to 62.5 kHz
     264:	80 81       	ld	r24, Z
     266:	86 60       	ori	r24, 0x06	; 6
     268:	80 83       	st	Z, r24
	//ADCSRA |= (0 << ADIE);												// Enables ADC interrupt
	ADCSRA |= (1 << ADEN);													// Enabling the ADC
     26a:	80 81       	ld	r24, Z
     26c:	80 68       	ori	r24, 0x80	; 128
     26e:	80 83       	st	Z, r24
     270:	08 95       	ret

00000272 <adc_read>:
}


uint16_t adc_read(){
	uint16_t val;					
	ADCSRA |= (1 << ADSC);													// Starts single conversion
     272:	ea e7       	ldi	r30, 0x7A	; 122
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	80 64       	ori	r24, 0x40	; 64
     27a:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));
     27c:	80 81       	ld	r24, Z
     27e:	84 ff       	sbrs	r24, 4
     280:	fd cf       	rjmp	.-6      	; 0x27c <adc_read+0xa>
	val = ADCW;
     282:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     286:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	if ((int)val > 1000){val = 1000;}
     28a:	89 3e       	cpi	r24, 0xE9	; 233
     28c:	23 e0       	ldi	r18, 0x03	; 3
     28e:	92 07       	cpc	r25, r18
     290:	14 f0       	brlt	.+4      	; 0x296 <adc_read+0x24>
     292:	88 ee       	ldi	r24, 0xE8	; 232
     294:	93 e0       	ldi	r25, 0x03	; 3
	return val;
}
     296:	08 95       	ret

00000298 <adc_change_channel>:

void adc_change_channel(uint8_t channel){
	ADMUX |= channel;														// Setting adc channel to be read
     298:	ec e7       	ldi	r30, 0x7C	; 124
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	90 81       	ld	r25, Z
     29e:	89 2b       	or	r24, r25
     2a0:	80 83       	st	Z, r24
	adc_read();																// Discard first measurement after channel change
     2a2:	0e 94 39 01 	call	0x272	; 0x272 <adc_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a6:	8a e1       	ldi	r24, 0x1A	; 26
     2a8:	8a 95       	dec	r24
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <adc_change_channel+0x10>
     2ac:	00 c0       	rjmp	.+0      	; 0x2ae <adc_change_channel+0x16>
     2ae:	08 95       	ret

000002b0 <board_charge>:
	DDRB |= (1 << PORTB1);
	DDRB |= (1 << PORTB2);
}

void board_charge(int off){
	if (off){
     2b0:	89 2b       	or	r24, r25
     2b2:	11 f0       	breq	.+4      	; 0x2b8 <board_charge+0x8>
		set_bit(PORTD, PORTD4);
     2b4:	5c 9a       	sbi	0x0b, 4	; 11
     2b6:	08 95       	ret
	}
	else {
		clear_bit(PORTD, PORTD4);
     2b8:	5c 98       	cbi	0x0b, 4	; 11
     2ba:	08 95       	ret

000002bc <board_setup>:
	}
}

void board_setup(uint8_t *joined_err){
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	ec 01       	movw	r28, r24
	#ifndef LORA_NODE
	USART_init();
	#endif
	adc_init();
     2c2:	0e 94 29 01 	call	0x252	; 0x252 <adc_init>

static void board_dmy_btn_init();
static void board_gpio_init();

void board_dmy_btn_init(void){
	DDRD &= ~(1 << DDD3);     // Clear the PD2 pin
     2c6:	53 98       	cbi	0x0a, 3	; 10
	EICRA |= (1 << ISC11);    // set INT1 to trigger on falling edge
     2c8:	e9 e6       	ldi	r30, 0x69	; 105
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	88 60       	ori	r24, 0x08	; 8
     2d0:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);     // Turns on INT1
     2d2:	e9 9a       	sbi	0x1d, 1	; 29
}

void board_gpio_init(void){
	DDRD |= (1 << DDRD4);	  // Set PD4 as output
     2d4:	54 9a       	sbi	0x0a, 4	; 10
	DDRB |= (1 << PORTB0);
     2d6:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= (1 << PORTB1);
     2d8:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= (1 << PORTB2);
     2da:	22 9a       	sbi	0x04, 2	; 4
	USART_init();
	#endif
	adc_init();
	board_dmy_btn_init();
	board_gpio_init();
	board_charge(0);
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <board_charge>
	#ifdef LORA_NODE
		lora_init(joined_err);
     2e4:	ce 01       	movw	r24, r28
     2e6:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <lora_init>
	#else
		*joined_err = 0;
	#endif

	i2c_init();
     2ea:	0e 94 7e 03 	call	0x6fc	; 0x6fc <i2c_init>
	INA219_init();
     2ee:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <INA219_init>
	timers_init();
     2f2:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <timers_init>
	sei();
     2f6:	78 94       	sei
}
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <board_get_battery_level>:
	
	r1 = 174;
	r2 = 255;
	battery_max = 4.2;
	
	adc_change_channel(VBAT);
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0e 94 4c 01 	call	0x298	; 0x298 <adc_change_channel>
	val = adc_read();
     304:	0e 94 39 01 	call	0x272	; 0x272 <adc_read>
	
	v_div_tick = (((r2)/(r1+r2))*battery_max) / 1024;
	vbat = v_div_tick*val*(r1+r2)/r2;
	bat_percentage = vbat*100/battery_max;
	
	return bat_percentage;
     308:	bc 01       	movw	r22, r24
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__floatunsisf>
     312:	26 eb       	ldi	r18, 0xB6	; 182
     314:	36 ec       	ldi	r19, 0xC6	; 198
     316:	4f e1       	ldi	r20, 0x1F	; 31
     318:	5b e3       	ldi	r21, 0x3B	; 59
     31a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__mulsf3>
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e8       	ldi	r19, 0x80	; 128
     322:	46 ed       	ldi	r20, 0xD6	; 214
     324:	53 e4       	ldi	r21, 0x43	; 67
     326:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__mulsf3>
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	4f e7       	ldi	r20, 0x7F	; 127
     330:	53 e4       	ldi	r21, 0x43	; 67
     332:	0e 94 bd 0c 	call	0x197a	; 0x197a <__divsf3>
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	48 ec       	ldi	r20, 0xC8	; 200
     33c:	52 e4       	ldi	r21, 0x42	; 66
     33e:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__mulsf3>
     342:	26 e6       	ldi	r18, 0x66	; 102
     344:	36 e6       	ldi	r19, 0x66	; 102
     346:	46 e8       	ldi	r20, 0x86	; 134
     348:	50 e4       	ldi	r21, 0x40	; 64
     34a:	0e 94 bd 0c 	call	0x197a	; 0x197a <__divsf3>
     34e:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__fixsfsi>
     352:	86 2f       	mov	r24, r22
     354:	08 95       	ret

00000356 <FSM_system_reset>:
	#ifdef DEBUG_M
	puts("Init complete, FSM running");
	#endif
}
void FSM_system_reset(){
	cli();	
     356:	f8 94       	cli
	WDTCSR = 0x00;
     358:	e0 e6       	ldi	r30, 0x60	; 96
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	10 82       	st	Z, r1
	WDTCSR = (1<<WDE);
     35e:	88 e0       	ldi	r24, 0x08	; 8
     360:	80 83       	st	Z, r24
     362:	08 95       	ret

00000364 <FSM_assert_downlink>:
}
void FSM_assert_downlink(){
	uint32_t ts = 0;
	uint16_t sample_size_new;
	size_t str_len = strlen(downlink);
     364:	e3 e5       	ldi	r30, 0x53	; 83
     366:	f5 e0       	ldi	r31, 0x05	; 5
     368:	01 90       	ld	r0, Z+
     36a:	00 20       	and	r0, r0
     36c:	e9 f7       	brne	.-6      	; 0x368 <FSM_assert_downlink+0x4>
     36e:	31 97       	sbiw	r30, 0x01	; 1
     370:	bf 01       	movw	r22, r30
     372:	63 55       	subi	r22, 0x53	; 83
     374:	75 40       	sbci	r23, 0x05	; 5
	#ifdef LORA_NODE
		if (str_len > 28) ascii_hex_decode(downlink, str_len, downlink_pairs, LORA_RX_PAYLOAD_OFFSET);
     376:	6d 31       	cpi	r22, 0x1D	; 29
     378:	71 05       	cpc	r23, r1
     37a:	48 f0       	brcs	.+18     	; 0x38e <FSM_assert_downlink+0x2a>
     37c:	29 e0       	ldi	r18, 0x09	; 9
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	4d eb       	ldi	r20, 0xBD	; 189
     382:	55 e0       	ldi	r21, 0x05	; 5
     384:	83 e5       	ldi	r24, 0x53	; 83
     386:	95 e0       	ldi	r25, 0x05	; 5
     388:	0e 94 12 08 	call	0x1024	; 0x1024 <ascii_hex_decode>
     38c:	08 c0       	rjmp	.+16     	; 0x39e <FSM_assert_downlink+0x3a>
		else hex_decode(downlink, str_len, downlink_pairs, LORA_RX_PAYLOAD_OFFSET);
     38e:	29 e0       	ldi	r18, 0x09	; 9
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	4d eb       	ldi	r20, 0xBD	; 189
     394:	55 e0       	ldi	r21, 0x05	; 5
     396:	83 e5       	ldi	r24, 0x53	; 83
     398:	95 e0       	ldi	r25, 0x05	; 5
     39a:	0e 94 89 08 	call	0x1112	; 0x1112 <hex_decode>
	
	#else
		hex_decode(downlink, str_len, downlink_pairs, 0);
	#endif
	//printf("%02X %02X %02X\n", downlink_pairs[0], downlink_pairs[1], downlink_pairs[2]);
	switch (downlink_pairs[0]){
     39e:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <downlink_pairs>
     3a2:	82 32       	cpi	r24, 0x22	; 34
     3a4:	e1 f0       	breq	.+56     	; 0x3de <FSM_assert_downlink+0x7a>
     3a6:	89 39       	cpi	r24, 0x99	; 153
     3a8:	39 f1       	breq	.+78     	; 0x3f8 <FSM_assert_downlink+0x94>
     3aa:	81 31       	cpi	r24, 0x11	; 17
     3ac:	39 f5       	brne	.+78     	; 0x3fc <FSM_assert_downlink+0x98>
		case 0x11:
			ts = (uint32_t)downlink_pairs[4] | ((uint32_t)downlink_pairs[3] << 8) | ((uint32_t)downlink_pairs[2] << 16) | ((uint32_t)downlink_pairs[1] << 24);
     3ae:	ed eb       	ldi	r30, 0xBD	; 189
     3b0:	f5 e0       	ldi	r31, 0x05	; 5
     3b2:	23 81       	ldd	r18, Z+3	; 0x03
     3b4:	82 81       	ldd	r24, Z+2	; 0x02
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	a0 e0       	ldi	r26, 0x00	; 0
     3ba:	b0 e0       	ldi	r27, 0x00	; 0
     3bc:	dc 01       	movw	r26, r24
     3be:	99 27       	eor	r25, r25
     3c0:	88 27       	eor	r24, r24
     3c2:	92 2b       	or	r25, r18
     3c4:	24 81       	ldd	r18, Z+4	; 0x04
     3c6:	82 2b       	or	r24, r18
     3c8:	21 81       	ldd	r18, Z+1	; 0x01
     3ca:	b2 2b       	or	r27, r18
			current_time = ts;
     3cc:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <current_time>
     3d0:	90 93 b8 05 	sts	0x05B8, r25	; 0x8005b8 <current_time+0x1>
     3d4:	a0 93 b9 05 	sts	0x05B9, r26	; 0x8005b9 <current_time+0x2>
     3d8:	b0 93 ba 05 	sts	0x05BA, r27	; 0x8005ba <current_time+0x3>
			break;
     3dc:	08 95       	ret
		
		case 0x22:
			sample_size_new = (uint16_t)downlink_pairs[2] | ((uint16_t)downlink_pairs[1] << 8);
     3de:	ed eb       	ldi	r30, 0xBD	; 189
     3e0:	f5 e0       	ldi	r31, 0x05	; 5
			sample_size = sample_size_new;
     3e2:	81 81       	ldd	r24, Z+1	; 0x01
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	98 2f       	mov	r25, r24
     3e8:	88 27       	eor	r24, r24
     3ea:	22 81       	ldd	r18, Z+2	; 0x02
     3ec:	82 2b       	or	r24, r18
     3ee:	90 93 bc 05 	sts	0x05BC, r25	; 0x8005bc <sample_size+0x1>
     3f2:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <sample_size>
			break;
     3f6:	08 95       	ret
		
		case 0x99:
			FSM_system_reset();
     3f8:	0e 94 ab 01 	call	0x356	; 0x356 <FSM_system_reset>
     3fc:	08 95       	ret

000003fe <FSM_run>:
			break;
	}
}

void FSM_run(void){
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	63 97       	sbiw	r28, 0x13	; 19
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	cd bf       	out	0x3d, r28	; 61
	data_receive_flag = 0;
     412:	10 92 23 06 	sts	0x0623, r1	; 0x800623 <data_receive_flag>
	sample_size = BOARD_SAMPLE_SIZE;
     416:	8c e3       	ldi	r24, 0x3C	; 60
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	90 93 bc 05 	sts	0x05BC, r25	; 0x8005bc <sample_size+0x1>
     41e:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <sample_size>
	board_t board1 = {0, 100, {0, 0, 0, 0}, 0, sample_size, ""};
     422:	19 82       	std	Y+1, r1	; 0x01
     424:	24 e6       	ldi	r18, 0x64	; 100
     426:	2a 83       	std	Y+2, r18	; 0x02
     428:	1c 82       	std	Y+4, r1	; 0x04
     42a:	1b 82       	std	Y+3, r1	; 0x03
     42c:	1e 82       	std	Y+6, r1	; 0x06
     42e:	1d 82       	std	Y+5, r1	; 0x05
     430:	1f 82       	std	Y+7, r1	; 0x07
     432:	18 86       	std	Y+8, r1	; 0x08
     434:	19 86       	std	Y+9, r1	; 0x09
     436:	1a 86       	std	Y+10, r1	; 0x0a
     438:	1b 86       	std	Y+11, r1	; 0x0b
     43a:	1c 86       	std	Y+12, r1	; 0x0c
     43c:	1d 86       	std	Y+13, r1	; 0x0d
     43e:	1e 86       	std	Y+14, r1	; 0x0e
     440:	1f 86       	std	Y+15, r1	; 0x0f
     442:	99 8b       	std	Y+17, r25	; 0x11
     444:	88 8b       	std	Y+16, r24	; 0x10
     446:	81 eb       	ldi	r24, 0xB1	; 177
     448:	93 e0       	ldi	r25, 0x03	; 3
     44a:	9b 8b       	std	Y+19, r25	; 0x13
     44c:	8a 8b       	std	Y+18, r24	; 0x12
		
	int rejoin_attempts = 0;
     44e:	00 e0       	ldi	r16, 0x00	; 0
     450:	10 e0       	ldi	r17, 0x00	; 0
				#else
				//_delay_ms(1000);
				enter_powerSave();
				#endif
				if(board1.lora_joined_err) nextState = ST_NOT_JOINED;
				else nextState = ST_ACTIVE;
     452:	68 94       	set
     454:	ff 24       	eor	r15, r15
     456:	f1 f8       	bld	r15, 1
				_delay_ms(1000);
				#else
				//_delay_ms(1000);
				enter_powerSave();
				#endif
				if(board1.lora_joined_err) nextState = ST_NOT_JOINED;
     458:	0f 2e       	mov	r0, r31
     45a:	f3 e0       	ldi	r31, 0x03	; 3
     45c:	df 2e       	mov	r13, r31
     45e:	f0 2d       	mov	r31, r0
					#endif
					free(board1.msg);
					board1.ina219.bus_voltage_avg = 0;
					board1.ina219.current_avg = 0;
				}
				nextState = ST_SLEEP;
     460:	ee 24       	eor	r14, r14
     462:	e3 94       	inc	r14
		
	int rejoin_attempts = 0;
	uint8_t lora_wait_rejoin_minutes = 3;
	
	while (1){
		if (data_receive_flag){
     464:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <data_receive_flag>
     468:	88 23       	and	r24, r24
     46a:	21 f0       	breq	.+8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
			data_receive_flag = 0;
     46c:	10 92 23 06 	sts	0x0623, r1	; 0x800623 <data_receive_flag>
			FSM_assert_downlink();
     470:	0e 94 b2 01 	call	0x364	; 0x364 <FSM_assert_downlink>
			
		}
		if (tx_test_flag){
     474:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <__data_end>
     478:	88 23       	and	r24, r24
     47a:	51 f0       	breq	.+20     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
			tx_test_flag = 0;
     47c:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <__data_end>
			printf("Transmit test\n");
     480:	88 eb       	ldi	r24, 0xB8	; 184
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	0e 94 cb 10 	call	0x2196	; 0x2196 <puts>
			#ifdef LORA_NODE
				lora_transmit("025403210876");
     488:	86 ec       	ldi	r24, 0xC6	; 198
     48a:	92 e0       	ldi	r25, 0x02	; 2
     48c:	0e 94 02 07 	call	0xe04	; 0xe04 <lora_transmit>
			#else
				USART_putstring2("025403210876");
			#endif
		}
		switch (nextState){
     490:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <nextState>
     494:	81 30       	cpi	r24, 0x01	; 1
     496:	09 f4       	brne	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     498:	d4 c0       	rjmp	.+424    	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
     49a:	28 f0       	brcs	.+10     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     49c:	82 30       	cpi	r24, 0x02	; 2
     49e:	41 f1       	breq	.+80     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4a0:	83 30       	cpi	r24, 0x03	; 3
     4a2:	71 f0       	breq	.+28     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4a4:	df cf       	rjmp	.-66     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
static volatile int rec_flag = 0;
static void FSM_system_init(uint8_t *joined_flag);
static uint8_t tx_test_flag;

void FSM_system_init(uint8_t *joined_flag){
	board_setup(joined_flag);
     4a6:	ce 01       	movw	r24, r28
     4a8:	0f 96       	adiw	r24, 0x0f	; 15
     4aa:	0e 94 5e 01 	call	0x2bc	; 0x2bc <board_setup>
		}
		switch (nextState){
			
			case ST_INIT:
				FSM_system_init(&board1.lora_joined_err);
				if (board1.lora_joined_err) nextState = ST_NOT_JOINED;
     4ae:	8f 85       	ldd	r24, Y+15	; 0x0f
     4b0:	88 23       	and	r24, r24
     4b2:	19 f0       	breq	.+6      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4b4:	d0 92 52 05 	sts	0x0552, r13	; 0x800552 <nextState>
     4b8:	d5 cf       	rjmp	.-86     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				else nextState = ST_ACTIVE;
     4ba:	f0 92 52 05 	sts	0x0552, r15	; 0x800552 <nextState>
     4be:	d2 cf       	rjmp	.-92     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				break;
			
			case ST_NOT_JOINED:
				set_bit(LEDS,LED1);
     4c0:	28 9a       	sbi	0x05, 0	; 5
				#ifdef DEBUG_M
					puts("Not joined");
				#endif
				
				rejoin_attempts++;
     4c2:	0f 5f       	subi	r16, 0xFF	; 255
     4c4:	1f 4f       	sbci	r17, 0xFF	; 255
				if (rejoin_attempts < 3) board1.lora_joined_err = lora_join_OTAA();
     4c6:	03 30       	cpi	r16, 0x03	; 3
     4c8:	11 05       	cpc	r17, r1
     4ca:	24 f4       	brge	.+8      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4cc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <lora_join_OTAA>
     4d0:	8f 87       	std	Y+15, r24	; 0x0f
     4d2:	05 c0       	rjmp	.+10     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
				else if (rejoin_attempts >= lora_wait_rejoin_minutes*60) rejoin_attempts = 0;
     4d4:	04 3b       	cpi	r16, 0xB4	; 180
     4d6:	11 05       	cpc	r17, r1
     4d8:	14 f0       	brlt	.+4      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4da:	00 e0       	ldi	r16, 0x00	; 0
     4dc:	10 e0       	ldi	r17, 0x00	; 0
				
				
				if(board1.lora_joined_err) nextState = ST_ACTIVE;
     4de:	8f 85       	ldd	r24, Y+15	; 0x0f
     4e0:	88 23       	and	r24, r24
     4e2:	19 f0       	breq	.+6      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4e4:	f0 92 52 05 	sts	0x0552, r15	; 0x800552 <nextState>
     4e8:	bd cf       	rjmp	.-134    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				else nextState = ST_SLEEP;
     4ea:	e0 92 52 05 	sts	0x0552, r14	; 0x800552 <nextState>
     4ee:	ba cf       	rjmp	.-140    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				break;
		
			case ST_ACTIVE:
				clear_bit(LEDS,LED1);
     4f0:	28 98       	cbi	0x05, 0	; 5
				PORTB ^= (1<<LED2);
     4f2:	85 b1       	in	r24, 0x05	; 5
     4f4:	8f 25       	eor	r24, r15
     4f6:	85 b9       	out	0x05, r24	; 5
				#ifdef DEBUG_M
					puts("Active");
				#endif
				board1.ina219.bus_voltage_avg	+= INA219_readBusVoltageReg();
     4f8:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <INA219_readBusVoltageReg>
     4fc:	09 2e       	mov	r0, r25
     4fe:	00 0c       	add	r0, r0
     500:	aa 0b       	sbc	r26, r26
     502:	bb 0b       	sbc	r27, r27
     504:	4f 81       	ldd	r20, Y+7	; 0x07
     506:	58 85       	ldd	r21, Y+8	; 0x08
     508:	69 85       	ldd	r22, Y+9	; 0x09
     50a:	7a 85       	ldd	r23, Y+10	; 0x0a
     50c:	84 0f       	add	r24, r20
     50e:	95 1f       	adc	r25, r21
     510:	a6 1f       	adc	r26, r22
     512:	b7 1f       	adc	r27, r23
     514:	8f 83       	std	Y+7, r24	; 0x07
     516:	98 87       	std	Y+8, r25	; 0x08
     518:	a9 87       	std	Y+9, r26	; 0x09
     51a:	ba 87       	std	Y+10, r27	; 0x0a
				board1.ina219.current_avg		+= INA219_readCurrentReg();
     51c:	0e 94 af 04 	call	0x95e	; 0x95e <INA219_readCurrentReg>
     520:	4b 85       	ldd	r20, Y+11	; 0x0b
     522:	5c 85       	ldd	r21, Y+12	; 0x0c
     524:	6d 85       	ldd	r22, Y+13	; 0x0d
     526:	7e 85       	ldd	r23, Y+14	; 0x0e
     528:	48 0f       	add	r20, r24
     52a:	59 1f       	adc	r21, r25
     52c:	61 1d       	adc	r22, r1
     52e:	71 1d       	adc	r23, r1
     530:	4b 87       	std	Y+11, r20	; 0x0b
     532:	5c 87       	std	Y+12, r21	; 0x0c
     534:	6d 87       	std	Y+13, r22	; 0x0d
     536:	7e 87       	std	Y+14, r23	; 0x0e
				board1.batteryLevel = board_get_battery_level();
     538:	0e 94 7f 01 	call	0x2fe	; 0x2fe <board_get_battery_level>
     53c:	8a 83       	std	Y+2, r24	; 0x02
				board1.sample_size = sample_size;
     53e:	20 91 bb 05 	lds	r18, 0x05BB	; 0x8005bb <sample_size>
     542:	30 91 bc 05 	lds	r19, 0x05BC	; 0x8005bc <sample_size+0x1>
     546:	39 8b       	std	Y+17, r19	; 0x11
     548:	28 8b       	std	Y+16, r18	; 0x10
				if (board1.batteryLevel < 70) board_charge(BOARD_CHARGE_ON);
     54a:	86 34       	cpi	r24, 0x46	; 70
     54c:	28 f4       	brcc	.+10     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 58 01 	call	0x2b0	; 0x2b0 <board_charge>
     556:	06 c0       	rjmp	.+12     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
				else if (board1.batteryLevel > 95) board_charge(BOARD_CHARGE_OFF);
     558:	80 36       	cpi	r24, 0x60	; 96
     55a:	20 f0       	brcs	.+8      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 58 01 	call	0x2b0	; 0x2b0 <board_charge>
				if(!(current_time%board1.sample_size) && (current_time != 0)){
     564:	60 91 b7 05 	lds	r22, 0x05B7	; 0x8005b7 <current_time>
     568:	70 91 b8 05 	lds	r23, 0x05B8	; 0x8005b8 <current_time+0x1>
     56c:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <current_time+0x2>
     570:	90 91 ba 05 	lds	r25, 0x05BA	; 0x8005ba <current_time+0x3>
     574:	88 88       	ldd	r8, Y+16	; 0x10
     576:	99 88       	ldd	r9, Y+17	; 0x11
     578:	a1 2c       	mov	r10, r1
     57a:	b1 2c       	mov	r11, r1
     57c:	a5 01       	movw	r20, r10
     57e:	94 01       	movw	r18, r8
     580:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__udivmodsi4>
     584:	67 2b       	or	r22, r23
     586:	68 2b       	or	r22, r24
     588:	69 2b       	or	r22, r25
     58a:	09 f0       	breq	.+2      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
     58c:	57 c0       	rjmp	.+174    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     58e:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <current_time>
     592:	90 91 b8 05 	lds	r25, 0x05B8	; 0x8005b8 <current_time+0x1>
     596:	a0 91 b9 05 	lds	r26, 0x05B9	; 0x8005b9 <current_time+0x2>
     59a:	b0 91 ba 05 	lds	r27, 0x05BA	; 0x8005ba <current_time+0x3>
     59e:	89 2b       	or	r24, r25
     5a0:	8a 2b       	or	r24, r26
     5a2:	8b 2b       	or	r24, r27
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
     5a6:	4a c0       	rjmp	.+148    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
					#ifdef DEBUG_M
						puts("It's time");
					#endif
					if (frame_counter == 0xFF) frame_counter = 0;
     5a8:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <frame_counter>
     5ac:	8f 3f       	cpi	r24, 0xFF	; 255
     5ae:	11 f4       	brne	.+4      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
     5b0:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <frame_counter>
					board1.frame_counter = frame_counter++;
     5b4:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <frame_counter>
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	98 0f       	add	r25, r24
     5bc:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <frame_counter>
     5c0:	89 83       	std	Y+1, r24	; 0x01
					board1.ina219.bus_voltage	= board1.ina219.bus_voltage_avg / board1.sample_size;
     5c2:	6f 81       	ldd	r22, Y+7	; 0x07
     5c4:	78 85       	ldd	r23, Y+8	; 0x08
     5c6:	89 85       	ldd	r24, Y+9	; 0x09
     5c8:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ca:	a5 01       	movw	r20, r10
     5cc:	94 01       	movw	r18, r8
     5ce:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__udivmodsi4>
     5d2:	3c 83       	std	Y+4, r19	; 0x04
     5d4:	2b 83       	std	Y+3, r18	; 0x03
					board1.ina219.current		= board1.ina219.current_avg / board1.sample_size;
     5d6:	6b 85       	ldd	r22, Y+11	; 0x0b
     5d8:	7c 85       	ldd	r23, Y+12	; 0x0c
     5da:	8d 85       	ldd	r24, Y+13	; 0x0d
     5dc:	9e 85       	ldd	r25, Y+14	; 0x0e
     5de:	a5 01       	movw	r20, r10
     5e0:	94 01       	movw	r18, r8
     5e2:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__udivmodsi4>
     5e6:	3e 83       	std	Y+6, r19	; 0x06
     5e8:	2d 83       	std	Y+5, r18	; 0x05
					board1.msg = hex_encode(board1);
     5ea:	8d b7       	in	r24, 0x3d	; 61
     5ec:	9e b7       	in	r25, 0x3e	; 62
     5ee:	43 97       	sbiw	r24, 0x13	; 19
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	9e bf       	out	0x3e, r25	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	8d bf       	out	0x3d, r24	; 61
     5fa:	ad b7       	in	r26, 0x3d	; 61
     5fc:	be b7       	in	r27, 0x3e	; 62
     5fe:	11 96       	adiw	r26, 0x01	; 1
     600:	83 e1       	ldi	r24, 0x13	; 19
     602:	fe 01       	movw	r30, r28
     604:	31 96       	adiw	r30, 0x01	; 1
     606:	01 90       	ld	r0, Z+
     608:	0d 92       	st	X+, r0
     60a:	8a 95       	dec	r24
     60c:	e1 f7       	brne	.-8      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
     60e:	0e 94 b9 08 	call	0x1172	; 0x1172 <hex_encode>
     612:	9b 8b       	std	Y+19, r25	; 0x13
     614:	8a 8b       	std	Y+18, r24	; 0x12
						puts(board1.msg);
					#else 
						#ifdef DEBUG_M
						puts(board1.msg);
						#endif
						lora_transmit(board1.msg);
     616:	0e 94 02 07 	call	0xe04	; 0xe04 <lora_transmit>
					#endif
					free(board1.msg);
     61a:	8a 89       	ldd	r24, Y+18	; 0x12
     61c:	9b 89       	ldd	r25, Y+19	; 0x13
     61e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <free>
					board1.ina219.bus_voltage_avg = 0;
     622:	1f 82       	std	Y+7, r1	; 0x07
     624:	18 86       	std	Y+8, r1	; 0x08
     626:	19 86       	std	Y+9, r1	; 0x09
     628:	1a 86       	std	Y+10, r1	; 0x0a
					board1.ina219.current_avg = 0;
     62a:	1b 86       	std	Y+11, r1	; 0x0b
     62c:	1c 86       	std	Y+12, r1	; 0x0c
     62e:	1d 86       	std	Y+13, r1	; 0x0d
     630:	1e 86       	std	Y+14, r1	; 0x0e
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
				}
				nextState = ST_SLEEP;
     63c:	e0 92 52 05 	sts	0x0552, r14	; 0x800552 <nextState>
				break;
     640:	11 cf       	rjmp	.-478    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     642:	8f e9       	ldi	r24, 0x9F	; 159
     644:	9f e0       	ldi	r25, 0x0F	; 15
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	f1 f7       	brne	.-4      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
     64c:	00 00       	nop
				
				#ifndef TIMER2
				_delay_ms(1000);
				#else
				//_delay_ms(1000);
				enter_powerSave();
     64e:	0e 94 fd 07 	call	0xffa	; 0xffa <enter_powerSave>
				#endif
				if(board1.lora_joined_err) nextState = ST_NOT_JOINED;
     652:	8f 85       	ldd	r24, Y+15	; 0x0f
     654:	88 23       	and	r24, r24
     656:	19 f0       	breq	.+6      	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
     658:	d0 92 52 05 	sts	0x0552, r13	; 0x800552 <nextState>
     65c:	03 cf       	rjmp	.-506    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				else nextState = ST_ACTIVE;
     65e:	f0 92 52 05 	sts	0x0552, r15	; 0x800552 <nextState>
     662:	00 cf       	rjmp	.-512    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>

00000664 <__vector_47>:
//{	
	////tx_test_flag = 1;
	//puts("button pressed");
//}

ISR (USART2_RX_vect){
     664:	1f 92       	push	r1
     666:	0f 92       	push	r0
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	0f 92       	push	r0
     66c:	11 24       	eor	r1, r1
     66e:	2f 93       	push	r18
     670:	3f 93       	push	r19
     672:	4f 93       	push	r20
     674:	5f 93       	push	r21
     676:	6f 93       	push	r22
     678:	7f 93       	push	r23
     67a:	8f 93       	push	r24
     67c:	9f 93       	push	r25
     67e:	af 93       	push	r26
     680:	bf 93       	push	r27
     682:	ef 93       	push	r30
     684:	ff 93       	push	r31
	USART_receiveString2();
     686:	0e 94 a5 07 	call	0xf4a	; 0xf4a <USART_receiveString2>
	data_receive_flag = 1;
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <data_receive_flag>
}
     690:	ff 91       	pop	r31
     692:	ef 91       	pop	r30
     694:	bf 91       	pop	r27
     696:	af 91       	pop	r26
     698:	9f 91       	pop	r25
     69a:	8f 91       	pop	r24
     69c:	7f 91       	pop	r23
     69e:	6f 91       	pop	r22
     6a0:	5f 91       	pop	r21
     6a2:	4f 91       	pop	r20
     6a4:	3f 91       	pop	r19
     6a6:	2f 91       	pop	r18
     6a8:	0f 90       	pop	r0
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	0f 90       	pop	r0
     6ae:	1f 90       	pop	r1
     6b0:	18 95       	reti

000006b2 <__vector_11>:


ISR(TIMER2_OVF_vect){
     6b2:	1f 92       	push	r1
     6b4:	0f 92       	push	r0
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	0f 92       	push	r0
     6ba:	11 24       	eor	r1, r1
     6bc:	8f 93       	push	r24
     6be:	9f 93       	push	r25
     6c0:	af 93       	push	r26
     6c2:	bf 93       	push	r27
	//puts("s");
	current_time ++;
     6c4:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <current_time>
     6c8:	90 91 b8 05 	lds	r25, 0x05B8	; 0x8005b8 <current_time+0x1>
     6cc:	a0 91 b9 05 	lds	r26, 0x05B9	; 0x8005b9 <current_time+0x2>
     6d0:	b0 91 ba 05 	lds	r27, 0x05BA	; 0x8005ba <current_time+0x3>
     6d4:	01 96       	adiw	r24, 0x01	; 1
     6d6:	a1 1d       	adc	r26, r1
     6d8:	b1 1d       	adc	r27, r1
     6da:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <current_time>
     6de:	90 93 b8 05 	sts	0x05B8, r25	; 0x8005b8 <current_time+0x1>
     6e2:	a0 93 b9 05 	sts	0x05B9, r26	; 0x8005b9 <current_time+0x2>
     6e6:	b0 93 ba 05 	sts	0x05BA, r27	; 0x8005ba <current_time+0x3>
     6ea:	bf 91       	pop	r27
     6ec:	af 91       	pop	r26
     6ee:	9f 91       	pop	r25
     6f0:	8f 91       	pop	r24
     6f2:	0f 90       	pop	r0
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	0f 90       	pop	r0
     6f8:	1f 90       	pop	r1
     6fa:	18 95       	reti

000006fc <i2c_init>:
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address){
    return i2c_start( address );

}
     6fc:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     700:	80 e2       	ldi	r24, 0x20	; 32
     702:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     706:	08 95       	ret

00000708 <i2c_sync>:
     708:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     70c:	88 23       	and	r24, r24
     70e:	bc f0       	brlt	.+46     	; 0x73e <i2c_sync+0x36>
     710:	24 e6       	ldi	r18, 0x64	; 100
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	ec ed       	ldi	r30, 0xDC	; 220
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	8a 95       	dec	r24
     71c:	f1 f7       	brne	.-4      	; 0x71a <i2c_sync+0x12>
     71e:	00 c0       	rjmp	.+0      	; 0x720 <i2c_sync+0x18>
     720:	21 50       	subi	r18, 0x01	; 1
     722:	31 09       	sbc	r19, r1
     724:	80 81       	ld	r24, Z
     726:	88 23       	and	r24, r24
     728:	24 f0       	brlt	.+8      	; 0x732 <i2c_sync+0x2a>
     72a:	21 15       	cp	r18, r1
     72c:	31 05       	cpc	r19, r1
     72e:	a1 f7       	brne	.-24     	; 0x718 <i2c_sync+0x10>
     730:	03 c0       	rjmp	.+6      	; 0x738 <i2c_sync+0x30>
     732:	21 15       	cp	r18, r1
     734:	31 05       	cpc	r19, r1
     736:	29 f4       	brne	.+10     	; 0x742 <i2c_sync+0x3a>
     738:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     73c:	02 c0       	rjmp	.+4      	; 0x742 <i2c_sync+0x3a>
     73e:	24 e6       	ldi	r18, 0x64	; 100
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	23 2b       	or	r18, r19
     746:	09 f4       	brne	.+2      	; 0x74a <i2c_sync+0x42>
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	08 95       	ret

0000074c <i2c_waitStop>:
     74c:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     750:	84 ff       	sbrs	r24, 4
     752:	17 c0       	rjmp	.+46     	; 0x782 <i2c_waitStop+0x36>
     754:	24 e6       	ldi	r18, 0x64	; 100
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	ec ed       	ldi	r30, 0xDC	; 220
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	82 e0       	ldi	r24, 0x02	; 2
     75e:	8a 95       	dec	r24
     760:	f1 f7       	brne	.-4      	; 0x75e <i2c_waitStop+0x12>
     762:	00 c0       	rjmp	.+0      	; 0x764 <i2c_waitStop+0x18>
     764:	21 50       	subi	r18, 0x01	; 1
     766:	31 09       	sbc	r19, r1
     768:	80 81       	ld	r24, Z
     76a:	84 ff       	sbrs	r24, 4
     76c:	04 c0       	rjmp	.+8      	; 0x776 <i2c_waitStop+0x2a>
     76e:	21 15       	cp	r18, r1
     770:	31 05       	cpc	r19, r1
     772:	a1 f7       	brne	.-24     	; 0x75c <i2c_waitStop+0x10>
     774:	03 c0       	rjmp	.+6      	; 0x77c <i2c_waitStop+0x30>
     776:	21 15       	cp	r18, r1
     778:	31 05       	cpc	r19, r1
     77a:	29 f4       	brne	.+10     	; 0x786 <i2c_waitStop+0x3a>
     77c:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     780:	02 c0       	rjmp	.+4      	; 0x786 <i2c_waitStop+0x3a>
     782:	24 e6       	ldi	r18, 0x64	; 100
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	23 2b       	or	r18, r19
     78a:	09 f4       	brne	.+2      	; 0x78e <i2c_waitStop+0x42>
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	08 95       	ret

00000790 <i2c_start>:
     790:	cf 93       	push	r28
     792:	c8 2f       	mov	r28, r24
     794:	84 ea       	ldi	r24, 0xA4	; 164
     796:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     79a:	0e 94 84 03 	call	0x708	; 0x708 <i2c_sync>
     79e:	88 23       	and	r24, r24
     7a0:	e9 f0       	breq	.+58     	; 0x7dc <i2c_start+0x4c>
     7a2:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     7a6:	88 7f       	andi	r24, 0xF8	; 248
     7a8:	88 30       	cpi	r24, 0x08	; 8
     7aa:	11 f0       	breq	.+4      	; 0x7b0 <i2c_start+0x20>
     7ac:	80 31       	cpi	r24, 0x10	; 16
     7ae:	99 f4       	brne	.+38     	; 0x7d6 <i2c_start+0x46>
     7b0:	c0 93 db 00 	sts	0x00DB, r28	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
     7b4:	84 e8       	ldi	r24, 0x84	; 132
     7b6:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     7ba:	0e 94 84 03 	call	0x708	; 0x708 <i2c_sync>
     7be:	88 23       	and	r24, r24
     7c0:	69 f0       	breq	.+26     	; 0x7dc <i2c_start+0x4c>
     7c2:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     7c6:	98 7f       	andi	r25, 0xF8	; 248
     7c8:	98 31       	cpi	r25, 0x18	; 24
     7ca:	39 f0       	breq	.+14     	; 0x7da <i2c_start+0x4a>
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	90 34       	cpi	r25, 0x40	; 64
     7d0:	29 f4       	brne	.+10     	; 0x7dc <i2c_start+0x4c>
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	03 c0       	rjmp	.+6      	; 0x7dc <i2c_start+0x4c>
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	01 c0       	rjmp	.+2      	; 0x7dc <i2c_start+0x4c>
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <i2c_stop>:
/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void){
    /* send stop condition */
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     7e0:	84 e9       	ldi	r24, 0x94	; 148
     7e2:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	
	// wait until stop condition is executed and bus released
	i2c_waitStop(); 
     7e6:	0e 94 a6 03 	call	0x74c	; 0x74c <i2c_waitStop>
     7ea:	08 95       	ret

000007ec <i2c_write>:
*************************************************************************/
unsigned char i2c_write( unsigned char data ){	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR1 = data;
     7ec:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	TWCR1 = (1<<TWINT) | (1<<TWEN);
     7f0:	84 e8       	ldi	r24, 0x84	; 132
     7f2:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

	// wait until transmission completed
	i2c_sync();
     7f6:	0e 94 84 03 	call	0x708	; 0x708 <i2c_sync>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     7fa:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     7fe:	98 7f       	andi	r25, 0xF8	; 248
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	98 32       	cpi	r25, 0x28	; 40
     804:	09 f4       	brne	.+2      	; 0x808 <i2c_write+0x1c>
     806:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}
     808:	08 95       	ret

0000080a <i2c_readAck>:
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void){
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     80a:	84 ec       	ldi	r24, 0xC4	; 196
     80c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	i2c_sync();    
     810:	0e 94 84 03 	call	0x708	; 0x708 <i2c_sync>
	return TWDR1;
     814:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
}
     818:	08 95       	ret

0000081a <i2c_readNak>:
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void){
	TWCR1 = (1<<TWINT) | (1<<TWEN);
     81a:	84 e8       	ldi	r24, 0x84	; 132
     81c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	i2c_sync(); 
     820:	0e 94 84 03 	call	0x708	; 0x708 <i2c_sync>
	return TWDR1;
     824:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
}
     828:	08 95       	ret

0000082a <i2c_read2ByteRegister>:
  
  Input:    device address, register address, buffer for storage
  Return:   0 write successful 
            1 write failed
*************************************************************************/
uint8_t i2c_read2ByteRegister(uint8_t adr, uint8_t regAddr, uint8_t *data){
     82a:	ff 92       	push	r15
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	d8 2f       	mov	r29, r24
     836:	f6 2e       	mov	r15, r22
     838:	8a 01       	movw	r16, r20
	uint8_t error = 0;
	error += i2c_start(adr | I2C_WRITE);
     83a:	0e 94 c8 03 	call	0x790	; 0x790 <i2c_start>
     83e:	c8 2f       	mov	r28, r24
	error += i2c_write(regAddr);
     840:	8f 2d       	mov	r24, r15
     842:	0e 94 f6 03 	call	0x7ec	; 0x7ec <i2c_write>
     846:	c8 0f       	add	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     848:	8a e1       	ldi	r24, 0x1A	; 26
     84a:	8a 95       	dec	r24
     84c:	f1 f7       	brne	.-4      	; 0x84a <i2c_read2ByteRegister+0x20>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <i2c_read2ByteRegister+0x26>
	_delay_us(10);
	//read data
	error += i2c_start(adr | I2C_READ);
     850:	8d 2f       	mov	r24, r29
     852:	81 60       	ori	r24, 0x01	; 1
     854:	0e 94 c8 03 	call	0x790	; 0x790 <i2c_start>
     858:	c8 0f       	add	r28, r24
	data[1] = i2c_readAck();
     85a:	0e 94 05 04 	call	0x80a	; 0x80a <i2c_readAck>
     85e:	f8 01       	movw	r30, r16
     860:	81 83       	std	Z+1, r24	; 0x01
	data[0] = i2c_readNak();
     862:	0e 94 0d 04 	call	0x81a	; 0x81a <i2c_readNak>
     866:	f8 01       	movw	r30, r16
     868:	80 83       	st	Z, r24
	i2c_stop();
     86a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <i2c_stop>
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	c1 11       	cpse	r28, r1
     872:	01 c0       	rjmp	.+2      	; 0x876 <i2c_read2ByteRegister+0x4c>
     874:	80 e0       	ldi	r24, 0x00	; 0
	
	if (error) return 1;
	else return 0;
}
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	08 95       	ret

00000882 <i2c_write2ByteRegister>:
  
  Input:    device address, register address, bytes to be transfered 
  Return:   0 write successful
			1 write failed
*************************************************************************/
uint8_t i2c_write2ByteRegister(uint8_t adr, uint8_t regAddr, uint16_t data){
     882:	0f 93       	push	r16
     884:	1f 93       	push	r17
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	06 2f       	mov	r16, r22
     88c:	d4 2f       	mov	r29, r20
     88e:	15 2f       	mov	r17, r21
	uint8_t error = 0;
	error += i2c_start(adr | I2C_WRITE);
     890:	0e 94 c8 03 	call	0x790	; 0x790 <i2c_start>
     894:	c8 2f       	mov	r28, r24
	error += i2c_write(regAddr);
     896:	80 2f       	mov	r24, r16
     898:	0e 94 f6 03 	call	0x7ec	; 0x7ec <i2c_write>
     89c:	c8 0f       	add	r28, r24
     89e:	8a e1       	ldi	r24, 0x1A	; 26
     8a0:	8a 95       	dec	r24
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <i2c_write2ByteRegister+0x1e>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <i2c_write2ByteRegister+0x24>
	_delay_us(10);
	error += i2c_write((uint8_t)(data >> 8));
     8a6:	81 2f       	mov	r24, r17
     8a8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <i2c_write>
     8ac:	c8 0f       	add	r28, r24
	error += i2c_write((uint8_t)(data & 0xFF));
     8ae:	8d 2f       	mov	r24, r29
     8b0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <i2c_write>
     8b4:	c8 0f       	add	r28, r24
	i2c_stop();
     8b6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <i2c_stop>
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	c1 11       	cpse	r28, r1
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <i2c_write2ByteRegister+0x40>
     8c0:	80 e0       	ldi	r24, 0x00	; 0
	if (error) return 1;
	else return 0;
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	08 95       	ret

000008cc <INA219_setCalibration_16V_400mA>:

uint16_t INA219_readShuntVoltageReg(){ // Not operational
	uint8_t value[2];
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_SHUNTVOLTAGE, value)) return 1;
	return ((value[1] << 8) | value[0]);
}
     8cc:	cf 93       	push	r28
     8ce:	40 e8       	ldi	r20, 0x80	; 128
     8d0:	5a e6       	ldi	r21, 0x6A	; 106
     8d2:	65 e0       	ldi	r22, 0x05	; 5
     8d4:	80 e8       	ldi	r24, 0x80	; 128
     8d6:	0e 94 41 04 	call	0x882	; 0x882 <i2c_write2ByteRegister>
     8da:	c8 2f       	mov	r28, r24
     8dc:	4b e9       	ldi	r20, 0x9B	; 155
     8de:	51 e0       	ldi	r21, 0x01	; 1
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	80 e8       	ldi	r24, 0x80	; 128
     8e4:	0e 94 41 04 	call	0x882	; 0x882 <i2c_write2ByteRegister>
     8e8:	c8 0f       	add	r28, r24
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <INA219_setCalibration_16V_400mA+0x24>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <INA219_readBusVoltageReg>:
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	00 d0       	rcall	.+0      	; 0x8fa <INA219_readBusVoltageReg+0x6>
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
     8fe:	4b e9       	ldi	r20, 0x9B	; 155
     900:	51 e0       	ldi	r21, 0x01	; 1
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	80 e8       	ldi	r24, 0x80	; 128
     906:	0e 94 41 04 	call	0x882	; 0x882 <i2c_write2ByteRegister>
     90a:	8f ea       	ldi	r24, 0xAF	; 175
     90c:	94 e0       	ldi	r25, 0x04	; 4
     90e:	01 97       	sbiw	r24, 0x01	; 1
     910:	f1 f7       	brne	.-4      	; 0x90e <__stack+0xf>
     912:	00 c0       	rjmp	.+0      	; 0x914 <__stack+0x15>
     914:	00 00       	nop
     916:	ae 01       	movw	r20, r28
     918:	4f 5f       	subi	r20, 0xFF	; 255
     91a:	5f 4f       	sbci	r21, 0xFF	; 255
     91c:	62 e0       	ldi	r22, 0x02	; 2
     91e:	80 e8       	ldi	r24, 0x80	; 128
     920:	0e 94 15 04 	call	0x82a	; 0x82a <i2c_read2ByteRegister>
     924:	81 11       	cpse	r24, r1
     926:	11 c0       	rjmp	.+34     	; 0x94a <__stack+0x4b>
     928:	8a 81       	ldd	r24, Y+2	; 0x02
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	98 2f       	mov	r25, r24
     92e:	88 27       	eor	r24, r24
     930:	29 81       	ldd	r18, Y+1	; 0x01
     932:	82 2b       	or	r24, r18
     934:	95 95       	asr	r25
     936:	87 95       	ror	r24
     938:	95 95       	asr	r25
     93a:	87 95       	ror	r24
     93c:	95 95       	asr	r25
     93e:	87 95       	ror	r24
     940:	81 30       	cpi	r24, 0x01	; 1
     942:	20 e1       	ldi	r18, 0x10	; 16
     944:	92 07       	cpc	r25, r18
     946:	30 f0       	brcs	.+12     	; 0x954 <__stack+0x55>
     948:	03 c0       	rjmp	.+6      	; 0x950 <__stack+0x51>
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	02 c0       	rjmp	.+4      	; 0x954 <__stack+0x55>
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <INA219_readCurrentReg>:
uint16_t INA219_readCurrentReg(){
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	00 d0       	rcall	.+0      	; 0x964 <INA219_readCurrentReg+0x6>
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
	uint8_t value[2];
	//INA219_trigger_oneshow_conversion();
	//_delay_us(600);
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_CURRENT, value)) return 0;
     968:	ae 01       	movw	r20, r28
     96a:	4f 5f       	subi	r20, 0xFF	; 255
     96c:	5f 4f       	sbci	r21, 0xFF	; 255
     96e:	64 e0       	ldi	r22, 0x04	; 4
     970:	80 e8       	ldi	r24, 0x80	; 128
     972:	0e 94 15 04 	call	0x82a	; 0x82a <i2c_read2ByteRegister>
     976:	81 11       	cpse	r24, r1
     978:	0d c0       	rjmp	.+26     	; 0x994 <INA219_readCurrentReg+0x36>
	uint16_t total = (value[1] << 8) | value[0];
     97a:	2a 81       	ldd	r18, Y+2	; 0x02
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	32 2f       	mov	r19, r18
     980:	22 27       	eor	r18, r18
     982:	89 81       	ldd	r24, Y+1	; 0x01
     984:	28 2b       	or	r18, r24
	#ifdef INA219_debug
	printf("curr: %.2f mA\n", (float)total*0.015);
	#endif
	if(total>0x8000) return 0x00;  // Remove possibility of corruption with a bug where total is above 0xFFAE with no connected source.
     986:	21 30       	cpi	r18, 0x01	; 1
     988:	80 e8       	ldi	r24, 0x80	; 128
     98a:	38 07       	cpc	r19, r24
     98c:	30 f4       	brcc	.+12     	; 0x99a <INA219_readCurrentReg+0x3c>
	return total;
     98e:	82 2f       	mov	r24, r18
     990:	93 2f       	mov	r25, r19
     992:	05 c0       	rjmp	.+10     	; 0x99e <INA219_readCurrentReg+0x40>
}
uint16_t INA219_readCurrentReg(){
	uint8_t value[2];
	//INA219_trigger_oneshow_conversion();
	//_delay_us(600);
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_CURRENT, value)) return 0;
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	02 c0       	rjmp	.+4      	; 0x99e <INA219_readCurrentReg+0x40>
	uint16_t total = (value[1] << 8) | value[0];
	#ifdef INA219_debug
	printf("curr: %.2f mA\n", (float)total*0.015);
	#endif
	if(total>0x8000) return 0x00;  // Remove possibility of corruption with a bug where total is above 0xFFAE with no connected source.
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
	return total;
}
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <INA219_init>:


uint8_t INA219_init(){
	if (INA219_setCalibration_16V_400mA()) {
     9a8:	0e 94 66 04 	call	0x8cc	; 0x8cc <INA219_setCalibration_16V_400mA>
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	81 11       	cpse	r24, r1
     9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <INA219_init+0xc>
     9b2:	90 e0       	ldi	r25, 0x00	; 0
		INA219_readCalibrationReg();
		INA219_readConfigReg();
		#endif
		return 0;
	}
     9b4:	89 2f       	mov	r24, r25
     9b6:	08 95       	ret

000009b8 <lora_send_command>:
	
	
	lora_join_ABP();
	
	return 0;
}
     9b8:	0e 94 78 07 	call	0xef0	; 0xef0 <USART_putstring0>
     9bc:	8d e0       	ldi	r24, 0x0D	; 13
     9be:	0e 94 70 07 	call	0xee0	; 0xee0 <USART_transmit0>
     9c2:	8a e0       	ldi	r24, 0x0A	; 10
     9c4:	0e 94 70 07 	call	0xee0	; 0xee0 <USART_transmit0>
     9c8:	08 95       	ret

000009ca <lora_assert_response>:
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	ec 01       	movw	r28, r24
     9d0:	42 e0       	ldi	r20, 0x02	; 2
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	63 ee       	ldi	r22, 0xE3	; 227
     9d6:	72 e0       	ldi	r23, 0x02	; 2
     9d8:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     9dc:	89 2b       	or	r24, r25
     9de:	09 f4       	brne	.+2      	; 0x9e2 <lora_assert_response+0x18>
     9e0:	8f c0       	rjmp	.+286    	; 0xb00 <lora_assert_response+0x136>
     9e2:	48 e0       	ldi	r20, 0x08	; 8
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	63 ed       	ldi	r22, 0xD3	; 211
     9e8:	72 e0       	ldi	r23, 0x02	; 2
     9ea:	ce 01       	movw	r24, r28
     9ec:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     9f0:	89 2b       	or	r24, r25
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <lora_assert_response+0x2c>
     9f4:	87 c0       	rjmp	.+270    	; 0xb04 <lora_assert_response+0x13a>
     9f6:	49 e0       	ldi	r20, 0x09	; 9
     9f8:	50 e0       	ldi	r21, 0x00	; 0
     9fa:	6c ed       	ldi	r22, 0xDC	; 220
     9fc:	72 e0       	ldi	r23, 0x02	; 2
     9fe:	ce 01       	movw	r24, r28
     a00:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     a04:	89 2b       	or	r24, r25
     a06:	09 f4       	brne	.+2      	; 0xa0a <lora_assert_response+0x40>
     a08:	7f c0       	rjmp	.+254    	; 0xb08 <lora_assert_response+0x13e>
     a0a:	47 e0       	ldi	r20, 0x07	; 7
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	66 ee       	ldi	r22, 0xE6	; 230
     a10:	72 e0       	ldi	r23, 0x02	; 2
     a12:	ce 01       	movw	r24, r28
     a14:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     a18:	89 2b       	or	r24, r25
     a1a:	39 f4       	brne	.+14     	; 0xa2a <lora_assert_response+0x60>
     a1c:	be 01       	movw	r22, r28
     a1e:	83 e5       	ldi	r24, 0x53	; 83
     a20:	95 e0       	ldi	r25, 0x05	; 5
     a22:	0e 94 6f 10 	call	0x20de	; 0x20de <strcpy>
     a26:	81 e1       	ldi	r24, 0x11	; 17
     a28:	86 c0       	rjmp	.+268    	; 0xb36 <lora_assert_response+0x16c>
     a2a:	46 e0       	ldi	r20, 0x06	; 6
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	6e ee       	ldi	r22, 0xEE	; 238
     a30:	72 e0       	ldi	r23, 0x02	; 2
     a32:	ce 01       	movw	r24, r28
     a34:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     a38:	89 2b       	or	r24, r25
     a3a:	09 f4       	brne	.+2      	; 0xa3e <lora_assert_response+0x74>
     a3c:	67 c0       	rjmp	.+206    	; 0xb0c <lora_assert_response+0x142>
     a3e:	4d e0       	ldi	r20, 0x0D	; 13
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	65 ef       	ldi	r22, 0xF5	; 245
     a44:	72 e0       	ldi	r23, 0x02	; 2
     a46:	ce 01       	movw	r24, r28
     a48:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     a4c:	89 2b       	or	r24, r25
     a4e:	09 f4       	brne	.+2      	; 0xa52 <lora_assert_response+0x88>
     a50:	5f c0       	rjmp	.+190    	; 0xb10 <lora_assert_response+0x146>
     a52:	4c e0       	ldi	r20, 0x0C	; 12
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	63 e0       	ldi	r22, 0x03	; 3
     a58:	73 e0       	ldi	r23, 0x03	; 3
     a5a:	ce 01       	movw	r24, r28
     a5c:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     a60:	89 2b       	or	r24, r25
     a62:	09 f4       	brne	.+2      	; 0xa66 <lora_assert_response+0x9c>
     a64:	57 c0       	rjmp	.+174    	; 0xb14 <lora_assert_response+0x14a>
     a66:	46 e0       	ldi	r20, 0x06	; 6
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	60 e1       	ldi	r22, 0x10	; 16
     a6c:	73 e0       	ldi	r23, 0x03	; 3
     a6e:	ce 01       	movw	r24, r28
     a70:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     a74:	89 2b       	or	r24, r25
     a76:	09 f4       	brne	.+2      	; 0xa7a <lora_assert_response+0xb0>
     a78:	4f c0       	rjmp	.+158    	; 0xb18 <lora_assert_response+0x14e>
     a7a:	44 e0       	ldi	r20, 0x04	; 4
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	67 e1       	ldi	r22, 0x17	; 23
     a80:	73 e0       	ldi	r23, 0x03	; 3
     a82:	ce 01       	movw	r24, r28
     a84:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     a88:	89 2b       	or	r24, r25
     a8a:	09 f4       	brne	.+2      	; 0xa8e <lora_assert_response+0xc4>
     a8c:	47 c0       	rjmp	.+142    	; 0xb1c <lora_assert_response+0x152>
     a8e:	4a e0       	ldi	r20, 0x0A	; 10
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	6c e1       	ldi	r22, 0x1C	; 28
     a94:	73 e0       	ldi	r23, 0x03	; 3
     a96:	ce 01       	movw	r24, r28
     a98:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     a9c:	89 2b       	or	r24, r25
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <lora_assert_response+0xd8>
     aa0:	3f c0       	rjmp	.+126    	; 0xb20 <lora_assert_response+0x156>
     aa2:	4d e0       	ldi	r20, 0x0D	; 13
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	67 e2       	ldi	r22, 0x27	; 39
     aa8:	73 e0       	ldi	r23, 0x03	; 3
     aaa:	ce 01       	movw	r24, r28
     aac:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     ab0:	89 2b       	or	r24, r25
     ab2:	c1 f1       	breq	.+112    	; 0xb24 <lora_assert_response+0x15a>
     ab4:	4a e0       	ldi	r20, 0x0A	; 10
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	65 e3       	ldi	r22, 0x35	; 53
     aba:	73 e0       	ldi	r23, 0x03	; 3
     abc:	ce 01       	movw	r24, r28
     abe:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     ac2:	89 2b       	or	r24, r25
     ac4:	89 f1       	breq	.+98     	; 0xb28 <lora_assert_response+0x15e>
     ac6:	4f e1       	ldi	r20, 0x1F	; 31
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	60 e4       	ldi	r22, 0x40	; 64
     acc:	73 e0       	ldi	r23, 0x03	; 3
     ace:	ce 01       	movw	r24, r28
     ad0:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     ad4:	89 2b       	or	r24, r25
     ad6:	51 f1       	breq	.+84     	; 0xb2c <lora_assert_response+0x162>
     ad8:	40 e1       	ldi	r20, 0x10	; 16
     ada:	50 e0       	ldi	r21, 0x00	; 0
     adc:	60 e6       	ldi	r22, 0x60	; 96
     ade:	73 e0       	ldi	r23, 0x03	; 3
     ae0:	ce 01       	movw	r24, r28
     ae2:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     ae6:	89 2b       	or	r24, r25
     ae8:	19 f1       	breq	.+70     	; 0xb30 <lora_assert_response+0x166>
     aea:	47 e0       	ldi	r20, 0x07	; 7
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	61 e7       	ldi	r22, 0x71	; 113
     af0:	73 e0       	ldi	r23, 0x03	; 3
     af2:	ce 01       	movw	r24, r28
     af4:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     af8:	89 2b       	or	r24, r25
     afa:	e1 f0       	breq	.+56     	; 0xb34 <lora_assert_response+0x16a>
     afc:	8a ea       	ldi	r24, 0xAA	; 170
     afe:	1b c0       	rjmp	.+54     	; 0xb36 <lora_assert_response+0x16c>
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	19 c0       	rjmp	.+50     	; 0xb36 <lora_assert_response+0x16c>
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	17 c0       	rjmp	.+46     	; 0xb36 <lora_assert_response+0x16c>
     b08:	80 e1       	ldi	r24, 0x10	; 16
     b0a:	15 c0       	rjmp	.+42     	; 0xb36 <lora_assert_response+0x16c>
     b0c:	8a e0       	ldi	r24, 0x0A	; 10
     b0e:	13 c0       	rjmp	.+38     	; 0xb36 <lora_assert_response+0x16c>
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	11 c0       	rjmp	.+34     	; 0xb36 <lora_assert_response+0x16c>
     b14:	82 e0       	ldi	r24, 0x02	; 2
     b16:	0f c0       	rjmp	.+30     	; 0xb36 <lora_assert_response+0x16c>
     b18:	83 e0       	ldi	r24, 0x03	; 3
     b1a:	0d c0       	rjmp	.+26     	; 0xb36 <lora_assert_response+0x16c>
     b1c:	84 e0       	ldi	r24, 0x04	; 4
     b1e:	0b c0       	rjmp	.+22     	; 0xb36 <lora_assert_response+0x16c>
     b20:	85 e0       	ldi	r24, 0x05	; 5
     b22:	09 c0       	rjmp	.+18     	; 0xb36 <lora_assert_response+0x16c>
     b24:	86 e0       	ldi	r24, 0x06	; 6
     b26:	07 c0       	rjmp	.+14     	; 0xb36 <lora_assert_response+0x16c>
     b28:	87 e0       	ldi	r24, 0x07	; 7
     b2a:	05 c0       	rjmp	.+10     	; 0xb36 <lora_assert_response+0x16c>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	03 c0       	rjmp	.+6      	; 0xb36 <lora_assert_response+0x16c>
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <lora_assert_response+0x16c>
     b34:	8d e0       	ldi	r24, 0x0D	; 13
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	08 95       	ret

00000b3c <lora_receive_response>:
     b3c:	ef 92       	push	r14
     b3e:	ff 92       	push	r15
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
     b4c:	ca 5f       	subi	r28, 0xFA	; 250
     b4e:	d1 09       	sbc	r29, r1
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	7c 01       	movw	r14, r24
     b60:	00 e0       	ldi	r16, 0x00	; 0
     b62:	10 e0       	ldi	r17, 0x00	; 0
     b64:	0e 94 68 07 	call	0xed0	; 0xed0 <USART_receive0>
     b68:	8d 30       	cpi	r24, 0x0D	; 13
     b6a:	71 f4       	brne	.+28     	; 0xb88 <lora_receive_response+0x4c>
     b6c:	0e 94 68 07 	call	0xed0	; 0xed0 <USART_receive0>
     b70:	e1 e0       	ldi	r30, 0x01	; 1
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	ec 0f       	add	r30, r28
     b76:	fd 1f       	adc	r31, r29
     b78:	e0 0f       	add	r30, r16
     b7a:	f1 1f       	adc	r31, r17
     b7c:	10 82       	st	Z, r1
     b7e:	ce 01       	movw	r24, r28
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	0e 94 e5 04 	call	0x9ca	; 0x9ca <lora_assert_response>
     b86:	06 c0       	rjmp	.+12     	; 0xb94 <lora_receive_response+0x58>
     b88:	f7 01       	movw	r30, r14
     b8a:	81 93       	st	Z+, r24
     b8c:	7f 01       	movw	r14, r30
     b8e:	0f 5f       	subi	r16, 0xFF	; 255
     b90:	1f 4f       	sbci	r17, 0xFF	; 255
     b92:	e8 cf       	rjmp	.-48     	; 0xb64 <lora_receive_response+0x28>
     b94:	c6 50       	subi	r28, 0x06	; 6
     b96:	df 4f       	sbci	r29, 0xFF	; 255
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	08 95       	ret

00000bb0 <lora_join_OTAA>:
     bb0:	81 e9       	ldi	r24, 0x91	; 145
     bb2:	93 e0       	ldi	r25, 0x03	; 3
     bb4:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <lora_send_command>
     bb8:	0e 94 9e 05 	call	0xb3c	; 0xb3c <lora_receive_response>
     bbc:	81 11       	cpse	r24, r1
     bbe:	05 c0       	rjmp	.+10     	; 0xbca <lora_join_OTAA+0x1a>
     bc0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <lora_receive_response>
     bc4:	81 11       	cpse	r24, r1
     bc6:	03 c0       	rjmp	.+6      	; 0xbce <lora_join_OTAA+0x1e>
     bc8:	08 95       	ret
     bca:	82 e2       	ldi	r24, 0x22	; 34
     bcc:	08 95       	ret
     bce:	83 e2       	ldi	r24, 0x23	; 35
     bd0:	08 95       	ret

00000bd2 <lora_init>:

}



uint8_t lora_init(uint8_t *joined_err){
     bd2:	ef 92       	push	r14
     bd4:	ff 92       	push	r15
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	e2 97       	sbiw	r28, 0x32	; 50
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
     bee:	7c 01       	movw	r14, r24

static uint8_t lora_set_dcycle(void);
static uint8_t lora_save_settings(void);

void lora_auto_baud_detect(void){
	DDRD |= (1<<PORTD1);
     bf0:	51 9a       	sbi	0x0a, 1	; 10
	PORTD &= ~(1<<PORTD1);
     bf2:	59 98       	cbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bf4:	8f e1       	ldi	r24, 0x1F	; 31
     bf6:	9e e4       	ldi	r25, 0x4E	; 78
     bf8:	01 97       	sbiw	r24, 0x01	; 1
     bfa:	f1 f7       	brne	.-4      	; 0xbf8 <lora_init+0x26>
     bfc:	00 c0       	rjmp	.+0      	; 0xbfe <lora_init+0x2c>
     bfe:	00 00       	nop
	_delay_ms(10);
	DDRD = 0x00;
     c00:	1a b8       	out	0x0a, r1	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c02:	9a e1       	ldi	r25, 0x1A	; 26
     c04:	9a 95       	dec	r25
     c06:	f1 f7       	brne	.-4      	; 0xc04 <lora_init+0x32>
     c08:	00 c0       	rjmp	.+0      	; 0xc0a <lora_init+0x38>
	_delay_us(10);
	USART_init();
     c0a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <USART_init>
	USART_transmit0(0x55);
     c0e:	85 e5       	ldi	r24, 0x55	; 85
     c10:	0e 94 70 07 	call	0xee0	; 0xee0 <USART_transmit0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c14:	af ef       	ldi	r26, 0xFF	; 255
     c16:	b0 e7       	ldi	r27, 0x70	; 112
     c18:	e2 e0       	ldi	r30, 0x02	; 2
     c1a:	a1 50       	subi	r26, 0x01	; 1
     c1c:	b0 40       	sbci	r27, 0x00	; 0
     c1e:	e0 40       	sbci	r30, 0x00	; 0
     c20:	e1 f7       	brne	.-8      	; 0xc1a <lora_init+0x48>
     c22:	00 c0       	rjmp	.+0      	; 0xc24 <lora_init+0x52>
     c24:	00 00       	nop

uint8_t lora_reset_to_band(){

	char cmd[20];
	#ifdef LORA_BAND
		sprintf(cmd, "mac reset %d", LORA_BAND);
     c26:	83 e0       	ldi	r24, 0x03	; 3
     c28:	8f 93       	push	r24
     c2a:	84 e6       	ldi	r24, 0x64	; 100
     c2c:	8f 93       	push	r24
     c2e:	83 e3       	ldi	r24, 0x33	; 51
     c30:	94 e0       	ldi	r25, 0x04	; 4
     c32:	9f 93       	push	r25
     c34:	8f 93       	push	r24
     c36:	8e 01       	movw	r16, r28
     c38:	0f 5f       	subi	r16, 0xFF	; 255
     c3a:	1f 4f       	sbci	r17, 0xFF	; 255
     c3c:	1f 93       	push	r17
     c3e:	0f 93       	push	r16
     c40:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <sprintf>
	#endif
	
	#ifdef DEBUG_M
		printf("%s: ",cmd);
	#endif
	lora_send_command(cmd);
     c44:	c8 01       	movw	r24, r16
     c46:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <lora_send_command>
	return lora_receive_response();
     c4a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <lora_receive_response>
	#endif
	


	err = lora_reset_to_band();
	if (err) return 1;
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	81 11       	cpse	r24, r1
     c5c:	bc c0       	rjmp	.+376    	; 0xdd6 <lora_init+0x204>
	#ifdef DEBUG_M
		printf("Set ADR: ");
	#endif
	
	#ifdef LORA_ADR
		lora_send_command("mac set adr on");
     c5e:	80 e4       	ldi	r24, 0x40	; 64
     c60:	94 e0       	ldi	r25, 0x04	; 4
     c62:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <lora_send_command>
	#else
		lora_send_command("mac set adr off");
	#endif
	return lora_receive_response();
     c66:	0e 94 9e 05 	call	0xb3c	; 0xb3c <lora_receive_response>
	err = lora_reset_to_band();
	if (err) return 1;
	
	
	err = lora_set_adr() ;
	if (err) return 2;
     c6a:	81 11       	cpse	r24, r1
     c6c:	b6 c0       	rjmp	.+364    	; 0xdda <lora_init+0x208>
	return lora_receive_response();
}
uint8_t lora_set_dr(){
	char cmd[20];
	#ifdef LORA_DR
	sprintf(cmd, "mac set dr %d",LORA_DR);
     c6e:	1f 92       	push	r1
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	8f 93       	push	r24
     c74:	8f e4       	ldi	r24, 0x4F	; 79
     c76:	94 e0       	ldi	r25, 0x04	; 4
     c78:	9f 93       	push	r25
     c7a:	8f 93       	push	r24
     c7c:	1f 93       	push	r17
     c7e:	0f 93       	push	r16
     c80:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <sprintf>
	#endif
	#ifdef DEBUG_M
		printf("%s: ",cmd);
	#endif
	lora_send_command(cmd);
     c84:	c8 01       	movw	r24, r16
     c86:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <lora_send_command>
	return lora_receive_response();
     c8a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <lora_receive_response>
	err = lora_set_adr() ;
	if (err) return 2;
	
	
	err = lora_set_dr();
	if (err) return 3;
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	81 11       	cpse	r24, r1
     c9c:	a0 c0       	rjmp	.+320    	; 0xdde <lora_init+0x20c>
}
uint8_t lora_set_pwridx(){
	
	char cmd[20];
	#ifdef LORA_PWRIDX
	sprintf(cmd, "mac set pwridx %d",LORA_PWRIDX);
     c9e:	1f 92       	push	r1
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	8f 93       	push	r24
     ca4:	8d e5       	ldi	r24, 0x5D	; 93
     ca6:	94 e0       	ldi	r25, 0x04	; 4
     ca8:	9f 93       	push	r25
     caa:	8f 93       	push	r24
     cac:	1f 93       	push	r17
     cae:	0f 93       	push	r16
     cb0:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <sprintf>
	#endif
	#ifdef DEBUG_M
		printf("%s: ",cmd);
	#endif
	lora_send_command(cmd);
     cb4:	c8 01       	movw	r24, r16
     cb6:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <lora_send_command>
	return lora_receive_response();
     cba:	0e 94 9e 05 	call	0xb3c	; 0xb3c <lora_receive_response>
	err = lora_set_dr();
	if (err) return 3;
	
	
	err = lora_set_pwridx();
	if (err) return 4;
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	81 11       	cpse	r24, r1
     ccc:	8a c0       	rjmp	.+276    	; 0xde2 <lora_init+0x210>
uint8_t lora_set_dcycle(void){
	uint8_t err;
	#ifdef DEBUG_M
		printf("Setting dcycle for ch 0: ");
	#endif
	lora_send_command("mac set ch dcycle 0 9");
     cce:	8f e6       	ldi	r24, 0x6F	; 111
     cd0:	94 e0       	ldi	r25, 0x04	; 4
     cd2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <lora_send_command>
	err = lora_receive_response();
     cd6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <lora_receive_response>
	if (err) return 0xB1;
     cda:	81 11       	cpse	r24, r1
     cdc:	0e c0       	rjmp	.+28     	; 0xcfa <lora_init+0x128>
	
	#ifdef DEBUG_M
	printf("Setting dcycle for ch 1: ");
	#endif
	lora_send_command("mac set ch dcycle 1 9");
     cde:	85 e8       	ldi	r24, 0x85	; 133
     ce0:	94 e0       	ldi	r25, 0x04	; 4
     ce2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <lora_send_command>
	err = lora_receive_response();
     ce6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <lora_receive_response>
	if (err) return 0xB2;
     cea:	81 11       	cpse	r24, r1
     cec:	06 c0       	rjmp	.+12     	; 0xcfa <lora_init+0x128>
	
	#ifdef DEBUG_M
	printf("Setting dcycle for ch 2: ");
	#endif
	lora_send_command("mac set ch dcycle 2 9");
     cee:	8b e9       	ldi	r24, 0x9B	; 155
     cf0:	94 e0       	ldi	r25, 0x04	; 4
     cf2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <lora_send_command>
	err = lora_receive_response();
     cf6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <lora_receive_response>
#endif

uint8_t lora_set_deveui(){

	
	char cmd[50] = "mac set deveui ";
     cfa:	80 e1       	ldi	r24, 0x10	; 16
     cfc:	e0 eb       	ldi	r30, 0xB0	; 176
     cfe:	f1 e0       	ldi	r31, 0x01	; 1
     d00:	de 01       	movw	r26, r28
     d02:	11 96       	adiw	r26, 0x01	; 1
     d04:	01 90       	ld	r0, Z+
     d06:	0d 92       	st	X+, r0
     d08:	8a 95       	dec	r24
     d0a:	e1 f7       	brne	.-8      	; 0xd04 <lora_init+0x132>
     d0c:	fe 01       	movw	r30, r28
     d0e:	71 96       	adiw	r30, 0x11	; 17
     d10:	82 e2       	ldi	r24, 0x22	; 34
     d12:	df 01       	movw	r26, r30
     d14:	1d 92       	st	X+, r1
     d16:	8a 95       	dec	r24
     d18:	e9 f7       	brne	.-6      	; 0xd14 <lora_init+0x142>
	strcat(cmd, devEui);
     d1a:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <devEui>
     d1e:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <devEui+0x1>
     d22:	ce 01       	movw	r24, r28
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	0e 94 64 10 	call	0x20c8	; 0x20c8 <strcat>
	
	#ifdef DEBUG_M
		printf("%s:  ", cmd);
	#endif
	lora_send_command(cmd);
     d2a:	ce 01       	movw	r24, r28
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <lora_send_command>
	return lora_receive_response();
     d32:	0e 94 9e 05 	call	0xb3c	; 0xb3c <lora_receive_response>
		puts("Loading OTAA settings...");
	#endif
	uint8_t err = 0;
	
	err = lora_set_deveui();
	if (err) return 7;
     d36:	81 11       	cpse	r24, r1
     d38:	56 c0       	rjmp	.+172    	; 0xde6 <lora_init+0x214>
uint8_t lora_set_appeui(){
	#ifdef DEBUG_M
		printf("Set appeui: ");
	#endif	
	
	char cmd[50] = "mac set appeui ";
     d3a:	80 e1       	ldi	r24, 0x10	; 16
     d3c:	e2 ee       	ldi	r30, 0xE2	; 226
     d3e:	f1 e0       	ldi	r31, 0x01	; 1
     d40:	de 01       	movw	r26, r28
     d42:	11 96       	adiw	r26, 0x01	; 1
     d44:	01 90       	ld	r0, Z+
     d46:	0d 92       	st	X+, r0
     d48:	8a 95       	dec	r24
     d4a:	e1 f7       	brne	.-8      	; 0xd44 <lora_init+0x172>
     d4c:	fe 01       	movw	r30, r28
     d4e:	71 96       	adiw	r30, 0x11	; 17
     d50:	82 e2       	ldi	r24, 0x22	; 34
     d52:	df 01       	movw	r26, r30
     d54:	1d 92       	st	X+, r1
     d56:	8a 95       	dec	r24
     d58:	e9 f7       	brne	.-6      	; 0xd54 <lora_init+0x182>
 	strcat(cmd, appEui);
     d5a:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <appEui>
     d5e:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <appEui+0x1>
     d62:	ce 01       	movw	r24, r28
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	0e 94 64 10 	call	0x20c8	; 0x20c8 <strcat>
 	lora_send_command(cmd);
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <lora_send_command>
	return lora_receive_response();
     d72:	0e 94 9e 05 	call	0xb3c	; 0xb3c <lora_receive_response>
	
	err = lora_set_deveui();
	if (err) return 7;
		
	err = lora_set_appeui();
	if (err) return 8;
     d76:	81 11       	cpse	r24, r1
     d78:	36 c0       	rjmp	.+108    	; 0xde6 <lora_init+0x214>
 	strcat(cmd, appEui);
 	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_set_appkey(){
	char cmd[50] = "mac set appkey ";
     d7a:	80 e1       	ldi	r24, 0x10	; 16
     d7c:	e4 e1       	ldi	r30, 0x14	; 20
     d7e:	f2 e0       	ldi	r31, 0x02	; 2
     d80:	de 01       	movw	r26, r28
     d82:	11 96       	adiw	r26, 0x01	; 1
     d84:	01 90       	ld	r0, Z+
     d86:	0d 92       	st	X+, r0
     d88:	8a 95       	dec	r24
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <lora_init+0x1b2>
     d8c:	fe 01       	movw	r30, r28
     d8e:	71 96       	adiw	r30, 0x11	; 17
     d90:	82 e2       	ldi	r24, 0x22	; 34
     d92:	df 01       	movw	r26, r30
     d94:	1d 92       	st	X+, r1
     d96:	8a 95       	dec	r24
     d98:	e9 f7       	brne	.-6      	; 0xd94 <lora_init+0x1c2>
	strcat(cmd, appKey);
     d9a:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <appKey>
     d9e:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <appKey+0x1>
     da2:	ce 01       	movw	r24, r28
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	0e 94 64 10 	call	0x20c8	; 0x20c8 <strcat>
	#ifdef DEBUG_M
		printf("mac set appkey ****: ");
	#endif
	lora_send_command(cmd);
     daa:	ce 01       	movw	r24, r28
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <lora_send_command>
	return lora_receive_response();
     db2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <lora_receive_response>
		
	err = lora_set_appeui();
	if (err) return 8;
			
	err = lora_set_appkey();
	if (err) return 9;
     db6:	81 11       	cpse	r24, r1
     db8:	16 c0       	rjmp	.+44     	; 0xde6 <lora_init+0x214>
uint8_t lora_save_settings(){
	#ifdef DEBUG_M
		printf("Save settings: ");
	#endif
	
	lora_send_command("mac save");
     dba:	8a e2       	ldi	r24, 0x2A	; 42
     dbc:	94 e0       	ldi	r25, 0x04	; 4
     dbe:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <lora_send_command>
	return lora_receive_response();
     dc2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <lora_receive_response>
     dc6:	18 2f       	mov	r17, r24
			
	err = lora_set_appkey();
	if (err) return 9;

	err = lora_save_settings();
	if (err) return 10;
     dc8:	81 11       	cpse	r24, r1
     dca:	0d c0       	rjmp	.+26     	; 0xde6 <lora_init+0x214>
	
	*joined_err = lora_join_OTAA();
     dcc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <lora_join_OTAA>
     dd0:	f7 01       	movw	r30, r14
     dd2:	80 83       	st	Z, r24
     dd4:	09 c0       	rjmp	.+18     	; 0xde8 <lora_init+0x216>
	#endif
	


	err = lora_reset_to_band();
	if (err) return 1;
     dd6:	11 e0       	ldi	r17, 0x01	; 1
     dd8:	07 c0       	rjmp	.+14     	; 0xde8 <lora_init+0x216>
	
	
	err = lora_set_adr() ;
	if (err) return 2;
     dda:	12 e0       	ldi	r17, 0x02	; 2
     ddc:	05 c0       	rjmp	.+10     	; 0xde8 <lora_init+0x216>
	
	
	err = lora_set_dr();
	if (err) return 3;
     dde:	13 e0       	ldi	r17, 0x03	; 3
     de0:	03 c0       	rjmp	.+6      	; 0xde8 <lora_init+0x216>
	
	
	err = lora_set_pwridx();
	if (err) return 4;
     de2:	14 e0       	ldi	r17, 0x04	; 4
     de4:	01 c0       	rjmp	.+2      	; 0xde8 <lora_init+0x216>
	
	lora_set_dcycle();
	#ifdef OTAA
	err = lora_set_OTAA_settings(joined_err);
	if (err) return 5;
     de6:	15 e0       	ldi	r17, 0x05	; 5
	puts("Init success");
	#endif
	
	return 0;

}
     de8:	81 2f       	mov	r24, r17
     dea:	e2 96       	adiw	r28, 0x32	; 50
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	cd bf       	out	0x3d, r28	; 61
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	ff 90       	pop	r15
     e00:	ef 90       	pop	r14
     e02:	08 95       	ret

00000e04 <lora_transmit>:
void lora_transmit(const char *payload){
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	c4 56       	subi	r28, 0x64	; 100
     e0e:	d1 09       	sbc	r29, r1
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	bc 01       	movw	r22, r24
	uint8_t err;
	char buf[100] = "mac tx uncnf 3 ";
     e1c:	90 e1       	ldi	r25, 0x10	; 16
     e1e:	e6 e4       	ldi	r30, 0x46	; 70
     e20:	f2 e0       	ldi	r31, 0x02	; 2
     e22:	de 01       	movw	r26, r28
     e24:	11 96       	adiw	r26, 0x01	; 1
     e26:	01 90       	ld	r0, Z+
     e28:	0d 92       	st	X+, r0
     e2a:	9a 95       	dec	r25
     e2c:	e1 f7       	brne	.-8      	; 0xe26 <lora_transmit+0x22>
     e2e:	fe 01       	movw	r30, r28
     e30:	71 96       	adiw	r30, 0x11	; 17
     e32:	84 e5       	ldi	r24, 0x54	; 84
     e34:	df 01       	movw	r26, r30
     e36:	1d 92       	st	X+, r1
     e38:	8a 95       	dec	r24
     e3a:	e9 f7       	brne	.-6      	; 0xe36 <lora_transmit+0x32>
	strcat(buf, payload);
     e3c:	ce 01       	movw	r24, r28
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	0e 94 64 10 	call	0x20c8	; 0x20c8 <strcat>

	lora_send_command(buf);
     e44:	ce 01       	movw	r24, r28
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <lora_send_command>
	err = lora_receive_response();
     e4c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <lora_receive_response>
	if (!err){
     e50:	81 11       	cpse	r24, r1
     e52:	08 c0       	rjmp	.+16     	; 0xe64 <lora_transmit+0x60>
		err = lora_receive_response();
     e54:	0e 94 9e 05 	call	0xb3c	; 0xb3c <lora_receive_response>
		if(err == RESP_MAC_RX_INC){
     e58:	81 31       	cpi	r24, 0x11	; 17
     e5a:	29 f4       	brne	.+10     	; 0xe66 <lora_transmit+0x62>
			data_receive_flag = 1;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <data_receive_flag>
     e62:	01 c0       	rjmp	.+2      	; 0xe66 <lora_transmit+0x62>
		}
	}
	else set_bit(LEDS,LED3);
     e64:	2a 9a       	sbi	0x05, 2	; 5
}
     e66:	cc 59       	subi	r28, 0x9C	; 156
     e68:	df 4f       	sbci	r29, 0xFF	; 255
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <USART_init>:
	for(; *string; ++string){
		USART_transmit2(*string);
	}
	//USART_transmit2(0x0D);
	USART_transmit2(0x0A);
}
     e7a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     e7e:	83 e3       	ldi	r24, 0x33	; 51
     e80:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     e84:	28 e1       	ldi	r18, 0x18	; 24
     e86:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     e8a:	e2 ec       	ldi	r30, 0xC2	; 194
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	90 81       	ld	r25, Z
     e90:	96 60       	ori	r25, 0x06	; 6
     e92:	90 83       	st	Z, r25
     e94:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     e98:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     e9c:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     ea0:	ea ec       	ldi	r30, 0xCA	; 202
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	90 81       	ld	r25, Z
     ea6:	96 60       	ori	r25, 0x06	; 6
     ea8:	90 83       	st	Z, r25
     eaa:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7e00d5>
     eae:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7e00d4>
     eb2:	88 e9       	ldi	r24, 0x98	; 152
     eb4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
     eb8:	e2 ed       	ldi	r30, 0xD2	; 210
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	86 60       	ori	r24, 0x06	; 6
     ec0:	80 83       	st	Z, r24
     ec2:	8c e0       	ldi	r24, 0x0C	; 12
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	90 93 2b 06 	sts	0x062B, r25	; 0x80062b <__iob+0x3>
     eca:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <__iob+0x2>
     ece:	08 95       	ret

00000ed0 <USART_receive0>:
     ed0:	e0 ec       	ldi	r30, 0xC0	; 192
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	88 23       	and	r24, r24
     ed8:	ec f7       	brge	.-6      	; 0xed4 <USART_receive0+0x4>
     eda:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     ede:	08 95       	ret

00000ee0 <USART_transmit0>:
     ee0:	e0 ec       	ldi	r30, 0xC0	; 192
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	90 81       	ld	r25, Z
     ee6:	95 ff       	sbrs	r25, 5
     ee8:	fd cf       	rjmp	.-6      	; 0xee4 <USART_transmit0+0x4>
     eea:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     eee:	08 95       	ret

00000ef0 <USART_putstring0>:
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	ec 01       	movw	r28, r24
     ef6:	88 81       	ld	r24, Y
     ef8:	88 23       	and	r24, r24
     efa:	31 f0       	breq	.+12     	; 0xf08 <USART_putstring0+0x18>
     efc:	21 96       	adiw	r28, 0x01	; 1
     efe:	0e 94 70 07 	call	0xee0	; 0xee0 <USART_transmit0>
     f02:	89 91       	ld	r24, Y+
     f04:	81 11       	cpse	r24, r1
     f06:	fb cf       	rjmp	.-10     	; 0xefe <USART_putstring0+0xe>
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <USART_transmit2>:
     f0e:	e0 ed       	ldi	r30, 0xD0	; 208
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	90 81       	ld	r25, Z
     f14:	95 ff       	sbrs	r25, 5
     f16:	fd cf       	rjmp	.-6      	; 0xf12 <USART_transmit2+0x4>
     f18:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
     f1c:	08 95       	ret

00000f1e <USART_TRANSMIT_printf>:
     f1e:	cf 93       	push	r28
     f20:	c8 2f       	mov	r28, r24
     f22:	8a 30       	cpi	r24, 0x0A	; 10
     f24:	19 f4       	brne	.+6      	; 0xf2c <USART_TRANSMIT_printf+0xe>
     f26:	8d e0       	ldi	r24, 0x0D	; 13
     f28:	0e 94 87 07 	call	0xf0e	; 0xf0e <USART_transmit2>
     f2c:	8c 2f       	mov	r24, r28
     f2e:	0e 94 87 07 	call	0xf0e	; 0xf0e <USART_transmit2>
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	cf 91       	pop	r28
     f38:	08 95       	ret

00000f3a <USART_receive2>:
     f3a:	e0 ed       	ldi	r30, 0xD0	; 208
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	88 23       	and	r24, r24
     f42:	ec f7       	brge	.-6      	; 0xf3e <USART_receive2+0x4>
     f44:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
     f48:	08 95       	ret

00000f4a <USART_receiveString2>:

void USART_receiveString2(void){
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	ca 5f       	subi	r28, 0xFA	; 250
     f5c:	d1 09       	sbc	r29, r1
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	ce 01       	movw	r24, r28
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	7c 01       	movw	r14, r24
	char rx_buf[250];
	unsigned char rec = 0;
	int i = 0;
     f6e:	00 e0       	ldi	r16, 0x00	; 0
     f70:	10 e0       	ldi	r17, 0x00	; 0
	while (1){
		rec = USART_receive2();
     f72:	0e 94 9d 07 	call	0xf3a	; 0xf3a <USART_receive2>
		if (rec == 0x0A){
     f76:	8a 30       	cpi	r24, 0x0A	; 10
     f78:	79 f4       	brne	.+30     	; 0xf98 <USART_receiveString2+0x4e>
			rx_buf[i] = '\0';
     f7a:	e1 e0       	ldi	r30, 0x01	; 1
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	ec 0f       	add	r30, r28
     f80:	fd 1f       	adc	r31, r29
     f82:	e0 0f       	add	r30, r16
     f84:	f1 1f       	adc	r31, r17
     f86:	10 82       	st	Z, r1
		i++;
	}
	#ifdef DEBUG_M
	printf("rx int: %s\n", rx_buf);
	#endif
	strcpy(downlink, rx_buf);
     f88:	be 01       	movw	r22, r28
     f8a:	6f 5f       	subi	r22, 0xFF	; 255
     f8c:	7f 4f       	sbci	r23, 0xFF	; 255
     f8e:	83 e5       	ldi	r24, 0x53	; 83
     f90:	95 e0       	ldi	r25, 0x05	; 5
     f92:	0e 94 6f 10 	call	0x20de	; 0x20de <strcpy>
}
     f96:	06 c0       	rjmp	.+12     	; 0xfa4 <USART_receiveString2+0x5a>
		rec = USART_receive2();
		if (rec == 0x0A){
			rx_buf[i] = '\0';
			break;
		}
		rx_buf[i] = rec;
     f98:	f7 01       	movw	r30, r14
     f9a:	81 93       	st	Z+, r24
     f9c:	7f 01       	movw	r14, r30
		i++;
     f9e:	0f 5f       	subi	r16, 0xFF	; 255
     fa0:	1f 4f       	sbci	r17, 0xFF	; 255
	}
     fa2:	e7 cf       	rjmp	.-50     	; 0xf72 <USART_receiveString2+0x28>
	#ifdef DEBUG_M
	printf("rx int: %s\n", rx_buf);
	#endif
	strcpy(downlink, rx_buf);
}
     fa4:	c6 50       	subi	r28, 0x06	; 6
     fa6:	df 4f       	sbci	r29, 0xFF	; 255
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	ef 90       	pop	r14
     fbe:	08 95       	ret

00000fc0 <timers_init>:
		OCR1A = 31250;
		TIMSK1 |= (1 << OCIE1A);
	#endif

	#ifdef TIMER2
		TIMSK2 = 0;
     fc0:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		ASSR = 0b00100000;
     fc4:	80 e2       	ldi	r24, 0x20	; 32
     fc6:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
     fca:	2f ef       	ldi	r18, 0xFF	; 255
     fcc:	89 e6       	ldi	r24, 0x69	; 105
     fce:	98 e1       	ldi	r25, 0x18	; 24
     fd0:	21 50       	subi	r18, 0x01	; 1
     fd2:	80 40       	sbci	r24, 0x00	; 0
     fd4:	90 40       	sbci	r25, 0x00	; 0
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <timers_init+0x10>
     fd8:	00 c0       	rjmp	.+0      	; 0xfda <timers_init+0x1a>
     fda:	00 00       	nop
		_delay_ms(1000);
		TCCR2A = 0b00000000;
     fdc:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		TCCR2B = 0b00000101;
     fe0:	85 e0       	ldi	r24, 0x05	; 5
     fe2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		//Synchronize registers
		while (ASSR & ( (1 << TCN2UB) | (1 << TCR2AUB) | (1 << TCR2BUB) )) ;
     fe6:	e6 eb       	ldi	r30, 0xB6	; 182
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	83 71       	andi	r24, 0x13	; 19
     fee:	e9 f7       	brne	.-6      	; 0xfea <timers_init+0x2a>
		TIFR2 = 0; //Clear interrupt flags
     ff0:	17 ba       	out	0x17, r1	; 23
		TIMSK2 = (1 << TOIE2); //Enable overflow interrupt
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     ff8:	08 95       	ret

00000ffa <enter_powerSave>:
void enter_powerSave(){
	#ifdef USART2_START_COND_INTERRUPT
	UCSR2D |= (1<<SFDE) | (0<<RXSIE);			// Enable start condition detection with interrupt on RXCIE
	#endif
	
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     ffa:	83 b7       	in	r24, 0x33	; 51
     ffc:	81 7f       	andi	r24, 0xF1	; 241
     ffe:	86 60       	ori	r24, 0x06	; 6
    1000:	83 bf       	out	0x33, r24	; 51
	sleep_mode();
    1002:	83 b7       	in	r24, 0x33	; 51
    1004:	81 60       	ori	r24, 0x01	; 1
    1006:	83 bf       	out	0x33, r24	; 51
    1008:	88 95       	sleep
    100a:	83 b7       	in	r24, 0x33	; 51
    100c:	8e 7f       	andi	r24, 0xFE	; 254
    100e:	83 bf       	out	0x33, r24	; 51
    1010:	2f e7       	ldi	r18, 0x7F	; 127
    1012:	85 eb       	ldi	r24, 0xB5	; 181
    1014:	91 e0       	ldi	r25, 0x01	; 1
    1016:	21 50       	subi	r18, 0x01	; 1
    1018:	80 40       	sbci	r24, 0x00	; 0
    101a:	90 40       	sbci	r25, 0x00	; 0
    101c:	e1 f7       	brne	.-8      	; 0x1016 <enter_powerSave+0x1c>
    101e:	00 c0       	rjmp	.+0      	; 0x1020 <enter_powerSave+0x26>
    1020:	00 00       	nop
    1022:	08 95       	ret

00001024 <ascii_hex_decode>:
#include "USART.h"
#include <math.h>
#include <string.h>
//const char* test2 = "6363 3131 3535 6262 6666"; = "cc 11 55 bb ff" = "204 17 85 187 255"
//const char* test = "3565623838383532";
void ascii_hex_decode(const char *in, size_t len, uint8_t *out, int start){
    1024:	ef 92       	push	r14
    1026:	ff 92       	push	r15
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	e2 97       	sbiw	r28, 0x32	; 50
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	dc 01       	movw	r26, r24
    1042:	79 01       	movw	r14, r18
	char buf[50];
	uint8_t i, t, j, h, hn, ln, p1, p2;
	for (t = 0, i = start; i<len; i+=2, t++){
    1044:	32 2f       	mov	r19, r18
    1046:	f7 01       	movw	r30, r14
    1048:	ff 27       	eor	r31, r31
    104a:	e6 17       	cp	r30, r22
    104c:	f7 07       	cpc	r31, r23
    104e:	c8 f4       	brcc	.+50     	; 0x1082 <ascii_hex_decode+0x5e>
    1050:	80 e0       	ldi	r24, 0x00	; 0
		p1 = ((uint8_t)(in[i]) - '0')*16;
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
    1052:	01 e0       	ldi	r16, 0x01	; 1
    1054:	10 e0       	ldi	r17, 0x00	; 0
    1056:	0c 0f       	add	r16, r28
    1058:	1d 1f       	adc	r17, r29
    105a:	08 0f       	add	r16, r24
    105c:	11 1d       	adc	r17, r1
//const char* test = "3565623838383532";
void ascii_hex_decode(const char *in, size_t len, uint8_t *out, int start){
	char buf[50];
	uint8_t i, t, j, h, hn, ln, p1, p2;
	for (t = 0, i = start; i<len; i+=2, t++){
		p1 = ((uint8_t)(in[i]) - '0')*16;
    105e:	ea 0f       	add	r30, r26
    1060:	fb 1f       	adc	r31, r27
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
    1062:	20 81       	ld	r18, Z
    1064:	91 81       	ldd	r25, Z+1	; 0x01
    1066:	90 53       	subi	r25, 0x30	; 48
    1068:	e0 e1       	ldi	r30, 0x10	; 16
    106a:	2e 9f       	mul	r18, r30
    106c:	90 0d       	add	r25, r0
    106e:	11 24       	eor	r1, r1
    1070:	f8 01       	movw	r30, r16
    1072:	90 83       	st	Z, r25
//const char* test2 = "6363 3131 3535 6262 6666"; = "cc 11 55 bb ff" = "204 17 85 187 255"
//const char* test = "3565623838383532";
void ascii_hex_decode(const char *in, size_t len, uint8_t *out, int start){
	char buf[50];
	uint8_t i, t, j, h, hn, ln, p1, p2;
	for (t = 0, i = start; i<len; i+=2, t++){
    1074:	3e 5f       	subi	r19, 0xFE	; 254
    1076:	8f 5f       	subi	r24, 0xFF	; 255
    1078:	e3 2f       	mov	r30, r19
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	e6 17       	cp	r30, r22
    107e:	f7 07       	cpc	r31, r23
    1080:	40 f3       	brcs	.-48     	; 0x1052 <ascii_hex_decode+0x2e>
		p1 = ((uint8_t)(in[i]) - '0')*16;
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
	}
	for (h= 0,j = 0; j<(len-start)/2; j+=2, h++){
    1082:	6e 19       	sub	r22, r14
    1084:	7f 09       	sbc	r23, r15
    1086:	7b 01       	movw	r14, r22
    1088:	f6 94       	lsr	r15
    108a:	e7 94       	ror	r14
    108c:	e1 14       	cp	r14, r1
    108e:	f1 04       	cpc	r15, r1
    1090:	99 f1       	breq	.+102    	; 0x10f8 <ascii_hex_decode+0xd4>
    1092:	e0 e0       	ldi	r30, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
		hn = buf[j] > '9' ? buf[j] - 'a' + 10 : buf[j] - '0';
    1096:	27 2f       	mov	r18, r23
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	8c 0f       	add	r24, r28
    10a0:	9d 1f       	adc	r25, r29
    10a2:	82 0f       	add	r24, r18
    10a4:	93 1f       	adc	r25, r19
    10a6:	dc 01       	movw	r26, r24
    10a8:	8c 91       	ld	r24, X
    10aa:	8a 33       	cpi	r24, 0x3A	; 58
    10ac:	18 f0       	brcs	.+6      	; 0x10b4 <ascii_hex_decode+0x90>
    10ae:	99 ea       	ldi	r25, 0xA9	; 169
    10b0:	98 0f       	add	r25, r24
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <ascii_hex_decode+0x94>
    10b4:	90 ed       	ldi	r25, 0xD0	; 208
    10b6:	98 0f       	add	r25, r24
		ln = buf[j+1] > '9' ? buf[j+1] - 'a' + 10 : buf[j+1] - '0';
    10b8:	a2 e0       	ldi	r26, 0x02	; 2
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	ac 0f       	add	r26, r28
    10be:	bd 1f       	adc	r27, r29
    10c0:	2a 0f       	add	r18, r26
    10c2:	3b 1f       	adc	r19, r27
    10c4:	d9 01       	movw	r26, r18
    10c6:	8c 91       	ld	r24, X
    10c8:	8a 33       	cpi	r24, 0x3A	; 58
    10ca:	18 f0       	brcs	.+6      	; 0x10d2 <ascii_hex_decode+0xae>
    10cc:	29 ea       	ldi	r18, 0xA9	; 169
    10ce:	28 0f       	add	r18, r24
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <ascii_hex_decode+0xb2>
    10d2:	20 ed       	ldi	r18, 0xD0	; 208
    10d4:	28 0f       	add	r18, r24
		out[h] = (hn << 4) | ln;
    10d6:	8a 01       	movw	r16, r20
    10d8:	0e 0f       	add	r16, r30
    10da:	11 1d       	adc	r17, r1
    10dc:	b0 e1       	ldi	r27, 0x10	; 16
    10de:	9b 9f       	mul	r25, r27
    10e0:	c0 01       	movw	r24, r0
    10e2:	11 24       	eor	r1, r1
    10e4:	82 2b       	or	r24, r18
    10e6:	d8 01       	movw	r26, r16
    10e8:	8c 93       	st	X, r24
	for (t = 0, i = start; i<len; i+=2, t++){
		p1 = ((uint8_t)(in[i]) - '0')*16;
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
	}
	for (h= 0,j = 0; j<(len-start)/2; j+=2, h++){
    10ea:	7e 5f       	subi	r23, 0xFE	; 254
    10ec:	ef 5f       	subi	r30, 0xFF	; 255
    10ee:	87 2f       	mov	r24, r23
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	8e 15       	cp	r24, r14
    10f4:	9f 05       	cpc	r25, r15
    10f6:	78 f2       	brcs	.-98     	; 0x1096 <ascii_hex_decode+0x72>
		hn = buf[j] > '9' ? buf[j] - 'a' + 10 : buf[j] - '0';
		ln = buf[j+1] > '9' ? buf[j+1] - 'a' + 10 : buf[j+1] - '0';
		out[h] = (hn << 4) | ln;
	}
	//puts("");
}
    10f8:	e2 96       	adiw	r28, 0x32	; 50
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	08 95       	ret

00001112 <hex_decode>:

uint8_t* hex_decode(const char *in, size_t len,uint8_t *out, int start){
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	ec 01       	movw	r28, r24
    111c:	95 2f       	mov	r25, r21
	unsigned int i, t, hn, ln;
	for (t = 0,i = start; i < len; i+=2,++t) {
    111e:	26 17       	cp	r18, r22
    1120:	37 07       	cpc	r19, r23
    1122:	08 f5       	brcc	.+66     	; 0x1166 <hex_decode+0x54>
    1124:	c2 0f       	add	r28, r18
    1126:	d3 1f       	adc	r29, r19
    1128:	04 2f       	mov	r16, r20
    112a:	15 2f       	mov	r17, r21
    112c:	fe 01       	movw	r30, r28
		hn = in[i] > '9' ? in[i] - 'A' + 10 : in[i] - '0';
    112e:	a8 81       	ld	r26, Y
    1130:	aa 33       	cpi	r26, 0x3A	; 58
    1132:	18 f0       	brcs	.+6      	; 0x113a <hex_decode+0x28>
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	d7 97       	sbiw	r26, 0x37	; 55
    1138:	02 c0       	rjmp	.+4      	; 0x113e <hex_decode+0x2c>
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	d0 97       	sbiw	r26, 0x30	; 48
		ln = in[i+1] > '9' ? in[i+1] - 'A' + 10 : in[i+1] - '0';
    113e:	e1 81       	ldd	r30, Z+1	; 0x01
    1140:	ea 33       	cpi	r30, 0x3A	; 58
    1142:	18 f0       	brcs	.+6      	; 0x114a <hex_decode+0x38>
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	f7 97       	sbiw	r30, 0x37	; 55
    1148:	02 c0       	rjmp	.+4      	; 0x114e <hex_decode+0x3c>
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	f0 97       	sbiw	r30, 0x30	; 48
		out[t] = (hn << 4 ) | ln;
    114e:	a2 95       	swap	r26
    1150:	a0 7f       	andi	r26, 0xF0	; 240
    1152:	ea 2b       	or	r30, r26
    1154:	d8 01       	movw	r26, r16
    1156:	ed 93       	st	X+, r30
    1158:	8d 01       	movw	r16, r26
	//puts("");
}

uint8_t* hex_decode(const char *in, size_t len,uint8_t *out, int start){
	unsigned int i, t, hn, ln;
	for (t = 0,i = start; i < len; i+=2,++t) {
    115a:	2e 5f       	subi	r18, 0xFE	; 254
    115c:	3f 4f       	sbci	r19, 0xFF	; 255
    115e:	22 96       	adiw	r28, 0x02	; 2
    1160:	26 17       	cp	r18, r22
    1162:	37 07       	cpc	r19, r23
    1164:	18 f3       	brcs	.-58     	; 0x112c <hex_decode+0x1a>
		hn = in[i] > '9' ? in[i] - 'A' + 10 : in[i] - '0';
		ln = in[i+1] > '9' ? in[i+1] - 'A' + 10 : in[i+1] - '0';
		out[t] = (hn << 4 ) | ln;
	}
	return out;
}
    1166:	84 2f       	mov	r24, r20
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	08 95       	ret

00001172 <hex_encode>:

//				1  2  3  4  5  6  7  8  9 10 11 byte pair
//  MSG STYLE: xx xx xx xx xx xx xx xx xx xx xx
//  1: frame, 2-5: timestamp, 6: battery, 7+8: bus voltage, 9+10: current

char* hex_encode(board_t board){
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
	char *msg = malloc(30);
    117e:	8e e1       	ldi	r24, 0x1E	; 30
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <malloc>
    1186:	08 2f       	mov	r16, r24
    1188:	19 2f       	mov	r17, r25
	sprintf(msg, "%02X%02X%04X%04X", board.frame_counter, board.batteryLevel, board.ina219.bus_voltage, board.ina219.current);
    118a:	8c 85       	ldd	r24, Y+12	; 0x0c
    118c:	8f 93       	push	r24
    118e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1190:	8f 93       	push	r24
    1192:	8a 85       	ldd	r24, Y+10	; 0x0a
    1194:	8f 93       	push	r24
    1196:	89 85       	ldd	r24, Y+9	; 0x09
    1198:	8f 93       	push	r24
    119a:	88 85       	ldd	r24, Y+8	; 0x08
    119c:	1f 92       	push	r1
    119e:	8f 93       	push	r24
    11a0:	8f 81       	ldd	r24, Y+7	; 0x07
    11a2:	1f 92       	push	r1
    11a4:	8f 93       	push	r24
    11a6:	8f e3       	ldi	r24, 0x3F	; 63
    11a8:	95 e0       	ldi	r25, 0x05	; 5
    11aa:	9f 93       	push	r25
    11ac:	8f 93       	push	r24
    11ae:	1f 93       	push	r17
    11b0:	0f 93       	push	r16
    11b2:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <sprintf>
	return msg;
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
}
    11c0:	80 2f       	mov	r24, r16
    11c2:	91 2f       	mov	r25, r17
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	08 95       	ret

000011ce <vfprintf>:
    11ce:	a0 e1       	ldi	r26, 0x10	; 16
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	ed ee       	ldi	r30, 0xED	; 237
    11d4:	f8 e0       	ldi	r31, 0x08	; 8
    11d6:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__prologue_saves__>
    11da:	7c 01       	movw	r14, r24
    11dc:	1b 01       	movw	r2, r22
    11de:	6a 01       	movw	r12, r20
    11e0:	fc 01       	movw	r30, r24
    11e2:	17 82       	std	Z+7, r1	; 0x07
    11e4:	16 82       	std	Z+6, r1	; 0x06
    11e6:	83 81       	ldd	r24, Z+3	; 0x03
    11e8:	81 ff       	sbrs	r24, 1
    11ea:	44 c3       	rjmp	.+1672   	; 0x1874 <vfprintf+0x6a6>
    11ec:	9e 01       	movw	r18, r28
    11ee:	2f 5f       	subi	r18, 0xFF	; 255
    11f0:	3f 4f       	sbci	r19, 0xFF	; 255
    11f2:	39 01       	movw	r6, r18
    11f4:	f7 01       	movw	r30, r14
    11f6:	93 81       	ldd	r25, Z+3	; 0x03
    11f8:	f1 01       	movw	r30, r2
    11fa:	93 fd       	sbrc	r25, 3
    11fc:	85 91       	lpm	r24, Z+
    11fe:	93 ff       	sbrs	r25, 3
    1200:	81 91       	ld	r24, Z+
    1202:	1f 01       	movw	r2, r30
    1204:	88 23       	and	r24, r24
    1206:	09 f4       	brne	.+2      	; 0x120a <vfprintf+0x3c>
    1208:	31 c3       	rjmp	.+1634   	; 0x186c <vfprintf+0x69e>
    120a:	85 32       	cpi	r24, 0x25	; 37
    120c:	39 f4       	brne	.+14     	; 0x121c <vfprintf+0x4e>
    120e:	93 fd       	sbrc	r25, 3
    1210:	85 91       	lpm	r24, Z+
    1212:	93 ff       	sbrs	r25, 3
    1214:	81 91       	ld	r24, Z+
    1216:	1f 01       	movw	r2, r30
    1218:	85 32       	cpi	r24, 0x25	; 37
    121a:	39 f4       	brne	.+14     	; 0x122a <vfprintf+0x5c>
    121c:	b7 01       	movw	r22, r14
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1224:	56 01       	movw	r10, r12
    1226:	65 01       	movw	r12, r10
    1228:	e5 cf       	rjmp	.-54     	; 0x11f4 <vfprintf+0x26>
    122a:	10 e0       	ldi	r17, 0x00	; 0
    122c:	51 2c       	mov	r5, r1
    122e:	91 2c       	mov	r9, r1
    1230:	ff e1       	ldi	r31, 0x1F	; 31
    1232:	f9 15       	cp	r31, r9
    1234:	d8 f0       	brcs	.+54     	; 0x126c <vfprintf+0x9e>
    1236:	8b 32       	cpi	r24, 0x2B	; 43
    1238:	79 f0       	breq	.+30     	; 0x1258 <vfprintf+0x8a>
    123a:	38 f4       	brcc	.+14     	; 0x124a <vfprintf+0x7c>
    123c:	80 32       	cpi	r24, 0x20	; 32
    123e:	79 f0       	breq	.+30     	; 0x125e <vfprintf+0x90>
    1240:	83 32       	cpi	r24, 0x23	; 35
    1242:	a1 f4       	brne	.+40     	; 0x126c <vfprintf+0x9e>
    1244:	f9 2d       	mov	r31, r9
    1246:	f0 61       	ori	r31, 0x10	; 16
    1248:	2e c0       	rjmp	.+92     	; 0x12a6 <vfprintf+0xd8>
    124a:	8d 32       	cpi	r24, 0x2D	; 45
    124c:	61 f0       	breq	.+24     	; 0x1266 <vfprintf+0x98>
    124e:	80 33       	cpi	r24, 0x30	; 48
    1250:	69 f4       	brne	.+26     	; 0x126c <vfprintf+0x9e>
    1252:	29 2d       	mov	r18, r9
    1254:	21 60       	ori	r18, 0x01	; 1
    1256:	2d c0       	rjmp	.+90     	; 0x12b2 <vfprintf+0xe4>
    1258:	39 2d       	mov	r19, r9
    125a:	32 60       	ori	r19, 0x02	; 2
    125c:	93 2e       	mov	r9, r19
    125e:	89 2d       	mov	r24, r9
    1260:	84 60       	ori	r24, 0x04	; 4
    1262:	98 2e       	mov	r9, r24
    1264:	2a c0       	rjmp	.+84     	; 0x12ba <vfprintf+0xec>
    1266:	e9 2d       	mov	r30, r9
    1268:	e8 60       	ori	r30, 0x08	; 8
    126a:	15 c0       	rjmp	.+42     	; 0x1296 <vfprintf+0xc8>
    126c:	97 fc       	sbrc	r9, 7
    126e:	2d c0       	rjmp	.+90     	; 0x12ca <vfprintf+0xfc>
    1270:	20 ed       	ldi	r18, 0xD0	; 208
    1272:	28 0f       	add	r18, r24
    1274:	2a 30       	cpi	r18, 0x0A	; 10
    1276:	88 f4       	brcc	.+34     	; 0x129a <vfprintf+0xcc>
    1278:	96 fe       	sbrs	r9, 6
    127a:	06 c0       	rjmp	.+12     	; 0x1288 <vfprintf+0xba>
    127c:	3a e0       	ldi	r19, 0x0A	; 10
    127e:	13 9f       	mul	r17, r19
    1280:	20 0d       	add	r18, r0
    1282:	11 24       	eor	r1, r1
    1284:	12 2f       	mov	r17, r18
    1286:	19 c0       	rjmp	.+50     	; 0x12ba <vfprintf+0xec>
    1288:	8a e0       	ldi	r24, 0x0A	; 10
    128a:	58 9e       	mul	r5, r24
    128c:	20 0d       	add	r18, r0
    128e:	11 24       	eor	r1, r1
    1290:	52 2e       	mov	r5, r18
    1292:	e9 2d       	mov	r30, r9
    1294:	e0 62       	ori	r30, 0x20	; 32
    1296:	9e 2e       	mov	r9, r30
    1298:	10 c0       	rjmp	.+32     	; 0x12ba <vfprintf+0xec>
    129a:	8e 32       	cpi	r24, 0x2E	; 46
    129c:	31 f4       	brne	.+12     	; 0x12aa <vfprintf+0xdc>
    129e:	96 fc       	sbrc	r9, 6
    12a0:	e5 c2       	rjmp	.+1482   	; 0x186c <vfprintf+0x69e>
    12a2:	f9 2d       	mov	r31, r9
    12a4:	f0 64       	ori	r31, 0x40	; 64
    12a6:	9f 2e       	mov	r9, r31
    12a8:	08 c0       	rjmp	.+16     	; 0x12ba <vfprintf+0xec>
    12aa:	8c 36       	cpi	r24, 0x6C	; 108
    12ac:	21 f4       	brne	.+8      	; 0x12b6 <vfprintf+0xe8>
    12ae:	29 2d       	mov	r18, r9
    12b0:	20 68       	ori	r18, 0x80	; 128
    12b2:	92 2e       	mov	r9, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <vfprintf+0xec>
    12b6:	88 36       	cpi	r24, 0x68	; 104
    12b8:	41 f4       	brne	.+16     	; 0x12ca <vfprintf+0xfc>
    12ba:	f1 01       	movw	r30, r2
    12bc:	93 fd       	sbrc	r25, 3
    12be:	85 91       	lpm	r24, Z+
    12c0:	93 ff       	sbrs	r25, 3
    12c2:	81 91       	ld	r24, Z+
    12c4:	1f 01       	movw	r2, r30
    12c6:	81 11       	cpse	r24, r1
    12c8:	b3 cf       	rjmp	.-154    	; 0x1230 <vfprintf+0x62>
    12ca:	9b eb       	ldi	r25, 0xBB	; 187
    12cc:	98 0f       	add	r25, r24
    12ce:	93 30       	cpi	r25, 0x03	; 3
    12d0:	20 f4       	brcc	.+8      	; 0x12da <vfprintf+0x10c>
    12d2:	99 2d       	mov	r25, r9
    12d4:	90 61       	ori	r25, 0x10	; 16
    12d6:	80 5e       	subi	r24, 0xE0	; 224
    12d8:	07 c0       	rjmp	.+14     	; 0x12e8 <vfprintf+0x11a>
    12da:	9b e9       	ldi	r25, 0x9B	; 155
    12dc:	98 0f       	add	r25, r24
    12de:	93 30       	cpi	r25, 0x03	; 3
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <vfprintf+0x116>
    12e2:	66 c1       	rjmp	.+716    	; 0x15b0 <vfprintf+0x3e2>
    12e4:	99 2d       	mov	r25, r9
    12e6:	9f 7e       	andi	r25, 0xEF	; 239
    12e8:	96 ff       	sbrs	r25, 6
    12ea:	16 e0       	ldi	r17, 0x06	; 6
    12ec:	9f 73       	andi	r25, 0x3F	; 63
    12ee:	99 2e       	mov	r9, r25
    12f0:	85 36       	cpi	r24, 0x65	; 101
    12f2:	19 f4       	brne	.+6      	; 0x12fa <vfprintf+0x12c>
    12f4:	90 64       	ori	r25, 0x40	; 64
    12f6:	99 2e       	mov	r9, r25
    12f8:	08 c0       	rjmp	.+16     	; 0x130a <vfprintf+0x13c>
    12fa:	86 36       	cpi	r24, 0x66	; 102
    12fc:	21 f4       	brne	.+8      	; 0x1306 <vfprintf+0x138>
    12fe:	39 2f       	mov	r19, r25
    1300:	30 68       	ori	r19, 0x80	; 128
    1302:	93 2e       	mov	r9, r19
    1304:	02 c0       	rjmp	.+4      	; 0x130a <vfprintf+0x13c>
    1306:	11 11       	cpse	r17, r1
    1308:	11 50       	subi	r17, 0x01	; 1
    130a:	97 fe       	sbrs	r9, 7
    130c:	07 c0       	rjmp	.+14     	; 0x131c <vfprintf+0x14e>
    130e:	1c 33       	cpi	r17, 0x3C	; 60
    1310:	50 f4       	brcc	.+20     	; 0x1326 <vfprintf+0x158>
    1312:	44 24       	eor	r4, r4
    1314:	43 94       	inc	r4
    1316:	41 0e       	add	r4, r17
    1318:	27 e0       	ldi	r18, 0x07	; 7
    131a:	0b c0       	rjmp	.+22     	; 0x1332 <vfprintf+0x164>
    131c:	18 30       	cpi	r17, 0x08	; 8
    131e:	38 f0       	brcs	.+14     	; 0x132e <vfprintf+0x160>
    1320:	27 e0       	ldi	r18, 0x07	; 7
    1322:	17 e0       	ldi	r17, 0x07	; 7
    1324:	05 c0       	rjmp	.+10     	; 0x1330 <vfprintf+0x162>
    1326:	27 e0       	ldi	r18, 0x07	; 7
    1328:	9c e3       	ldi	r25, 0x3C	; 60
    132a:	49 2e       	mov	r4, r25
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <vfprintf+0x164>
    132e:	21 2f       	mov	r18, r17
    1330:	41 2c       	mov	r4, r1
    1332:	56 01       	movw	r10, r12
    1334:	84 e0       	ldi	r24, 0x04	; 4
    1336:	a8 0e       	add	r10, r24
    1338:	b1 1c       	adc	r11, r1
    133a:	f6 01       	movw	r30, r12
    133c:	60 81       	ld	r22, Z
    133e:	71 81       	ldd	r23, Z+1	; 0x01
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	93 81       	ldd	r25, Z+3	; 0x03
    1344:	04 2d       	mov	r16, r4
    1346:	a3 01       	movw	r20, r6
    1348:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__ftoa_engine>
    134c:	6c 01       	movw	r12, r24
    134e:	f9 81       	ldd	r31, Y+1	; 0x01
    1350:	fc 87       	std	Y+12, r31	; 0x0c
    1352:	f0 ff       	sbrs	r31, 0
    1354:	02 c0       	rjmp	.+4      	; 0x135a <vfprintf+0x18c>
    1356:	f3 ff       	sbrs	r31, 3
    1358:	06 c0       	rjmp	.+12     	; 0x1366 <vfprintf+0x198>
    135a:	91 fc       	sbrc	r9, 1
    135c:	06 c0       	rjmp	.+12     	; 0x136a <vfprintf+0x19c>
    135e:	92 fe       	sbrs	r9, 2
    1360:	06 c0       	rjmp	.+12     	; 0x136e <vfprintf+0x1a0>
    1362:	00 e2       	ldi	r16, 0x20	; 32
    1364:	05 c0       	rjmp	.+10     	; 0x1370 <vfprintf+0x1a2>
    1366:	0d e2       	ldi	r16, 0x2D	; 45
    1368:	03 c0       	rjmp	.+6      	; 0x1370 <vfprintf+0x1a2>
    136a:	0b e2       	ldi	r16, 0x2B	; 43
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <vfprintf+0x1a2>
    136e:	00 e0       	ldi	r16, 0x00	; 0
    1370:	8c 85       	ldd	r24, Y+12	; 0x0c
    1372:	8c 70       	andi	r24, 0x0C	; 12
    1374:	19 f0       	breq	.+6      	; 0x137c <vfprintf+0x1ae>
    1376:	01 11       	cpse	r16, r1
    1378:	5a c2       	rjmp	.+1204   	; 0x182e <vfprintf+0x660>
    137a:	9b c2       	rjmp	.+1334   	; 0x18b2 <vfprintf+0x6e4>
    137c:	97 fe       	sbrs	r9, 7
    137e:	10 c0       	rjmp	.+32     	; 0x13a0 <vfprintf+0x1d2>
    1380:	4c 0c       	add	r4, r12
    1382:	fc 85       	ldd	r31, Y+12	; 0x0c
    1384:	f4 ff       	sbrs	r31, 4
    1386:	04 c0       	rjmp	.+8      	; 0x1390 <vfprintf+0x1c2>
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	81 33       	cpi	r24, 0x31	; 49
    138c:	09 f4       	brne	.+2      	; 0x1390 <vfprintf+0x1c2>
    138e:	4a 94       	dec	r4
    1390:	14 14       	cp	r1, r4
    1392:	74 f5       	brge	.+92     	; 0x13f0 <vfprintf+0x222>
    1394:	28 e0       	ldi	r18, 0x08	; 8
    1396:	24 15       	cp	r18, r4
    1398:	78 f5       	brcc	.+94     	; 0x13f8 <vfprintf+0x22a>
    139a:	88 e0       	ldi	r24, 0x08	; 8
    139c:	48 2e       	mov	r4, r24
    139e:	2c c0       	rjmp	.+88     	; 0x13f8 <vfprintf+0x22a>
    13a0:	96 fc       	sbrc	r9, 6
    13a2:	2a c0       	rjmp	.+84     	; 0x13f8 <vfprintf+0x22a>
    13a4:	81 2f       	mov	r24, r17
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	8c 15       	cp	r24, r12
    13aa:	9d 05       	cpc	r25, r13
    13ac:	9c f0       	brlt	.+38     	; 0x13d4 <vfprintf+0x206>
    13ae:	3c ef       	ldi	r19, 0xFC	; 252
    13b0:	c3 16       	cp	r12, r19
    13b2:	3f ef       	ldi	r19, 0xFF	; 255
    13b4:	d3 06       	cpc	r13, r19
    13b6:	74 f0       	brlt	.+28     	; 0x13d4 <vfprintf+0x206>
    13b8:	89 2d       	mov	r24, r9
    13ba:	80 68       	ori	r24, 0x80	; 128
    13bc:	98 2e       	mov	r9, r24
    13be:	0a c0       	rjmp	.+20     	; 0x13d4 <vfprintf+0x206>
    13c0:	e2 e0       	ldi	r30, 0x02	; 2
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	ec 0f       	add	r30, r28
    13c6:	fd 1f       	adc	r31, r29
    13c8:	e1 0f       	add	r30, r17
    13ca:	f1 1d       	adc	r31, r1
    13cc:	80 81       	ld	r24, Z
    13ce:	80 33       	cpi	r24, 0x30	; 48
    13d0:	19 f4       	brne	.+6      	; 0x13d8 <vfprintf+0x20a>
    13d2:	11 50       	subi	r17, 0x01	; 1
    13d4:	11 11       	cpse	r17, r1
    13d6:	f4 cf       	rjmp	.-24     	; 0x13c0 <vfprintf+0x1f2>
    13d8:	97 fe       	sbrs	r9, 7
    13da:	0e c0       	rjmp	.+28     	; 0x13f8 <vfprintf+0x22a>
    13dc:	44 24       	eor	r4, r4
    13de:	43 94       	inc	r4
    13e0:	41 0e       	add	r4, r17
    13e2:	81 2f       	mov	r24, r17
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	c8 16       	cp	r12, r24
    13e8:	d9 06       	cpc	r13, r25
    13ea:	2c f4       	brge	.+10     	; 0x13f6 <vfprintf+0x228>
    13ec:	1c 19       	sub	r17, r12
    13ee:	04 c0       	rjmp	.+8      	; 0x13f8 <vfprintf+0x22a>
    13f0:	44 24       	eor	r4, r4
    13f2:	43 94       	inc	r4
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <vfprintf+0x22a>
    13f6:	10 e0       	ldi	r17, 0x00	; 0
    13f8:	97 fe       	sbrs	r9, 7
    13fa:	06 c0       	rjmp	.+12     	; 0x1408 <vfprintf+0x23a>
    13fc:	1c 14       	cp	r1, r12
    13fe:	1d 04       	cpc	r1, r13
    1400:	34 f4       	brge	.+12     	; 0x140e <vfprintf+0x240>
    1402:	c6 01       	movw	r24, r12
    1404:	01 96       	adiw	r24, 0x01	; 1
    1406:	05 c0       	rjmp	.+10     	; 0x1412 <vfprintf+0x244>
    1408:	85 e0       	ldi	r24, 0x05	; 5
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <vfprintf+0x244>
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	01 11       	cpse	r16, r1
    1414:	01 96       	adiw	r24, 0x01	; 1
    1416:	11 23       	and	r17, r17
    1418:	31 f0       	breq	.+12     	; 0x1426 <vfprintf+0x258>
    141a:	21 2f       	mov	r18, r17
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	2f 5f       	subi	r18, 0xFF	; 255
    1420:	3f 4f       	sbci	r19, 0xFF	; 255
    1422:	82 0f       	add	r24, r18
    1424:	93 1f       	adc	r25, r19
    1426:	25 2d       	mov	r18, r5
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	82 17       	cp	r24, r18
    142c:	93 07       	cpc	r25, r19
    142e:	14 f4       	brge	.+4      	; 0x1434 <vfprintf+0x266>
    1430:	58 1a       	sub	r5, r24
    1432:	01 c0       	rjmp	.+2      	; 0x1436 <vfprintf+0x268>
    1434:	51 2c       	mov	r5, r1
    1436:	89 2d       	mov	r24, r9
    1438:	89 70       	andi	r24, 0x09	; 9
    143a:	49 f4       	brne	.+18     	; 0x144e <vfprintf+0x280>
    143c:	55 20       	and	r5, r5
    143e:	39 f0       	breq	.+14     	; 0x144e <vfprintf+0x280>
    1440:	b7 01       	movw	r22, r14
    1442:	80 e2       	ldi	r24, 0x20	; 32
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    144a:	5a 94       	dec	r5
    144c:	f7 cf       	rjmp	.-18     	; 0x143c <vfprintf+0x26e>
    144e:	00 23       	and	r16, r16
    1450:	29 f0       	breq	.+10     	; 0x145c <vfprintf+0x28e>
    1452:	b7 01       	movw	r22, r14
    1454:	80 2f       	mov	r24, r16
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    145c:	93 fc       	sbrc	r9, 3
    145e:	09 c0       	rjmp	.+18     	; 0x1472 <vfprintf+0x2a4>
    1460:	55 20       	and	r5, r5
    1462:	39 f0       	breq	.+14     	; 0x1472 <vfprintf+0x2a4>
    1464:	b7 01       	movw	r22, r14
    1466:	80 e3       	ldi	r24, 0x30	; 48
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    146e:	5a 94       	dec	r5
    1470:	f7 cf       	rjmp	.-18     	; 0x1460 <vfprintf+0x292>
    1472:	97 fe       	sbrs	r9, 7
    1474:	4c c0       	rjmp	.+152    	; 0x150e <vfprintf+0x340>
    1476:	46 01       	movw	r8, r12
    1478:	d7 fe       	sbrs	r13, 7
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <vfprintf+0x2b2>
    147c:	81 2c       	mov	r8, r1
    147e:	91 2c       	mov	r9, r1
    1480:	c6 01       	movw	r24, r12
    1482:	88 19       	sub	r24, r8
    1484:	99 09       	sbc	r25, r9
    1486:	f3 01       	movw	r30, r6
    1488:	e8 0f       	add	r30, r24
    148a:	f9 1f       	adc	r31, r25
    148c:	fe 87       	std	Y+14, r31	; 0x0e
    148e:	ed 87       	std	Y+13, r30	; 0x0d
    1490:	96 01       	movw	r18, r12
    1492:	24 19       	sub	r18, r4
    1494:	31 09       	sbc	r19, r1
    1496:	38 8b       	std	Y+16, r19	; 0x10
    1498:	2f 87       	std	Y+15, r18	; 0x0f
    149a:	01 2f       	mov	r16, r17
    149c:	10 e0       	ldi	r17, 0x00	; 0
    149e:	11 95       	neg	r17
    14a0:	01 95       	neg	r16
    14a2:	11 09       	sbc	r17, r1
    14a4:	3f ef       	ldi	r19, 0xFF	; 255
    14a6:	83 16       	cp	r8, r19
    14a8:	93 06       	cpc	r9, r19
    14aa:	29 f4       	brne	.+10     	; 0x14b6 <vfprintf+0x2e8>
    14ac:	b7 01       	movw	r22, r14
    14ae:	8e e2       	ldi	r24, 0x2E	; 46
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    14b6:	c8 14       	cp	r12, r8
    14b8:	d9 04       	cpc	r13, r9
    14ba:	4c f0       	brlt	.+18     	; 0x14ce <vfprintf+0x300>
    14bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    14be:	98 89       	ldd	r25, Y+16	; 0x10
    14c0:	88 15       	cp	r24, r8
    14c2:	99 05       	cpc	r25, r9
    14c4:	24 f4       	brge	.+8      	; 0x14ce <vfprintf+0x300>
    14c6:	ed 85       	ldd	r30, Y+13	; 0x0d
    14c8:	fe 85       	ldd	r31, Y+14	; 0x0e
    14ca:	81 81       	ldd	r24, Z+1	; 0x01
    14cc:	01 c0       	rjmp	.+2      	; 0x14d0 <vfprintf+0x302>
    14ce:	80 e3       	ldi	r24, 0x30	; 48
    14d0:	f1 e0       	ldi	r31, 0x01	; 1
    14d2:	8f 1a       	sub	r8, r31
    14d4:	91 08       	sbc	r9, r1
    14d6:	2d 85       	ldd	r18, Y+13	; 0x0d
    14d8:	3e 85       	ldd	r19, Y+14	; 0x0e
    14da:	2f 5f       	subi	r18, 0xFF	; 255
    14dc:	3f 4f       	sbci	r19, 0xFF	; 255
    14de:	3e 87       	std	Y+14, r19	; 0x0e
    14e0:	2d 87       	std	Y+13, r18	; 0x0d
    14e2:	80 16       	cp	r8, r16
    14e4:	91 06       	cpc	r9, r17
    14e6:	2c f0       	brlt	.+10     	; 0x14f2 <vfprintf+0x324>
    14e8:	b7 01       	movw	r22, r14
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    14f0:	d9 cf       	rjmp	.-78     	; 0x14a4 <vfprintf+0x2d6>
    14f2:	c8 14       	cp	r12, r8
    14f4:	d9 04       	cpc	r13, r9
    14f6:	41 f4       	brne	.+16     	; 0x1508 <vfprintf+0x33a>
    14f8:	9a 81       	ldd	r25, Y+2	; 0x02
    14fa:	96 33       	cpi	r25, 0x36	; 54
    14fc:	20 f4       	brcc	.+8      	; 0x1506 <vfprintf+0x338>
    14fe:	95 33       	cpi	r25, 0x35	; 53
    1500:	19 f4       	brne	.+6      	; 0x1508 <vfprintf+0x33a>
    1502:	3c 85       	ldd	r19, Y+12	; 0x0c
    1504:	34 ff       	sbrs	r19, 4
    1506:	81 e3       	ldi	r24, 0x31	; 49
    1508:	b7 01       	movw	r22, r14
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	4e c0       	rjmp	.+156    	; 0x15aa <vfprintf+0x3dc>
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	81 33       	cpi	r24, 0x31	; 49
    1512:	19 f0       	breq	.+6      	; 0x151a <vfprintf+0x34c>
    1514:	9c 85       	ldd	r25, Y+12	; 0x0c
    1516:	9f 7e       	andi	r25, 0xEF	; 239
    1518:	9c 87       	std	Y+12, r25	; 0x0c
    151a:	b7 01       	movw	r22, r14
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1522:	11 11       	cpse	r17, r1
    1524:	05 c0       	rjmp	.+10     	; 0x1530 <vfprintf+0x362>
    1526:	94 fc       	sbrc	r9, 4
    1528:	18 c0       	rjmp	.+48     	; 0x155a <vfprintf+0x38c>
    152a:	85 e6       	ldi	r24, 0x65	; 101
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	17 c0       	rjmp	.+46     	; 0x155e <vfprintf+0x390>
    1530:	b7 01       	movw	r22, r14
    1532:	8e e2       	ldi	r24, 0x2E	; 46
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    153a:	1e 5f       	subi	r17, 0xFE	; 254
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	01 e0       	ldi	r16, 0x01	; 1
    1540:	08 0f       	add	r16, r24
    1542:	f3 01       	movw	r30, r6
    1544:	e8 0f       	add	r30, r24
    1546:	f1 1d       	adc	r31, r1
    1548:	80 81       	ld	r24, Z
    154a:	b7 01       	movw	r22, r14
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1552:	80 2f       	mov	r24, r16
    1554:	01 13       	cpse	r16, r17
    1556:	f3 cf       	rjmp	.-26     	; 0x153e <vfprintf+0x370>
    1558:	e6 cf       	rjmp	.-52     	; 0x1526 <vfprintf+0x358>
    155a:	85 e4       	ldi	r24, 0x45	; 69
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	b7 01       	movw	r22, r14
    1560:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1564:	d7 fc       	sbrc	r13, 7
    1566:	06 c0       	rjmp	.+12     	; 0x1574 <vfprintf+0x3a6>
    1568:	c1 14       	cp	r12, r1
    156a:	d1 04       	cpc	r13, r1
    156c:	41 f4       	brne	.+16     	; 0x157e <vfprintf+0x3b0>
    156e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1570:	e4 ff       	sbrs	r30, 4
    1572:	05 c0       	rjmp	.+10     	; 0x157e <vfprintf+0x3b0>
    1574:	d1 94       	neg	r13
    1576:	c1 94       	neg	r12
    1578:	d1 08       	sbc	r13, r1
    157a:	8d e2       	ldi	r24, 0x2D	; 45
    157c:	01 c0       	rjmp	.+2      	; 0x1580 <vfprintf+0x3b2>
    157e:	8b e2       	ldi	r24, 0x2B	; 43
    1580:	b7 01       	movw	r22, r14
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1588:	80 e3       	ldi	r24, 0x30	; 48
    158a:	2a e0       	ldi	r18, 0x0A	; 10
    158c:	c2 16       	cp	r12, r18
    158e:	d1 04       	cpc	r13, r1
    1590:	2c f0       	brlt	.+10     	; 0x159c <vfprintf+0x3ce>
    1592:	8f 5f       	subi	r24, 0xFF	; 255
    1594:	fa e0       	ldi	r31, 0x0A	; 10
    1596:	cf 1a       	sub	r12, r31
    1598:	d1 08       	sbc	r13, r1
    159a:	f7 cf       	rjmp	.-18     	; 0x158a <vfprintf+0x3bc>
    159c:	b7 01       	movw	r22, r14
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    15a4:	b7 01       	movw	r22, r14
    15a6:	c6 01       	movw	r24, r12
    15a8:	c0 96       	adiw	r24, 0x30	; 48
    15aa:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    15ae:	54 c1       	rjmp	.+680    	; 0x1858 <vfprintf+0x68a>
    15b0:	83 36       	cpi	r24, 0x63	; 99
    15b2:	31 f0       	breq	.+12     	; 0x15c0 <vfprintf+0x3f2>
    15b4:	83 37       	cpi	r24, 0x73	; 115
    15b6:	79 f0       	breq	.+30     	; 0x15d6 <vfprintf+0x408>
    15b8:	83 35       	cpi	r24, 0x53	; 83
    15ba:	09 f0       	breq	.+2      	; 0x15be <vfprintf+0x3f0>
    15bc:	56 c0       	rjmp	.+172    	; 0x166a <vfprintf+0x49c>
    15be:	20 c0       	rjmp	.+64     	; 0x1600 <vfprintf+0x432>
    15c0:	56 01       	movw	r10, r12
    15c2:	32 e0       	ldi	r19, 0x02	; 2
    15c4:	a3 0e       	add	r10, r19
    15c6:	b1 1c       	adc	r11, r1
    15c8:	f6 01       	movw	r30, r12
    15ca:	80 81       	ld	r24, Z
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	01 e0       	ldi	r16, 0x01	; 1
    15d0:	10 e0       	ldi	r17, 0x00	; 0
    15d2:	63 01       	movw	r12, r6
    15d4:	12 c0       	rjmp	.+36     	; 0x15fa <vfprintf+0x42c>
    15d6:	56 01       	movw	r10, r12
    15d8:	f2 e0       	ldi	r31, 0x02	; 2
    15da:	af 0e       	add	r10, r31
    15dc:	b1 1c       	adc	r11, r1
    15de:	f6 01       	movw	r30, r12
    15e0:	c0 80       	ld	r12, Z
    15e2:	d1 80       	ldd	r13, Z+1	; 0x01
    15e4:	96 fe       	sbrs	r9, 6
    15e6:	03 c0       	rjmp	.+6      	; 0x15ee <vfprintf+0x420>
    15e8:	61 2f       	mov	r22, r17
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <vfprintf+0x424>
    15ee:	6f ef       	ldi	r22, 0xFF	; 255
    15f0:	7f ef       	ldi	r23, 0xFF	; 255
    15f2:	c6 01       	movw	r24, r12
    15f4:	0e 94 84 10 	call	0x2108	; 0x2108 <strnlen>
    15f8:	8c 01       	movw	r16, r24
    15fa:	f9 2d       	mov	r31, r9
    15fc:	ff 77       	andi	r31, 0x7F	; 127
    15fe:	14 c0       	rjmp	.+40     	; 0x1628 <vfprintf+0x45a>
    1600:	56 01       	movw	r10, r12
    1602:	22 e0       	ldi	r18, 0x02	; 2
    1604:	a2 0e       	add	r10, r18
    1606:	b1 1c       	adc	r11, r1
    1608:	f6 01       	movw	r30, r12
    160a:	c0 80       	ld	r12, Z
    160c:	d1 80       	ldd	r13, Z+1	; 0x01
    160e:	96 fe       	sbrs	r9, 6
    1610:	03 c0       	rjmp	.+6      	; 0x1618 <vfprintf+0x44a>
    1612:	61 2f       	mov	r22, r17
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	02 c0       	rjmp	.+4      	; 0x161c <vfprintf+0x44e>
    1618:	6f ef       	ldi	r22, 0xFF	; 255
    161a:	7f ef       	ldi	r23, 0xFF	; 255
    161c:	c6 01       	movw	r24, r12
    161e:	0e 94 59 10 	call	0x20b2	; 0x20b2 <strnlen_P>
    1622:	8c 01       	movw	r16, r24
    1624:	f9 2d       	mov	r31, r9
    1626:	f0 68       	ori	r31, 0x80	; 128
    1628:	9f 2e       	mov	r9, r31
    162a:	f3 fd       	sbrc	r31, 3
    162c:	1a c0       	rjmp	.+52     	; 0x1662 <vfprintf+0x494>
    162e:	85 2d       	mov	r24, r5
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	08 17       	cp	r16, r24
    1634:	19 07       	cpc	r17, r25
    1636:	a8 f4       	brcc	.+42     	; 0x1662 <vfprintf+0x494>
    1638:	b7 01       	movw	r22, r14
    163a:	80 e2       	ldi	r24, 0x20	; 32
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1642:	5a 94       	dec	r5
    1644:	f4 cf       	rjmp	.-24     	; 0x162e <vfprintf+0x460>
    1646:	f6 01       	movw	r30, r12
    1648:	97 fc       	sbrc	r9, 7
    164a:	85 91       	lpm	r24, Z+
    164c:	97 fe       	sbrs	r9, 7
    164e:	81 91       	ld	r24, Z+
    1650:	6f 01       	movw	r12, r30
    1652:	b7 01       	movw	r22, r14
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    165a:	51 10       	cpse	r5, r1
    165c:	5a 94       	dec	r5
    165e:	01 50       	subi	r16, 0x01	; 1
    1660:	11 09       	sbc	r17, r1
    1662:	01 15       	cp	r16, r1
    1664:	11 05       	cpc	r17, r1
    1666:	79 f7       	brne	.-34     	; 0x1646 <vfprintf+0x478>
    1668:	f7 c0       	rjmp	.+494    	; 0x1858 <vfprintf+0x68a>
    166a:	84 36       	cpi	r24, 0x64	; 100
    166c:	11 f0       	breq	.+4      	; 0x1672 <vfprintf+0x4a4>
    166e:	89 36       	cpi	r24, 0x69	; 105
    1670:	61 f5       	brne	.+88     	; 0x16ca <vfprintf+0x4fc>
    1672:	56 01       	movw	r10, r12
    1674:	97 fe       	sbrs	r9, 7
    1676:	09 c0       	rjmp	.+18     	; 0x168a <vfprintf+0x4bc>
    1678:	24 e0       	ldi	r18, 0x04	; 4
    167a:	a2 0e       	add	r10, r18
    167c:	b1 1c       	adc	r11, r1
    167e:	f6 01       	movw	r30, r12
    1680:	60 81       	ld	r22, Z
    1682:	71 81       	ldd	r23, Z+1	; 0x01
    1684:	82 81       	ldd	r24, Z+2	; 0x02
    1686:	93 81       	ldd	r25, Z+3	; 0x03
    1688:	0a c0       	rjmp	.+20     	; 0x169e <vfprintf+0x4d0>
    168a:	f2 e0       	ldi	r31, 0x02	; 2
    168c:	af 0e       	add	r10, r31
    168e:	b1 1c       	adc	r11, r1
    1690:	f6 01       	movw	r30, r12
    1692:	60 81       	ld	r22, Z
    1694:	71 81       	ldd	r23, Z+1	; 0x01
    1696:	07 2e       	mov	r0, r23
    1698:	00 0c       	add	r0, r0
    169a:	88 0b       	sbc	r24, r24
    169c:	99 0b       	sbc	r25, r25
    169e:	f9 2d       	mov	r31, r9
    16a0:	ff 76       	andi	r31, 0x6F	; 111
    16a2:	9f 2e       	mov	r9, r31
    16a4:	97 ff       	sbrs	r25, 7
    16a6:	09 c0       	rjmp	.+18     	; 0x16ba <vfprintf+0x4ec>
    16a8:	90 95       	com	r25
    16aa:	80 95       	com	r24
    16ac:	70 95       	com	r23
    16ae:	61 95       	neg	r22
    16b0:	7f 4f       	sbci	r23, 0xFF	; 255
    16b2:	8f 4f       	sbci	r24, 0xFF	; 255
    16b4:	9f 4f       	sbci	r25, 0xFF	; 255
    16b6:	f0 68       	ori	r31, 0x80	; 128
    16b8:	9f 2e       	mov	r9, r31
    16ba:	2a e0       	ldi	r18, 0x0A	; 10
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	a3 01       	movw	r20, r6
    16c0:	0e 94 1d 11 	call	0x223a	; 0x223a <__ultoa_invert>
    16c4:	c8 2e       	mov	r12, r24
    16c6:	c6 18       	sub	r12, r6
    16c8:	3f c0       	rjmp	.+126    	; 0x1748 <vfprintf+0x57a>
    16ca:	09 2d       	mov	r16, r9
    16cc:	85 37       	cpi	r24, 0x75	; 117
    16ce:	21 f4       	brne	.+8      	; 0x16d8 <vfprintf+0x50a>
    16d0:	0f 7e       	andi	r16, 0xEF	; 239
    16d2:	2a e0       	ldi	r18, 0x0A	; 10
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	1d c0       	rjmp	.+58     	; 0x1712 <vfprintf+0x544>
    16d8:	09 7f       	andi	r16, 0xF9	; 249
    16da:	8f 36       	cpi	r24, 0x6F	; 111
    16dc:	91 f0       	breq	.+36     	; 0x1702 <vfprintf+0x534>
    16de:	18 f4       	brcc	.+6      	; 0x16e6 <vfprintf+0x518>
    16e0:	88 35       	cpi	r24, 0x58	; 88
    16e2:	59 f0       	breq	.+22     	; 0x16fa <vfprintf+0x52c>
    16e4:	c3 c0       	rjmp	.+390    	; 0x186c <vfprintf+0x69e>
    16e6:	80 37       	cpi	r24, 0x70	; 112
    16e8:	19 f0       	breq	.+6      	; 0x16f0 <vfprintf+0x522>
    16ea:	88 37       	cpi	r24, 0x78	; 120
    16ec:	11 f0       	breq	.+4      	; 0x16f2 <vfprintf+0x524>
    16ee:	be c0       	rjmp	.+380    	; 0x186c <vfprintf+0x69e>
    16f0:	00 61       	ori	r16, 0x10	; 16
    16f2:	04 ff       	sbrs	r16, 4
    16f4:	09 c0       	rjmp	.+18     	; 0x1708 <vfprintf+0x53a>
    16f6:	04 60       	ori	r16, 0x04	; 4
    16f8:	07 c0       	rjmp	.+14     	; 0x1708 <vfprintf+0x53a>
    16fa:	94 fe       	sbrs	r9, 4
    16fc:	08 c0       	rjmp	.+16     	; 0x170e <vfprintf+0x540>
    16fe:	06 60       	ori	r16, 0x06	; 6
    1700:	06 c0       	rjmp	.+12     	; 0x170e <vfprintf+0x540>
    1702:	28 e0       	ldi	r18, 0x08	; 8
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	05 c0       	rjmp	.+10     	; 0x1712 <vfprintf+0x544>
    1708:	20 e1       	ldi	r18, 0x10	; 16
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <vfprintf+0x544>
    170e:	20 e1       	ldi	r18, 0x10	; 16
    1710:	32 e0       	ldi	r19, 0x02	; 2
    1712:	56 01       	movw	r10, r12
    1714:	07 ff       	sbrs	r16, 7
    1716:	09 c0       	rjmp	.+18     	; 0x172a <vfprintf+0x55c>
    1718:	84 e0       	ldi	r24, 0x04	; 4
    171a:	a8 0e       	add	r10, r24
    171c:	b1 1c       	adc	r11, r1
    171e:	f6 01       	movw	r30, r12
    1720:	60 81       	ld	r22, Z
    1722:	71 81       	ldd	r23, Z+1	; 0x01
    1724:	82 81       	ldd	r24, Z+2	; 0x02
    1726:	93 81       	ldd	r25, Z+3	; 0x03
    1728:	08 c0       	rjmp	.+16     	; 0x173a <vfprintf+0x56c>
    172a:	f2 e0       	ldi	r31, 0x02	; 2
    172c:	af 0e       	add	r10, r31
    172e:	b1 1c       	adc	r11, r1
    1730:	f6 01       	movw	r30, r12
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	a3 01       	movw	r20, r6
    173c:	0e 94 1d 11 	call	0x223a	; 0x223a <__ultoa_invert>
    1740:	c8 2e       	mov	r12, r24
    1742:	c6 18       	sub	r12, r6
    1744:	0f 77       	andi	r16, 0x7F	; 127
    1746:	90 2e       	mov	r9, r16
    1748:	96 fe       	sbrs	r9, 6
    174a:	0b c0       	rjmp	.+22     	; 0x1762 <vfprintf+0x594>
    174c:	09 2d       	mov	r16, r9
    174e:	0e 7f       	andi	r16, 0xFE	; 254
    1750:	c1 16       	cp	r12, r17
    1752:	50 f4       	brcc	.+20     	; 0x1768 <vfprintf+0x59a>
    1754:	94 fe       	sbrs	r9, 4
    1756:	0a c0       	rjmp	.+20     	; 0x176c <vfprintf+0x59e>
    1758:	92 fc       	sbrc	r9, 2
    175a:	08 c0       	rjmp	.+16     	; 0x176c <vfprintf+0x59e>
    175c:	09 2d       	mov	r16, r9
    175e:	0e 7e       	andi	r16, 0xEE	; 238
    1760:	05 c0       	rjmp	.+10     	; 0x176c <vfprintf+0x59e>
    1762:	dc 2c       	mov	r13, r12
    1764:	09 2d       	mov	r16, r9
    1766:	03 c0       	rjmp	.+6      	; 0x176e <vfprintf+0x5a0>
    1768:	dc 2c       	mov	r13, r12
    176a:	01 c0       	rjmp	.+2      	; 0x176e <vfprintf+0x5a0>
    176c:	d1 2e       	mov	r13, r17
    176e:	04 ff       	sbrs	r16, 4
    1770:	0d c0       	rjmp	.+26     	; 0x178c <vfprintf+0x5be>
    1772:	fe 01       	movw	r30, r28
    1774:	ec 0d       	add	r30, r12
    1776:	f1 1d       	adc	r31, r1
    1778:	80 81       	ld	r24, Z
    177a:	80 33       	cpi	r24, 0x30	; 48
    177c:	11 f4       	brne	.+4      	; 0x1782 <vfprintf+0x5b4>
    177e:	09 7e       	andi	r16, 0xE9	; 233
    1780:	09 c0       	rjmp	.+18     	; 0x1794 <vfprintf+0x5c6>
    1782:	02 ff       	sbrs	r16, 2
    1784:	06 c0       	rjmp	.+12     	; 0x1792 <vfprintf+0x5c4>
    1786:	d3 94       	inc	r13
    1788:	d3 94       	inc	r13
    178a:	04 c0       	rjmp	.+8      	; 0x1794 <vfprintf+0x5c6>
    178c:	80 2f       	mov	r24, r16
    178e:	86 78       	andi	r24, 0x86	; 134
    1790:	09 f0       	breq	.+2      	; 0x1794 <vfprintf+0x5c6>
    1792:	d3 94       	inc	r13
    1794:	03 fd       	sbrc	r16, 3
    1796:	11 c0       	rjmp	.+34     	; 0x17ba <vfprintf+0x5ec>
    1798:	00 ff       	sbrs	r16, 0
    179a:	06 c0       	rjmp	.+12     	; 0x17a8 <vfprintf+0x5da>
    179c:	1c 2d       	mov	r17, r12
    179e:	d5 14       	cp	r13, r5
    17a0:	80 f4       	brcc	.+32     	; 0x17c2 <vfprintf+0x5f4>
    17a2:	15 0d       	add	r17, r5
    17a4:	1d 19       	sub	r17, r13
    17a6:	0d c0       	rjmp	.+26     	; 0x17c2 <vfprintf+0x5f4>
    17a8:	d5 14       	cp	r13, r5
    17aa:	58 f4       	brcc	.+22     	; 0x17c2 <vfprintf+0x5f4>
    17ac:	b7 01       	movw	r22, r14
    17ae:	80 e2       	ldi	r24, 0x20	; 32
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    17b6:	d3 94       	inc	r13
    17b8:	f7 cf       	rjmp	.-18     	; 0x17a8 <vfprintf+0x5da>
    17ba:	d5 14       	cp	r13, r5
    17bc:	10 f4       	brcc	.+4      	; 0x17c2 <vfprintf+0x5f4>
    17be:	5d 18       	sub	r5, r13
    17c0:	01 c0       	rjmp	.+2      	; 0x17c4 <vfprintf+0x5f6>
    17c2:	51 2c       	mov	r5, r1
    17c4:	04 ff       	sbrs	r16, 4
    17c6:	10 c0       	rjmp	.+32     	; 0x17e8 <vfprintf+0x61a>
    17c8:	b7 01       	movw	r22, r14
    17ca:	80 e3       	ldi	r24, 0x30	; 48
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    17d2:	02 ff       	sbrs	r16, 2
    17d4:	17 c0       	rjmp	.+46     	; 0x1804 <vfprintf+0x636>
    17d6:	01 fd       	sbrc	r16, 1
    17d8:	03 c0       	rjmp	.+6      	; 0x17e0 <vfprintf+0x612>
    17da:	88 e7       	ldi	r24, 0x78	; 120
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <vfprintf+0x616>
    17e0:	88 e5       	ldi	r24, 0x58	; 88
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	b7 01       	movw	r22, r14
    17e6:	0c c0       	rjmp	.+24     	; 0x1800 <vfprintf+0x632>
    17e8:	80 2f       	mov	r24, r16
    17ea:	86 78       	andi	r24, 0x86	; 134
    17ec:	59 f0       	breq	.+22     	; 0x1804 <vfprintf+0x636>
    17ee:	01 ff       	sbrs	r16, 1
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <vfprintf+0x628>
    17f2:	8b e2       	ldi	r24, 0x2B	; 43
    17f4:	01 c0       	rjmp	.+2      	; 0x17f8 <vfprintf+0x62a>
    17f6:	80 e2       	ldi	r24, 0x20	; 32
    17f8:	07 fd       	sbrc	r16, 7
    17fa:	8d e2       	ldi	r24, 0x2D	; 45
    17fc:	b7 01       	movw	r22, r14
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1804:	c1 16       	cp	r12, r17
    1806:	38 f4       	brcc	.+14     	; 0x1816 <vfprintf+0x648>
    1808:	b7 01       	movw	r22, r14
    180a:	80 e3       	ldi	r24, 0x30	; 48
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1812:	11 50       	subi	r17, 0x01	; 1
    1814:	f7 cf       	rjmp	.-18     	; 0x1804 <vfprintf+0x636>
    1816:	ca 94       	dec	r12
    1818:	f3 01       	movw	r30, r6
    181a:	ec 0d       	add	r30, r12
    181c:	f1 1d       	adc	r31, r1
    181e:	80 81       	ld	r24, Z
    1820:	b7 01       	movw	r22, r14
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1828:	c1 10       	cpse	r12, r1
    182a:	f5 cf       	rjmp	.-22     	; 0x1816 <vfprintf+0x648>
    182c:	15 c0       	rjmp	.+42     	; 0x1858 <vfprintf+0x68a>
    182e:	f4 e0       	ldi	r31, 0x04	; 4
    1830:	f5 15       	cp	r31, r5
    1832:	60 f5       	brcc	.+88     	; 0x188c <vfprintf+0x6be>
    1834:	84 e0       	ldi	r24, 0x04	; 4
    1836:	58 1a       	sub	r5, r24
    1838:	93 fe       	sbrs	r9, 3
    183a:	1f c0       	rjmp	.+62     	; 0x187a <vfprintf+0x6ac>
    183c:	01 11       	cpse	r16, r1
    183e:	27 c0       	rjmp	.+78     	; 0x188e <vfprintf+0x6c0>
    1840:	2c 85       	ldd	r18, Y+12	; 0x0c
    1842:	23 ff       	sbrs	r18, 3
    1844:	2a c0       	rjmp	.+84     	; 0x189a <vfprintf+0x6cc>
    1846:	0c ec       	ldi	r16, 0xCC	; 204
    1848:	10 e0       	ldi	r17, 0x00	; 0
    184a:	39 2d       	mov	r19, r9
    184c:	30 71       	andi	r19, 0x10	; 16
    184e:	93 2e       	mov	r9, r19
    1850:	f8 01       	movw	r30, r16
    1852:	84 91       	lpm	r24, Z
    1854:	81 11       	cpse	r24, r1
    1856:	24 c0       	rjmp	.+72     	; 0x18a0 <vfprintf+0x6d2>
    1858:	55 20       	and	r5, r5
    185a:	09 f4       	brne	.+2      	; 0x185e <vfprintf+0x690>
    185c:	e4 cc       	rjmp	.-1592   	; 0x1226 <vfprintf+0x58>
    185e:	b7 01       	movw	r22, r14
    1860:	80 e2       	ldi	r24, 0x20	; 32
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1868:	5a 94       	dec	r5
    186a:	f6 cf       	rjmp	.-20     	; 0x1858 <vfprintf+0x68a>
    186c:	f7 01       	movw	r30, r14
    186e:	86 81       	ldd	r24, Z+6	; 0x06
    1870:	97 81       	ldd	r25, Z+7	; 0x07
    1872:	26 c0       	rjmp	.+76     	; 0x18c0 <vfprintf+0x6f2>
    1874:	8f ef       	ldi	r24, 0xFF	; 255
    1876:	9f ef       	ldi	r25, 0xFF	; 255
    1878:	23 c0       	rjmp	.+70     	; 0x18c0 <vfprintf+0x6f2>
    187a:	b7 01       	movw	r22, r14
    187c:	80 e2       	ldi	r24, 0x20	; 32
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1884:	5a 94       	dec	r5
    1886:	51 10       	cpse	r5, r1
    1888:	f8 cf       	rjmp	.-16     	; 0x187a <vfprintf+0x6ac>
    188a:	d8 cf       	rjmp	.-80     	; 0x183c <vfprintf+0x66e>
    188c:	51 2c       	mov	r5, r1
    188e:	b7 01       	movw	r22, r14
    1890:	80 2f       	mov	r24, r16
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1898:	d3 cf       	rjmp	.-90     	; 0x1840 <vfprintf+0x672>
    189a:	00 ed       	ldi	r16, 0xD0	; 208
    189c:	10 e0       	ldi	r17, 0x00	; 0
    189e:	d5 cf       	rjmp	.-86     	; 0x184a <vfprintf+0x67c>
    18a0:	91 10       	cpse	r9, r1
    18a2:	80 52       	subi	r24, 0x20	; 32
    18a4:	b7 01       	movw	r22, r14
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    18ac:	0f 5f       	subi	r16, 0xFF	; 255
    18ae:	1f 4f       	sbci	r17, 0xFF	; 255
    18b0:	cf cf       	rjmp	.-98     	; 0x1850 <vfprintf+0x682>
    18b2:	23 e0       	ldi	r18, 0x03	; 3
    18b4:	25 15       	cp	r18, r5
    18b6:	10 f4       	brcc	.+4      	; 0x18bc <vfprintf+0x6ee>
    18b8:	83 e0       	ldi	r24, 0x03	; 3
    18ba:	bd cf       	rjmp	.-134    	; 0x1836 <vfprintf+0x668>
    18bc:	51 2c       	mov	r5, r1
    18be:	c0 cf       	rjmp	.-128    	; 0x1840 <vfprintf+0x672>
    18c0:	60 96       	adiw	r28, 0x10	; 16
    18c2:	e2 e1       	ldi	r30, 0x12	; 18
    18c4:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__epilogue_restores__>

000018c8 <__udivmodsi4>:
    18c8:	a1 e2       	ldi	r26, 0x21	; 33
    18ca:	1a 2e       	mov	r1, r26
    18cc:	aa 1b       	sub	r26, r26
    18ce:	bb 1b       	sub	r27, r27
    18d0:	fd 01       	movw	r30, r26
    18d2:	0d c0       	rjmp	.+26     	; 0x18ee <__udivmodsi4_ep>

000018d4 <__udivmodsi4_loop>:
    18d4:	aa 1f       	adc	r26, r26
    18d6:	bb 1f       	adc	r27, r27
    18d8:	ee 1f       	adc	r30, r30
    18da:	ff 1f       	adc	r31, r31
    18dc:	a2 17       	cp	r26, r18
    18de:	b3 07       	cpc	r27, r19
    18e0:	e4 07       	cpc	r30, r20
    18e2:	f5 07       	cpc	r31, r21
    18e4:	20 f0       	brcs	.+8      	; 0x18ee <__udivmodsi4_ep>
    18e6:	a2 1b       	sub	r26, r18
    18e8:	b3 0b       	sbc	r27, r19
    18ea:	e4 0b       	sbc	r30, r20
    18ec:	f5 0b       	sbc	r31, r21

000018ee <__udivmodsi4_ep>:
    18ee:	66 1f       	adc	r22, r22
    18f0:	77 1f       	adc	r23, r23
    18f2:	88 1f       	adc	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	1a 94       	dec	r1
    18f8:	69 f7       	brne	.-38     	; 0x18d4 <__udivmodsi4_loop>
    18fa:	60 95       	com	r22
    18fc:	70 95       	com	r23
    18fe:	80 95       	com	r24
    1900:	90 95       	com	r25
    1902:	9b 01       	movw	r18, r22
    1904:	ac 01       	movw	r20, r24
    1906:	bd 01       	movw	r22, r26
    1908:	cf 01       	movw	r24, r30
    190a:	08 95       	ret

0000190c <__prologue_saves__>:
    190c:	2f 92       	push	r2
    190e:	3f 92       	push	r3
    1910:	4f 92       	push	r4
    1912:	5f 92       	push	r5
    1914:	6f 92       	push	r6
    1916:	7f 92       	push	r7
    1918:	8f 92       	push	r8
    191a:	9f 92       	push	r9
    191c:	af 92       	push	r10
    191e:	bf 92       	push	r11
    1920:	cf 92       	push	r12
    1922:	df 92       	push	r13
    1924:	ef 92       	push	r14
    1926:	ff 92       	push	r15
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	ca 1b       	sub	r28, r26
    1936:	db 0b       	sbc	r29, r27
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	09 94       	ijmp

00001944 <__epilogue_restores__>:
    1944:	2a 88       	ldd	r2, Y+18	; 0x12
    1946:	39 88       	ldd	r3, Y+17	; 0x11
    1948:	48 88       	ldd	r4, Y+16	; 0x10
    194a:	5f 84       	ldd	r5, Y+15	; 0x0f
    194c:	6e 84       	ldd	r6, Y+14	; 0x0e
    194e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1950:	8c 84       	ldd	r8, Y+12	; 0x0c
    1952:	9b 84       	ldd	r9, Y+11	; 0x0b
    1954:	aa 84       	ldd	r10, Y+10	; 0x0a
    1956:	b9 84       	ldd	r11, Y+9	; 0x09
    1958:	c8 84       	ldd	r12, Y+8	; 0x08
    195a:	df 80       	ldd	r13, Y+7	; 0x07
    195c:	ee 80       	ldd	r14, Y+6	; 0x06
    195e:	fd 80       	ldd	r15, Y+5	; 0x05
    1960:	0c 81       	ldd	r16, Y+4	; 0x04
    1962:	1b 81       	ldd	r17, Y+3	; 0x03
    1964:	aa 81       	ldd	r26, Y+2	; 0x02
    1966:	b9 81       	ldd	r27, Y+1	; 0x01
    1968:	ce 0f       	add	r28, r30
    196a:	d1 1d       	adc	r29, r1
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	ed 01       	movw	r28, r26
    1978:	08 95       	ret

0000197a <__divsf3>:
    197a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__divsf3x>
    197e:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__fp_round>
    1982:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <__fp_pscB>
    1986:	58 f0       	brcs	.+22     	; 0x199e <__divsf3+0x24>
    1988:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <__fp_pscA>
    198c:	40 f0       	brcs	.+16     	; 0x199e <__divsf3+0x24>
    198e:	29 f4       	brne	.+10     	; 0x199a <__divsf3+0x20>
    1990:	5f 3f       	cpi	r21, 0xFF	; 255
    1992:	29 f0       	breq	.+10     	; 0x199e <__divsf3+0x24>
    1994:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__fp_inf>
    1998:	51 11       	cpse	r21, r1
    199a:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__fp_szero>
    199e:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_nan>

000019a2 <__divsf3x>:
    19a2:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <__fp_split3>
    19a6:	68 f3       	brcs	.-38     	; 0x1982 <__divsf3+0x8>

000019a8 <__divsf3_pse>:
    19a8:	99 23       	and	r25, r25
    19aa:	b1 f3       	breq	.-20     	; 0x1998 <__divsf3+0x1e>
    19ac:	55 23       	and	r21, r21
    19ae:	91 f3       	breq	.-28     	; 0x1994 <__divsf3+0x1a>
    19b0:	95 1b       	sub	r25, r21
    19b2:	55 0b       	sbc	r21, r21
    19b4:	bb 27       	eor	r27, r27
    19b6:	aa 27       	eor	r26, r26
    19b8:	62 17       	cp	r22, r18
    19ba:	73 07       	cpc	r23, r19
    19bc:	84 07       	cpc	r24, r20
    19be:	38 f0       	brcs	.+14     	; 0x19ce <__divsf3_pse+0x26>
    19c0:	9f 5f       	subi	r25, 0xFF	; 255
    19c2:	5f 4f       	sbci	r21, 0xFF	; 255
    19c4:	22 0f       	add	r18, r18
    19c6:	33 1f       	adc	r19, r19
    19c8:	44 1f       	adc	r20, r20
    19ca:	aa 1f       	adc	r26, r26
    19cc:	a9 f3       	breq	.-22     	; 0x19b8 <__divsf3_pse+0x10>
    19ce:	35 d0       	rcall	.+106    	; 0x1a3a <__divsf3_pse+0x92>
    19d0:	0e 2e       	mov	r0, r30
    19d2:	3a f0       	brmi	.+14     	; 0x19e2 <__divsf3_pse+0x3a>
    19d4:	e0 e8       	ldi	r30, 0x80	; 128
    19d6:	32 d0       	rcall	.+100    	; 0x1a3c <__divsf3_pse+0x94>
    19d8:	91 50       	subi	r25, 0x01	; 1
    19da:	50 40       	sbci	r21, 0x00	; 0
    19dc:	e6 95       	lsr	r30
    19de:	00 1c       	adc	r0, r0
    19e0:	ca f7       	brpl	.-14     	; 0x19d4 <__divsf3_pse+0x2c>
    19e2:	2b d0       	rcall	.+86     	; 0x1a3a <__divsf3_pse+0x92>
    19e4:	fe 2f       	mov	r31, r30
    19e6:	29 d0       	rcall	.+82     	; 0x1a3a <__divsf3_pse+0x92>
    19e8:	66 0f       	add	r22, r22
    19ea:	77 1f       	adc	r23, r23
    19ec:	88 1f       	adc	r24, r24
    19ee:	bb 1f       	adc	r27, r27
    19f0:	26 17       	cp	r18, r22
    19f2:	37 07       	cpc	r19, r23
    19f4:	48 07       	cpc	r20, r24
    19f6:	ab 07       	cpc	r26, r27
    19f8:	b0 e8       	ldi	r27, 0x80	; 128
    19fa:	09 f0       	breq	.+2      	; 0x19fe <__divsf3_pse+0x56>
    19fc:	bb 0b       	sbc	r27, r27
    19fe:	80 2d       	mov	r24, r0
    1a00:	bf 01       	movw	r22, r30
    1a02:	ff 27       	eor	r31, r31
    1a04:	93 58       	subi	r25, 0x83	; 131
    1a06:	5f 4f       	sbci	r21, 0xFF	; 255
    1a08:	3a f0       	brmi	.+14     	; 0x1a18 <__divsf3_pse+0x70>
    1a0a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a0c:	51 05       	cpc	r21, r1
    1a0e:	78 f0       	brcs	.+30     	; 0x1a2e <__divsf3_pse+0x86>
    1a10:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__fp_inf>
    1a14:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__fp_szero>
    1a18:	5f 3f       	cpi	r21, 0xFF	; 255
    1a1a:	e4 f3       	brlt	.-8      	; 0x1a14 <__divsf3_pse+0x6c>
    1a1c:	98 3e       	cpi	r25, 0xE8	; 232
    1a1e:	d4 f3       	brlt	.-12     	; 0x1a14 <__divsf3_pse+0x6c>
    1a20:	86 95       	lsr	r24
    1a22:	77 95       	ror	r23
    1a24:	67 95       	ror	r22
    1a26:	b7 95       	ror	r27
    1a28:	f7 95       	ror	r31
    1a2a:	9f 5f       	subi	r25, 0xFF	; 255
    1a2c:	c9 f7       	brne	.-14     	; 0x1a20 <__divsf3_pse+0x78>
    1a2e:	88 0f       	add	r24, r24
    1a30:	91 1d       	adc	r25, r1
    1a32:	96 95       	lsr	r25
    1a34:	87 95       	ror	r24
    1a36:	97 f9       	bld	r25, 7
    1a38:	08 95       	ret
    1a3a:	e1 e0       	ldi	r30, 0x01	; 1
    1a3c:	66 0f       	add	r22, r22
    1a3e:	77 1f       	adc	r23, r23
    1a40:	88 1f       	adc	r24, r24
    1a42:	bb 1f       	adc	r27, r27
    1a44:	62 17       	cp	r22, r18
    1a46:	73 07       	cpc	r23, r19
    1a48:	84 07       	cpc	r24, r20
    1a4a:	ba 07       	cpc	r27, r26
    1a4c:	20 f0       	brcs	.+8      	; 0x1a56 <__divsf3_pse+0xae>
    1a4e:	62 1b       	sub	r22, r18
    1a50:	73 0b       	sbc	r23, r19
    1a52:	84 0b       	sbc	r24, r20
    1a54:	ba 0b       	sbc	r27, r26
    1a56:	ee 1f       	adc	r30, r30
    1a58:	88 f7       	brcc	.-30     	; 0x1a3c <__divsf3_pse+0x94>
    1a5a:	e0 95       	com	r30
    1a5c:	08 95       	ret

00001a5e <__fixsfsi>:
    1a5e:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <__fixunssfsi>
    1a62:	68 94       	set
    1a64:	b1 11       	cpse	r27, r1
    1a66:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__fp_szero>
    1a6a:	08 95       	ret

00001a6c <__fixunssfsi>:
    1a6c:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__fp_splitA>
    1a70:	88 f0       	brcs	.+34     	; 0x1a94 <__fixunssfsi+0x28>
    1a72:	9f 57       	subi	r25, 0x7F	; 127
    1a74:	98 f0       	brcs	.+38     	; 0x1a9c <__fixunssfsi+0x30>
    1a76:	b9 2f       	mov	r27, r25
    1a78:	99 27       	eor	r25, r25
    1a7a:	b7 51       	subi	r27, 0x17	; 23
    1a7c:	b0 f0       	brcs	.+44     	; 0x1aaa <__fixunssfsi+0x3e>
    1a7e:	e1 f0       	breq	.+56     	; 0x1ab8 <__fixunssfsi+0x4c>
    1a80:	66 0f       	add	r22, r22
    1a82:	77 1f       	adc	r23, r23
    1a84:	88 1f       	adc	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	1a f0       	brmi	.+6      	; 0x1a90 <__fixunssfsi+0x24>
    1a8a:	ba 95       	dec	r27
    1a8c:	c9 f7       	brne	.-14     	; 0x1a80 <__fixunssfsi+0x14>
    1a8e:	14 c0       	rjmp	.+40     	; 0x1ab8 <__fixunssfsi+0x4c>
    1a90:	b1 30       	cpi	r27, 0x01	; 1
    1a92:	91 f0       	breq	.+36     	; 0x1ab8 <__fixunssfsi+0x4c>
    1a94:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__fp_zero>
    1a98:	b1 e0       	ldi	r27, 0x01	; 1
    1a9a:	08 95       	ret
    1a9c:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__fp_zero>
    1aa0:	67 2f       	mov	r22, r23
    1aa2:	78 2f       	mov	r23, r24
    1aa4:	88 27       	eor	r24, r24
    1aa6:	b8 5f       	subi	r27, 0xF8	; 248
    1aa8:	39 f0       	breq	.+14     	; 0x1ab8 <__fixunssfsi+0x4c>
    1aaa:	b9 3f       	cpi	r27, 0xF9	; 249
    1aac:	cc f3       	brlt	.-14     	; 0x1aa0 <__fixunssfsi+0x34>
    1aae:	86 95       	lsr	r24
    1ab0:	77 95       	ror	r23
    1ab2:	67 95       	ror	r22
    1ab4:	b3 95       	inc	r27
    1ab6:	d9 f7       	brne	.-10     	; 0x1aae <__fixunssfsi+0x42>
    1ab8:	3e f4       	brtc	.+14     	; 0x1ac8 <__fixunssfsi+0x5c>
    1aba:	90 95       	com	r25
    1abc:	80 95       	com	r24
    1abe:	70 95       	com	r23
    1ac0:	61 95       	neg	r22
    1ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac8:	08 95       	ret

00001aca <__floatunsisf>:
    1aca:	e8 94       	clt
    1acc:	09 c0       	rjmp	.+18     	; 0x1ae0 <__floatsisf+0x12>

00001ace <__floatsisf>:
    1ace:	97 fb       	bst	r25, 7
    1ad0:	3e f4       	brtc	.+14     	; 0x1ae0 <__floatsisf+0x12>
    1ad2:	90 95       	com	r25
    1ad4:	80 95       	com	r24
    1ad6:	70 95       	com	r23
    1ad8:	61 95       	neg	r22
    1ada:	7f 4f       	sbci	r23, 0xFF	; 255
    1adc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ade:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae0:	99 23       	and	r25, r25
    1ae2:	a9 f0       	breq	.+42     	; 0x1b0e <__floatsisf+0x40>
    1ae4:	f9 2f       	mov	r31, r25
    1ae6:	96 e9       	ldi	r25, 0x96	; 150
    1ae8:	bb 27       	eor	r27, r27
    1aea:	93 95       	inc	r25
    1aec:	f6 95       	lsr	r31
    1aee:	87 95       	ror	r24
    1af0:	77 95       	ror	r23
    1af2:	67 95       	ror	r22
    1af4:	b7 95       	ror	r27
    1af6:	f1 11       	cpse	r31, r1
    1af8:	f8 cf       	rjmp	.-16     	; 0x1aea <__floatsisf+0x1c>
    1afa:	fa f4       	brpl	.+62     	; 0x1b3a <__floatsisf+0x6c>
    1afc:	bb 0f       	add	r27, r27
    1afe:	11 f4       	brne	.+4      	; 0x1b04 <__floatsisf+0x36>
    1b00:	60 ff       	sbrs	r22, 0
    1b02:	1b c0       	rjmp	.+54     	; 0x1b3a <__floatsisf+0x6c>
    1b04:	6f 5f       	subi	r22, 0xFF	; 255
    1b06:	7f 4f       	sbci	r23, 0xFF	; 255
    1b08:	8f 4f       	sbci	r24, 0xFF	; 255
    1b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0c:	16 c0       	rjmp	.+44     	; 0x1b3a <__floatsisf+0x6c>
    1b0e:	88 23       	and	r24, r24
    1b10:	11 f0       	breq	.+4      	; 0x1b16 <__floatsisf+0x48>
    1b12:	96 e9       	ldi	r25, 0x96	; 150
    1b14:	11 c0       	rjmp	.+34     	; 0x1b38 <__floatsisf+0x6a>
    1b16:	77 23       	and	r23, r23
    1b18:	21 f0       	breq	.+8      	; 0x1b22 <__floatsisf+0x54>
    1b1a:	9e e8       	ldi	r25, 0x8E	; 142
    1b1c:	87 2f       	mov	r24, r23
    1b1e:	76 2f       	mov	r23, r22
    1b20:	05 c0       	rjmp	.+10     	; 0x1b2c <__floatsisf+0x5e>
    1b22:	66 23       	and	r22, r22
    1b24:	71 f0       	breq	.+28     	; 0x1b42 <__floatsisf+0x74>
    1b26:	96 e8       	ldi	r25, 0x86	; 134
    1b28:	86 2f       	mov	r24, r22
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	2a f0       	brmi	.+10     	; 0x1b3a <__floatsisf+0x6c>
    1b30:	9a 95       	dec	r25
    1b32:	66 0f       	add	r22, r22
    1b34:	77 1f       	adc	r23, r23
    1b36:	88 1f       	adc	r24, r24
    1b38:	da f7       	brpl	.-10     	; 0x1b30 <__floatsisf+0x62>
    1b3a:	88 0f       	add	r24, r24
    1b3c:	96 95       	lsr	r25
    1b3e:	87 95       	ror	r24
    1b40:	97 f9       	bld	r25, 7
    1b42:	08 95       	ret

00001b44 <__fp_inf>:
    1b44:	97 f9       	bld	r25, 7
    1b46:	9f 67       	ori	r25, 0x7F	; 127
    1b48:	80 e8       	ldi	r24, 0x80	; 128
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	08 95       	ret

00001b50 <__fp_nan>:
    1b50:	9f ef       	ldi	r25, 0xFF	; 255
    1b52:	80 ec       	ldi	r24, 0xC0	; 192
    1b54:	08 95       	ret

00001b56 <__fp_pscA>:
    1b56:	00 24       	eor	r0, r0
    1b58:	0a 94       	dec	r0
    1b5a:	16 16       	cp	r1, r22
    1b5c:	17 06       	cpc	r1, r23
    1b5e:	18 06       	cpc	r1, r24
    1b60:	09 06       	cpc	r0, r25
    1b62:	08 95       	ret

00001b64 <__fp_pscB>:
    1b64:	00 24       	eor	r0, r0
    1b66:	0a 94       	dec	r0
    1b68:	12 16       	cp	r1, r18
    1b6a:	13 06       	cpc	r1, r19
    1b6c:	14 06       	cpc	r1, r20
    1b6e:	05 06       	cpc	r0, r21
    1b70:	08 95       	ret

00001b72 <__fp_round>:
    1b72:	09 2e       	mov	r0, r25
    1b74:	03 94       	inc	r0
    1b76:	00 0c       	add	r0, r0
    1b78:	11 f4       	brne	.+4      	; 0x1b7e <__fp_round+0xc>
    1b7a:	88 23       	and	r24, r24
    1b7c:	52 f0       	brmi	.+20     	; 0x1b92 <__fp_round+0x20>
    1b7e:	bb 0f       	add	r27, r27
    1b80:	40 f4       	brcc	.+16     	; 0x1b92 <__fp_round+0x20>
    1b82:	bf 2b       	or	r27, r31
    1b84:	11 f4       	brne	.+4      	; 0x1b8a <__fp_round+0x18>
    1b86:	60 ff       	sbrs	r22, 0
    1b88:	04 c0       	rjmp	.+8      	; 0x1b92 <__fp_round+0x20>
    1b8a:	6f 5f       	subi	r22, 0xFF	; 255
    1b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b90:	9f 4f       	sbci	r25, 0xFF	; 255
    1b92:	08 95       	ret

00001b94 <__fp_split3>:
    1b94:	57 fd       	sbrc	r21, 7
    1b96:	90 58       	subi	r25, 0x80	; 128
    1b98:	44 0f       	add	r20, r20
    1b9a:	55 1f       	adc	r21, r21
    1b9c:	59 f0       	breq	.+22     	; 0x1bb4 <__fp_splitA+0x10>
    1b9e:	5f 3f       	cpi	r21, 0xFF	; 255
    1ba0:	71 f0       	breq	.+28     	; 0x1bbe <__fp_splitA+0x1a>
    1ba2:	47 95       	ror	r20

00001ba4 <__fp_splitA>:
    1ba4:	88 0f       	add	r24, r24
    1ba6:	97 fb       	bst	r25, 7
    1ba8:	99 1f       	adc	r25, r25
    1baa:	61 f0       	breq	.+24     	; 0x1bc4 <__fp_splitA+0x20>
    1bac:	9f 3f       	cpi	r25, 0xFF	; 255
    1bae:	79 f0       	breq	.+30     	; 0x1bce <__fp_splitA+0x2a>
    1bb0:	87 95       	ror	r24
    1bb2:	08 95       	ret
    1bb4:	12 16       	cp	r1, r18
    1bb6:	13 06       	cpc	r1, r19
    1bb8:	14 06       	cpc	r1, r20
    1bba:	55 1f       	adc	r21, r21
    1bbc:	f2 cf       	rjmp	.-28     	; 0x1ba2 <__fp_split3+0xe>
    1bbe:	46 95       	lsr	r20
    1bc0:	f1 df       	rcall	.-30     	; 0x1ba4 <__fp_splitA>
    1bc2:	08 c0       	rjmp	.+16     	; 0x1bd4 <__fp_splitA+0x30>
    1bc4:	16 16       	cp	r1, r22
    1bc6:	17 06       	cpc	r1, r23
    1bc8:	18 06       	cpc	r1, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	f1 cf       	rjmp	.-30     	; 0x1bb0 <__fp_splitA+0xc>
    1bce:	86 95       	lsr	r24
    1bd0:	71 05       	cpc	r23, r1
    1bd2:	61 05       	cpc	r22, r1
    1bd4:	08 94       	sec
    1bd6:	08 95       	ret

00001bd8 <__fp_zero>:
    1bd8:	e8 94       	clt

00001bda <__fp_szero>:
    1bda:	bb 27       	eor	r27, r27
    1bdc:	66 27       	eor	r22, r22
    1bde:	77 27       	eor	r23, r23
    1be0:	cb 01       	movw	r24, r22
    1be2:	97 f9       	bld	r25, 7
    1be4:	08 95       	ret

00001be6 <__mulsf3>:
    1be6:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__mulsf3x>
    1bea:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__fp_round>
    1bee:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <__fp_pscA>
    1bf2:	38 f0       	brcs	.+14     	; 0x1c02 <__mulsf3+0x1c>
    1bf4:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <__fp_pscB>
    1bf8:	20 f0       	brcs	.+8      	; 0x1c02 <__mulsf3+0x1c>
    1bfa:	95 23       	and	r25, r21
    1bfc:	11 f0       	breq	.+4      	; 0x1c02 <__mulsf3+0x1c>
    1bfe:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__fp_inf>
    1c02:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_nan>
    1c06:	11 24       	eor	r1, r1
    1c08:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__fp_szero>

00001c0c <__mulsf3x>:
    1c0c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <__fp_split3>
    1c10:	70 f3       	brcs	.-36     	; 0x1bee <__mulsf3+0x8>

00001c12 <__mulsf3_pse>:
    1c12:	95 9f       	mul	r25, r21
    1c14:	c1 f3       	breq	.-16     	; 0x1c06 <__mulsf3+0x20>
    1c16:	95 0f       	add	r25, r21
    1c18:	50 e0       	ldi	r21, 0x00	; 0
    1c1a:	55 1f       	adc	r21, r21
    1c1c:	62 9f       	mul	r22, r18
    1c1e:	f0 01       	movw	r30, r0
    1c20:	72 9f       	mul	r23, r18
    1c22:	bb 27       	eor	r27, r27
    1c24:	f0 0d       	add	r31, r0
    1c26:	b1 1d       	adc	r27, r1
    1c28:	63 9f       	mul	r22, r19
    1c2a:	aa 27       	eor	r26, r26
    1c2c:	f0 0d       	add	r31, r0
    1c2e:	b1 1d       	adc	r27, r1
    1c30:	aa 1f       	adc	r26, r26
    1c32:	64 9f       	mul	r22, r20
    1c34:	66 27       	eor	r22, r22
    1c36:	b0 0d       	add	r27, r0
    1c38:	a1 1d       	adc	r26, r1
    1c3a:	66 1f       	adc	r22, r22
    1c3c:	82 9f       	mul	r24, r18
    1c3e:	22 27       	eor	r18, r18
    1c40:	b0 0d       	add	r27, r0
    1c42:	a1 1d       	adc	r26, r1
    1c44:	62 1f       	adc	r22, r18
    1c46:	73 9f       	mul	r23, r19
    1c48:	b0 0d       	add	r27, r0
    1c4a:	a1 1d       	adc	r26, r1
    1c4c:	62 1f       	adc	r22, r18
    1c4e:	83 9f       	mul	r24, r19
    1c50:	a0 0d       	add	r26, r0
    1c52:	61 1d       	adc	r22, r1
    1c54:	22 1f       	adc	r18, r18
    1c56:	74 9f       	mul	r23, r20
    1c58:	33 27       	eor	r19, r19
    1c5a:	a0 0d       	add	r26, r0
    1c5c:	61 1d       	adc	r22, r1
    1c5e:	23 1f       	adc	r18, r19
    1c60:	84 9f       	mul	r24, r20
    1c62:	60 0d       	add	r22, r0
    1c64:	21 1d       	adc	r18, r1
    1c66:	82 2f       	mov	r24, r18
    1c68:	76 2f       	mov	r23, r22
    1c6a:	6a 2f       	mov	r22, r26
    1c6c:	11 24       	eor	r1, r1
    1c6e:	9f 57       	subi	r25, 0x7F	; 127
    1c70:	50 40       	sbci	r21, 0x00	; 0
    1c72:	9a f0       	brmi	.+38     	; 0x1c9a <__mulsf3_pse+0x88>
    1c74:	f1 f0       	breq	.+60     	; 0x1cb2 <__mulsf3_pse+0xa0>
    1c76:	88 23       	and	r24, r24
    1c78:	4a f0       	brmi	.+18     	; 0x1c8c <__mulsf3_pse+0x7a>
    1c7a:	ee 0f       	add	r30, r30
    1c7c:	ff 1f       	adc	r31, r31
    1c7e:	bb 1f       	adc	r27, r27
    1c80:	66 1f       	adc	r22, r22
    1c82:	77 1f       	adc	r23, r23
    1c84:	88 1f       	adc	r24, r24
    1c86:	91 50       	subi	r25, 0x01	; 1
    1c88:	50 40       	sbci	r21, 0x00	; 0
    1c8a:	a9 f7       	brne	.-22     	; 0x1c76 <__mulsf3_pse+0x64>
    1c8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c8e:	51 05       	cpc	r21, r1
    1c90:	80 f0       	brcs	.+32     	; 0x1cb2 <__mulsf3_pse+0xa0>
    1c92:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__fp_inf>
    1c96:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__fp_szero>
    1c9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c9c:	e4 f3       	brlt	.-8      	; 0x1c96 <__mulsf3_pse+0x84>
    1c9e:	98 3e       	cpi	r25, 0xE8	; 232
    1ca0:	d4 f3       	brlt	.-12     	; 0x1c96 <__mulsf3_pse+0x84>
    1ca2:	86 95       	lsr	r24
    1ca4:	77 95       	ror	r23
    1ca6:	67 95       	ror	r22
    1ca8:	b7 95       	ror	r27
    1caa:	f7 95       	ror	r31
    1cac:	e7 95       	ror	r30
    1cae:	9f 5f       	subi	r25, 0xFF	; 255
    1cb0:	c1 f7       	brne	.-16     	; 0x1ca2 <__mulsf3_pse+0x90>
    1cb2:	fe 2b       	or	r31, r30
    1cb4:	88 0f       	add	r24, r24
    1cb6:	91 1d       	adc	r25, r1
    1cb8:	96 95       	lsr	r25
    1cba:	87 95       	ror	r24
    1cbc:	97 f9       	bld	r25, 7
    1cbe:	08 95       	ret

00001cc0 <malloc>:
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	82 30       	cpi	r24, 0x02	; 2
    1cca:	91 05       	cpc	r25, r1
    1ccc:	10 f4       	brcc	.+4      	; 0x1cd2 <malloc+0x12>
    1cce:	82 e0       	ldi	r24, 0x02	; 2
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	e0 91 26 06 	lds	r30, 0x0626	; 0x800626 <__flp>
    1cd6:	f0 91 27 06 	lds	r31, 0x0627	; 0x800627 <__flp+0x1>
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	a0 e0       	ldi	r26, 0x00	; 0
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	30 97       	sbiw	r30, 0x00	; 0
    1ce4:	19 f1       	breq	.+70     	; 0x1d2c <malloc+0x6c>
    1ce6:	40 81       	ld	r20, Z
    1ce8:	51 81       	ldd	r21, Z+1	; 0x01
    1cea:	02 81       	ldd	r16, Z+2	; 0x02
    1cec:	13 81       	ldd	r17, Z+3	; 0x03
    1cee:	48 17       	cp	r20, r24
    1cf0:	59 07       	cpc	r21, r25
    1cf2:	c8 f0       	brcs	.+50     	; 0x1d26 <malloc+0x66>
    1cf4:	84 17       	cp	r24, r20
    1cf6:	95 07       	cpc	r25, r21
    1cf8:	69 f4       	brne	.+26     	; 0x1d14 <malloc+0x54>
    1cfa:	10 97       	sbiw	r26, 0x00	; 0
    1cfc:	31 f0       	breq	.+12     	; 0x1d0a <malloc+0x4a>
    1cfe:	12 96       	adiw	r26, 0x02	; 2
    1d00:	0c 93       	st	X, r16
    1d02:	12 97       	sbiw	r26, 0x02	; 2
    1d04:	13 96       	adiw	r26, 0x03	; 3
    1d06:	1c 93       	st	X, r17
    1d08:	27 c0       	rjmp	.+78     	; 0x1d58 <malloc+0x98>
    1d0a:	00 93 26 06 	sts	0x0626, r16	; 0x800626 <__flp>
    1d0e:	10 93 27 06 	sts	0x0627, r17	; 0x800627 <__flp+0x1>
    1d12:	22 c0       	rjmp	.+68     	; 0x1d58 <malloc+0x98>
    1d14:	21 15       	cp	r18, r1
    1d16:	31 05       	cpc	r19, r1
    1d18:	19 f0       	breq	.+6      	; 0x1d20 <malloc+0x60>
    1d1a:	42 17       	cp	r20, r18
    1d1c:	53 07       	cpc	r21, r19
    1d1e:	18 f4       	brcc	.+6      	; 0x1d26 <malloc+0x66>
    1d20:	9a 01       	movw	r18, r20
    1d22:	bd 01       	movw	r22, r26
    1d24:	ef 01       	movw	r28, r30
    1d26:	df 01       	movw	r26, r30
    1d28:	f8 01       	movw	r30, r16
    1d2a:	db cf       	rjmp	.-74     	; 0x1ce2 <malloc+0x22>
    1d2c:	21 15       	cp	r18, r1
    1d2e:	31 05       	cpc	r19, r1
    1d30:	f9 f0       	breq	.+62     	; 0x1d70 <malloc+0xb0>
    1d32:	28 1b       	sub	r18, r24
    1d34:	39 0b       	sbc	r19, r25
    1d36:	24 30       	cpi	r18, 0x04	; 4
    1d38:	31 05       	cpc	r19, r1
    1d3a:	80 f4       	brcc	.+32     	; 0x1d5c <malloc+0x9c>
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d40:	61 15       	cp	r22, r1
    1d42:	71 05       	cpc	r23, r1
    1d44:	21 f0       	breq	.+8      	; 0x1d4e <malloc+0x8e>
    1d46:	fb 01       	movw	r30, r22
    1d48:	93 83       	std	Z+3, r25	; 0x03
    1d4a:	82 83       	std	Z+2, r24	; 0x02
    1d4c:	04 c0       	rjmp	.+8      	; 0x1d56 <malloc+0x96>
    1d4e:	90 93 27 06 	sts	0x0627, r25	; 0x800627 <__flp+0x1>
    1d52:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__flp>
    1d56:	fe 01       	movw	r30, r28
    1d58:	32 96       	adiw	r30, 0x02	; 2
    1d5a:	44 c0       	rjmp	.+136    	; 0x1de4 <malloc+0x124>
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	e2 0f       	add	r30, r18
    1d60:	f3 1f       	adc	r31, r19
    1d62:	81 93       	st	Z+, r24
    1d64:	91 93       	st	Z+, r25
    1d66:	22 50       	subi	r18, 0x02	; 2
    1d68:	31 09       	sbc	r19, r1
    1d6a:	39 83       	std	Y+1, r19	; 0x01
    1d6c:	28 83       	st	Y, r18
    1d6e:	3a c0       	rjmp	.+116    	; 0x1de4 <malloc+0x124>
    1d70:	20 91 24 06 	lds	r18, 0x0624	; 0x800624 <__brkval>
    1d74:	30 91 25 06 	lds	r19, 0x0625	; 0x800625 <__brkval+0x1>
    1d78:	23 2b       	or	r18, r19
    1d7a:	41 f4       	brne	.+16     	; 0x1d8c <malloc+0xcc>
    1d7c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1d80:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1d84:	30 93 25 06 	sts	0x0625, r19	; 0x800625 <__brkval+0x1>
    1d88:	20 93 24 06 	sts	0x0624, r18	; 0x800624 <__brkval>
    1d8c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1d90:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1d94:	21 15       	cp	r18, r1
    1d96:	31 05       	cpc	r19, r1
    1d98:	41 f4       	brne	.+16     	; 0x1daa <malloc+0xea>
    1d9a:	2d b7       	in	r18, 0x3d	; 61
    1d9c:	3e b7       	in	r19, 0x3e	; 62
    1d9e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1da2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1da6:	24 1b       	sub	r18, r20
    1da8:	35 0b       	sbc	r19, r21
    1daa:	e0 91 24 06 	lds	r30, 0x0624	; 0x800624 <__brkval>
    1dae:	f0 91 25 06 	lds	r31, 0x0625	; 0x800625 <__brkval+0x1>
    1db2:	e2 17       	cp	r30, r18
    1db4:	f3 07       	cpc	r31, r19
    1db6:	a0 f4       	brcc	.+40     	; 0x1de0 <malloc+0x120>
    1db8:	2e 1b       	sub	r18, r30
    1dba:	3f 0b       	sbc	r19, r31
    1dbc:	28 17       	cp	r18, r24
    1dbe:	39 07       	cpc	r19, r25
    1dc0:	78 f0       	brcs	.+30     	; 0x1de0 <malloc+0x120>
    1dc2:	ac 01       	movw	r20, r24
    1dc4:	4e 5f       	subi	r20, 0xFE	; 254
    1dc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc8:	24 17       	cp	r18, r20
    1dca:	35 07       	cpc	r19, r21
    1dcc:	48 f0       	brcs	.+18     	; 0x1de0 <malloc+0x120>
    1dce:	4e 0f       	add	r20, r30
    1dd0:	5f 1f       	adc	r21, r31
    1dd2:	50 93 25 06 	sts	0x0625, r21	; 0x800625 <__brkval+0x1>
    1dd6:	40 93 24 06 	sts	0x0624, r20	; 0x800624 <__brkval>
    1dda:	81 93       	st	Z+, r24
    1ddc:	91 93       	st	Z+, r25
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <malloc+0x124>
    1de0:	e0 e0       	ldi	r30, 0x00	; 0
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	cf 01       	movw	r24, r30
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	08 95       	ret

00001df0 <free>:
    1df0:	cf 93       	push	r28
    1df2:	df 93       	push	r29
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	09 f4       	brne	.+2      	; 0x1dfa <free+0xa>
    1df8:	81 c0       	rjmp	.+258    	; 0x1efc <free+0x10c>
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	32 97       	sbiw	r30, 0x02	; 2
    1dfe:	13 82       	std	Z+3, r1	; 0x03
    1e00:	12 82       	std	Z+2, r1	; 0x02
    1e02:	a0 91 26 06 	lds	r26, 0x0626	; 0x800626 <__flp>
    1e06:	b0 91 27 06 	lds	r27, 0x0627	; 0x800627 <__flp+0x1>
    1e0a:	10 97       	sbiw	r26, 0x00	; 0
    1e0c:	81 f4       	brne	.+32     	; 0x1e2e <free+0x3e>
    1e0e:	20 81       	ld	r18, Z
    1e10:	31 81       	ldd	r19, Z+1	; 0x01
    1e12:	82 0f       	add	r24, r18
    1e14:	93 1f       	adc	r25, r19
    1e16:	20 91 24 06 	lds	r18, 0x0624	; 0x800624 <__brkval>
    1e1a:	30 91 25 06 	lds	r19, 0x0625	; 0x800625 <__brkval+0x1>
    1e1e:	28 17       	cp	r18, r24
    1e20:	39 07       	cpc	r19, r25
    1e22:	51 f5       	brne	.+84     	; 0x1e78 <free+0x88>
    1e24:	f0 93 25 06 	sts	0x0625, r31	; 0x800625 <__brkval+0x1>
    1e28:	e0 93 24 06 	sts	0x0624, r30	; 0x800624 <__brkval>
    1e2c:	67 c0       	rjmp	.+206    	; 0x1efc <free+0x10c>
    1e2e:	ed 01       	movw	r28, r26
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	ce 17       	cp	r28, r30
    1e36:	df 07       	cpc	r29, r31
    1e38:	40 f4       	brcc	.+16     	; 0x1e4a <free+0x5a>
    1e3a:	4a 81       	ldd	r20, Y+2	; 0x02
    1e3c:	5b 81       	ldd	r21, Y+3	; 0x03
    1e3e:	9e 01       	movw	r18, r28
    1e40:	41 15       	cp	r20, r1
    1e42:	51 05       	cpc	r21, r1
    1e44:	f1 f0       	breq	.+60     	; 0x1e82 <free+0x92>
    1e46:	ea 01       	movw	r28, r20
    1e48:	f5 cf       	rjmp	.-22     	; 0x1e34 <free+0x44>
    1e4a:	d3 83       	std	Z+3, r29	; 0x03
    1e4c:	c2 83       	std	Z+2, r28	; 0x02
    1e4e:	40 81       	ld	r20, Z
    1e50:	51 81       	ldd	r21, Z+1	; 0x01
    1e52:	84 0f       	add	r24, r20
    1e54:	95 1f       	adc	r25, r21
    1e56:	c8 17       	cp	r28, r24
    1e58:	d9 07       	cpc	r29, r25
    1e5a:	59 f4       	brne	.+22     	; 0x1e72 <free+0x82>
    1e5c:	88 81       	ld	r24, Y
    1e5e:	99 81       	ldd	r25, Y+1	; 0x01
    1e60:	84 0f       	add	r24, r20
    1e62:	95 1f       	adc	r25, r21
    1e64:	02 96       	adiw	r24, 0x02	; 2
    1e66:	91 83       	std	Z+1, r25	; 0x01
    1e68:	80 83       	st	Z, r24
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6e:	93 83       	std	Z+3, r25	; 0x03
    1e70:	82 83       	std	Z+2, r24	; 0x02
    1e72:	21 15       	cp	r18, r1
    1e74:	31 05       	cpc	r19, r1
    1e76:	29 f4       	brne	.+10     	; 0x1e82 <free+0x92>
    1e78:	f0 93 27 06 	sts	0x0627, r31	; 0x800627 <__flp+0x1>
    1e7c:	e0 93 26 06 	sts	0x0626, r30	; 0x800626 <__flp>
    1e80:	3d c0       	rjmp	.+122    	; 0x1efc <free+0x10c>
    1e82:	e9 01       	movw	r28, r18
    1e84:	fb 83       	std	Y+3, r31	; 0x03
    1e86:	ea 83       	std	Y+2, r30	; 0x02
    1e88:	49 91       	ld	r20, Y+
    1e8a:	59 91       	ld	r21, Y+
    1e8c:	c4 0f       	add	r28, r20
    1e8e:	d5 1f       	adc	r29, r21
    1e90:	ec 17       	cp	r30, r28
    1e92:	fd 07       	cpc	r31, r29
    1e94:	61 f4       	brne	.+24     	; 0x1eae <free+0xbe>
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	84 0f       	add	r24, r20
    1e9c:	95 1f       	adc	r25, r21
    1e9e:	02 96       	adiw	r24, 0x02	; 2
    1ea0:	e9 01       	movw	r28, r18
    1ea2:	99 83       	std	Y+1, r25	; 0x01
    1ea4:	88 83       	st	Y, r24
    1ea6:	82 81       	ldd	r24, Z+2	; 0x02
    1ea8:	93 81       	ldd	r25, Z+3	; 0x03
    1eaa:	9b 83       	std	Y+3, r25	; 0x03
    1eac:	8a 83       	std	Y+2, r24	; 0x02
    1eae:	e0 e0       	ldi	r30, 0x00	; 0
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	12 96       	adiw	r26, 0x02	; 2
    1eb4:	8d 91       	ld	r24, X+
    1eb6:	9c 91       	ld	r25, X
    1eb8:	13 97       	sbiw	r26, 0x03	; 3
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	19 f0       	breq	.+6      	; 0x1ec4 <free+0xd4>
    1ebe:	fd 01       	movw	r30, r26
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	f7 cf       	rjmp	.-18     	; 0x1eb2 <free+0xc2>
    1ec4:	8d 91       	ld	r24, X+
    1ec6:	9c 91       	ld	r25, X
    1ec8:	11 97       	sbiw	r26, 0x01	; 1
    1eca:	9d 01       	movw	r18, r26
    1ecc:	2e 5f       	subi	r18, 0xFE	; 254
    1ece:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed0:	82 0f       	add	r24, r18
    1ed2:	93 1f       	adc	r25, r19
    1ed4:	20 91 24 06 	lds	r18, 0x0624	; 0x800624 <__brkval>
    1ed8:	30 91 25 06 	lds	r19, 0x0625	; 0x800625 <__brkval+0x1>
    1edc:	28 17       	cp	r18, r24
    1ede:	39 07       	cpc	r19, r25
    1ee0:	69 f4       	brne	.+26     	; 0x1efc <free+0x10c>
    1ee2:	30 97       	sbiw	r30, 0x00	; 0
    1ee4:	29 f4       	brne	.+10     	; 0x1ef0 <free+0x100>
    1ee6:	10 92 27 06 	sts	0x0627, r1	; 0x800627 <__flp+0x1>
    1eea:	10 92 26 06 	sts	0x0626, r1	; 0x800626 <__flp>
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <free+0x104>
    1ef0:	13 82       	std	Z+3, r1	; 0x03
    1ef2:	12 82       	std	Z+2, r1	; 0x02
    1ef4:	b0 93 25 06 	sts	0x0625, r27	; 0x800625 <__brkval+0x1>
    1ef8:	a0 93 24 06 	sts	0x0624, r26	; 0x800624 <__brkval>
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	08 95       	ret

00001f02 <__ftoa_engine>:
    1f02:	28 30       	cpi	r18, 0x08	; 8
    1f04:	08 f0       	brcs	.+2      	; 0x1f08 <__ftoa_engine+0x6>
    1f06:	27 e0       	ldi	r18, 0x07	; 7
    1f08:	33 27       	eor	r19, r19
    1f0a:	da 01       	movw	r26, r20
    1f0c:	99 0f       	add	r25, r25
    1f0e:	31 1d       	adc	r19, r1
    1f10:	87 fd       	sbrc	r24, 7
    1f12:	91 60       	ori	r25, 0x01	; 1
    1f14:	00 96       	adiw	r24, 0x00	; 0
    1f16:	61 05       	cpc	r22, r1
    1f18:	71 05       	cpc	r23, r1
    1f1a:	39 f4       	brne	.+14     	; 0x1f2a <__ftoa_engine+0x28>
    1f1c:	32 60       	ori	r19, 0x02	; 2
    1f1e:	2e 5f       	subi	r18, 0xFE	; 254
    1f20:	3d 93       	st	X+, r19
    1f22:	30 e3       	ldi	r19, 0x30	; 48
    1f24:	2a 95       	dec	r18
    1f26:	e1 f7       	brne	.-8      	; 0x1f20 <__ftoa_engine+0x1e>
    1f28:	08 95       	ret
    1f2a:	9f 3f       	cpi	r25, 0xFF	; 255
    1f2c:	30 f0       	brcs	.+12     	; 0x1f3a <__ftoa_engine+0x38>
    1f2e:	80 38       	cpi	r24, 0x80	; 128
    1f30:	71 05       	cpc	r23, r1
    1f32:	61 05       	cpc	r22, r1
    1f34:	09 f0       	breq	.+2      	; 0x1f38 <__ftoa_engine+0x36>
    1f36:	3c 5f       	subi	r19, 0xFC	; 252
    1f38:	3c 5f       	subi	r19, 0xFC	; 252
    1f3a:	3d 93       	st	X+, r19
    1f3c:	91 30       	cpi	r25, 0x01	; 1
    1f3e:	08 f0       	brcs	.+2      	; 0x1f42 <__ftoa_engine+0x40>
    1f40:	80 68       	ori	r24, 0x80	; 128
    1f42:	91 1d       	adc	r25, r1
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	1f 93       	push	r17
    1f4a:	0f 93       	push	r16
    1f4c:	ff 92       	push	r15
    1f4e:	ef 92       	push	r14
    1f50:	19 2f       	mov	r17, r25
    1f52:	98 7f       	andi	r25, 0xF8	; 248
    1f54:	96 95       	lsr	r25
    1f56:	e9 2f       	mov	r30, r25
    1f58:	96 95       	lsr	r25
    1f5a:	96 95       	lsr	r25
    1f5c:	e9 0f       	add	r30, r25
    1f5e:	ff 27       	eor	r31, r31
    1f60:	e2 5d       	subi	r30, 0xD2	; 210
    1f62:	fe 4f       	sbci	r31, 0xFE	; 254
    1f64:	99 27       	eor	r25, r25
    1f66:	33 27       	eor	r19, r19
    1f68:	ee 24       	eor	r14, r14
    1f6a:	ff 24       	eor	r15, r15
    1f6c:	a7 01       	movw	r20, r14
    1f6e:	e7 01       	movw	r28, r14
    1f70:	05 90       	lpm	r0, Z+
    1f72:	08 94       	sec
    1f74:	07 94       	ror	r0
    1f76:	28 f4       	brcc	.+10     	; 0x1f82 <__ftoa_engine+0x80>
    1f78:	36 0f       	add	r19, r22
    1f7a:	e7 1e       	adc	r14, r23
    1f7c:	f8 1e       	adc	r15, r24
    1f7e:	49 1f       	adc	r20, r25
    1f80:	51 1d       	adc	r21, r1
    1f82:	66 0f       	add	r22, r22
    1f84:	77 1f       	adc	r23, r23
    1f86:	88 1f       	adc	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	06 94       	lsr	r0
    1f8c:	a1 f7       	brne	.-24     	; 0x1f76 <__ftoa_engine+0x74>
    1f8e:	05 90       	lpm	r0, Z+
    1f90:	07 94       	ror	r0
    1f92:	28 f4       	brcc	.+10     	; 0x1f9e <__ftoa_engine+0x9c>
    1f94:	e7 0e       	add	r14, r23
    1f96:	f8 1e       	adc	r15, r24
    1f98:	49 1f       	adc	r20, r25
    1f9a:	56 1f       	adc	r21, r22
    1f9c:	c1 1d       	adc	r28, r1
    1f9e:	77 0f       	add	r23, r23
    1fa0:	88 1f       	adc	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	66 1f       	adc	r22, r22
    1fa6:	06 94       	lsr	r0
    1fa8:	a1 f7       	brne	.-24     	; 0x1f92 <__ftoa_engine+0x90>
    1faa:	05 90       	lpm	r0, Z+
    1fac:	07 94       	ror	r0
    1fae:	28 f4       	brcc	.+10     	; 0x1fba <__ftoa_engine+0xb8>
    1fb0:	f8 0e       	add	r15, r24
    1fb2:	49 1f       	adc	r20, r25
    1fb4:	56 1f       	adc	r21, r22
    1fb6:	c7 1f       	adc	r28, r23
    1fb8:	d1 1d       	adc	r29, r1
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	66 1f       	adc	r22, r22
    1fc0:	77 1f       	adc	r23, r23
    1fc2:	06 94       	lsr	r0
    1fc4:	a1 f7       	brne	.-24     	; 0x1fae <__ftoa_engine+0xac>
    1fc6:	05 90       	lpm	r0, Z+
    1fc8:	07 94       	ror	r0
    1fca:	20 f4       	brcc	.+8      	; 0x1fd4 <__ftoa_engine+0xd2>
    1fcc:	49 0f       	add	r20, r25
    1fce:	56 1f       	adc	r21, r22
    1fd0:	c7 1f       	adc	r28, r23
    1fd2:	d8 1f       	adc	r29, r24
    1fd4:	99 0f       	add	r25, r25
    1fd6:	66 1f       	adc	r22, r22
    1fd8:	77 1f       	adc	r23, r23
    1fda:	88 1f       	adc	r24, r24
    1fdc:	06 94       	lsr	r0
    1fde:	a9 f7       	brne	.-22     	; 0x1fca <__ftoa_engine+0xc8>
    1fe0:	84 91       	lpm	r24, Z
    1fe2:	10 95       	com	r17
    1fe4:	17 70       	andi	r17, 0x07	; 7
    1fe6:	41 f0       	breq	.+16     	; 0x1ff8 <__ftoa_engine+0xf6>
    1fe8:	d6 95       	lsr	r29
    1fea:	c7 95       	ror	r28
    1fec:	57 95       	ror	r21
    1fee:	47 95       	ror	r20
    1ff0:	f7 94       	ror	r15
    1ff2:	e7 94       	ror	r14
    1ff4:	1a 95       	dec	r17
    1ff6:	c1 f7       	brne	.-16     	; 0x1fe8 <__ftoa_engine+0xe6>
    1ff8:	e4 ed       	ldi	r30, 0xD4	; 212
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	68 94       	set
    1ffe:	15 90       	lpm	r1, Z+
    2000:	15 91       	lpm	r17, Z+
    2002:	35 91       	lpm	r19, Z+
    2004:	65 91       	lpm	r22, Z+
    2006:	95 91       	lpm	r25, Z+
    2008:	05 90       	lpm	r0, Z+
    200a:	7f e2       	ldi	r23, 0x2F	; 47
    200c:	73 95       	inc	r23
    200e:	e1 18       	sub	r14, r1
    2010:	f1 0a       	sbc	r15, r17
    2012:	43 0b       	sbc	r20, r19
    2014:	56 0b       	sbc	r21, r22
    2016:	c9 0b       	sbc	r28, r25
    2018:	d0 09       	sbc	r29, r0
    201a:	c0 f7       	brcc	.-16     	; 0x200c <__ftoa_engine+0x10a>
    201c:	e1 0c       	add	r14, r1
    201e:	f1 1e       	adc	r15, r17
    2020:	43 1f       	adc	r20, r19
    2022:	56 1f       	adc	r21, r22
    2024:	c9 1f       	adc	r28, r25
    2026:	d0 1d       	adc	r29, r0
    2028:	7e f4       	brtc	.+30     	; 0x2048 <__ftoa_engine+0x146>
    202a:	70 33       	cpi	r23, 0x30	; 48
    202c:	11 f4       	brne	.+4      	; 0x2032 <__ftoa_engine+0x130>
    202e:	8a 95       	dec	r24
    2030:	e6 cf       	rjmp	.-52     	; 0x1ffe <__ftoa_engine+0xfc>
    2032:	e8 94       	clt
    2034:	01 50       	subi	r16, 0x01	; 1
    2036:	30 f0       	brcs	.+12     	; 0x2044 <__ftoa_engine+0x142>
    2038:	08 0f       	add	r16, r24
    203a:	0a f4       	brpl	.+2      	; 0x203e <__ftoa_engine+0x13c>
    203c:	00 27       	eor	r16, r16
    203e:	02 17       	cp	r16, r18
    2040:	08 f4       	brcc	.+2      	; 0x2044 <__ftoa_engine+0x142>
    2042:	20 2f       	mov	r18, r16
    2044:	23 95       	inc	r18
    2046:	02 2f       	mov	r16, r18
    2048:	7a 33       	cpi	r23, 0x3A	; 58
    204a:	28 f0       	brcs	.+10     	; 0x2056 <__ftoa_engine+0x154>
    204c:	79 e3       	ldi	r23, 0x39	; 57
    204e:	7d 93       	st	X+, r23
    2050:	2a 95       	dec	r18
    2052:	e9 f7       	brne	.-6      	; 0x204e <__ftoa_engine+0x14c>
    2054:	10 c0       	rjmp	.+32     	; 0x2076 <__ftoa_engine+0x174>
    2056:	7d 93       	st	X+, r23
    2058:	2a 95       	dec	r18
    205a:	89 f6       	brne	.-94     	; 0x1ffe <__ftoa_engine+0xfc>
    205c:	06 94       	lsr	r0
    205e:	97 95       	ror	r25
    2060:	67 95       	ror	r22
    2062:	37 95       	ror	r19
    2064:	17 95       	ror	r17
    2066:	17 94       	ror	r1
    2068:	e1 18       	sub	r14, r1
    206a:	f1 0a       	sbc	r15, r17
    206c:	43 0b       	sbc	r20, r19
    206e:	56 0b       	sbc	r21, r22
    2070:	c9 0b       	sbc	r28, r25
    2072:	d0 09       	sbc	r29, r0
    2074:	98 f0       	brcs	.+38     	; 0x209c <__ftoa_engine+0x19a>
    2076:	23 95       	inc	r18
    2078:	7e 91       	ld	r23, -X
    207a:	73 95       	inc	r23
    207c:	7a 33       	cpi	r23, 0x3A	; 58
    207e:	08 f0       	brcs	.+2      	; 0x2082 <__ftoa_engine+0x180>
    2080:	70 e3       	ldi	r23, 0x30	; 48
    2082:	7c 93       	st	X, r23
    2084:	20 13       	cpse	r18, r16
    2086:	b8 f7       	brcc	.-18     	; 0x2076 <__ftoa_engine+0x174>
    2088:	7e 91       	ld	r23, -X
    208a:	70 61       	ori	r23, 0x10	; 16
    208c:	7d 93       	st	X+, r23
    208e:	30 f0       	brcs	.+12     	; 0x209c <__ftoa_engine+0x19a>
    2090:	83 95       	inc	r24
    2092:	71 e3       	ldi	r23, 0x31	; 49
    2094:	7d 93       	st	X+, r23
    2096:	70 e3       	ldi	r23, 0x30	; 48
    2098:	2a 95       	dec	r18
    209a:	e1 f7       	brne	.-8      	; 0x2094 <__ftoa_engine+0x192>
    209c:	11 24       	eor	r1, r1
    209e:	ef 90       	pop	r14
    20a0:	ff 90       	pop	r15
    20a2:	0f 91       	pop	r16
    20a4:	1f 91       	pop	r17
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	99 27       	eor	r25, r25
    20ac:	87 fd       	sbrc	r24, 7
    20ae:	90 95       	com	r25
    20b0:	08 95       	ret

000020b2 <strnlen_P>:
    20b2:	fc 01       	movw	r30, r24
    20b4:	05 90       	lpm	r0, Z+
    20b6:	61 50       	subi	r22, 0x01	; 1
    20b8:	70 40       	sbci	r23, 0x00	; 0
    20ba:	01 10       	cpse	r0, r1
    20bc:	d8 f7       	brcc	.-10     	; 0x20b4 <strnlen_P+0x2>
    20be:	80 95       	com	r24
    20c0:	90 95       	com	r25
    20c2:	8e 0f       	add	r24, r30
    20c4:	9f 1f       	adc	r25, r31
    20c6:	08 95       	ret

000020c8 <strcat>:
    20c8:	fb 01       	movw	r30, r22
    20ca:	dc 01       	movw	r26, r24
    20cc:	0d 90       	ld	r0, X+
    20ce:	00 20       	and	r0, r0
    20d0:	e9 f7       	brne	.-6      	; 0x20cc <strcat+0x4>
    20d2:	11 97       	sbiw	r26, 0x01	; 1
    20d4:	01 90       	ld	r0, Z+
    20d6:	0d 92       	st	X+, r0
    20d8:	00 20       	and	r0, r0
    20da:	e1 f7       	brne	.-8      	; 0x20d4 <strcat+0xc>
    20dc:	08 95       	ret

000020de <strcpy>:
    20de:	fb 01       	movw	r30, r22
    20e0:	dc 01       	movw	r26, r24
    20e2:	01 90       	ld	r0, Z+
    20e4:	0d 92       	st	X+, r0
    20e6:	00 20       	and	r0, r0
    20e8:	e1 f7       	brne	.-8      	; 0x20e2 <strcpy+0x4>
    20ea:	08 95       	ret

000020ec <strncmp>:
    20ec:	fb 01       	movw	r30, r22
    20ee:	dc 01       	movw	r26, r24
    20f0:	41 50       	subi	r20, 0x01	; 1
    20f2:	50 40       	sbci	r21, 0x00	; 0
    20f4:	30 f0       	brcs	.+12     	; 0x2102 <strncmp+0x16>
    20f6:	8d 91       	ld	r24, X+
    20f8:	01 90       	ld	r0, Z+
    20fa:	80 19       	sub	r24, r0
    20fc:	19 f4       	brne	.+6      	; 0x2104 <strncmp+0x18>
    20fe:	00 20       	and	r0, r0
    2100:	b9 f7       	brne	.-18     	; 0x20f0 <strncmp+0x4>
    2102:	88 1b       	sub	r24, r24
    2104:	99 0b       	sbc	r25, r25
    2106:	08 95       	ret

00002108 <strnlen>:
    2108:	fc 01       	movw	r30, r24
    210a:	61 50       	subi	r22, 0x01	; 1
    210c:	70 40       	sbci	r23, 0x00	; 0
    210e:	01 90       	ld	r0, Z+
    2110:	01 10       	cpse	r0, r1
    2112:	d8 f7       	brcc	.-10     	; 0x210a <strnlen+0x2>
    2114:	80 95       	com	r24
    2116:	90 95       	com	r25
    2118:	8e 0f       	add	r24, r30
    211a:	9f 1f       	adc	r25, r31
    211c:	08 95       	ret

0000211e <fputc>:
    211e:	0f 93       	push	r16
    2120:	1f 93       	push	r17
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	fb 01       	movw	r30, r22
    2128:	23 81       	ldd	r18, Z+3	; 0x03
    212a:	21 fd       	sbrc	r18, 1
    212c:	03 c0       	rjmp	.+6      	; 0x2134 <fputc+0x16>
    212e:	8f ef       	ldi	r24, 0xFF	; 255
    2130:	9f ef       	ldi	r25, 0xFF	; 255
    2132:	2c c0       	rjmp	.+88     	; 0x218c <fputc+0x6e>
    2134:	22 ff       	sbrs	r18, 2
    2136:	16 c0       	rjmp	.+44     	; 0x2164 <fputc+0x46>
    2138:	46 81       	ldd	r20, Z+6	; 0x06
    213a:	57 81       	ldd	r21, Z+7	; 0x07
    213c:	24 81       	ldd	r18, Z+4	; 0x04
    213e:	35 81       	ldd	r19, Z+5	; 0x05
    2140:	42 17       	cp	r20, r18
    2142:	53 07       	cpc	r21, r19
    2144:	44 f4       	brge	.+16     	; 0x2156 <fputc+0x38>
    2146:	a0 81       	ld	r26, Z
    2148:	b1 81       	ldd	r27, Z+1	; 0x01
    214a:	9d 01       	movw	r18, r26
    214c:	2f 5f       	subi	r18, 0xFF	; 255
    214e:	3f 4f       	sbci	r19, 0xFF	; 255
    2150:	31 83       	std	Z+1, r19	; 0x01
    2152:	20 83       	st	Z, r18
    2154:	8c 93       	st	X, r24
    2156:	26 81       	ldd	r18, Z+6	; 0x06
    2158:	37 81       	ldd	r19, Z+7	; 0x07
    215a:	2f 5f       	subi	r18, 0xFF	; 255
    215c:	3f 4f       	sbci	r19, 0xFF	; 255
    215e:	37 83       	std	Z+7, r19	; 0x07
    2160:	26 83       	std	Z+6, r18	; 0x06
    2162:	14 c0       	rjmp	.+40     	; 0x218c <fputc+0x6e>
    2164:	8b 01       	movw	r16, r22
    2166:	ec 01       	movw	r28, r24
    2168:	fb 01       	movw	r30, r22
    216a:	00 84       	ldd	r0, Z+8	; 0x08
    216c:	f1 85       	ldd	r31, Z+9	; 0x09
    216e:	e0 2d       	mov	r30, r0
    2170:	09 95       	icall
    2172:	89 2b       	or	r24, r25
    2174:	e1 f6       	brne	.-72     	; 0x212e <fputc+0x10>
    2176:	d8 01       	movw	r26, r16
    2178:	16 96       	adiw	r26, 0x06	; 6
    217a:	8d 91       	ld	r24, X+
    217c:	9c 91       	ld	r25, X
    217e:	17 97       	sbiw	r26, 0x07	; 7
    2180:	01 96       	adiw	r24, 0x01	; 1
    2182:	17 96       	adiw	r26, 0x07	; 7
    2184:	9c 93       	st	X, r25
    2186:	8e 93       	st	-X, r24
    2188:	16 97       	sbiw	r26, 0x06	; 6
    218a:	ce 01       	movw	r24, r28
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	08 95       	ret

00002196 <puts>:
    2196:	0f 93       	push	r16
    2198:	1f 93       	push	r17
    219a:	cf 93       	push	r28
    219c:	df 93       	push	r29
    219e:	e0 91 2a 06 	lds	r30, 0x062A	; 0x80062a <__iob+0x2>
    21a2:	f0 91 2b 06 	lds	r31, 0x062B	; 0x80062b <__iob+0x3>
    21a6:	23 81       	ldd	r18, Z+3	; 0x03
    21a8:	21 ff       	sbrs	r18, 1
    21aa:	1b c0       	rjmp	.+54     	; 0x21e2 <puts+0x4c>
    21ac:	8c 01       	movw	r16, r24
    21ae:	d0 e0       	ldi	r29, 0x00	; 0
    21b0:	c0 e0       	ldi	r28, 0x00	; 0
    21b2:	f8 01       	movw	r30, r16
    21b4:	81 91       	ld	r24, Z+
    21b6:	8f 01       	movw	r16, r30
    21b8:	60 91 2a 06 	lds	r22, 0x062A	; 0x80062a <__iob+0x2>
    21bc:	70 91 2b 06 	lds	r23, 0x062B	; 0x80062b <__iob+0x3>
    21c0:	db 01       	movw	r26, r22
    21c2:	18 96       	adiw	r26, 0x08	; 8
    21c4:	ed 91       	ld	r30, X+
    21c6:	fc 91       	ld	r31, X
    21c8:	19 97       	sbiw	r26, 0x09	; 9
    21ca:	88 23       	and	r24, r24
    21cc:	31 f0       	breq	.+12     	; 0x21da <puts+0x44>
    21ce:	09 95       	icall
    21d0:	89 2b       	or	r24, r25
    21d2:	79 f3       	breq	.-34     	; 0x21b2 <puts+0x1c>
    21d4:	df ef       	ldi	r29, 0xFF	; 255
    21d6:	cf ef       	ldi	r28, 0xFF	; 255
    21d8:	ec cf       	rjmp	.-40     	; 0x21b2 <puts+0x1c>
    21da:	8a e0       	ldi	r24, 0x0A	; 10
    21dc:	09 95       	icall
    21de:	89 2b       	or	r24, r25
    21e0:	19 f0       	breq	.+6      	; 0x21e8 <puts+0x52>
    21e2:	8f ef       	ldi	r24, 0xFF	; 255
    21e4:	9f ef       	ldi	r25, 0xFF	; 255
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <puts+0x56>
    21e8:	8d 2f       	mov	r24, r29
    21ea:	9c 2f       	mov	r25, r28
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	1f 91       	pop	r17
    21f2:	0f 91       	pop	r16
    21f4:	08 95       	ret

000021f6 <sprintf>:
    21f6:	ae e0       	ldi	r26, 0x0E	; 14
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	e1 e0       	ldi	r30, 0x01	; 1
    21fc:	f1 e1       	ldi	r31, 0x11	; 17
    21fe:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__prologue_saves__+0x1c>
    2202:	0d 89       	ldd	r16, Y+21	; 0x15
    2204:	1e 89       	ldd	r17, Y+22	; 0x16
    2206:	86 e0       	ldi	r24, 0x06	; 6
    2208:	8c 83       	std	Y+4, r24	; 0x04
    220a:	1a 83       	std	Y+2, r17	; 0x02
    220c:	09 83       	std	Y+1, r16	; 0x01
    220e:	8f ef       	ldi	r24, 0xFF	; 255
    2210:	9f e7       	ldi	r25, 0x7F	; 127
    2212:	9e 83       	std	Y+6, r25	; 0x06
    2214:	8d 83       	std	Y+5, r24	; 0x05
    2216:	ae 01       	movw	r20, r28
    2218:	47 5e       	subi	r20, 0xE7	; 231
    221a:	5f 4f       	sbci	r21, 0xFF	; 255
    221c:	6f 89       	ldd	r22, Y+23	; 0x17
    221e:	78 8d       	ldd	r23, Y+24	; 0x18
    2220:	ce 01       	movw	r24, r28
    2222:	01 96       	adiw	r24, 0x01	; 1
    2224:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vfprintf>
    2228:	ef 81       	ldd	r30, Y+7	; 0x07
    222a:	f8 85       	ldd	r31, Y+8	; 0x08
    222c:	e0 0f       	add	r30, r16
    222e:	f1 1f       	adc	r31, r17
    2230:	10 82       	st	Z, r1
    2232:	2e 96       	adiw	r28, 0x0e	; 14
    2234:	e4 e0       	ldi	r30, 0x04	; 4
    2236:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__epilogue_restores__+0x1c>

0000223a <__ultoa_invert>:
    223a:	fa 01       	movw	r30, r20
    223c:	aa 27       	eor	r26, r26
    223e:	28 30       	cpi	r18, 0x08	; 8
    2240:	51 f1       	breq	.+84     	; 0x2296 <__ultoa_invert+0x5c>
    2242:	20 31       	cpi	r18, 0x10	; 16
    2244:	81 f1       	breq	.+96     	; 0x22a6 <__ultoa_invert+0x6c>
    2246:	e8 94       	clt
    2248:	6f 93       	push	r22
    224a:	6e 7f       	andi	r22, 0xFE	; 254
    224c:	6e 5f       	subi	r22, 0xFE	; 254
    224e:	7f 4f       	sbci	r23, 0xFF	; 255
    2250:	8f 4f       	sbci	r24, 0xFF	; 255
    2252:	9f 4f       	sbci	r25, 0xFF	; 255
    2254:	af 4f       	sbci	r26, 0xFF	; 255
    2256:	b1 e0       	ldi	r27, 0x01	; 1
    2258:	3e d0       	rcall	.+124    	; 0x22d6 <__ultoa_invert+0x9c>
    225a:	b4 e0       	ldi	r27, 0x04	; 4
    225c:	3c d0       	rcall	.+120    	; 0x22d6 <__ultoa_invert+0x9c>
    225e:	67 0f       	add	r22, r23
    2260:	78 1f       	adc	r23, r24
    2262:	89 1f       	adc	r24, r25
    2264:	9a 1f       	adc	r25, r26
    2266:	a1 1d       	adc	r26, r1
    2268:	68 0f       	add	r22, r24
    226a:	79 1f       	adc	r23, r25
    226c:	8a 1f       	adc	r24, r26
    226e:	91 1d       	adc	r25, r1
    2270:	a1 1d       	adc	r26, r1
    2272:	6a 0f       	add	r22, r26
    2274:	71 1d       	adc	r23, r1
    2276:	81 1d       	adc	r24, r1
    2278:	91 1d       	adc	r25, r1
    227a:	a1 1d       	adc	r26, r1
    227c:	20 d0       	rcall	.+64     	; 0x22be <__ultoa_invert+0x84>
    227e:	09 f4       	brne	.+2      	; 0x2282 <__ultoa_invert+0x48>
    2280:	68 94       	set
    2282:	3f 91       	pop	r19
    2284:	2a e0       	ldi	r18, 0x0A	; 10
    2286:	26 9f       	mul	r18, r22
    2288:	11 24       	eor	r1, r1
    228a:	30 19       	sub	r19, r0
    228c:	30 5d       	subi	r19, 0xD0	; 208
    228e:	31 93       	st	Z+, r19
    2290:	de f6       	brtc	.-74     	; 0x2248 <__ultoa_invert+0xe>
    2292:	cf 01       	movw	r24, r30
    2294:	08 95       	ret
    2296:	46 2f       	mov	r20, r22
    2298:	47 70       	andi	r20, 0x07	; 7
    229a:	40 5d       	subi	r20, 0xD0	; 208
    229c:	41 93       	st	Z+, r20
    229e:	b3 e0       	ldi	r27, 0x03	; 3
    22a0:	0f d0       	rcall	.+30     	; 0x22c0 <__ultoa_invert+0x86>
    22a2:	c9 f7       	brne	.-14     	; 0x2296 <__ultoa_invert+0x5c>
    22a4:	f6 cf       	rjmp	.-20     	; 0x2292 <__ultoa_invert+0x58>
    22a6:	46 2f       	mov	r20, r22
    22a8:	4f 70       	andi	r20, 0x0F	; 15
    22aa:	40 5d       	subi	r20, 0xD0	; 208
    22ac:	4a 33       	cpi	r20, 0x3A	; 58
    22ae:	18 f0       	brcs	.+6      	; 0x22b6 <__ultoa_invert+0x7c>
    22b0:	49 5d       	subi	r20, 0xD9	; 217
    22b2:	31 fd       	sbrc	r19, 1
    22b4:	40 52       	subi	r20, 0x20	; 32
    22b6:	41 93       	st	Z+, r20
    22b8:	02 d0       	rcall	.+4      	; 0x22be <__ultoa_invert+0x84>
    22ba:	a9 f7       	brne	.-22     	; 0x22a6 <__ultoa_invert+0x6c>
    22bc:	ea cf       	rjmp	.-44     	; 0x2292 <__ultoa_invert+0x58>
    22be:	b4 e0       	ldi	r27, 0x04	; 4
    22c0:	a6 95       	lsr	r26
    22c2:	97 95       	ror	r25
    22c4:	87 95       	ror	r24
    22c6:	77 95       	ror	r23
    22c8:	67 95       	ror	r22
    22ca:	ba 95       	dec	r27
    22cc:	c9 f7       	brne	.-14     	; 0x22c0 <__ultoa_invert+0x86>
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	61 05       	cpc	r22, r1
    22d2:	71 05       	cpc	r23, r1
    22d4:	08 95       	ret
    22d6:	9b 01       	movw	r18, r22
    22d8:	ac 01       	movw	r20, r24
    22da:	0a 2e       	mov	r0, r26
    22dc:	06 94       	lsr	r0
    22de:	57 95       	ror	r21
    22e0:	47 95       	ror	r20
    22e2:	37 95       	ror	r19
    22e4:	27 95       	ror	r18
    22e6:	ba 95       	dec	r27
    22e8:	c9 f7       	brne	.-14     	; 0x22dc <__ultoa_invert+0xa2>
    22ea:	62 0f       	add	r22, r18
    22ec:	73 1f       	adc	r23, r19
    22ee:	84 1f       	adc	r24, r20
    22f0:	95 1f       	adc	r25, r21
    22f2:	a0 1d       	adc	r26, r0
    22f4:	08 95       	ret

000022f6 <_exit>:
    22f6:	f8 94       	cli

000022f8 <__stop_program>:
    22f8:	ff cf       	rjmp	.-2      	; 0x22f8 <__stop_program>
