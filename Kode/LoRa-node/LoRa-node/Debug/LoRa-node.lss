
LoRa-node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000586  00800100  000020f0  00002184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f4  00800686  00800686  0000270a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000270a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002768  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  000027a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038e7  00000000  00000000  00002a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000197a  00000000  00000000  0000633f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d32  00000000  00000000  00007cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007cc  00000000  00000000  000099ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001077  00000000  00000000  0000a1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c4c  00000000  00000000  0000b22f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  0000ce7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__ctors_end>
       4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
       8:	0c 94 a2 02 	jmp	0x544	; 0x544 <__vector_2>
       c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      10:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      14:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      18:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      1c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      20:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      24:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      28:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      2c:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__vector_11>
      30:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      34:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      38:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      3c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      40:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      44:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      48:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      4c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      50:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      54:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      58:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      5c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      60:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      64:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      68:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      6c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      70:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      74:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      78:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      7c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      80:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      84:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      88:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      8c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      90:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      94:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      98:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      9c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      ac:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      bc:	0c 94 c8 02 	jmp	0x590	; 0x590 <__vector_47>
      c0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      c4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      c8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>

000000cc <__trampolines_end>:
      cc:	6e 61       	ori	r22, 0x1E	; 30
      ce:	6e 00       	.word	0x006e	; ????

000000d0 <__c.2332>:
      d0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      e0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      f0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     100:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     110:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     120:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     130:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     140:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     150:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     160:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     170:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     180:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     190:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1a0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1b0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1c0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001ce <__ctors_end>:
     1ce:	11 24       	eor	r1, r1
     1d0:	1f be       	out	0x3f, r1	; 63
     1d2:	cf ef       	ldi	r28, 0xFF	; 255
     1d4:	d8 e0       	ldi	r29, 0x08	; 8
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	cd bf       	out	0x3d, r28	; 61

000001da <__do_copy_data>:
     1da:	16 e0       	ldi	r17, 0x06	; 6
     1dc:	a0 e0       	ldi	r26, 0x00	; 0
     1de:	b1 e0       	ldi	r27, 0x01	; 1
     1e0:	e0 ef       	ldi	r30, 0xF0	; 240
     1e2:	f0 e2       	ldi	r31, 0x20	; 32
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <__do_copy_data+0x10>
     1e6:	05 90       	lpm	r0, Z+
     1e8:	0d 92       	st	X+, r0
     1ea:	a6 38       	cpi	r26, 0x86	; 134
     1ec:	b1 07       	cpc	r27, r17
     1ee:	d9 f7       	brne	.-10     	; 0x1e6 <__do_copy_data+0xc>

000001f0 <__do_clear_bss>:
     1f0:	27 e0       	ldi	r18, 0x07	; 7
     1f2:	a6 e8       	ldi	r26, 0x86	; 134
     1f4:	b6 e0       	ldi	r27, 0x06	; 6
     1f6:	01 c0       	rjmp	.+2      	; 0x1fa <.do_clear_bss_start>

000001f8 <.do_clear_bss_loop>:
     1f8:	1d 92       	st	X+, r1

000001fa <.do_clear_bss_start>:
     1fa:	aa 37       	cpi	r26, 0x7A	; 122
     1fc:	b2 07       	cpc	r27, r18
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <.do_clear_bss_loop>
     200:	0e 94 06 01 	call	0x20c	; 0x20c <main>
     204:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <_exit>

00000208 <__bad_interrupt>:
     208:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020c <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20c:	2f ef       	ldi	r18, 0xFF	; 255
     20e:	83 ec       	ldi	r24, 0xC3	; 195
     210:	99 e0       	ldi	r25, 0x09	; 9
     212:	21 50       	subi	r18, 0x01	; 1
     214:	80 40       	sbci	r24, 0x00	; 0
     216:	90 40       	sbci	r25, 0x00	; 0
     218:	e1 f7       	brne	.-8      	; 0x212 <main+0x6>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0x10>
     21c:	00 00       	nop


int main(void){
	_delay_ms(400); // Start-up time after pressing reset button
	
	FSM_run();
     21e:	0e 94 95 01 	call	0x32a	; 0x32a <FSM_run>
	puts("Program ended");
     222:	86 e2       	ldi	r24, 0x26	; 38
     224:	92 e0       	ldi	r25, 0x02	; 2
     226:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <puts>
	return 0;
}
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	08 95       	ret

00000230 <adc_init>:




void adc_init(){
	ADMUX = 0;
     230:	ac e7       	ldi	r26, 0x7C	; 124
     232:	b0 e0       	ldi	r27, 0x00	; 0
     234:	1c 92       	st	X, r1
	ADCSRA = 0;
     236:	ea e7       	ldi	r30, 0x7A	; 122
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	10 82       	st	Z, r1
	ADMUX |= ADC_VOLTAGE_REF_AVCC;											// Sets adc voltage reference
     23c:	8c 91       	ld	r24, X
     23e:	80 64       	ori	r24, 0x40	; 64
     240:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESCALAR_128;											// ADC prescaler = 128 ---> 8MHz goes to 62.5 kHz
     242:	80 81       	ld	r24, Z
     244:	86 60       	ori	r24, 0x06	; 6
     246:	80 83       	st	Z, r24
	//ADCSRA |= (0 << ADIE);												// Enables ADC interrupt
	ADCSRA |= (1 << ADEN);													// Enabling the ADC
     248:	80 81       	ld	r24, Z
     24a:	80 68       	ori	r24, 0x80	; 128
     24c:	80 83       	st	Z, r24
     24e:	08 95       	ret

00000250 <adc_read>:
}


uint16_t adc_read(){
	uint16_t val;					
	ADCSRA |= (1 << ADSC);													// Starts single conversion
     250:	ea e7       	ldi	r30, 0x7A	; 122
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 81       	ld	r24, Z
     256:	80 64       	ori	r24, 0x40	; 64
     258:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));
     25a:	80 81       	ld	r24, Z
     25c:	84 ff       	sbrs	r24, 4
     25e:	fd cf       	rjmp	.-6      	; 0x25a <adc_read+0xa>
	val = ADCW;
     260:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     264:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	if ((int)val > 1000){val = 1000;}
     268:	89 3e       	cpi	r24, 0xE9	; 233
     26a:	23 e0       	ldi	r18, 0x03	; 3
     26c:	92 07       	cpc	r25, r18
     26e:	14 f0       	brlt	.+4      	; 0x274 <adc_read+0x24>
     270:	88 ee       	ldi	r24, 0xE8	; 232
     272:	93 e0       	ldi	r25, 0x03	; 3
	return val;
}
     274:	08 95       	ret

00000276 <adc_change_channel>:

void adc_change_channel(uint8_t channel){
	ADMUX |= channel;														// Setting adc channel to be read
     276:	ec e7       	ldi	r30, 0x7C	; 124
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	90 81       	ld	r25, Z
     27c:	89 2b       	or	r24, r25
     27e:	80 83       	st	Z, r24
	adc_read();																// Discard first measurement after channel change
     280:	0e 94 28 01 	call	0x250	; 0x250 <adc_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     284:	8a e1       	ldi	r24, 0x1A	; 26
     286:	8a 95       	dec	r24
     288:	f1 f7       	brne	.-4      	; 0x286 <adc_change_channel+0x10>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <adc_change_channel+0x16>
     28c:	08 95       	ret

0000028e <board_charge>:
	DDRD |= (1 << DDRD4);	  // Set PD4 as output
	
}

void board_charge(int off){
	if (off) clear_bit(PORTD, PORTD4);
     28e:	89 2b       	or	r24, r25
     290:	11 f0       	breq	.+4      	; 0x296 <board_charge+0x8>
     292:	5c 98       	cbi	0x0b, 4	; 11
     294:	08 95       	ret
	else set_bit(PORTD, PORTD4);
     296:	5c 9a       	sbi	0x0b, 4	; 11
     298:	08 95       	ret

0000029a <board_setup>:
}

void board_setup(uint8_t *joined_err){
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	ec 01       	movw	r28, r24
	#ifndef LORA_NODE
	USART_init();
	#endif
	adc_init();
     2a0:	0e 94 18 01 	call	0x230	; 0x230 <adc_init>

static void board_dmy_btn_init();
static void board_gpio_init();

void board_dmy_btn_init(void){
	DDRD &= ~(1 << DDD3);     // Clear the PD2 pin
     2a4:	53 98       	cbi	0x0a, 3	; 10
	EICRA |= (1 << ISC11);    // set INT1 to trigger on falling edge
     2a6:	e9 e6       	ldi	r30, 0x69	; 105
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	88 60       	ori	r24, 0x08	; 8
     2ae:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);     // Turns on INT1
     2b0:	e9 9a       	sbi	0x1d, 1	; 29
}

void board_gpio_init(void){
	DDRD |= (1 << DDRD4);	  // Set PD4 as output
     2b2:	54 9a       	sbi	0x0a, 4	; 10
	USART_init();
	#endif
	adc_init();
	board_dmy_btn_init();
	board_gpio_init();
	board_charge(0);
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 47 01 	call	0x28e	; 0x28e <board_charge>
	
	#ifdef LORA_NODE
		lora_init(joined_err);
     2bc:	ce 01       	movw	r24, r28
     2be:	0e 94 68 05 	call	0xad0	; 0xad0 <lora_init>
	#else
		*joined_err = 0;
	#endif

	i2c_init();
     2c2:	0e 94 11 03 	call	0x622	; 0x622 <i2c_init>
	timers_init();
     2c6:	0e 94 00 08 	call	0x1000	; 0x1000 <timers_init>
	sei();
     2ca:	78 94       	sei
}
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <board_get_battery_level>:
	
	r1 = 174;
	r2 = 255;
	battery_max = 4.2;
	
	adc_change_channel(VBAT);
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	0e 94 3b 01 	call	0x276	; 0x276 <adc_change_channel>
	val = adc_read();
     2d8:	0e 94 28 01 	call	0x250	; 0x250 <adc_read>
	
	v_div_tick = (((r2)/(r1+r2))*battery_max) / 1024;
	vbat = v_div_tick*val*(r1+r2)/r2;
	bat_percentage = vbat*100/battery_max;
	
	return bat_percentage;
     2dc:	bc 01       	movw	r22, r24
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__floatunsisf>
     2e6:	26 eb       	ldi	r18, 0xB6	; 182
     2e8:	36 ec       	ldi	r19, 0xC6	; 198
     2ea:	4f e1       	ldi	r20, 0x1F	; 31
     2ec:	5b e3       	ldi	r21, 0x3B	; 59
     2ee:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__mulsf3>
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e8       	ldi	r19, 0x80	; 128
     2f6:	46 ed       	ldi	r20, 0xD6	; 214
     2f8:	53 e4       	ldi	r21, 0x43	; 67
     2fa:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__mulsf3>
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	4f e7       	ldi	r20, 0x7F	; 127
     304:	53 e4       	ldi	r21, 0x43	; 67
     306:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__divsf3>
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	48 ec       	ldi	r20, 0xC8	; 200
     310:	52 e4       	ldi	r21, 0x42	; 66
     312:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__mulsf3>
     316:	26 e6       	ldi	r18, 0x66	; 102
     318:	36 e6       	ldi	r19, 0x66	; 102
     31a:	46 e8       	ldi	r20, 0x86	; 134
     31c:	50 e4       	ldi	r21, 0x40	; 64
     31e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__divsf3>
     322:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fixsfsi>
     326:	86 2f       	mov	r24, r22
     328:	08 95       	ret

0000032a <FSM_run>:

//const char* test = "3565623838383532";
//const char* test2 = "mac_rx 2 63633131353562626666"; 
char test3[50] = "mac_rx 2 63633131353562626666";
uint8_t out[100];
void FSM_run(void){
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	cd b7       	in	r28, 0x3d	; 61
     330:	de b7       	in	r29, 0x3e	; 62
     332:	68 97       	sbiw	r28, 0x18	; 24
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	de bf       	out	0x3e, r29	; 62
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	cd bf       	out	0x3d, r28	; 61
	board_t board1 = {DEV_ID, 0, 0, 100, {0, 0, 0, 0}, 0, SAMPLE_SIZE, ""};
     33e:	88 e1       	ldi	r24, 0x18	; 24
     340:	e4 e1       	ldi	r30, 0x14	; 20
     342:	f1 e0       	ldi	r31, 0x01	; 1
     344:	de 01       	movw	r26, r28
     346:	11 96       	adiw	r26, 0x01	; 1
     348:	01 90       	ld	r0, Z+
     34a:	0d 92       	st	X+, r0
     34c:	8a 95       	dec	r24
     34e:	e1 f7       	brne	.-8      	; 0x348 <FSM_run+0x1e>
	int rejoin_attempts = 0;
     350:	00 e0       	ldi	r16, 0x00	; 0
     352:	10 e0       	ldi	r17, 0x00	; 0
				enter_powerSave();
				#ifndef TIMER2
				_delay_ms(1000);
				#endif
				if(board1.lora_joined_err) nextState = ST_NOT_JOINED;
				else nextState = ST_ACTIVE;
     354:	68 94       	set
     356:	dd 24       	eor	r13, r13
     358:	d1 f8       	bld	r13, 1
				_delay_ms(2); // Delay to allow a print to be written over serial before sleep
				enter_powerSave();
				#ifndef TIMER2
				_delay_ms(1000);
				#endif
				if(board1.lora_joined_err) nextState = ST_NOT_JOINED;
     35a:	0f 2e       	mov	r0, r31
     35c:	f3 e0       	ldi	r31, 0x03	; 3
     35e:	ef 2e       	mov	r14, r31
     360:	f0 2d       	mov	r31, r0
						lora_transmit(board1.msg);
					#endif
					board1.ina219.bus_voltage_avg = 0;
					board1.ina219.current_avg = 0;
				}
				nextState = ST_SLEEP;
     362:	ff 24       	eor	r15, r15
     364:	f3 94       	inc	r15
				if (board1.batteryLevel < 60) board_charge(BOARD_CHARGE_ON);
				else if (board1.batteryLevel > 95) board_charge(BOARD_CHARGE_OFF);
				if(!(current_time%board1.sample_size) && (current_time != 0)){
					if (frame_counter == 0xFF) frame_counter = 0;
					board1.frame_counter = frame_counter++;
					board1.ina219.bus_voltage	= board1.ina219.bus_voltage_avg / SAMPLE_SIZE;
     366:	0f 2e       	mov	r0, r31
     368:	f8 e5       	ldi	r31, 0x58	; 88
     36a:	8f 2e       	mov	r8, r31
     36c:	f2 e0       	ldi	r31, 0x02	; 2
     36e:	9f 2e       	mov	r9, r31
     370:	a1 2c       	mov	r10, r1
     372:	b1 2c       	mov	r11, r1
     374:	f0 2d       	mov	r31, r0
void FSM_run(void){
	board_t board1 = {DEV_ID, 0, 0, 100, {0, 0, 0, 0}, 0, SAMPLE_SIZE, ""};
	int rejoin_attempts = 0;
	uint8_t lora_wait_rejoin_minutes = 3;
	while (1){
		switch (nextState){
     376:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <nextState>
     37a:	81 30       	cpi	r24, 0x01	; 1
     37c:	09 f4       	brne	.+2      	; 0x380 <FSM_run+0x56>
     37e:	d1 c0       	rjmp	.+418    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     380:	28 f0       	brcs	.+10     	; 0x38c <FSM_run+0x62>
     382:	82 30       	cpi	r24, 0x02	; 2
     384:	49 f1       	breq	.+82     	; 0x3d8 <FSM_run+0xae>
     386:	83 30       	cpi	r24, 0x03	; 3
     388:	91 f0       	breq	.+36     	; 0x3ae <FSM_run+0x84>
     38a:	f7 cf       	rjmp	.-18     	; 0x37a <FSM_run+0x50>
static uint8_t frame_counter = 0;
static volatile int rec_flag = 0;
static void FSM_system_init(uint8_t *joined_flag);

void FSM_system_init(uint8_t *joined_flag){
	board_setup(joined_flag);
     38c:	ce 01       	movw	r24, r28
     38e:	44 96       	adiw	r24, 0x14	; 20
     390:	0e 94 4d 01 	call	0x29a	; 0x29a <board_setup>
	#ifdef DEBUG_M
	puts("Init complete, FSM running");
     394:	84 e3       	ldi	r24, 0x34	; 52
     396:	92 e0       	ldi	r25, 0x02	; 2
     398:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <puts>
			case ST_INIT:
				FSM_system_init(&board1.lora_joined_err);
				
				//ascii_hex_decode(test3, strlen(test3), out, LORA_RX_PAYLOAD_OFFSET);
				//puts(downlink);
				if (board1.lora_joined_err) nextState = ST_NOT_JOINED;
     39c:	8c 89       	ldd	r24, Y+20	; 0x14
     39e:	88 23       	and	r24, r24
     3a0:	19 f0       	breq	.+6      	; 0x3a8 <FSM_run+0x7e>
     3a2:	e0 92 87 06 	sts	0x0687, r14	; 0x800687 <nextState>
     3a6:	e7 cf       	rjmp	.-50     	; 0x376 <FSM_run+0x4c>
				else nextState = ST_ACTIVE;
     3a8:	d0 92 87 06 	sts	0x0687, r13	; 0x800687 <nextState>
     3ac:	e4 cf       	rjmp	.-56     	; 0x376 <FSM_run+0x4c>
				break;
			
			case ST_NOT_JOINED:
				#ifdef DEBUG_M
					puts("Not joined");
     3ae:	8f e4       	ldi	r24, 0x4F	; 79
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <puts>
				#endif
				
				rejoin_attempts++;
     3b6:	0f 5f       	subi	r16, 0xFF	; 255
     3b8:	1f 4f       	sbci	r17, 0xFF	; 255
				if (rejoin_attempts < 3) board1.lora_joined_err = lora_join_OTAA();
     3ba:	03 30       	cpi	r16, 0x03	; 3
     3bc:	11 05       	cpc	r17, r1
     3be:	24 f4       	brge	.+8      	; 0x3c8 <FSM_run+0x9e>
     3c0:	0e 94 43 05 	call	0xa86	; 0xa86 <lora_join_OTAA>
     3c4:	8c 8b       	std	Y+20, r24	; 0x14
     3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <FSM_run+0xa8>
				else if (rejoin_attempts >= lora_wait_rejoin_minutes*60) rejoin_attempts = 0;
     3c8:	04 3b       	cpi	r16, 0xB4	; 180
     3ca:	11 05       	cpc	r17, r1
     3cc:	14 f0       	brlt	.+4      	; 0x3d2 <FSM_run+0xa8>
     3ce:	00 e0       	ldi	r16, 0x00	; 0
     3d0:	10 e0       	ldi	r17, 0x00	; 0

				nextState = ST_SLEEP;
     3d2:	f0 92 87 06 	sts	0x0687, r15	; 0x800687 <nextState>
				break;
     3d6:	cf cf       	rjmp	.-98     	; 0x376 <FSM_run+0x4c>
			case ST_ACTIVE:
				#ifdef DEBUG_M
					//puts("Active");
				#endif
				
				board1.ina219.bus_voltage_avg	+= INA219_readBusVoltageReg();
     3d8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <INA219_readBusVoltageReg>
     3dc:	09 2e       	mov	r0, r25
     3de:	00 0c       	add	r0, r0
     3e0:	aa 0b       	sbc	r26, r26
     3e2:	bb 0b       	sbc	r27, r27
     3e4:	4c 85       	ldd	r20, Y+12	; 0x0c
     3e6:	5d 85       	ldd	r21, Y+13	; 0x0d
     3e8:	6e 85       	ldd	r22, Y+14	; 0x0e
     3ea:	7f 85       	ldd	r23, Y+15	; 0x0f
     3ec:	84 0f       	add	r24, r20
     3ee:	95 1f       	adc	r25, r21
     3f0:	a6 1f       	adc	r26, r22
     3f2:	b7 1f       	adc	r27, r23
     3f4:	8c 87       	std	Y+12, r24	; 0x0c
     3f6:	9d 87       	std	Y+13, r25	; 0x0d
     3f8:	ae 87       	std	Y+14, r26	; 0x0e
     3fa:	bf 87       	std	Y+15, r27	; 0x0f
				board1.ina219.current_avg		+= INA219_readCurrentReg();
     3fc:	0e 94 0e 04 	call	0x81c	; 0x81c <INA219_readCurrentReg>
     400:	48 89       	ldd	r20, Y+16	; 0x10
     402:	59 89       	ldd	r21, Y+17	; 0x11
     404:	6a 89       	ldd	r22, Y+18	; 0x12
     406:	7b 89       	ldd	r23, Y+19	; 0x13
     408:	48 0f       	add	r20, r24
     40a:	59 1f       	adc	r21, r25
     40c:	61 1d       	adc	r22, r1
     40e:	71 1d       	adc	r23, r1
     410:	48 8b       	std	Y+16, r20	; 0x10
     412:	59 8b       	std	Y+17, r21	; 0x11
     414:	6a 8b       	std	Y+18, r22	; 0x12
     416:	7b 8b       	std	Y+19, r23	; 0x13
				//printf("bus avg: %lu     curr_avg: %lu \n", board1.ina219.bus_voltage_avg, board1.ina219.current_avg);
				board1.batteryLevel = board_get_battery_level();
     418:	0e 94 69 01 	call	0x2d2	; 0x2d2 <board_get_battery_level>
     41c:	8f 83       	std	Y+7, r24	; 0x07
				if (board1.batteryLevel < 60) board_charge(BOARD_CHARGE_ON);
     41e:	8c 33       	cpi	r24, 0x3C	; 60
     420:	28 f4       	brcc	.+10     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 47 01 	call	0x28e	; 0x28e <board_charge>
     42a:	06 c0       	rjmp	.+12     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
				else if (board1.batteryLevel > 95) board_charge(BOARD_CHARGE_OFF);
     42c:	80 36       	cpi	r24, 0x60	; 96
     42e:	20 f0       	brcs	.+8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 47 01 	call	0x28e	; 0x28e <board_charge>
				if(!(current_time%board1.sample_size) && (current_time != 0)){
     438:	60 91 a6 06 	lds	r22, 0x06A6	; 0x8006a6 <current_time>
     43c:	70 91 a7 06 	lds	r23, 0x06A7	; 0x8006a7 <current_time+0x1>
     440:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <current_time+0x2>
     444:	90 91 a9 06 	lds	r25, 0x06A9	; 0x8006a9 <current_time+0x3>
     448:	2d 89       	ldd	r18, Y+21	; 0x15
     44a:	3e 89       	ldd	r19, Y+22	; 0x16
     44c:	40 e0       	ldi	r20, 0x00	; 0
     44e:	50 e0       	ldi	r21, 0x00	; 0
     450:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__udivmodsi4>
     454:	67 2b       	or	r22, r23
     456:	68 2b       	or	r22, r24
     458:	69 2b       	or	r22, r25
     45a:	09 f0       	breq	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45c:	5f c0       	rjmp	.+190    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     45e:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <current_time>
     462:	90 91 a7 06 	lds	r25, 0x06A7	; 0x8006a7 <current_time+0x1>
     466:	a0 91 a8 06 	lds	r26, 0x06A8	; 0x8006a8 <current_time+0x2>
     46a:	b0 91 a9 06 	lds	r27, 0x06A9	; 0x8006a9 <current_time+0x3>
     46e:	89 2b       	or	r24, r25
     470:	8a 2b       	or	r24, r26
     472:	8b 2b       	or	r24, r27
     474:	09 f4       	brne	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     476:	52 c0       	rjmp	.+164    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
					if (frame_counter == 0xFF) frame_counter = 0;
     478:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <__data_end>
     47c:	8f 3f       	cpi	r24, 0xFF	; 255
     47e:	11 f4       	brne	.+4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     480:	10 92 86 06 	sts	0x0686, r1	; 0x800686 <__data_end>
					board1.frame_counter = frame_counter++;
     484:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <__data_end>
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	98 0f       	add	r25, r24
     48c:	90 93 86 06 	sts	0x0686, r25	; 0x800686 <__data_end>
     490:	8a 83       	std	Y+2, r24	; 0x02
					board1.ina219.bus_voltage	= board1.ina219.bus_voltage_avg / SAMPLE_SIZE;
     492:	6c 85       	ldd	r22, Y+12	; 0x0c
     494:	7d 85       	ldd	r23, Y+13	; 0x0d
     496:	8e 85       	ldd	r24, Y+14	; 0x0e
     498:	9f 85       	ldd	r25, Y+15	; 0x0f
     49a:	a5 01       	movw	r20, r10
     49c:	94 01       	movw	r18, r8
     49e:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__udivmodsi4>
     4a2:	39 87       	std	Y+9, r19	; 0x09
     4a4:	28 87       	std	Y+8, r18	; 0x08
					board1.ina219.current		= board1.ina219.current_avg / SAMPLE_SIZE;
     4a6:	68 89       	ldd	r22, Y+16	; 0x10
     4a8:	79 89       	ldd	r23, Y+17	; 0x11
     4aa:	8a 89       	ldd	r24, Y+18	; 0x12
     4ac:	9b 89       	ldd	r25, Y+19	; 0x13
     4ae:	a5 01       	movw	r20, r10
     4b0:	94 01       	movw	r18, r8
     4b2:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__udivmodsi4>
     4b6:	3b 87       	std	Y+11, r19	; 0x0b
     4b8:	2a 87       	std	Y+10, r18	; 0x0a
					board1.time_stamp = current_time;
     4ba:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <current_time>
     4be:	90 91 a7 06 	lds	r25, 0x06A7	; 0x8006a7 <current_time+0x1>
     4c2:	a0 91 a8 06 	lds	r26, 0x06A8	; 0x8006a8 <current_time+0x2>
     4c6:	b0 91 a9 06 	lds	r27, 0x06A9	; 0x8006a9 <current_time+0x3>
     4ca:	8b 83       	std	Y+3, r24	; 0x03
     4cc:	9c 83       	std	Y+4, r25	; 0x04
     4ce:	ad 83       	std	Y+5, r26	; 0x05
     4d0:	be 83       	std	Y+6, r27	; 0x06
					board1.msg = hex_encode(board1);
     4d2:	8d b7       	in	r24, 0x3d	; 61
     4d4:	9e b7       	in	r25, 0x3e	; 62
     4d6:	48 97       	sbiw	r24, 0x18	; 24
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	9e bf       	out	0x3e, r25	; 62
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	8d bf       	out	0x3d, r24	; 61
     4e2:	ad b7       	in	r26, 0x3d	; 61
     4e4:	be b7       	in	r27, 0x3e	; 62
     4e6:	11 96       	adiw	r26, 0x01	; 1
     4e8:	88 e1       	ldi	r24, 0x18	; 24
     4ea:	fe 01       	movw	r30, r28
     4ec:	31 96       	adiw	r30, 0x01	; 1
     4ee:	01 90       	ld	r0, Z+
     4f0:	0d 92       	st	X+, r0
     4f2:	8a 95       	dec	r24
     4f4:	e1 f7       	brne	.-8      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4f6:	0e 94 bc 08 	call	0x1178	; 0x1178 <hex_encode>
     4fa:	98 8f       	std	Y+24, r25	; 0x18
     4fc:	8f 8b       	std	Y+23, r24	; 0x17
						
					#ifndef LORA_NODE
						puts(board1.msg);
					#else 
						//puts(board1.msg);
						lora_transmit(board1.msg);
     4fe:	0e 94 39 07 	call	0xe72	; 0xe72 <lora_transmit>
					#endif
					board1.ina219.bus_voltage_avg = 0;
     502:	1c 86       	std	Y+12, r1	; 0x0c
     504:	1d 86       	std	Y+13, r1	; 0x0d
     506:	1e 86       	std	Y+14, r1	; 0x0e
     508:	1f 86       	std	Y+15, r1	; 0x0f
					board1.ina219.current_avg = 0;
     50a:	18 8a       	std	Y+16, r1	; 0x10
     50c:	19 8a       	std	Y+17, r1	; 0x11
     50e:	1a 8a       	std	Y+18, r1	; 0x12
     510:	1b 8a       	std	Y+19, r1	; 0x13
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	f8 94       	cli
     516:	de bf       	out	0x3e, r29	; 62
     518:	0f be       	out	0x3f, r0	; 63
     51a:	cd bf       	out	0x3d, r28	; 61
				}
				nextState = ST_SLEEP;
     51c:	f0 92 87 06 	sts	0x0687, r15	; 0x800687 <nextState>
				break;
     520:	2a cf       	rjmp	.-428    	; 0x376 <FSM_run+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     522:	8f e9       	ldi	r24, 0x9F	; 159
     524:	9f e0       	ldi	r25, 0x0F	; 15
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     52c:	00 00       	nop
			case ST_SLEEP:
				#ifdef DEBUG_M
				//puts("Going to sleep");
				#endif
				_delay_ms(2); // Delay to allow a print to be written over serial before sleep
				enter_powerSave();
     52e:	0e 94 1d 08 	call	0x103a	; 0x103a <enter_powerSave>
				#ifndef TIMER2
				_delay_ms(1000);
				#endif
				if(board1.lora_joined_err) nextState = ST_NOT_JOINED;
     532:	8c 89       	ldd	r24, Y+20	; 0x14
     534:	88 23       	and	r24, r24
     536:	19 f0       	breq	.+6      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     538:	e0 92 87 06 	sts	0x0687, r14	; 0x800687 <nextState>
     53c:	1c cf       	rjmp	.-456    	; 0x376 <FSM_run+0x4c>
				else nextState = ST_ACTIVE;
     53e:	d0 92 87 06 	sts	0x0687, r13	; 0x800687 <nextState>
     542:	19 cf       	rjmp	.-462    	; 0x376 <FSM_run+0x4c>

00000544 <__vector_2>:
		}
	}
}

ISR (INT1_vect)          //External interrupt_zero ISR
{
     544:	1f 92       	push	r1
     546:	0f 92       	push	r0
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	0f 92       	push	r0
     54c:	11 24       	eor	r1, r1
     54e:	2f 93       	push	r18
     550:	3f 93       	push	r19
     552:	4f 93       	push	r20
     554:	5f 93       	push	r21
     556:	6f 93       	push	r22
     558:	7f 93       	push	r23
     55a:	8f 93       	push	r24
     55c:	9f 93       	push	r25
     55e:	af 93       	push	r26
     560:	bf 93       	push	r27
     562:	ef 93       	push	r30
     564:	ff 93       	push	r31
	lora_transmit("020255b17f355403210876");
     566:	8a e5       	ldi	r24, 0x5A	; 90
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	0e 94 39 07 	call	0xe72	; 0xe72 <lora_transmit>
}
     56e:	ff 91       	pop	r31
     570:	ef 91       	pop	r30
     572:	bf 91       	pop	r27
     574:	af 91       	pop	r26
     576:	9f 91       	pop	r25
     578:	8f 91       	pop	r24
     57a:	7f 91       	pop	r23
     57c:	6f 91       	pop	r22
     57e:	5f 91       	pop	r21
     580:	4f 91       	pop	r20
     582:	3f 91       	pop	r19
     584:	2f 91       	pop	r18
     586:	0f 90       	pop	r0
     588:	0f be       	out	0x3f, r0	; 63
     58a:	0f 90       	pop	r0
     58c:	1f 90       	pop	r1
     58e:	18 95       	reti

00000590 <__vector_47>:

ISR (USART2_RX_vect){
     590:	1f 92       	push	r1
     592:	0f 92       	push	r0
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	0f 92       	push	r0
     598:	11 24       	eor	r1, r1
     59a:	2f 93       	push	r18
     59c:	3f 93       	push	r19
     59e:	4f 93       	push	r20
     5a0:	5f 93       	push	r21
     5a2:	6f 93       	push	r22
     5a4:	7f 93       	push	r23
     5a6:	8f 93       	push	r24
     5a8:	9f 93       	push	r25
     5aa:	af 93       	push	r26
     5ac:	bf 93       	push	r27
     5ae:	ef 93       	push	r30
     5b0:	ff 93       	push	r31
	USART_receiveString2();
     5b2:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <USART_receiveString2>
}
     5b6:	ff 91       	pop	r31
     5b8:	ef 91       	pop	r30
     5ba:	bf 91       	pop	r27
     5bc:	af 91       	pop	r26
     5be:	9f 91       	pop	r25
     5c0:	8f 91       	pop	r24
     5c2:	7f 91       	pop	r23
     5c4:	6f 91       	pop	r22
     5c6:	5f 91       	pop	r21
     5c8:	4f 91       	pop	r20
     5ca:	3f 91       	pop	r19
     5cc:	2f 91       	pop	r18
     5ce:	0f 90       	pop	r0
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	0f 90       	pop	r0
     5d4:	1f 90       	pop	r1
     5d6:	18 95       	reti

000005d8 <__vector_11>:

ISR(TIMER2_OVF_vect){
     5d8:	1f 92       	push	r1
     5da:	0f 92       	push	r0
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	0f 92       	push	r0
     5e0:	11 24       	eor	r1, r1
     5e2:	8f 93       	push	r24
     5e4:	9f 93       	push	r25
     5e6:	af 93       	push	r26
     5e8:	bf 93       	push	r27
	current_time ++;
     5ea:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <current_time>
     5ee:	90 91 a7 06 	lds	r25, 0x06A7	; 0x8006a7 <current_time+0x1>
     5f2:	a0 91 a8 06 	lds	r26, 0x06A8	; 0x8006a8 <current_time+0x2>
     5f6:	b0 91 a9 06 	lds	r27, 0x06A9	; 0x8006a9 <current_time+0x3>
     5fa:	01 96       	adiw	r24, 0x01	; 1
     5fc:	a1 1d       	adc	r26, r1
     5fe:	b1 1d       	adc	r27, r1
     600:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <current_time>
     604:	90 93 a7 06 	sts	0x06A7, r25	; 0x8006a7 <current_time+0x1>
     608:	a0 93 a8 06 	sts	0x06A8, r26	; 0x8006a8 <current_time+0x2>
     60c:	b0 93 a9 06 	sts	0x06A9, r27	; 0x8006a9 <current_time+0x3>
	
	//wake_up_flag = 1;
     610:	bf 91       	pop	r27
     612:	af 91       	pop	r26
     614:	9f 91       	pop	r25
     616:	8f 91       	pop	r24
     618:	0f 90       	pop	r0
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	0f 90       	pop	r0
     61e:	1f 90       	pop	r1
     620:	18 95       	reti

00000622 <i2c_init>:
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address){
    return i2c_start( address );

}
     622:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     626:	80 e2       	ldi	r24, 0x20	; 32
     628:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     62c:	08 95       	ret

0000062e <i2c_sync>:
     62e:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     632:	88 23       	and	r24, r24
     634:	bc f0       	brlt	.+46     	; 0x664 <i2c_sync+0x36>
     636:	24 e6       	ldi	r18, 0x64	; 100
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	ec ed       	ldi	r30, 0xDC	; 220
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	8a 95       	dec	r24
     642:	f1 f7       	brne	.-4      	; 0x640 <i2c_sync+0x12>
     644:	00 c0       	rjmp	.+0      	; 0x646 <i2c_sync+0x18>
     646:	21 50       	subi	r18, 0x01	; 1
     648:	31 09       	sbc	r19, r1
     64a:	80 81       	ld	r24, Z
     64c:	88 23       	and	r24, r24
     64e:	24 f0       	brlt	.+8      	; 0x658 <i2c_sync+0x2a>
     650:	21 15       	cp	r18, r1
     652:	31 05       	cpc	r19, r1
     654:	a1 f7       	brne	.-24     	; 0x63e <i2c_sync+0x10>
     656:	03 c0       	rjmp	.+6      	; 0x65e <i2c_sync+0x30>
     658:	21 15       	cp	r18, r1
     65a:	31 05       	cpc	r19, r1
     65c:	29 f4       	brne	.+10     	; 0x668 <i2c_sync+0x3a>
     65e:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     662:	02 c0       	rjmp	.+4      	; 0x668 <i2c_sync+0x3a>
     664:	24 e6       	ldi	r18, 0x64	; 100
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	23 2b       	or	r18, r19
     66c:	09 f4       	brne	.+2      	; 0x670 <i2c_sync+0x42>
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	08 95       	ret

00000672 <i2c_waitStop>:
     672:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     676:	84 ff       	sbrs	r24, 4
     678:	17 c0       	rjmp	.+46     	; 0x6a8 <i2c_waitStop+0x36>
     67a:	24 e6       	ldi	r18, 0x64	; 100
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	ec ed       	ldi	r30, 0xDC	; 220
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	82 e0       	ldi	r24, 0x02	; 2
     684:	8a 95       	dec	r24
     686:	f1 f7       	brne	.-4      	; 0x684 <i2c_waitStop+0x12>
     688:	00 c0       	rjmp	.+0      	; 0x68a <i2c_waitStop+0x18>
     68a:	21 50       	subi	r18, 0x01	; 1
     68c:	31 09       	sbc	r19, r1
     68e:	80 81       	ld	r24, Z
     690:	84 ff       	sbrs	r24, 4
     692:	04 c0       	rjmp	.+8      	; 0x69c <i2c_waitStop+0x2a>
     694:	21 15       	cp	r18, r1
     696:	31 05       	cpc	r19, r1
     698:	a1 f7       	brne	.-24     	; 0x682 <i2c_waitStop+0x10>
     69a:	03 c0       	rjmp	.+6      	; 0x6a2 <i2c_waitStop+0x30>
     69c:	21 15       	cp	r18, r1
     69e:	31 05       	cpc	r19, r1
     6a0:	29 f4       	brne	.+10     	; 0x6ac <i2c_waitStop+0x3a>
     6a2:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     6a6:	02 c0       	rjmp	.+4      	; 0x6ac <i2c_waitStop+0x3a>
     6a8:	24 e6       	ldi	r18, 0x64	; 100
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	23 2b       	or	r18, r19
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <i2c_waitStop+0x42>
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	08 95       	ret

000006b6 <i2c_start>:
     6b6:	cf 93       	push	r28
     6b8:	c8 2f       	mov	r28, r24
     6ba:	84 ea       	ldi	r24, 0xA4	; 164
     6bc:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     6c0:	0e 94 17 03 	call	0x62e	; 0x62e <i2c_sync>
     6c4:	88 23       	and	r24, r24
     6c6:	e9 f0       	breq	.+58     	; 0x702 <i2c_start+0x4c>
     6c8:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     6cc:	88 7f       	andi	r24, 0xF8	; 248
     6ce:	88 30       	cpi	r24, 0x08	; 8
     6d0:	11 f0       	breq	.+4      	; 0x6d6 <i2c_start+0x20>
     6d2:	80 31       	cpi	r24, 0x10	; 16
     6d4:	99 f4       	brne	.+38     	; 0x6fc <i2c_start+0x46>
     6d6:	c0 93 db 00 	sts	0x00DB, r28	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
     6da:	84 e8       	ldi	r24, 0x84	; 132
     6dc:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     6e0:	0e 94 17 03 	call	0x62e	; 0x62e <i2c_sync>
     6e4:	88 23       	and	r24, r24
     6e6:	69 f0       	breq	.+26     	; 0x702 <i2c_start+0x4c>
     6e8:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     6ec:	98 7f       	andi	r25, 0xF8	; 248
     6ee:	98 31       	cpi	r25, 0x18	; 24
     6f0:	39 f0       	breq	.+14     	; 0x700 <i2c_start+0x4a>
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	90 34       	cpi	r25, 0x40	; 64
     6f6:	29 f4       	brne	.+10     	; 0x702 <i2c_start+0x4c>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	03 c0       	rjmp	.+6      	; 0x702 <i2c_start+0x4c>
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <i2c_start+0x4c>
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <i2c_stop>:
/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void){
    /* send stop condition */
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     706:	84 e9       	ldi	r24, 0x94	; 148
     708:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	
	// wait until stop condition is executed and bus released
	i2c_waitStop(); 
     70c:	0e 94 39 03 	call	0x672	; 0x672 <i2c_waitStop>
     710:	08 95       	ret

00000712 <i2c_write>:
*************************************************************************/
unsigned char i2c_write( unsigned char data ){	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR1 = data;
     712:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	TWCR1 = (1<<TWINT) | (1<<TWEN);
     716:	84 e8       	ldi	r24, 0x84	; 132
     718:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

	// wait until transmission completed
	i2c_sync();
     71c:	0e 94 17 03 	call	0x62e	; 0x62e <i2c_sync>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     720:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     724:	98 7f       	andi	r25, 0xF8	; 248
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	98 32       	cpi	r25, 0x28	; 40
     72a:	09 f4       	brne	.+2      	; 0x72e <i2c_write+0x1c>
     72c:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}
     72e:	08 95       	ret

00000730 <i2c_readAck>:
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void){
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     730:	84 ec       	ldi	r24, 0xC4	; 196
     732:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	i2c_sync();    
     736:	0e 94 17 03 	call	0x62e	; 0x62e <i2c_sync>
	return TWDR1;
     73a:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
}
     73e:	08 95       	ret

00000740 <i2c_readNak>:
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void){
	TWCR1 = (1<<TWINT) | (1<<TWEN);
     740:	84 e8       	ldi	r24, 0x84	; 132
     742:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	i2c_sync(); 
     746:	0e 94 17 03 	call	0x62e	; 0x62e <i2c_sync>
	return TWDR1;
     74a:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
}
     74e:	08 95       	ret

00000750 <i2c_read2ByteRegister>:
  
  Input:    device address, register address, buffer for storage
  Return:   0 write successful 
            1 write failed
*************************************************************************/
uint8_t i2c_read2ByteRegister(uint8_t adr, uint8_t regAddr, uint8_t *data){
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	d8 2f       	mov	r29, r24
     75c:	f6 2e       	mov	r15, r22
     75e:	8a 01       	movw	r16, r20
	uint8_t error = 0;
	error += i2c_start(adr | I2C_WRITE);
     760:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <i2c_start>
     764:	c8 2f       	mov	r28, r24
	error += i2c_write(regAddr);
     766:	8f 2d       	mov	r24, r15
     768:	0e 94 89 03 	call	0x712	; 0x712 <i2c_write>
     76c:	c8 0f       	add	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     76e:	8a e1       	ldi	r24, 0x1A	; 26
     770:	8a 95       	dec	r24
     772:	f1 f7       	brne	.-4      	; 0x770 <i2c_read2ByteRegister+0x20>
     774:	00 c0       	rjmp	.+0      	; 0x776 <i2c_read2ByteRegister+0x26>
	_delay_us(10);
	//read data
	error += i2c_start(adr | I2C_READ);
     776:	8d 2f       	mov	r24, r29
     778:	81 60       	ori	r24, 0x01	; 1
     77a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <i2c_start>
     77e:	c8 0f       	add	r28, r24
	data[1] = i2c_readAck();
     780:	0e 94 98 03 	call	0x730	; 0x730 <i2c_readAck>
     784:	f8 01       	movw	r30, r16
     786:	81 83       	std	Z+1, r24	; 0x01
	data[0] = i2c_readNak();
     788:	0e 94 a0 03 	call	0x740	; 0x740 <i2c_readNak>
     78c:	f8 01       	movw	r30, r16
     78e:	80 83       	st	Z, r24
	i2c_stop();
     790:	0e 94 83 03 	call	0x706	; 0x706 <i2c_stop>
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	c1 11       	cpse	r28, r1
     798:	01 c0       	rjmp	.+2      	; 0x79c <i2c_read2ByteRegister+0x4c>
     79a:	80 e0       	ldi	r24, 0x00	; 0
	
	if (error) return 1;
	else return 0;
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	ff 90       	pop	r15
     7a6:	08 95       	ret

000007a8 <INA219_readBusVoltageReg>:

uint16_t INA219_readShuntVoltageReg(){ // Not operational
	uint8_t value[2];
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_SHUNTVOLTAGE, value)) return 1;
	return ((value[1] << 8) | value[0]);
}
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <INA219_readBusVoltageReg+0xa>
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
     7b6:	ae 01       	movw	r20, r28
     7b8:	4f 5f       	subi	r20, 0xFF	; 255
     7ba:	5f 4f       	sbci	r21, 0xFF	; 255
     7bc:	62 e0       	ldi	r22, 0x02	; 2
     7be:	80 e8       	ldi	r24, 0x80	; 128
     7c0:	0e 94 a8 03 	call	0x750	; 0x750 <i2c_read2ByteRegister>
     7c4:	81 11       	cpse	r24, r1
     7c6:	1d c0       	rjmp	.+58     	; 0x802 <INA219_readBusVoltageReg+0x5a>
     7c8:	0a 81       	ldd	r16, Y+2	; 0x02
     7ca:	10 e0       	ldi	r17, 0x00	; 0
     7cc:	10 2f       	mov	r17, r16
     7ce:	00 27       	eor	r16, r16
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	08 2b       	or	r16, r24
     7d4:	15 95       	asr	r17
     7d6:	07 95       	ror	r16
     7d8:	15 95       	asr	r17
     7da:	07 95       	ror	r16
     7dc:	15 95       	asr	r17
     7de:	07 95       	ror	r16
     7e0:	1f 93       	push	r17
     7e2:	0f 93       	push	r16
     7e4:	80 e9       	ldi	r24, 0x90	; 144
     7e6:	92 e0       	ldi	r25, 0x02	; 2
     7e8:	9f 93       	push	r25
     7ea:	8f 93       	push	r24
     7ec:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	01 15       	cp	r16, r1
     7fa:	80 e1       	ldi	r24, 0x10	; 16
     7fc:	18 07       	cpc	r17, r24
     7fe:	30 f4       	brcc	.+12     	; 0x80c <INA219_readBusVoltageReg+0x64>
     800:	03 c0       	rjmp	.+6      	; 0x808 <INA219_readBusVoltageReg+0x60>
     802:	00 e0       	ldi	r16, 0x00	; 0
     804:	10 e0       	ldi	r17, 0x00	; 0
     806:	02 c0       	rjmp	.+4      	; 0x80c <INA219_readBusVoltageReg+0x64>
     808:	00 e0       	ldi	r16, 0x00	; 0
     80a:	10 e0       	ldi	r17, 0x00	; 0
     80c:	c8 01       	movw	r24, r16
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	08 95       	ret

0000081c <INA219_readCurrentReg>:
uint16_t INA219_readCurrentReg(){
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	00 d0       	rcall	.+0      	; 0x826 <INA219_readCurrentReg+0xa>
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
	uint8_t value[2];
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_CURRENT, value)) return 0;
     82a:	ae 01       	movw	r20, r28
     82c:	4f 5f       	subi	r20, 0xFF	; 255
     82e:	5f 4f       	sbci	r21, 0xFF	; 255
     830:	64 e0       	ldi	r22, 0x04	; 4
     832:	80 e8       	ldi	r24, 0x80	; 128
     834:	0e 94 a8 03 	call	0x750	; 0x750 <i2c_read2ByteRegister>
     838:	81 11       	cpse	r24, r1
     83a:	19 c0       	rjmp	.+50     	; 0x86e <INA219_readCurrentReg+0x52>
	uint16_t total = (value[1] << 8) | value[0];
     83c:	0a 81       	ldd	r16, Y+2	; 0x02
     83e:	10 e0       	ldi	r17, 0x00	; 0
     840:	10 2f       	mov	r17, r16
     842:	00 27       	eor	r16, r16
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	08 2b       	or	r16, r24
	printf("real curr: %u\n", total);
     848:	1f 93       	push	r17
     84a:	0f 93       	push	r16
     84c:	8f e9       	ldi	r24, 0x9F	; 159
     84e:	92 e0       	ldi	r25, 0x02	; 2
     850:	9f 93       	push	r25
     852:	8f 93       	push	r24
     854:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
	if(total>0x8000) return 0x00;  // Remove possibility of corruption with a bug where total is above 0xFFAE with no connected source.
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	01 30       	cpi	r16, 0x01	; 1
     862:	80 e8       	ldi	r24, 0x80	; 128
     864:	18 07       	cpc	r17, r24
     866:	30 f4       	brcc	.+12     	; 0x874 <INA219_readCurrentReg+0x58>
	return total;
     868:	80 2f       	mov	r24, r16
     86a:	91 2f       	mov	r25, r17
     86c:	05 c0       	rjmp	.+10     	; 0x878 <INA219_readCurrentReg+0x5c>
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_SHUNTVOLTAGE, value)) return 1;
	return ((value[1] << 8) | value[0]);
}
uint16_t INA219_readCurrentReg(){
	uint8_t value[2];
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_CURRENT, value)) return 0;
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	02 c0       	rjmp	.+4      	; 0x878 <INA219_readCurrentReg+0x5c>
	uint16_t total = (value[1] << 8) | value[0];
	printf("real curr: %u\n", total);
	if(total>0x8000) return 0x00;  // Remove possibility of corruption with a bug where total is above 0xFFAE with no connected source.
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
	return total;
}
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	08 95       	ret

00000886 <lora_send_command>:
		//printf("Join result: ");
		//err = lora_receive_response();
	//}
	//else printf("Failed sendint join cmd: %02x\n", err);
	////lora_transmit("deadbeef");
}
     886:	0e 94 ca 07 	call	0xf94	; 0xf94 <USART_putstring0>
     88a:	8d e0       	ldi	r24, 0x0D	; 13
     88c:	0e 94 c2 07 	call	0xf84	; 0xf84 <USART_transmit0>
     890:	8a e0       	ldi	r24, 0x0A	; 10
     892:	0e 94 c2 07 	call	0xf84	; 0xf84 <USART_transmit0>
     896:	08 95       	ret

00000898 <lora_assert_response>:
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	ec 01       	movw	r28, r24
     89e:	42 e0       	ldi	r20, 0x02	; 2
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	6c ed       	ldi	r22, 0xDC	; 220
     8a4:	72 e0       	ldi	r23, 0x02	; 2
     8a6:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strncmp>
     8aa:	89 2b       	or	r24, r25
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <lora_assert_response+0x18>
     8ae:	8f c0       	rjmp	.+286    	; 0x9ce <__stack+0xcf>
     8b0:	48 e0       	ldi	r20, 0x08	; 8
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	6c ec       	ldi	r22, 0xCC	; 204
     8b6:	72 e0       	ldi	r23, 0x02	; 2
     8b8:	ce 01       	movw	r24, r28
     8ba:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strncmp>
     8be:	89 2b       	or	r24, r25
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <lora_assert_response+0x2c>
     8c2:	87 c0       	rjmp	.+270    	; 0x9d2 <__stack+0xd3>
     8c4:	49 e0       	ldi	r20, 0x09	; 9
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	65 ed       	ldi	r22, 0xD5	; 213
     8ca:	72 e0       	ldi	r23, 0x02	; 2
     8cc:	ce 01       	movw	r24, r28
     8ce:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strncmp>
     8d2:	89 2b       	or	r24, r25
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <lora_assert_response+0x40>
     8d6:	7f c0       	rjmp	.+254    	; 0x9d6 <__stack+0xd7>
     8d8:	47 e0       	ldi	r20, 0x07	; 7
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	6f ed       	ldi	r22, 0xDF	; 223
     8de:	72 e0       	ldi	r23, 0x02	; 2
     8e0:	ce 01       	movw	r24, r28
     8e2:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strncmp>
     8e6:	89 2b       	or	r24, r25
     8e8:	39 f4       	brne	.+14     	; 0x8f8 <lora_assert_response+0x60>
     8ea:	be 01       	movw	r22, r28
     8ec:	8a ea       	ldi	r24, 0xAA	; 170
     8ee:	96 e0       	ldi	r25, 0x06	; 6
     8f0:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <strcpy>
     8f4:	81 e1       	ldi	r24, 0x11	; 17
     8f6:	86 c0       	rjmp	.+268    	; 0xa04 <__stack+0x105>
     8f8:	46 e0       	ldi	r20, 0x06	; 6
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	67 ee       	ldi	r22, 0xE7	; 231
     8fe:	72 e0       	ldi	r23, 0x02	; 2
     900:	ce 01       	movw	r24, r28
     902:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strncmp>
     906:	89 2b       	or	r24, r25
     908:	09 f4       	brne	.+2      	; 0x90c <__stack+0xd>
     90a:	67 c0       	rjmp	.+206    	; 0x9da <__stack+0xdb>
     90c:	4d e0       	ldi	r20, 0x0D	; 13
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	6e ee       	ldi	r22, 0xEE	; 238
     912:	72 e0       	ldi	r23, 0x02	; 2
     914:	ce 01       	movw	r24, r28
     916:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strncmp>
     91a:	89 2b       	or	r24, r25
     91c:	09 f4       	brne	.+2      	; 0x920 <__stack+0x21>
     91e:	5f c0       	rjmp	.+190    	; 0x9de <__stack+0xdf>
     920:	4c e0       	ldi	r20, 0x0C	; 12
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	6c ef       	ldi	r22, 0xFC	; 252
     926:	72 e0       	ldi	r23, 0x02	; 2
     928:	ce 01       	movw	r24, r28
     92a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strncmp>
     92e:	89 2b       	or	r24, r25
     930:	09 f4       	brne	.+2      	; 0x934 <__stack+0x35>
     932:	57 c0       	rjmp	.+174    	; 0x9e2 <__stack+0xe3>
     934:	46 e0       	ldi	r20, 0x06	; 6
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	69 e0       	ldi	r22, 0x09	; 9
     93a:	73 e0       	ldi	r23, 0x03	; 3
     93c:	ce 01       	movw	r24, r28
     93e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strncmp>
     942:	89 2b       	or	r24, r25
     944:	09 f4       	brne	.+2      	; 0x948 <__stack+0x49>
     946:	4f c0       	rjmp	.+158    	; 0x9e6 <__stack+0xe7>
     948:	44 e0       	ldi	r20, 0x04	; 4
     94a:	50 e0       	ldi	r21, 0x00	; 0
     94c:	60 e1       	ldi	r22, 0x10	; 16
     94e:	73 e0       	ldi	r23, 0x03	; 3
     950:	ce 01       	movw	r24, r28
     952:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strncmp>
     956:	89 2b       	or	r24, r25
     958:	09 f4       	brne	.+2      	; 0x95c <__stack+0x5d>
     95a:	47 c0       	rjmp	.+142    	; 0x9ea <__stack+0xeb>
     95c:	4a e0       	ldi	r20, 0x0A	; 10
     95e:	50 e0       	ldi	r21, 0x00	; 0
     960:	65 e1       	ldi	r22, 0x15	; 21
     962:	73 e0       	ldi	r23, 0x03	; 3
     964:	ce 01       	movw	r24, r28
     966:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strncmp>
     96a:	89 2b       	or	r24, r25
     96c:	09 f4       	brne	.+2      	; 0x970 <__stack+0x71>
     96e:	3f c0       	rjmp	.+126    	; 0x9ee <__stack+0xef>
     970:	4d e0       	ldi	r20, 0x0D	; 13
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	60 e2       	ldi	r22, 0x20	; 32
     976:	73 e0       	ldi	r23, 0x03	; 3
     978:	ce 01       	movw	r24, r28
     97a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strncmp>
     97e:	89 2b       	or	r24, r25
     980:	c1 f1       	breq	.+112    	; 0x9f2 <__stack+0xf3>
     982:	4a e0       	ldi	r20, 0x0A	; 10
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	6e e2       	ldi	r22, 0x2E	; 46
     988:	73 e0       	ldi	r23, 0x03	; 3
     98a:	ce 01       	movw	r24, r28
     98c:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strncmp>
     990:	89 2b       	or	r24, r25
     992:	89 f1       	breq	.+98     	; 0x9f6 <__stack+0xf7>
     994:	4f e1       	ldi	r20, 0x1F	; 31
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	69 e3       	ldi	r22, 0x39	; 57
     99a:	73 e0       	ldi	r23, 0x03	; 3
     99c:	ce 01       	movw	r24, r28
     99e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strncmp>
     9a2:	89 2b       	or	r24, r25
     9a4:	51 f1       	breq	.+84     	; 0x9fa <__stack+0xfb>
     9a6:	40 e1       	ldi	r20, 0x10	; 16
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	69 e5       	ldi	r22, 0x59	; 89
     9ac:	73 e0       	ldi	r23, 0x03	; 3
     9ae:	ce 01       	movw	r24, r28
     9b0:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strncmp>
     9b4:	89 2b       	or	r24, r25
     9b6:	19 f1       	breq	.+70     	; 0x9fe <__stack+0xff>
     9b8:	47 e0       	ldi	r20, 0x07	; 7
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	6a e6       	ldi	r22, 0x6A	; 106
     9be:	73 e0       	ldi	r23, 0x03	; 3
     9c0:	ce 01       	movw	r24, r28
     9c2:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strncmp>
     9c6:	89 2b       	or	r24, r25
     9c8:	e1 f0       	breq	.+56     	; 0xa02 <__stack+0x103>
     9ca:	8a ea       	ldi	r24, 0xAA	; 170
     9cc:	1b c0       	rjmp	.+54     	; 0xa04 <__stack+0x105>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	19 c0       	rjmp	.+50     	; 0xa04 <__stack+0x105>
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	17 c0       	rjmp	.+46     	; 0xa04 <__stack+0x105>
     9d6:	80 e1       	ldi	r24, 0x10	; 16
     9d8:	15 c0       	rjmp	.+42     	; 0xa04 <__stack+0x105>
     9da:	8a e0       	ldi	r24, 0x0A	; 10
     9dc:	13 c0       	rjmp	.+38     	; 0xa04 <__stack+0x105>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	11 c0       	rjmp	.+34     	; 0xa04 <__stack+0x105>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	0f c0       	rjmp	.+30     	; 0xa04 <__stack+0x105>
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	0d c0       	rjmp	.+26     	; 0xa04 <__stack+0x105>
     9ea:	84 e0       	ldi	r24, 0x04	; 4
     9ec:	0b c0       	rjmp	.+22     	; 0xa04 <__stack+0x105>
     9ee:	85 e0       	ldi	r24, 0x05	; 5
     9f0:	09 c0       	rjmp	.+18     	; 0xa04 <__stack+0x105>
     9f2:	86 e0       	ldi	r24, 0x06	; 6
     9f4:	07 c0       	rjmp	.+14     	; 0xa04 <__stack+0x105>
     9f6:	87 e0       	ldi	r24, 0x07	; 7
     9f8:	05 c0       	rjmp	.+10     	; 0xa04 <__stack+0x105>
     9fa:	88 e0       	ldi	r24, 0x08	; 8
     9fc:	03 c0       	rjmp	.+6      	; 0xa04 <__stack+0x105>
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	01 c0       	rjmp	.+2      	; 0xa04 <__stack+0x105>
     a02:	8d e0       	ldi	r24, 0x0D	; 13
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <lora_receive_response>:
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	ca 5f       	subi	r28, 0xFA	; 250
     a1c:	d1 09       	sbc	r29, r1
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	de bf       	out	0x3e, r29	; 62
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	cd bf       	out	0x3d, r28	; 61
     a28:	ce 01       	movw	r24, r28
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	7c 01       	movw	r14, r24
     a2e:	00 e0       	ldi	r16, 0x00	; 0
     a30:	10 e0       	ldi	r17, 0x00	; 0
     a32:	0e 94 ba 07 	call	0xf74	; 0xf74 <USART_receive0>
     a36:	8d 30       	cpi	r24, 0x0D	; 13
     a38:	91 f4       	brne	.+36     	; 0xa5e <lora_receive_response+0x54>
     a3a:	0e 94 ba 07 	call	0xf74	; 0xf74 <USART_receive0>
     a3e:	e1 e0       	ldi	r30, 0x01	; 1
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	ec 0f       	add	r30, r28
     a44:	fd 1f       	adc	r31, r29
     a46:	e0 0f       	add	r30, r16
     a48:	f1 1f       	adc	r31, r17
     a4a:	10 82       	st	Z, r1
     a4c:	ce 01       	movw	r24, r28
     a4e:	01 96       	adiw	r24, 0x01	; 1
     a50:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <puts>
     a54:	ce 01       	movw	r24, r28
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	0e 94 4c 04 	call	0x898	; 0x898 <lora_assert_response>
     a5c:	06 c0       	rjmp	.+12     	; 0xa6a <lora_receive_response+0x60>
     a5e:	f7 01       	movw	r30, r14
     a60:	81 93       	st	Z+, r24
     a62:	7f 01       	movw	r14, r30
     a64:	0f 5f       	subi	r16, 0xFF	; 255
     a66:	1f 4f       	sbci	r17, 0xFF	; 255
     a68:	e4 cf       	rjmp	.-56     	; 0xa32 <lora_receive_response+0x28>
     a6a:	c6 50       	subi	r28, 0x06	; 6
     a6c:	df 4f       	sbci	r29, 0xFF	; 255
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	08 95       	ret

00000a86 <lora_join_OTAA>:
     a86:	85 e9       	ldi	r24, 0x95	; 149
     a88:	93 e0       	ldi	r25, 0x03	; 3
     a8a:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <puts>
     a8e:	85 ea       	ldi	r24, 0xA5	; 165
     a90:	93 e0       	ldi	r25, 0x03	; 3
     a92:	9f 93       	push	r25
     a94:	8f 93       	push	r24
     a96:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
     a9a:	88 eb       	ldi	r24, 0xB8	; 184
     a9c:	93 e0       	ldi	r25, 0x03	; 3
     a9e:	0e 94 43 04 	call	0x886	; 0x886 <lora_send_command>
     aa2:	0e 94 05 05 	call	0xa0a	; 0xa0a <lora_receive_response>
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	81 11       	cpse	r24, r1
     aac:	0d c0       	rjmp	.+26     	; 0xac8 <lora_join_OTAA+0x42>
     aae:	86 ec       	ldi	r24, 0xC6	; 198
     ab0:	93 e0       	ldi	r25, 0x03	; 3
     ab2:	9f 93       	push	r25
     ab4:	8f 93       	push	r24
     ab6:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
     aba:	0e 94 05 05 	call	0xa0a	; 0xa0a <lora_receive_response>
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	81 11       	cpse	r24, r1
     ac4:	03 c0       	rjmp	.+6      	; 0xacc <lora_join_OTAA+0x46>
     ac6:	08 95       	ret
     ac8:	82 e2       	ldi	r24, 0x22	; 34
     aca:	08 95       	ret
     acc:	83 e2       	ldi	r24, 0x23	; 35
     ace:	08 95       	ret

00000ad0 <lora_init>:



uint8_t lora_init(uint8_t *joined_err){
     ad0:	ef 92       	push	r14
     ad2:	ff 92       	push	r15
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	e2 97       	sbiw	r28, 0x32	; 50
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	de bf       	out	0x3e, r29	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	7c 01       	movw	r14, r24


char answer[250];
//const char *downlink;
void lora_auto_baud_detect(void){
	DDRD |= (1<<PORTD1);
     aee:	51 9a       	sbi	0x0a, 1	; 10
	PORTD &= ~(1<<PORTD1);
     af0:	59 98       	cbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     af2:	8f e1       	ldi	r24, 0x1F	; 31
     af4:	9e e4       	ldi	r25, 0x4E	; 78
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <lora_init+0x26>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <lora_init+0x2c>
     afc:	00 00       	nop
	_delay_ms(10);
	DDRD = 0x00;
     afe:	1a b8       	out	0x0a, r1	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b00:	9a e1       	ldi	r25, 0x1A	; 26
     b02:	9a 95       	dec	r25
     b04:	f1 f7       	brne	.-4      	; 0xb02 <lora_init+0x32>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <lora_init+0x38>
	_delay_us(10);
	USART_init();
     b08:	0e 94 9a 07 	call	0xf34	; 0xf34 <USART_init>
	USART_transmit0(0x55);
     b0c:	85 e5       	ldi	r24, 0x55	; 85
     b0e:	0e 94 c2 07 	call	0xf84	; 0xf84 <USART_transmit0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b12:	af ef       	ldi	r26, 0xFF	; 255
     b14:	b0 e7       	ldi	r27, 0x70	; 112
     b16:	e2 e0       	ldi	r30, 0x02	; 2
     b18:	a1 50       	subi	r26, 0x01	; 1
     b1a:	b0 40       	sbci	r27, 0x00	; 0
     b1c:	e0 40       	sbci	r30, 0x00	; 0
     b1e:	e1 f7       	brne	.-8      	; 0xb18 <lora_init+0x48>
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <lora_init+0x52>
     b22:	00 00       	nop
	lora_auto_baud_detect();
	uint8_t err = 0;
	
	
	#ifdef DEBUG_M
	puts("Lora init...");
     b24:	8a e0       	ldi	r24, 0x0A	; 10
     b26:	94 e0       	ldi	r25, 0x04	; 4
     b28:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <puts>
	
}

uint8_t lora_reset_to_band(){
	#ifdef DEBUG_M
		printf("Reset to band: ");
     b2c:	87 e1       	ldi	r24, 0x17	; 23
     b2e:	94 e0       	ldi	r25, 0x04	; 4
     b30:	9f 93       	push	r25
     b32:	8f 93       	push	r24
     b34:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
	#endif
	
	char cmd[20];
	#ifdef LORA_BAND
		sprintf(cmd, "mac reset %d", LORA_BAND);
     b38:	83 e0       	ldi	r24, 0x03	; 3
     b3a:	8f 93       	push	r24
     b3c:	84 e6       	ldi	r24, 0x64	; 100
     b3e:	8f 93       	push	r24
     b40:	87 e2       	ldi	r24, 0x27	; 39
     b42:	94 e0       	ldi	r25, 0x04	; 4
     b44:	9f 93       	push	r25
     b46:	8f 93       	push	r24
     b48:	8e 01       	movw	r16, r28
     b4a:	0f 5f       	subi	r16, 0xFF	; 255
     b4c:	1f 4f       	sbci	r17, 0xFF	; 255
     b4e:	1f 93       	push	r17
     b50:	0f 93       	push	r16
     b52:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <sprintf>
	#endif
	lora_send_command(cmd);
     b56:	c8 01       	movw	r24, r16
     b58:	0e 94 43 04 	call	0x886	; 0x886 <lora_send_command>
	return lora_receive_response();
     b5c:	0e 94 05 05 	call	0xa0a	; 0xa0a <lora_receive_response>
	#endif	
	


	err = lora_reset_to_band();
	if (err) return 1;
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	cd bf       	out	0x3d, r28	; 61
     b6a:	81 11       	cpse	r24, r1
     b6c:	0e c1       	rjmp	.+540    	; 0xd8a <lora_init+0x2ba>
	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_set_adr(){
	#ifdef DEBUG_M
		printf("Set ADR: ");
     b6e:	84 e3       	ldi	r24, 0x34	; 52
     b70:	94 e0       	ldi	r25, 0x04	; 4
     b72:	9f 93       	push	r25
     b74:	8f 93       	push	r24
     b76:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
	#endif
	
	#ifdef LORA_ADR
		lora_send_command("mac set adr on");
     b7a:	8e e3       	ldi	r24, 0x3E	; 62
     b7c:	94 e0       	ldi	r25, 0x04	; 4
     b7e:	0e 94 43 04 	call	0x886	; 0x886 <lora_send_command>
	#else
		lora_send_command("mac set adr off");
	#endif
	return lora_receive_response();
     b82:	0e 94 05 05 	call	0xa0a	; 0xa0a <lora_receive_response>
	err = lora_reset_to_band();
	if (err) return 1;
	
		
	err = lora_set_adr() ;
	if (err) return 2;
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	81 11       	cpse	r24, r1
     b8c:	00 c1       	rjmp	.+512    	; 0xd8e <lora_init+0x2be>
	#endif
	return lora_receive_response();
}
uint8_t lora_set_dr(){
	#ifdef DEBUG_M
		printf("Set DR: ");
     b8e:	8d e4       	ldi	r24, 0x4D	; 77
     b90:	94 e0       	ldi	r25, 0x04	; 4
     b92:	9f 93       	push	r25
     b94:	8f 93       	push	r24
     b96:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
	#endif
	
	char cmd[20];
	#ifdef LORA_DR
		sprintf(cmd, "mac set dr %d",LORA_DR);
     b9a:	1f 92       	push	r1
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	8f 93       	push	r24
     ba0:	86 e5       	ldi	r24, 0x56	; 86
     ba2:	94 e0       	ldi	r25, 0x04	; 4
     ba4:	9f 93       	push	r25
     ba6:	8f 93       	push	r24
     ba8:	1f 93       	push	r17
     baa:	0f 93       	push	r16
     bac:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <sprintf>
	#endif
	lora_send_command(cmd);
     bb0:	c8 01       	movw	r24, r16
     bb2:	0e 94 43 04 	call	0x886	; 0x886 <lora_send_command>
	return lora_receive_response();
     bb6:	0e 94 05 05 	call	0xa0a	; 0xa0a <lora_receive_response>
	err = lora_set_adr() ;
	if (err) return 2;
	
		
	err = lora_set_dr();
	if (err) return 3;
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
     bc4:	81 11       	cpse	r24, r1
     bc6:	e5 c0       	rjmp	.+458    	; 0xd92 <lora_init+0x2c2>
	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_set_pwridx(){
	#ifdef DEBUG_M
		printf("Set pwridx: ");
     bc8:	84 e6       	ldi	r24, 0x64	; 100
     bca:	94 e0       	ldi	r25, 0x04	; 4
     bcc:	9f 93       	push	r25
     bce:	8f 93       	push	r24
     bd0:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
	#endif
	
	char cmd[20];
	#ifdef LORA_PWRIDX
	sprintf(cmd, "mac set pwridx %d",LORA_PWRIDX);
     bd4:	1f 92       	push	r1
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	8f 93       	push	r24
     bda:	81 e7       	ldi	r24, 0x71	; 113
     bdc:	94 e0       	ldi	r25, 0x04	; 4
     bde:	9f 93       	push	r25
     be0:	8f 93       	push	r24
     be2:	1f 93       	push	r17
     be4:	0f 93       	push	r16
     be6:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <sprintf>
	#endif	
	lora_send_command(cmd);
     bea:	c8 01       	movw	r24, r16
     bec:	0e 94 43 04 	call	0x886	; 0x886 <lora_send_command>
	return lora_receive_response();
     bf0:	0e 94 05 05 	call	0xa0a	; 0xa0a <lora_receive_response>
	err = lora_set_dr();
	if (err) return 3;
	
	
	err = lora_set_pwridx();
	if (err) return 4;
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	f8 94       	cli
     bf8:	de bf       	out	0x3e, r29	; 62
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	cd bf       	out	0x3d, r28	; 61
     bfe:	81 11       	cpse	r24, r1
     c00:	ca c0       	rjmp	.+404    	; 0xd96 <lora_init+0x2c6>
}

uint8_t lora_set_dcycle(void){
	uint8_t err;
	#ifdef DEBUG_M
		printf("Setting dcycle for ch 0: ");
     c02:	83 e8       	ldi	r24, 0x83	; 131
     c04:	94 e0       	ldi	r25, 0x04	; 4
     c06:	9f 93       	push	r25
     c08:	8f 93       	push	r24
     c0a:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
	#endif
	lora_send_command("mac set ch dcycle 0 9");
     c0e:	8d e9       	ldi	r24, 0x9D	; 157
     c10:	94 e0       	ldi	r25, 0x04	; 4
     c12:	0e 94 43 04 	call	0x886	; 0x886 <lora_send_command>
	err = lora_receive_response();
     c16:	0e 94 05 05 	call	0xa0a	; 0xa0a <lora_receive_response>
	if (err) return 0xB1;
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	81 11       	cpse	r24, r1
     c20:	1e c0       	rjmp	.+60     	; 0xc5e <lora_init+0x18e>
	
	#ifdef DEBUG_M
	printf("Setting dcycle for ch 1: ");
     c22:	83 eb       	ldi	r24, 0xB3	; 179
     c24:	94 e0       	ldi	r25, 0x04	; 4
     c26:	9f 93       	push	r25
     c28:	8f 93       	push	r24
     c2a:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
	#endif
	lora_send_command("mac set ch dcycle 1 9");
     c2e:	8d ec       	ldi	r24, 0xCD	; 205
     c30:	94 e0       	ldi	r25, 0x04	; 4
     c32:	0e 94 43 04 	call	0x886	; 0x886 <lora_send_command>
	err = lora_receive_response();
     c36:	0e 94 05 05 	call	0xa0a	; 0xa0a <lora_receive_response>
	if (err) return 0xB2;
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	81 11       	cpse	r24, r1
     c40:	0e c0       	rjmp	.+28     	; 0xc5e <lora_init+0x18e>
	
	#ifdef DEBUG_M
	printf("Setting dcycle for ch 2: ");
     c42:	83 ee       	ldi	r24, 0xE3	; 227
     c44:	94 e0       	ldi	r25, 0x04	; 4
     c46:	9f 93       	push	r25
     c48:	8f 93       	push	r24
     c4a:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
	#endif
	lora_send_command("mac set ch dcycle 2 9");
     c4e:	8d ef       	ldi	r24, 0xFD	; 253
     c50:	94 e0       	ldi	r25, 0x04	; 4
     c52:	0e 94 43 04 	call	0x886	; 0x886 <lora_send_command>
	err = lora_receive_response();
     c56:	0e 94 05 05 	call	0xa0a	; 0xa0a <lora_receive_response>
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
 	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_set_OTAA_settings(uint8_t *joined_err){
	#ifdef DEBUG_M
		puts("Loading OTAA settings...");
     c5e:	83 e1       	ldi	r24, 0x13	; 19
     c60:	95 e0       	ldi	r25, 0x05	; 5
     c62:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <puts>
const char *appEui = "70B3D57ED002E533";
const char *appKey = "654E5718FCCBB86E95272A1BB24C996D";

uint8_t lora_set_deveui(){
	#ifdef DEBUG_M
		printf("Set deveui: ");
     c66:	8c e2       	ldi	r24, 0x2C	; 44
     c68:	95 e0       	ldi	r25, 0x05	; 5
     c6a:	9f 93       	push	r25
     c6c:	8f 93       	push	r24
     c6e:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
	#endif
	
	char cmd[50] = "mac set deveui ";
     c72:	80 e1       	ldi	r24, 0x10	; 16
     c74:	ec e2       	ldi	r30, 0x2C	; 44
     c76:	f1 e0       	ldi	r31, 0x01	; 1
     c78:	de 01       	movw	r26, r28
     c7a:	11 96       	adiw	r26, 0x01	; 1
     c7c:	01 90       	ld	r0, Z+
     c7e:	0d 92       	st	X+, r0
     c80:	8a 95       	dec	r24
     c82:	e1 f7       	brne	.-8      	; 0xc7c <lora_init+0x1ac>
     c84:	fe 01       	movw	r30, r28
     c86:	71 96       	adiw	r30, 0x11	; 17
     c88:	82 e2       	ldi	r24, 0x22	; 34
     c8a:	df 01       	movw	r26, r30
     c8c:	1d 92       	st	X+, r1
     c8e:	8a 95       	dec	r24
     c90:	e9 f7       	brne	.-6      	; 0xc8c <lora_init+0x1bc>
	strcat(cmd, devEui);
     c92:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <devEui>
     c96:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <devEui+0x1>
     c9a:	ce 01       	movw	r24, r28
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <strcat>
	lora_send_command(cmd);
     ca2:	ce 01       	movw	r24, r28
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	0e 94 43 04 	call	0x886	; 0x886 <lora_send_command>
	return lora_receive_response();
     caa:	0e 94 05 05 	call	0xa0a	; 0xa0a <lora_receive_response>
		puts("Loading OTAA settings...");
	#endif
	uint8_t err = 0;
	
	err = lora_set_deveui();
	if (err) return 7;
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	81 11       	cpse	r24, r1
     cb4:	72 c0       	rjmp	.+228    	; 0xd9a <lora_init+0x2ca>
	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_set_appeui(){
	#ifdef DEBUG_M
		printf("Set appeui: ");
     cb6:	89 e3       	ldi	r24, 0x39	; 57
     cb8:	95 e0       	ldi	r25, 0x05	; 5
     cba:	9f 93       	push	r25
     cbc:	8f 93       	push	r24
     cbe:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
	#endif	
	
	char cmd[50] = "mac set appeui ";
     cc2:	80 e1       	ldi	r24, 0x10	; 16
     cc4:	ee e5       	ldi	r30, 0x5E	; 94
     cc6:	f1 e0       	ldi	r31, 0x01	; 1
     cc8:	de 01       	movw	r26, r28
     cca:	11 96       	adiw	r26, 0x01	; 1
     ccc:	01 90       	ld	r0, Z+
     cce:	0d 92       	st	X+, r0
     cd0:	8a 95       	dec	r24
     cd2:	e1 f7       	brne	.-8      	; 0xccc <lora_init+0x1fc>
     cd4:	fe 01       	movw	r30, r28
     cd6:	71 96       	adiw	r30, 0x11	; 17
     cd8:	82 e2       	ldi	r24, 0x22	; 34
     cda:	df 01       	movw	r26, r30
     cdc:	1d 92       	st	X+, r1
     cde:	8a 95       	dec	r24
     ce0:	e9 f7       	brne	.-6      	; 0xcdc <lora_init+0x20c>
 	strcat(cmd, appEui);
     ce2:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <appEui>
     ce6:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <appEui+0x1>
     cea:	ce 01       	movw	r24, r28
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <strcat>
 	lora_send_command(cmd);
     cf2:	ce 01       	movw	r24, r28
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	0e 94 43 04 	call	0x886	; 0x886 <lora_send_command>
	return lora_receive_response();
     cfa:	0e 94 05 05 	call	0xa0a	; 0xa0a <lora_receive_response>
	
	err = lora_set_deveui();
	if (err) return 7;
		
	err = lora_set_appeui();
	if (err) return 8;
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	81 11       	cpse	r24, r1
     d04:	4a c0       	rjmp	.+148    	; 0xd9a <lora_init+0x2ca>
 	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_set_appkey(){
	#ifdef DEBUG_M
		printf("Set appkey: ");
     d06:	86 e4       	ldi	r24, 0x46	; 70
     d08:	95 e0       	ldi	r25, 0x05	; 5
     d0a:	9f 93       	push	r25
     d0c:	8f 93       	push	r24
     d0e:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
	#endif
	
 	char cmd[50] = "mac set appkey ";
     d12:	80 e1       	ldi	r24, 0x10	; 16
     d14:	e0 e9       	ldi	r30, 0x90	; 144
     d16:	f1 e0       	ldi	r31, 0x01	; 1
     d18:	de 01       	movw	r26, r28
     d1a:	11 96       	adiw	r26, 0x01	; 1
     d1c:	01 90       	ld	r0, Z+
     d1e:	0d 92       	st	X+, r0
     d20:	8a 95       	dec	r24
     d22:	e1 f7       	brne	.-8      	; 0xd1c <lora_init+0x24c>
     d24:	fe 01       	movw	r30, r28
     d26:	71 96       	adiw	r30, 0x11	; 17
     d28:	82 e2       	ldi	r24, 0x22	; 34
     d2a:	df 01       	movw	r26, r30
     d2c:	1d 92       	st	X+, r1
     d2e:	8a 95       	dec	r24
     d30:	e9 f7       	brne	.-6      	; 0xd2c <lora_init+0x25c>
 	strcat(cmd, appKey);
     d32:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     d36:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     d3a:	ce 01       	movw	r24, r28
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <strcat>
 	lora_send_command(cmd);
     d42:	ce 01       	movw	r24, r28
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	0e 94 43 04 	call	0x886	; 0x886 <lora_send_command>
	return lora_receive_response();
     d4a:	0e 94 05 05 	call	0xa0a	; 0xa0a <lora_receive_response>
		
	err = lora_set_appeui();
	if (err) return 8;
			
	err = lora_set_appkey();
	if (err) return 9;
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	81 11       	cpse	r24, r1
     d54:	22 c0       	rjmp	.+68     	; 0xd9a <lora_init+0x2ca>
	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_save_settings(){
	#ifdef DEBUG_M
		printf("Save settings: ");
     d56:	83 e5       	ldi	r24, 0x53	; 83
     d58:	95 e0       	ldi	r25, 0x05	; 5
     d5a:	9f 93       	push	r25
     d5c:	8f 93       	push	r24
     d5e:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
	#endif
	
	lora_send_command("mac save");
     d62:	83 e6       	ldi	r24, 0x63	; 99
     d64:	95 e0       	ldi	r25, 0x05	; 5
     d66:	0e 94 43 04 	call	0x886	; 0x886 <lora_send_command>
	return lora_receive_response();
     d6a:	0e 94 05 05 	call	0xa0a	; 0xa0a <lora_receive_response>
     d6e:	18 2f       	mov	r17, r24
			
	err = lora_set_appkey();
	if (err) return 9;

	err = lora_save_settings();
	if (err) return 10;
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	81 11       	cpse	r24, r1
     d76:	11 c0       	rjmp	.+34     	; 0xd9a <lora_init+0x2ca>
	
	*joined_err = lora_join_OTAA();
     d78:	0e 94 43 05 	call	0xa86	; 0xa86 <lora_join_OTAA>
     d7c:	f7 01       	movw	r30, r14
     d7e:	80 83       	st	Z, r24
		if (err) return 6;
	#endif
	
	
	#ifdef DEBUG_M
	puts("Init success");
     d80:	8c e6       	ldi	r24, 0x6C	; 108
     d82:	95 e0       	ldi	r25, 0x05	; 5
     d84:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <puts>
	#endif
	
	return 0;
     d88:	09 c0       	rjmp	.+18     	; 0xd9c <lora_init+0x2cc>
	#endif	
	


	err = lora_reset_to_band();
	if (err) return 1;
     d8a:	11 e0       	ldi	r17, 0x01	; 1
     d8c:	07 c0       	rjmp	.+14     	; 0xd9c <lora_init+0x2cc>
	
		
	err = lora_set_adr() ;
	if (err) return 2;
     d8e:	12 e0       	ldi	r17, 0x02	; 2
     d90:	05 c0       	rjmp	.+10     	; 0xd9c <lora_init+0x2cc>
	
		
	err = lora_set_dr();
	if (err) return 3;
     d92:	13 e0       	ldi	r17, 0x03	; 3
     d94:	03 c0       	rjmp	.+6      	; 0xd9c <lora_init+0x2cc>
	
	
	err = lora_set_pwridx();
	if (err) return 4;
     d96:	14 e0       	ldi	r17, 0x04	; 4
     d98:	01 c0       	rjmp	.+2      	; 0xd9c <lora_init+0x2cc>
	lora_set_dcycle();
// 	lora_send_command("mac set ch dcycle 0 9");
// 	lora_receive_response();
	#ifdef OTAA
		err = lora_set_OTAA_settings(joined_err);
		if (err) return 5;	
     d9a:	15 e0       	ldi	r17, 0x05	; 5
	puts("Init success");
	#endif
	
	return 0;

}
     d9c:	81 2f       	mov	r24, r17
     d9e:	e2 96       	adiw	r28, 0x32	; 50
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	08 95       	ret

00000db8 <lora_assert_downlink>:
}


void lora_assert_downlink(){
	uint32_t ts;
	puts("Asserting downlink");
     db8:	89 e7       	ldi	r24, 0x79	; 121
     dba:	95 e0       	ldi	r25, 0x05	; 5
     dbc:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <puts>
	size_t str_len = strlen(downlink);
     dc0:	ea ea       	ldi	r30, 0xAA	; 170
     dc2:	f6 e0       	ldi	r31, 0x06	; 6
     dc4:	01 90       	ld	r0, Z+
     dc6:	00 20       	and	r0, r0
     dc8:	e9 f7       	brne	.-6      	; 0xdc4 <lora_assert_downlink+0xc>
     dca:	31 97       	sbiw	r30, 0x01	; 1
     dcc:	bf 01       	movw	r22, r30
     dce:	6a 5a       	subi	r22, 0xAA	; 170
     dd0:	76 40       	sbci	r23, 0x06	; 6
	//printf("Downlink: %s, with len: %d\n", downlink, str_len);
	ascii_hex_decode(downlink, str_len, downlink_pairs, 9);
     dd2:	29 e0       	ldi	r18, 0x09	; 9
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	4e e0       	ldi	r20, 0x0E	; 14
     dd8:	57 e0       	ldi	r21, 0x07	; 7
     dda:	8a ea       	ldi	r24, 0xAA	; 170
     ddc:	96 e0       	ldi	r25, 0x06	; 6
     dde:	0e 94 3a 08 	call	0x1074	; 0x1074 <ascii_hex_decode>
	//puts("decode complete");
	if (downlink_pairs[0] == DEV_ID){
     de2:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <downlink_pairs>
     de6:	82 30       	cpi	r24, 0x02	; 2
     de8:	09 f0       	breq	.+2      	; 0xdec <lora_assert_downlink+0x34>
     dea:	42 c0       	rjmp	.+132    	; 0xe70 <lora_assert_downlink+0xb8>
		switch (downlink_pairs[1]){
     dec:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <downlink_pairs+0x1>
     df0:	80 3b       	cpi	r24, 0xB0	; 176
     df2:	99 f1       	breq	.+102    	; 0xe5a <lora_assert_downlink+0xa2>
     df4:	80 3c       	cpi	r24, 0xC0	; 192
     df6:	b1 f1       	breq	.+108    	; 0xe64 <lora_assert_downlink+0xac>
     df8:	8a 30       	cpi	r24, 0x0A	; 10
     dfa:	d1 f5       	brne	.+116    	; 0xe70 <lora_assert_downlink+0xb8>
			case 0x0A:
				ts = (uint32_t)downlink_pairs[0] | ((uint32_t)downlink_pairs[1] << 8) | ((uint32_t)downlink_pairs[2] << 16) | ((uint32_t)downlink_pairs[3] << 24);
     dfc:	ee e0       	ldi	r30, 0x0E	; 14
     dfe:	f7 e0       	ldi	r31, 0x07	; 7
     e00:	22 81       	ldd	r18, Z+2	; 0x02
     e02:	83 81       	ldd	r24, Z+3	; 0x03
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	a0 e0       	ldi	r26, 0x00	; 0
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	b8 2f       	mov	r27, r24
     e0c:	aa 27       	eor	r26, r26
     e0e:	99 27       	eor	r25, r25
     e10:	88 27       	eor	r24, r24
     e12:	a2 2b       	or	r26, r18
     e14:	82 60       	ori	r24, 0x02	; 2
     e16:	9a 60       	ori	r25, 0x0A	; 10
				current_time = ts;
     e18:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <current_time>
     e1c:	90 93 a7 06 	sts	0x06A7, r25	; 0x8006a7 <current_time+0x1>
     e20:	a0 93 a8 06 	sts	0x06A8, r26	; 0x8006a8 <current_time+0x2>
     e24:	b0 93 a9 06 	sts	0x06A9, r27	; 0x8006a9 <current_time+0x3>
				
				#ifdef DEBUG_M
				printf("Changed time to: %lu \n", current_time);
     e28:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <current_time>
     e2c:	90 91 a7 06 	lds	r25, 0x06A7	; 0x8006a7 <current_time+0x1>
     e30:	a0 91 a8 06 	lds	r26, 0x06A8	; 0x8006a8 <current_time+0x2>
     e34:	b0 91 a9 06 	lds	r27, 0x06A9	; 0x8006a9 <current_time+0x3>
     e38:	bf 93       	push	r27
     e3a:	af 93       	push	r26
     e3c:	9f 93       	push	r25
     e3e:	8f 93       	push	r24
     e40:	8c e8       	ldi	r24, 0x8C	; 140
     e42:	95 e0       	ldi	r25, 0x05	; 5
     e44:	9f 93       	push	r25
     e46:	8f 93       	push	r24
     e48:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
				#endif
				break;	
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	08 95       	ret
			case 0xB0:
				printf("changing data rate\n");
     e5a:	83 ea       	ldi	r24, 0xA3	; 163
     e5c:	95 e0       	ldi	r25, 0x05	; 5
     e5e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <puts>
				break;	
     e62:	08 95       	ret
			
			case 0xC0:
				cli();
     e64:	f8 94       	cli
				WDTCSR = 0x00;
     e66:	e0 e6       	ldi	r30, 0x60	; 96
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	10 82       	st	Z, r1
				WDTCSR = (1<<WDE);
     e6c:	88 e0       	ldi	r24, 0x08	; 8
     e6e:	80 83       	st	Z, r24
     e70:	08 95       	ret

00000e72 <lora_transmit>:
	#endif
	
	return 0;

}
uint8_t lora_transmit(const char *payload){
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	c4 56       	subi	r28, 0x64	; 100
     e7c:	d1 09       	sbc	r29, r1
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	bc 01       	movw	r22, r24
	uint8_t err;
	char buf[100] = "mac tx uncnf 3 ";
     e8a:	90 e1       	ldi	r25, 0x10	; 16
     e8c:	e2 ec       	ldi	r30, 0xC2	; 194
     e8e:	f1 e0       	ldi	r31, 0x01	; 1
     e90:	de 01       	movw	r26, r28
     e92:	11 96       	adiw	r26, 0x01	; 1
     e94:	01 90       	ld	r0, Z+
     e96:	0d 92       	st	X+, r0
     e98:	9a 95       	dec	r25
     e9a:	e1 f7       	brne	.-8      	; 0xe94 <lora_transmit+0x22>
     e9c:	fe 01       	movw	r30, r28
     e9e:	71 96       	adiw	r30, 0x11	; 17
     ea0:	84 e5       	ldi	r24, 0x54	; 84
     ea2:	df 01       	movw	r26, r30
     ea4:	1d 92       	st	X+, r1
     ea6:	8a 95       	dec	r24
     ea8:	e9 f7       	brne	.-6      	; 0xea4 <lora_transmit+0x32>
	strcat(buf, payload);
     eaa:	ce 01       	movw	r24, r28
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <strcat>
	
	#ifdef DEBUG_M
		printf("Mac tx cmd: ");
     eb2:	86 eb       	ldi	r24, 0xB6	; 182
     eb4:	95 e0       	ldi	r25, 0x05	; 5
     eb6:	9f 93       	push	r25
     eb8:	8f 93       	push	r24
     eba:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
	#endif
	lora_send_command(buf);
     ebe:	ce 01       	movw	r24, r28
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	0e 94 43 04 	call	0x886	; 0x886 <lora_send_command>
	err = lora_receive_response();
     ec6:	0e 94 05 05 	call	0xa0a	; 0xa0a <lora_receive_response>
	
	if (!err){
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	81 11       	cpse	r24, r1
     ed0:	10 c0       	rjmp	.+32     	; 0xef2 <lora_transmit+0x80>
		#ifdef DEBUG_M
			printf("Mac tx result: ");
     ed2:	83 ec       	ldi	r24, 0xC3	; 195
     ed4:	95 e0       	ldi	r25, 0x05	; 5
     ed6:	9f 93       	push	r25
     ed8:	8f 93       	push	r24
     eda:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
		#endif
		err = lora_receive_response();
     ede:	0e 94 05 05 	call	0xa0a	; 0xa0a <lora_receive_response>
		//puts(downlink);
		if(err == RESP_MAC_RX_INC){
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	81 31       	cpi	r24, 0x11	; 17
     ee8:	21 f4       	brne	.+8      	; 0xef2 <lora_transmit+0x80>
			lora_assert_downlink(downlink);
     eea:	8a ea       	ldi	r24, 0xAA	; 170
     eec:	96 e0       	ldi	r25, 0x06	; 6
     eee:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <lora_assert_downlink>
		}
	}
	return 0;
}
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	cc 59       	subi	r28, 0x9C	; 156
     ef6:	df 4f       	sbci	r29, 0xFF	; 255
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	08 95       	ret

00000f08 <USART_transmit2>:
	for(; *string; ++string){
		USART_transmit2(*string);
	}
	//USART_transmit2(0x0D);
	USART_transmit2(0x0A);
}
     f08:	e0 ed       	ldi	r30, 0xD0	; 208
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	90 81       	ld	r25, Z
     f0e:	95 ff       	sbrs	r25, 5
     f10:	fd cf       	rjmp	.-6      	; 0xf0c <USART_transmit2+0x4>
     f12:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
     f16:	08 95       	ret

00000f18 <USART_TRANSMIT_printf>:
     f18:	cf 93       	push	r28
     f1a:	c8 2f       	mov	r28, r24
     f1c:	8a 30       	cpi	r24, 0x0A	; 10
     f1e:	19 f4       	brne	.+6      	; 0xf26 <USART_TRANSMIT_printf+0xe>
     f20:	8d e0       	ldi	r24, 0x0D	; 13
     f22:	0e 94 84 07 	call	0xf08	; 0xf08 <USART_transmit2>
     f26:	8c 2f       	mov	r24, r28
     f28:	0e 94 84 07 	call	0xf08	; 0xf08 <USART_transmit2>
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	cf 91       	pop	r28
     f32:	08 95       	ret

00000f34 <USART_init>:
     f34:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     f38:	93 e3       	ldi	r25, 0x33	; 51
     f3a:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     f3e:	88 e1       	ldi	r24, 0x18	; 24
     f40:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f44:	e2 ec       	ldi	r30, 0xC2	; 194
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	86 60       	ori	r24, 0x06	; 6
     f4c:	80 83       	st	Z, r24
     f4e:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7e00d5>
     f52:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7e00d4>
     f56:	88 e9       	ldi	r24, 0x98	; 152
     f58:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
     f5c:	e2 ed       	ldi	r30, 0xD2	; 210
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	86 60       	ori	r24, 0x06	; 6
     f64:	80 83       	st	Z, r24
     f66:	86 e0       	ldi	r24, 0x06	; 6
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	90 93 77 07 	sts	0x0777, r25	; 0x800777 <__iob+0x3>
     f6e:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <__iob+0x2>
     f72:	08 95       	ret

00000f74 <USART_receive0>:
     f74:	e0 ec       	ldi	r30, 0xC0	; 192
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	88 23       	and	r24, r24
     f7c:	ec f7       	brge	.-6      	; 0xf78 <USART_receive0+0x4>
     f7e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     f82:	08 95       	ret

00000f84 <USART_transmit0>:
     f84:	e0 ec       	ldi	r30, 0xC0	; 192
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	90 81       	ld	r25, Z
     f8a:	95 ff       	sbrs	r25, 5
     f8c:	fd cf       	rjmp	.-6      	; 0xf88 <USART_transmit0+0x4>
     f8e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     f92:	08 95       	ret

00000f94 <USART_putstring0>:
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	ec 01       	movw	r28, r24
     f9a:	88 81       	ld	r24, Y
     f9c:	88 23       	and	r24, r24
     f9e:	31 f0       	breq	.+12     	; 0xfac <USART_putstring0+0x18>
     fa0:	21 96       	adiw	r28, 0x01	; 1
     fa2:	0e 94 c2 07 	call	0xf84	; 0xf84 <USART_transmit0>
     fa6:	89 91       	ld	r24, Y+
     fa8:	81 11       	cpse	r24, r1
     faa:	fb cf       	rjmp	.-10     	; 0xfa2 <USART_putstring0+0xe>
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	08 95       	ret

00000fb2 <USART_receive2>:
     fb2:	e0 ed       	ldi	r30, 0xD0	; 208
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	88 23       	and	r24, r24
     fba:	ec f7       	brge	.-6      	; 0xfb6 <USART_receive2+0x4>
     fbc:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
     fc0:	08 95       	ret

00000fc2 <USART_receiveString2>:

char * USART_receiveString2(void){
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	08 e8       	ldi	r16, 0x88	; 136
     fcc:	16 e0       	ldi	r17, 0x06	; 6
	//char rx_buf[250];
	unsigned char rec = 0;
	int i = 0;
     fce:	c0 e0       	ldi	r28, 0x00	; 0
     fd0:	d0 e0       	ldi	r29, 0x00	; 0
	while (1){
		rec = USART_receive2();
     fd2:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <USART_receive2>
		if (rec == 0x0A){
     fd6:	8a 30       	cpi	r24, 0x0A	; 10
     fd8:	29 f0       	breq	.+10     	; 0xfe4 <USART_receiveString2+0x22>
			rx_buf[i] = '\0';
			break;
		}
		rx_buf[i] = rec;
     fda:	f8 01       	movw	r30, r16
     fdc:	81 93       	st	Z+, r24
     fde:	8f 01       	movw	r16, r30
		i++;
     fe0:	21 96       	adiw	r28, 0x01	; 1
	}
     fe2:	f7 cf       	rjmp	.-18     	; 0xfd2 <USART_receiveString2+0x10>
	unsigned char rec = 0;
	int i = 0;
	while (1){
		rec = USART_receive2();
		if (rec == 0x0A){
			rx_buf[i] = '\0';
     fe4:	c8 57       	subi	r28, 0x78	; 120
     fe6:	d9 4f       	sbci	r29, 0xF9	; 249
     fe8:	18 82       	st	Y, r1
			break;
		}
		rx_buf[i] = rec;
		i++;
	}
	puts(rx_buf);
     fea:	88 e8       	ldi	r24, 0x88	; 136
     fec:	96 e0       	ldi	r25, 0x06	; 6
     fee:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <puts>
	return &rx_buf[0];
}
     ff2:	88 e8       	ldi	r24, 0x88	; 136
     ff4:	96 e0       	ldi	r25, 0x06	; 6
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	08 95       	ret

00001000 <timers_init>:
		OCR1A = 31250;
		TIMSK1 |= (1 << OCIE1A);
	#endif

	#ifdef TIMER2
		TIMSK2 = 0;
    1000:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		ASSR = 0b00100000;
    1004:	80 e2       	ldi	r24, 0x20	; 32
    1006:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
    100a:	2f ef       	ldi	r18, 0xFF	; 255
    100c:	89 e6       	ldi	r24, 0x69	; 105
    100e:	98 e1       	ldi	r25, 0x18	; 24
    1010:	21 50       	subi	r18, 0x01	; 1
    1012:	80 40       	sbci	r24, 0x00	; 0
    1014:	90 40       	sbci	r25, 0x00	; 0
    1016:	e1 f7       	brne	.-8      	; 0x1010 <timers_init+0x10>
    1018:	00 c0       	rjmp	.+0      	; 0x101a <timers_init+0x1a>
    101a:	00 00       	nop
		_delay_ms(1000);
		TCCR2A = 0b00000000;
    101c:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		TCCR2B = 0b00000101;
    1020:	85 e0       	ldi	r24, 0x05	; 5
    1022:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		//Synchronize registers
		while (ASSR & ( (1 << TCN2UB) | (1 << TCR2AUB) | (1 << TCR2BUB) )) ;
    1026:	e6 eb       	ldi	r30, 0xB6	; 182
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	83 71       	andi	r24, 0x13	; 19
    102e:	e9 f7       	brne	.-6      	; 0x102a <timers_init+0x2a>
		TIFR2 = 0; //Clear interrupt flags
    1030:	17 ba       	out	0x17, r1	; 23
		TIMSK2 = (1 << TOIE2); //Enable overflow interrupt
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1038:	08 95       	ret

0000103a <enter_powerSave>:
}


void enter_powerSave(){
	#ifdef USART2_START_COND_INTERRUPT
	UCSR2D |= (1<<SFDE) | (0<<RXSIE);			// Enable start condition detection with interrupt on RXCIE
    103a:	e3 ed       	ldi	r30, 0xD3	; 211
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	80 62       	ori	r24, 0x20	; 32
    1042:	80 83       	st	Z, r24
	#endif
	
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
    1044:	83 b7       	in	r24, 0x33	; 51
    1046:	81 7f       	andi	r24, 0xF1	; 241
    1048:	86 60       	ori	r24, 0x06	; 6
    104a:	83 bf       	out	0x33, r24	; 51
	sleep_mode();
    104c:	83 b7       	in	r24, 0x33	; 51
    104e:	81 60       	ori	r24, 0x01	; 1
    1050:	83 bf       	out	0x33, r24	; 51
    1052:	88 95       	sleep
    1054:	83 b7       	in	r24, 0x33	; 51
    1056:	8e 7f       	andi	r24, 0xFE	; 254
    1058:	83 bf       	out	0x33, r24	; 51
    105a:	2f e7       	ldi	r18, 0x7F	; 127
    105c:	85 eb       	ldi	r24, 0xB5	; 181
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	21 50       	subi	r18, 0x01	; 1
    1062:	80 40       	sbci	r24, 0x00	; 0
    1064:	90 40       	sbci	r25, 0x00	; 0
    1066:	e1 f7       	brne	.-8      	; 0x1060 <enter_powerSave+0x26>
    1068:	00 c0       	rjmp	.+0      	; 0x106a <enter_powerSave+0x30>
    106a:	00 00       	nop
	_delay_ms(70);
	
	#ifdef USART2_START_COND_INTERRUPT
	UCSR2D &= ~(1<<SFDE);						// Disable start condition detection while awake.
    106c:	80 81       	ld	r24, Z
    106e:	8f 7d       	andi	r24, 0xDF	; 223
    1070:	80 83       	st	Z, r24
    1072:	08 95       	ret

00001074 <ascii_hex_decode>:
		ln = in[i+1] > '9' ? in[i+1] - 'a' + 10 : in[i+1] - '0';
		out[t] = (hn << 4 ) | ln;
		printf(" %x ", out[t]);
	}
	return out;
}
    1074:	af 92       	push	r10
    1076:	bf 92       	push	r11
    1078:	cf 92       	push	r12
    107a:	df 92       	push	r13
    107c:	ef 92       	push	r14
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	2a 97       	sbiw	r28, 0x0a	; 10
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	8c 01       	movw	r16, r24
    109a:	7b 01       	movw	r14, r22
    109c:	72 2f       	mov	r23, r18
    109e:	33 27       	eor	r19, r19
    10a0:	2e 15       	cp	r18, r14
    10a2:	3f 05       	cpc	r19, r15
    10a4:	08 f0       	brcs	.+2      	; 0x10a8 <ascii_hex_decode+0x34>
    10a6:	47 c0       	rjmp	.+142    	; 0x1136 <ascii_hex_decode+0xc2>
    10a8:	a0 e0       	ldi	r26, 0x00	; 0
    10aa:	cc 24       	eor	r12, r12
    10ac:	c3 94       	inc	r12
    10ae:	d1 2c       	mov	r13, r1
    10b0:	cc 0e       	add	r12, r28
    10b2:	dd 1e       	adc	r13, r29
    10b4:	ca 0e       	add	r12, r26
    10b6:	d1 1c       	adc	r13, r1
    10b8:	f8 01       	movw	r30, r16
    10ba:	e2 0f       	add	r30, r18
    10bc:	f3 1f       	adc	r31, r19
    10be:	80 81       	ld	r24, Z
    10c0:	91 81       	ldd	r25, Z+1	; 0x01
    10c2:	90 53       	subi	r25, 0x30	; 48
    10c4:	20 e1       	ldi	r18, 0x10	; 16
    10c6:	82 9f       	mul	r24, r18
    10c8:	90 0d       	add	r25, r0
    10ca:	11 24       	eor	r1, r1
    10cc:	f6 01       	movw	r30, r12
    10ce:	90 83       	st	Z, r25
    10d0:	7e 5f       	subi	r23, 0xFE	; 254
    10d2:	af 5f       	subi	r26, 0xFF	; 255
    10d4:	27 2f       	mov	r18, r23
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	2e 15       	cp	r18, r14
    10da:	3f 05       	cpc	r19, r15
    10dc:	30 f3       	brcs	.-52     	; 0x10aa <ascii_hex_decode+0x36>
    10de:	2b c0       	rjmp	.+86     	; 0x1136 <ascii_hex_decode+0xc2>
    10e0:	f5 01       	movw	r30, r10
    10e2:	80 81       	ld	r24, Z
    10e4:	8a 33       	cpi	r24, 0x3A	; 58
    10e6:	18 f0       	brcs	.+6      	; 0x10ee <ascii_hex_decode+0x7a>
    10e8:	99 ea       	ldi	r25, 0xA9	; 169
    10ea:	98 0f       	add	r25, r24
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <ascii_hex_decode+0x7e>
    10ee:	90 ed       	ldi	r25, 0xD0	; 208
    10f0:	98 0f       	add	r25, r24
    10f2:	81 81       	ldd	r24, Z+1	; 0x01
    10f4:	8a 33       	cpi	r24, 0x3A	; 58
    10f6:	18 f0       	brcs	.+6      	; 0x10fe <ascii_hex_decode+0x8a>
    10f8:	29 ea       	ldi	r18, 0xA9	; 169
    10fa:	28 0f       	add	r18, r24
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <ascii_hex_decode+0x8e>
    10fe:	20 ed       	ldi	r18, 0xD0	; 208
    1100:	28 0f       	add	r18, r24
    1102:	f0 e1       	ldi	r31, 0x10	; 16
    1104:	9f 9f       	mul	r25, r31
    1106:	c0 01       	movw	r24, r0
    1108:	11 24       	eor	r1, r1
    110a:	82 2b       	or	r24, r18
    110c:	d8 01       	movw	r26, r16
    110e:	8c 93       	st	X, r24
    1110:	1f 92       	push	r1
    1112:	8f 93       	push	r24
    1114:	ff 92       	push	r15
    1116:	ef 92       	push	r14
    1118:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <printf>
    111c:	b2 e0       	ldi	r27, 0x02	; 2
    111e:	ab 0e       	add	r10, r27
    1120:	b1 1c       	adc	r11, r1
    1122:	0e 5f       	subi	r16, 0xFE	; 254
    1124:	1f 4f       	sbci	r17, 0xFF	; 255
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	ac 14       	cp	r10, r12
    1130:	bd 04       	cpc	r11, r13
    1132:	b1 f6       	brne	.-84     	; 0x10e0 <ascii_hex_decode+0x6c>
    1134:	10 c0       	rjmp	.+32     	; 0x1156 <ascii_hex_decode+0xe2>
    1136:	fe 01       	movw	r30, r28
    1138:	31 96       	adiw	r30, 0x01	; 1
    113a:	5f 01       	movw	r10, r30
    113c:	04 2f       	mov	r16, r20
    113e:	15 2f       	mov	r17, r21
    1140:	6e 01       	movw	r12, r28
    1142:	fb e0       	ldi	r31, 0x0B	; 11
    1144:	cf 0e       	add	r12, r31
    1146:	d1 1c       	adc	r13, r1
    1148:	0f 2e       	mov	r0, r31
    114a:	f1 e6       	ldi	r31, 0x61	; 97
    114c:	ef 2e       	mov	r14, r31
    114e:	f6 e0       	ldi	r31, 0x06	; 6
    1150:	ff 2e       	mov	r15, r31
    1152:	f0 2d       	mov	r31, r0
    1154:	c5 cf       	rjmp	.-118    	; 0x10e0 <ascii_hex_decode+0x6c>
    1156:	2a 96       	adiw	r28, 0x0a	; 10
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	ff 90       	pop	r15
    116c:	ef 90       	pop	r14
    116e:	df 90       	pop	r13
    1170:	cf 90       	pop	r12
    1172:	bf 90       	pop	r11
    1174:	af 90       	pop	r10
    1176:	08 95       	ret

00001178 <hex_encode>:

//				1  2  3  4  5  6  7  8  9 10 11 byte pair
//  MSG STYLE: xx xx xx xx xx xx xx xx xx xx xx
//  1: frame, 2: ID, 3-6: timestamp, 7: battery, 8+9: bus voltage, 10+11: current

char* hex_encode(board_t board){
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
	char *msg = "";
	sprintf(msg, "%02X%02X%08lX%02X%04X%04X", board.frame_counter, board.id, board.time_stamp, board.batteryLevel, board.ina219.bus_voltage, board.ina219.current);
    1180:	8f 85       	ldd	r24, Y+15	; 0x0f
    1182:	8f 93       	push	r24
    1184:	8e 85       	ldd	r24, Y+14	; 0x0e
    1186:	8f 93       	push	r24
    1188:	8d 85       	ldd	r24, Y+13	; 0x0d
    118a:	8f 93       	push	r24
    118c:	8c 85       	ldd	r24, Y+12	; 0x0c
    118e:	8f 93       	push	r24
    1190:	8b 85       	ldd	r24, Y+11	; 0x0b
    1192:	1f 92       	push	r1
    1194:	8f 93       	push	r24
    1196:	8a 85       	ldd	r24, Y+10	; 0x0a
    1198:	8f 93       	push	r24
    119a:	89 85       	ldd	r24, Y+9	; 0x09
    119c:	8f 93       	push	r24
    119e:	88 85       	ldd	r24, Y+8	; 0x08
    11a0:	8f 93       	push	r24
    11a2:	8f 81       	ldd	r24, Y+7	; 0x07
    11a4:	8f 93       	push	r24
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	1f 92       	push	r1
    11aa:	8f 93       	push	r24
    11ac:	8e 81       	ldd	r24, Y+6	; 0x06
    11ae:	1f 92       	push	r1
    11b0:	8f 93       	push	r24
    11b2:	8c e6       	ldi	r24, 0x6C	; 108
    11b4:	96 e0       	ldi	r25, 0x06	; 6
    11b6:	9f 93       	push	r25
    11b8:	8f 93       	push	r24
    11ba:	82 ea       	ldi	r24, 0xA2	; 162
    11bc:	95 e0       	ldi	r25, 0x05	; 5
    11be:	9f 93       	push	r25
    11c0:	8f 93       	push	r24
    11c2:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <sprintf>
	return msg;
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
}
    11d0:	82 ea       	ldi	r24, 0xA2	; 162
    11d2:	95 e0       	ldi	r25, 0x05	; 5
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	08 95       	ret

000011da <vfprintf>:
    11da:	a0 e1       	ldi	r26, 0x10	; 16
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e3 ef       	ldi	r30, 0xF3	; 243
    11e0:	f8 e0       	ldi	r31, 0x08	; 8
    11e2:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__prologue_saves__>
    11e6:	7c 01       	movw	r14, r24
    11e8:	1b 01       	movw	r2, r22
    11ea:	6a 01       	movw	r12, r20
    11ec:	fc 01       	movw	r30, r24
    11ee:	17 82       	std	Z+7, r1	; 0x07
    11f0:	16 82       	std	Z+6, r1	; 0x06
    11f2:	83 81       	ldd	r24, Z+3	; 0x03
    11f4:	81 ff       	sbrs	r24, 1
    11f6:	44 c3       	rjmp	.+1672   	; 0x1880 <vfprintf+0x6a6>
    11f8:	9e 01       	movw	r18, r28
    11fa:	2f 5f       	subi	r18, 0xFF	; 255
    11fc:	3f 4f       	sbci	r19, 0xFF	; 255
    11fe:	39 01       	movw	r6, r18
    1200:	f7 01       	movw	r30, r14
    1202:	93 81       	ldd	r25, Z+3	; 0x03
    1204:	f1 01       	movw	r30, r2
    1206:	93 fd       	sbrc	r25, 3
    1208:	85 91       	lpm	r24, Z+
    120a:	93 ff       	sbrs	r25, 3
    120c:	81 91       	ld	r24, Z+
    120e:	1f 01       	movw	r2, r30
    1210:	88 23       	and	r24, r24
    1212:	09 f4       	brne	.+2      	; 0x1216 <vfprintf+0x3c>
    1214:	31 c3       	rjmp	.+1634   	; 0x1878 <vfprintf+0x69e>
    1216:	85 32       	cpi	r24, 0x25	; 37
    1218:	39 f4       	brne	.+14     	; 0x1228 <vfprintf+0x4e>
    121a:	93 fd       	sbrc	r25, 3
    121c:	85 91       	lpm	r24, Z+
    121e:	93 ff       	sbrs	r25, 3
    1220:	81 91       	ld	r24, Z+
    1222:	1f 01       	movw	r2, r30
    1224:	85 32       	cpi	r24, 0x25	; 37
    1226:	39 f4       	brne	.+14     	; 0x1236 <vfprintf+0x5c>
    1228:	b7 01       	movw	r22, r14
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    1230:	56 01       	movw	r10, r12
    1232:	65 01       	movw	r12, r10
    1234:	e5 cf       	rjmp	.-54     	; 0x1200 <vfprintf+0x26>
    1236:	10 e0       	ldi	r17, 0x00	; 0
    1238:	51 2c       	mov	r5, r1
    123a:	91 2c       	mov	r9, r1
    123c:	ff e1       	ldi	r31, 0x1F	; 31
    123e:	f9 15       	cp	r31, r9
    1240:	d8 f0       	brcs	.+54     	; 0x1278 <vfprintf+0x9e>
    1242:	8b 32       	cpi	r24, 0x2B	; 43
    1244:	79 f0       	breq	.+30     	; 0x1264 <vfprintf+0x8a>
    1246:	38 f4       	brcc	.+14     	; 0x1256 <vfprintf+0x7c>
    1248:	80 32       	cpi	r24, 0x20	; 32
    124a:	79 f0       	breq	.+30     	; 0x126a <vfprintf+0x90>
    124c:	83 32       	cpi	r24, 0x23	; 35
    124e:	a1 f4       	brne	.+40     	; 0x1278 <vfprintf+0x9e>
    1250:	f9 2d       	mov	r31, r9
    1252:	f0 61       	ori	r31, 0x10	; 16
    1254:	2e c0       	rjmp	.+92     	; 0x12b2 <vfprintf+0xd8>
    1256:	8d 32       	cpi	r24, 0x2D	; 45
    1258:	61 f0       	breq	.+24     	; 0x1272 <vfprintf+0x98>
    125a:	80 33       	cpi	r24, 0x30	; 48
    125c:	69 f4       	brne	.+26     	; 0x1278 <vfprintf+0x9e>
    125e:	29 2d       	mov	r18, r9
    1260:	21 60       	ori	r18, 0x01	; 1
    1262:	2d c0       	rjmp	.+90     	; 0x12be <vfprintf+0xe4>
    1264:	39 2d       	mov	r19, r9
    1266:	32 60       	ori	r19, 0x02	; 2
    1268:	93 2e       	mov	r9, r19
    126a:	89 2d       	mov	r24, r9
    126c:	84 60       	ori	r24, 0x04	; 4
    126e:	98 2e       	mov	r9, r24
    1270:	2a c0       	rjmp	.+84     	; 0x12c6 <vfprintf+0xec>
    1272:	e9 2d       	mov	r30, r9
    1274:	e8 60       	ori	r30, 0x08	; 8
    1276:	15 c0       	rjmp	.+42     	; 0x12a2 <vfprintf+0xc8>
    1278:	97 fc       	sbrc	r9, 7
    127a:	2d c0       	rjmp	.+90     	; 0x12d6 <vfprintf+0xfc>
    127c:	20 ed       	ldi	r18, 0xD0	; 208
    127e:	28 0f       	add	r18, r24
    1280:	2a 30       	cpi	r18, 0x0A	; 10
    1282:	88 f4       	brcc	.+34     	; 0x12a6 <vfprintf+0xcc>
    1284:	96 fe       	sbrs	r9, 6
    1286:	06 c0       	rjmp	.+12     	; 0x1294 <vfprintf+0xba>
    1288:	3a e0       	ldi	r19, 0x0A	; 10
    128a:	13 9f       	mul	r17, r19
    128c:	20 0d       	add	r18, r0
    128e:	11 24       	eor	r1, r1
    1290:	12 2f       	mov	r17, r18
    1292:	19 c0       	rjmp	.+50     	; 0x12c6 <vfprintf+0xec>
    1294:	8a e0       	ldi	r24, 0x0A	; 10
    1296:	58 9e       	mul	r5, r24
    1298:	20 0d       	add	r18, r0
    129a:	11 24       	eor	r1, r1
    129c:	52 2e       	mov	r5, r18
    129e:	e9 2d       	mov	r30, r9
    12a0:	e0 62       	ori	r30, 0x20	; 32
    12a2:	9e 2e       	mov	r9, r30
    12a4:	10 c0       	rjmp	.+32     	; 0x12c6 <vfprintf+0xec>
    12a6:	8e 32       	cpi	r24, 0x2E	; 46
    12a8:	31 f4       	brne	.+12     	; 0x12b6 <vfprintf+0xdc>
    12aa:	96 fc       	sbrc	r9, 6
    12ac:	e5 c2       	rjmp	.+1482   	; 0x1878 <vfprintf+0x69e>
    12ae:	f9 2d       	mov	r31, r9
    12b0:	f0 64       	ori	r31, 0x40	; 64
    12b2:	9f 2e       	mov	r9, r31
    12b4:	08 c0       	rjmp	.+16     	; 0x12c6 <vfprintf+0xec>
    12b6:	8c 36       	cpi	r24, 0x6C	; 108
    12b8:	21 f4       	brne	.+8      	; 0x12c2 <vfprintf+0xe8>
    12ba:	29 2d       	mov	r18, r9
    12bc:	20 68       	ori	r18, 0x80	; 128
    12be:	92 2e       	mov	r9, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <vfprintf+0xec>
    12c2:	88 36       	cpi	r24, 0x68	; 104
    12c4:	41 f4       	brne	.+16     	; 0x12d6 <vfprintf+0xfc>
    12c6:	f1 01       	movw	r30, r2
    12c8:	93 fd       	sbrc	r25, 3
    12ca:	85 91       	lpm	r24, Z+
    12cc:	93 ff       	sbrs	r25, 3
    12ce:	81 91       	ld	r24, Z+
    12d0:	1f 01       	movw	r2, r30
    12d2:	81 11       	cpse	r24, r1
    12d4:	b3 cf       	rjmp	.-154    	; 0x123c <vfprintf+0x62>
    12d6:	9b eb       	ldi	r25, 0xBB	; 187
    12d8:	98 0f       	add	r25, r24
    12da:	93 30       	cpi	r25, 0x03	; 3
    12dc:	20 f4       	brcc	.+8      	; 0x12e6 <vfprintf+0x10c>
    12de:	99 2d       	mov	r25, r9
    12e0:	90 61       	ori	r25, 0x10	; 16
    12e2:	80 5e       	subi	r24, 0xE0	; 224
    12e4:	07 c0       	rjmp	.+14     	; 0x12f4 <vfprintf+0x11a>
    12e6:	9b e9       	ldi	r25, 0x9B	; 155
    12e8:	98 0f       	add	r25, r24
    12ea:	93 30       	cpi	r25, 0x03	; 3
    12ec:	08 f0       	brcs	.+2      	; 0x12f0 <vfprintf+0x116>
    12ee:	66 c1       	rjmp	.+716    	; 0x15bc <vfprintf+0x3e2>
    12f0:	99 2d       	mov	r25, r9
    12f2:	9f 7e       	andi	r25, 0xEF	; 239
    12f4:	96 ff       	sbrs	r25, 6
    12f6:	16 e0       	ldi	r17, 0x06	; 6
    12f8:	9f 73       	andi	r25, 0x3F	; 63
    12fa:	99 2e       	mov	r9, r25
    12fc:	85 36       	cpi	r24, 0x65	; 101
    12fe:	19 f4       	brne	.+6      	; 0x1306 <vfprintf+0x12c>
    1300:	90 64       	ori	r25, 0x40	; 64
    1302:	99 2e       	mov	r9, r25
    1304:	08 c0       	rjmp	.+16     	; 0x1316 <vfprintf+0x13c>
    1306:	86 36       	cpi	r24, 0x66	; 102
    1308:	21 f4       	brne	.+8      	; 0x1312 <vfprintf+0x138>
    130a:	39 2f       	mov	r19, r25
    130c:	30 68       	ori	r19, 0x80	; 128
    130e:	93 2e       	mov	r9, r19
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <vfprintf+0x13c>
    1312:	11 11       	cpse	r17, r1
    1314:	11 50       	subi	r17, 0x01	; 1
    1316:	97 fe       	sbrs	r9, 7
    1318:	07 c0       	rjmp	.+14     	; 0x1328 <vfprintf+0x14e>
    131a:	1c 33       	cpi	r17, 0x3C	; 60
    131c:	50 f4       	brcc	.+20     	; 0x1332 <vfprintf+0x158>
    131e:	44 24       	eor	r4, r4
    1320:	43 94       	inc	r4
    1322:	41 0e       	add	r4, r17
    1324:	27 e0       	ldi	r18, 0x07	; 7
    1326:	0b c0       	rjmp	.+22     	; 0x133e <vfprintf+0x164>
    1328:	18 30       	cpi	r17, 0x08	; 8
    132a:	38 f0       	brcs	.+14     	; 0x133a <vfprintf+0x160>
    132c:	27 e0       	ldi	r18, 0x07	; 7
    132e:	17 e0       	ldi	r17, 0x07	; 7
    1330:	05 c0       	rjmp	.+10     	; 0x133c <vfprintf+0x162>
    1332:	27 e0       	ldi	r18, 0x07	; 7
    1334:	9c e3       	ldi	r25, 0x3C	; 60
    1336:	49 2e       	mov	r4, r25
    1338:	02 c0       	rjmp	.+4      	; 0x133e <vfprintf+0x164>
    133a:	21 2f       	mov	r18, r17
    133c:	41 2c       	mov	r4, r1
    133e:	56 01       	movw	r10, r12
    1340:	84 e0       	ldi	r24, 0x04	; 4
    1342:	a8 0e       	add	r10, r24
    1344:	b1 1c       	adc	r11, r1
    1346:	f6 01       	movw	r30, r12
    1348:	60 81       	ld	r22, Z
    134a:	71 81       	ldd	r23, Z+1	; 0x01
    134c:	82 81       	ldd	r24, Z+2	; 0x02
    134e:	93 81       	ldd	r25, Z+3	; 0x03
    1350:	04 2d       	mov	r16, r4
    1352:	a3 01       	movw	r20, r6
    1354:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__ftoa_engine>
    1358:	6c 01       	movw	r12, r24
    135a:	f9 81       	ldd	r31, Y+1	; 0x01
    135c:	fc 87       	std	Y+12, r31	; 0x0c
    135e:	f0 ff       	sbrs	r31, 0
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <vfprintf+0x18c>
    1362:	f3 ff       	sbrs	r31, 3
    1364:	06 c0       	rjmp	.+12     	; 0x1372 <vfprintf+0x198>
    1366:	91 fc       	sbrc	r9, 1
    1368:	06 c0       	rjmp	.+12     	; 0x1376 <vfprintf+0x19c>
    136a:	92 fe       	sbrs	r9, 2
    136c:	06 c0       	rjmp	.+12     	; 0x137a <vfprintf+0x1a0>
    136e:	00 e2       	ldi	r16, 0x20	; 32
    1370:	05 c0       	rjmp	.+10     	; 0x137c <vfprintf+0x1a2>
    1372:	0d e2       	ldi	r16, 0x2D	; 45
    1374:	03 c0       	rjmp	.+6      	; 0x137c <vfprintf+0x1a2>
    1376:	0b e2       	ldi	r16, 0x2B	; 43
    1378:	01 c0       	rjmp	.+2      	; 0x137c <vfprintf+0x1a2>
    137a:	00 e0       	ldi	r16, 0x00	; 0
    137c:	8c 85       	ldd	r24, Y+12	; 0x0c
    137e:	8c 70       	andi	r24, 0x0C	; 12
    1380:	19 f0       	breq	.+6      	; 0x1388 <vfprintf+0x1ae>
    1382:	01 11       	cpse	r16, r1
    1384:	5a c2       	rjmp	.+1204   	; 0x183a <vfprintf+0x660>
    1386:	9b c2       	rjmp	.+1334   	; 0x18be <vfprintf+0x6e4>
    1388:	97 fe       	sbrs	r9, 7
    138a:	10 c0       	rjmp	.+32     	; 0x13ac <vfprintf+0x1d2>
    138c:	4c 0c       	add	r4, r12
    138e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1390:	f4 ff       	sbrs	r31, 4
    1392:	04 c0       	rjmp	.+8      	; 0x139c <vfprintf+0x1c2>
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	81 33       	cpi	r24, 0x31	; 49
    1398:	09 f4       	brne	.+2      	; 0x139c <vfprintf+0x1c2>
    139a:	4a 94       	dec	r4
    139c:	14 14       	cp	r1, r4
    139e:	74 f5       	brge	.+92     	; 0x13fc <vfprintf+0x222>
    13a0:	28 e0       	ldi	r18, 0x08	; 8
    13a2:	24 15       	cp	r18, r4
    13a4:	78 f5       	brcc	.+94     	; 0x1404 <vfprintf+0x22a>
    13a6:	88 e0       	ldi	r24, 0x08	; 8
    13a8:	48 2e       	mov	r4, r24
    13aa:	2c c0       	rjmp	.+88     	; 0x1404 <vfprintf+0x22a>
    13ac:	96 fc       	sbrc	r9, 6
    13ae:	2a c0       	rjmp	.+84     	; 0x1404 <vfprintf+0x22a>
    13b0:	81 2f       	mov	r24, r17
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	8c 15       	cp	r24, r12
    13b6:	9d 05       	cpc	r25, r13
    13b8:	9c f0       	brlt	.+38     	; 0x13e0 <vfprintf+0x206>
    13ba:	3c ef       	ldi	r19, 0xFC	; 252
    13bc:	c3 16       	cp	r12, r19
    13be:	3f ef       	ldi	r19, 0xFF	; 255
    13c0:	d3 06       	cpc	r13, r19
    13c2:	74 f0       	brlt	.+28     	; 0x13e0 <vfprintf+0x206>
    13c4:	89 2d       	mov	r24, r9
    13c6:	80 68       	ori	r24, 0x80	; 128
    13c8:	98 2e       	mov	r9, r24
    13ca:	0a c0       	rjmp	.+20     	; 0x13e0 <vfprintf+0x206>
    13cc:	e2 e0       	ldi	r30, 0x02	; 2
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	ec 0f       	add	r30, r28
    13d2:	fd 1f       	adc	r31, r29
    13d4:	e1 0f       	add	r30, r17
    13d6:	f1 1d       	adc	r31, r1
    13d8:	80 81       	ld	r24, Z
    13da:	80 33       	cpi	r24, 0x30	; 48
    13dc:	19 f4       	brne	.+6      	; 0x13e4 <vfprintf+0x20a>
    13de:	11 50       	subi	r17, 0x01	; 1
    13e0:	11 11       	cpse	r17, r1
    13e2:	f4 cf       	rjmp	.-24     	; 0x13cc <vfprintf+0x1f2>
    13e4:	97 fe       	sbrs	r9, 7
    13e6:	0e c0       	rjmp	.+28     	; 0x1404 <vfprintf+0x22a>
    13e8:	44 24       	eor	r4, r4
    13ea:	43 94       	inc	r4
    13ec:	41 0e       	add	r4, r17
    13ee:	81 2f       	mov	r24, r17
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	c8 16       	cp	r12, r24
    13f4:	d9 06       	cpc	r13, r25
    13f6:	2c f4       	brge	.+10     	; 0x1402 <vfprintf+0x228>
    13f8:	1c 19       	sub	r17, r12
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <vfprintf+0x22a>
    13fc:	44 24       	eor	r4, r4
    13fe:	43 94       	inc	r4
    1400:	01 c0       	rjmp	.+2      	; 0x1404 <vfprintf+0x22a>
    1402:	10 e0       	ldi	r17, 0x00	; 0
    1404:	97 fe       	sbrs	r9, 7
    1406:	06 c0       	rjmp	.+12     	; 0x1414 <vfprintf+0x23a>
    1408:	1c 14       	cp	r1, r12
    140a:	1d 04       	cpc	r1, r13
    140c:	34 f4       	brge	.+12     	; 0x141a <vfprintf+0x240>
    140e:	c6 01       	movw	r24, r12
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	05 c0       	rjmp	.+10     	; 0x141e <vfprintf+0x244>
    1414:	85 e0       	ldi	r24, 0x05	; 5
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 c0       	rjmp	.+4      	; 0x141e <vfprintf+0x244>
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	01 11       	cpse	r16, r1
    1420:	01 96       	adiw	r24, 0x01	; 1
    1422:	11 23       	and	r17, r17
    1424:	31 f0       	breq	.+12     	; 0x1432 <vfprintf+0x258>
    1426:	21 2f       	mov	r18, r17
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	2f 5f       	subi	r18, 0xFF	; 255
    142c:	3f 4f       	sbci	r19, 0xFF	; 255
    142e:	82 0f       	add	r24, r18
    1430:	93 1f       	adc	r25, r19
    1432:	25 2d       	mov	r18, r5
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	82 17       	cp	r24, r18
    1438:	93 07       	cpc	r25, r19
    143a:	14 f4       	brge	.+4      	; 0x1440 <vfprintf+0x266>
    143c:	58 1a       	sub	r5, r24
    143e:	01 c0       	rjmp	.+2      	; 0x1442 <vfprintf+0x268>
    1440:	51 2c       	mov	r5, r1
    1442:	89 2d       	mov	r24, r9
    1444:	89 70       	andi	r24, 0x09	; 9
    1446:	49 f4       	brne	.+18     	; 0x145a <vfprintf+0x280>
    1448:	55 20       	and	r5, r5
    144a:	39 f0       	breq	.+14     	; 0x145a <vfprintf+0x280>
    144c:	b7 01       	movw	r22, r14
    144e:	80 e2       	ldi	r24, 0x20	; 32
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    1456:	5a 94       	dec	r5
    1458:	f7 cf       	rjmp	.-18     	; 0x1448 <vfprintf+0x26e>
    145a:	00 23       	and	r16, r16
    145c:	29 f0       	breq	.+10     	; 0x1468 <vfprintf+0x28e>
    145e:	b7 01       	movw	r22, r14
    1460:	80 2f       	mov	r24, r16
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    1468:	93 fc       	sbrc	r9, 3
    146a:	09 c0       	rjmp	.+18     	; 0x147e <vfprintf+0x2a4>
    146c:	55 20       	and	r5, r5
    146e:	39 f0       	breq	.+14     	; 0x147e <vfprintf+0x2a4>
    1470:	b7 01       	movw	r22, r14
    1472:	80 e3       	ldi	r24, 0x30	; 48
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    147a:	5a 94       	dec	r5
    147c:	f7 cf       	rjmp	.-18     	; 0x146c <vfprintf+0x292>
    147e:	97 fe       	sbrs	r9, 7
    1480:	4c c0       	rjmp	.+152    	; 0x151a <vfprintf+0x340>
    1482:	46 01       	movw	r8, r12
    1484:	d7 fe       	sbrs	r13, 7
    1486:	02 c0       	rjmp	.+4      	; 0x148c <vfprintf+0x2b2>
    1488:	81 2c       	mov	r8, r1
    148a:	91 2c       	mov	r9, r1
    148c:	c6 01       	movw	r24, r12
    148e:	88 19       	sub	r24, r8
    1490:	99 09       	sbc	r25, r9
    1492:	f3 01       	movw	r30, r6
    1494:	e8 0f       	add	r30, r24
    1496:	f9 1f       	adc	r31, r25
    1498:	fe 87       	std	Y+14, r31	; 0x0e
    149a:	ed 87       	std	Y+13, r30	; 0x0d
    149c:	96 01       	movw	r18, r12
    149e:	24 19       	sub	r18, r4
    14a0:	31 09       	sbc	r19, r1
    14a2:	38 8b       	std	Y+16, r19	; 0x10
    14a4:	2f 87       	std	Y+15, r18	; 0x0f
    14a6:	01 2f       	mov	r16, r17
    14a8:	10 e0       	ldi	r17, 0x00	; 0
    14aa:	11 95       	neg	r17
    14ac:	01 95       	neg	r16
    14ae:	11 09       	sbc	r17, r1
    14b0:	3f ef       	ldi	r19, 0xFF	; 255
    14b2:	83 16       	cp	r8, r19
    14b4:	93 06       	cpc	r9, r19
    14b6:	29 f4       	brne	.+10     	; 0x14c2 <vfprintf+0x2e8>
    14b8:	b7 01       	movw	r22, r14
    14ba:	8e e2       	ldi	r24, 0x2E	; 46
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    14c2:	c8 14       	cp	r12, r8
    14c4:	d9 04       	cpc	r13, r9
    14c6:	4c f0       	brlt	.+18     	; 0x14da <vfprintf+0x300>
    14c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ca:	98 89       	ldd	r25, Y+16	; 0x10
    14cc:	88 15       	cp	r24, r8
    14ce:	99 05       	cpc	r25, r9
    14d0:	24 f4       	brge	.+8      	; 0x14da <vfprintf+0x300>
    14d2:	ed 85       	ldd	r30, Y+13	; 0x0d
    14d4:	fe 85       	ldd	r31, Y+14	; 0x0e
    14d6:	81 81       	ldd	r24, Z+1	; 0x01
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <vfprintf+0x302>
    14da:	80 e3       	ldi	r24, 0x30	; 48
    14dc:	f1 e0       	ldi	r31, 0x01	; 1
    14de:	8f 1a       	sub	r8, r31
    14e0:	91 08       	sbc	r9, r1
    14e2:	2d 85       	ldd	r18, Y+13	; 0x0d
    14e4:	3e 85       	ldd	r19, Y+14	; 0x0e
    14e6:	2f 5f       	subi	r18, 0xFF	; 255
    14e8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ea:	3e 87       	std	Y+14, r19	; 0x0e
    14ec:	2d 87       	std	Y+13, r18	; 0x0d
    14ee:	80 16       	cp	r8, r16
    14f0:	91 06       	cpc	r9, r17
    14f2:	2c f0       	brlt	.+10     	; 0x14fe <vfprintf+0x324>
    14f4:	b7 01       	movw	r22, r14
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    14fc:	d9 cf       	rjmp	.-78     	; 0x14b0 <vfprintf+0x2d6>
    14fe:	c8 14       	cp	r12, r8
    1500:	d9 04       	cpc	r13, r9
    1502:	41 f4       	brne	.+16     	; 0x1514 <vfprintf+0x33a>
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	96 33       	cpi	r25, 0x36	; 54
    1508:	20 f4       	brcc	.+8      	; 0x1512 <vfprintf+0x338>
    150a:	95 33       	cpi	r25, 0x35	; 53
    150c:	19 f4       	brne	.+6      	; 0x1514 <vfprintf+0x33a>
    150e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1510:	34 ff       	sbrs	r19, 4
    1512:	81 e3       	ldi	r24, 0x31	; 49
    1514:	b7 01       	movw	r22, r14
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	4e c0       	rjmp	.+156    	; 0x15b6 <vfprintf+0x3dc>
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	81 33       	cpi	r24, 0x31	; 49
    151e:	19 f0       	breq	.+6      	; 0x1526 <vfprintf+0x34c>
    1520:	9c 85       	ldd	r25, Y+12	; 0x0c
    1522:	9f 7e       	andi	r25, 0xEF	; 239
    1524:	9c 87       	std	Y+12, r25	; 0x0c
    1526:	b7 01       	movw	r22, r14
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    152e:	11 11       	cpse	r17, r1
    1530:	05 c0       	rjmp	.+10     	; 0x153c <vfprintf+0x362>
    1532:	94 fc       	sbrc	r9, 4
    1534:	18 c0       	rjmp	.+48     	; 0x1566 <vfprintf+0x38c>
    1536:	85 e6       	ldi	r24, 0x65	; 101
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	17 c0       	rjmp	.+46     	; 0x156a <vfprintf+0x390>
    153c:	b7 01       	movw	r22, r14
    153e:	8e e2       	ldi	r24, 0x2E	; 46
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    1546:	1e 5f       	subi	r17, 0xFE	; 254
    1548:	82 e0       	ldi	r24, 0x02	; 2
    154a:	01 e0       	ldi	r16, 0x01	; 1
    154c:	08 0f       	add	r16, r24
    154e:	f3 01       	movw	r30, r6
    1550:	e8 0f       	add	r30, r24
    1552:	f1 1d       	adc	r31, r1
    1554:	80 81       	ld	r24, Z
    1556:	b7 01       	movw	r22, r14
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    155e:	80 2f       	mov	r24, r16
    1560:	01 13       	cpse	r16, r17
    1562:	f3 cf       	rjmp	.-26     	; 0x154a <vfprintf+0x370>
    1564:	e6 cf       	rjmp	.-52     	; 0x1532 <vfprintf+0x358>
    1566:	85 e4       	ldi	r24, 0x45	; 69
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	b7 01       	movw	r22, r14
    156c:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    1570:	d7 fc       	sbrc	r13, 7
    1572:	06 c0       	rjmp	.+12     	; 0x1580 <vfprintf+0x3a6>
    1574:	c1 14       	cp	r12, r1
    1576:	d1 04       	cpc	r13, r1
    1578:	41 f4       	brne	.+16     	; 0x158a <vfprintf+0x3b0>
    157a:	ec 85       	ldd	r30, Y+12	; 0x0c
    157c:	e4 ff       	sbrs	r30, 4
    157e:	05 c0       	rjmp	.+10     	; 0x158a <vfprintf+0x3b0>
    1580:	d1 94       	neg	r13
    1582:	c1 94       	neg	r12
    1584:	d1 08       	sbc	r13, r1
    1586:	8d e2       	ldi	r24, 0x2D	; 45
    1588:	01 c0       	rjmp	.+2      	; 0x158c <vfprintf+0x3b2>
    158a:	8b e2       	ldi	r24, 0x2B	; 43
    158c:	b7 01       	movw	r22, r14
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    1594:	80 e3       	ldi	r24, 0x30	; 48
    1596:	2a e0       	ldi	r18, 0x0A	; 10
    1598:	c2 16       	cp	r12, r18
    159a:	d1 04       	cpc	r13, r1
    159c:	2c f0       	brlt	.+10     	; 0x15a8 <vfprintf+0x3ce>
    159e:	8f 5f       	subi	r24, 0xFF	; 255
    15a0:	fa e0       	ldi	r31, 0x0A	; 10
    15a2:	cf 1a       	sub	r12, r31
    15a4:	d1 08       	sbc	r13, r1
    15a6:	f7 cf       	rjmp	.-18     	; 0x1596 <vfprintf+0x3bc>
    15a8:	b7 01       	movw	r22, r14
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    15b0:	b7 01       	movw	r22, r14
    15b2:	c6 01       	movw	r24, r12
    15b4:	c0 96       	adiw	r24, 0x30	; 48
    15b6:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    15ba:	54 c1       	rjmp	.+680    	; 0x1864 <vfprintf+0x68a>
    15bc:	83 36       	cpi	r24, 0x63	; 99
    15be:	31 f0       	breq	.+12     	; 0x15cc <vfprintf+0x3f2>
    15c0:	83 37       	cpi	r24, 0x73	; 115
    15c2:	79 f0       	breq	.+30     	; 0x15e2 <vfprintf+0x408>
    15c4:	83 35       	cpi	r24, 0x53	; 83
    15c6:	09 f0       	breq	.+2      	; 0x15ca <vfprintf+0x3f0>
    15c8:	56 c0       	rjmp	.+172    	; 0x1676 <vfprintf+0x49c>
    15ca:	20 c0       	rjmp	.+64     	; 0x160c <vfprintf+0x432>
    15cc:	56 01       	movw	r10, r12
    15ce:	32 e0       	ldi	r19, 0x02	; 2
    15d0:	a3 0e       	add	r10, r19
    15d2:	b1 1c       	adc	r11, r1
    15d4:	f6 01       	movw	r30, r12
    15d6:	80 81       	ld	r24, Z
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	01 e0       	ldi	r16, 0x01	; 1
    15dc:	10 e0       	ldi	r17, 0x00	; 0
    15de:	63 01       	movw	r12, r6
    15e0:	12 c0       	rjmp	.+36     	; 0x1606 <vfprintf+0x42c>
    15e2:	56 01       	movw	r10, r12
    15e4:	f2 e0       	ldi	r31, 0x02	; 2
    15e6:	af 0e       	add	r10, r31
    15e8:	b1 1c       	adc	r11, r1
    15ea:	f6 01       	movw	r30, r12
    15ec:	c0 80       	ld	r12, Z
    15ee:	d1 80       	ldd	r13, Z+1	; 0x01
    15f0:	96 fe       	sbrs	r9, 6
    15f2:	03 c0       	rjmp	.+6      	; 0x15fa <vfprintf+0x420>
    15f4:	61 2f       	mov	r22, r17
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <vfprintf+0x424>
    15fa:	6f ef       	ldi	r22, 0xFF	; 255
    15fc:	7f ef       	ldi	r23, 0xFF	; 255
    15fe:	c6 01       	movw	r24, r12
    1600:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <strnlen>
    1604:	8c 01       	movw	r16, r24
    1606:	f9 2d       	mov	r31, r9
    1608:	ff 77       	andi	r31, 0x7F	; 127
    160a:	14 c0       	rjmp	.+40     	; 0x1634 <vfprintf+0x45a>
    160c:	56 01       	movw	r10, r12
    160e:	22 e0       	ldi	r18, 0x02	; 2
    1610:	a2 0e       	add	r10, r18
    1612:	b1 1c       	adc	r11, r1
    1614:	f6 01       	movw	r30, r12
    1616:	c0 80       	ld	r12, Z
    1618:	d1 80       	ldd	r13, Z+1	; 0x01
    161a:	96 fe       	sbrs	r9, 6
    161c:	03 c0       	rjmp	.+6      	; 0x1624 <vfprintf+0x44a>
    161e:	61 2f       	mov	r22, r17
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <vfprintf+0x44e>
    1624:	6f ef       	ldi	r22, 0xFF	; 255
    1626:	7f ef       	ldi	r23, 0xFF	; 255
    1628:	c6 01       	movw	r24, r12
    162a:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <strnlen_P>
    162e:	8c 01       	movw	r16, r24
    1630:	f9 2d       	mov	r31, r9
    1632:	f0 68       	ori	r31, 0x80	; 128
    1634:	9f 2e       	mov	r9, r31
    1636:	f3 fd       	sbrc	r31, 3
    1638:	1a c0       	rjmp	.+52     	; 0x166e <vfprintf+0x494>
    163a:	85 2d       	mov	r24, r5
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	08 17       	cp	r16, r24
    1640:	19 07       	cpc	r17, r25
    1642:	a8 f4       	brcc	.+42     	; 0x166e <vfprintf+0x494>
    1644:	b7 01       	movw	r22, r14
    1646:	80 e2       	ldi	r24, 0x20	; 32
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    164e:	5a 94       	dec	r5
    1650:	f4 cf       	rjmp	.-24     	; 0x163a <vfprintf+0x460>
    1652:	f6 01       	movw	r30, r12
    1654:	97 fc       	sbrc	r9, 7
    1656:	85 91       	lpm	r24, Z+
    1658:	97 fe       	sbrs	r9, 7
    165a:	81 91       	ld	r24, Z+
    165c:	6f 01       	movw	r12, r30
    165e:	b7 01       	movw	r22, r14
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    1666:	51 10       	cpse	r5, r1
    1668:	5a 94       	dec	r5
    166a:	01 50       	subi	r16, 0x01	; 1
    166c:	11 09       	sbc	r17, r1
    166e:	01 15       	cp	r16, r1
    1670:	11 05       	cpc	r17, r1
    1672:	79 f7       	brne	.-34     	; 0x1652 <vfprintf+0x478>
    1674:	f7 c0       	rjmp	.+494    	; 0x1864 <vfprintf+0x68a>
    1676:	84 36       	cpi	r24, 0x64	; 100
    1678:	11 f0       	breq	.+4      	; 0x167e <vfprintf+0x4a4>
    167a:	89 36       	cpi	r24, 0x69	; 105
    167c:	61 f5       	brne	.+88     	; 0x16d6 <vfprintf+0x4fc>
    167e:	56 01       	movw	r10, r12
    1680:	97 fe       	sbrs	r9, 7
    1682:	09 c0       	rjmp	.+18     	; 0x1696 <vfprintf+0x4bc>
    1684:	24 e0       	ldi	r18, 0x04	; 4
    1686:	a2 0e       	add	r10, r18
    1688:	b1 1c       	adc	r11, r1
    168a:	f6 01       	movw	r30, r12
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	0a c0       	rjmp	.+20     	; 0x16aa <vfprintf+0x4d0>
    1696:	f2 e0       	ldi	r31, 0x02	; 2
    1698:	af 0e       	add	r10, r31
    169a:	b1 1c       	adc	r11, r1
    169c:	f6 01       	movw	r30, r12
    169e:	60 81       	ld	r22, Z
    16a0:	71 81       	ldd	r23, Z+1	; 0x01
    16a2:	07 2e       	mov	r0, r23
    16a4:	00 0c       	add	r0, r0
    16a6:	88 0b       	sbc	r24, r24
    16a8:	99 0b       	sbc	r25, r25
    16aa:	f9 2d       	mov	r31, r9
    16ac:	ff 76       	andi	r31, 0x6F	; 111
    16ae:	9f 2e       	mov	r9, r31
    16b0:	97 ff       	sbrs	r25, 7
    16b2:	09 c0       	rjmp	.+18     	; 0x16c6 <vfprintf+0x4ec>
    16b4:	90 95       	com	r25
    16b6:	80 95       	com	r24
    16b8:	70 95       	com	r23
    16ba:	61 95       	neg	r22
    16bc:	7f 4f       	sbci	r23, 0xFF	; 255
    16be:	8f 4f       	sbci	r24, 0xFF	; 255
    16c0:	9f 4f       	sbci	r25, 0xFF	; 255
    16c2:	f0 68       	ori	r31, 0x80	; 128
    16c4:	9f 2e       	mov	r9, r31
    16c6:	2a e0       	ldi	r18, 0x0A	; 10
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	a3 01       	movw	r20, r6
    16cc:	0e 94 18 10 	call	0x2030	; 0x2030 <__ultoa_invert>
    16d0:	c8 2e       	mov	r12, r24
    16d2:	c6 18       	sub	r12, r6
    16d4:	3f c0       	rjmp	.+126    	; 0x1754 <vfprintf+0x57a>
    16d6:	09 2d       	mov	r16, r9
    16d8:	85 37       	cpi	r24, 0x75	; 117
    16da:	21 f4       	brne	.+8      	; 0x16e4 <vfprintf+0x50a>
    16dc:	0f 7e       	andi	r16, 0xEF	; 239
    16de:	2a e0       	ldi	r18, 0x0A	; 10
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	1d c0       	rjmp	.+58     	; 0x171e <vfprintf+0x544>
    16e4:	09 7f       	andi	r16, 0xF9	; 249
    16e6:	8f 36       	cpi	r24, 0x6F	; 111
    16e8:	91 f0       	breq	.+36     	; 0x170e <vfprintf+0x534>
    16ea:	18 f4       	brcc	.+6      	; 0x16f2 <vfprintf+0x518>
    16ec:	88 35       	cpi	r24, 0x58	; 88
    16ee:	59 f0       	breq	.+22     	; 0x1706 <vfprintf+0x52c>
    16f0:	c3 c0       	rjmp	.+390    	; 0x1878 <vfprintf+0x69e>
    16f2:	80 37       	cpi	r24, 0x70	; 112
    16f4:	19 f0       	breq	.+6      	; 0x16fc <vfprintf+0x522>
    16f6:	88 37       	cpi	r24, 0x78	; 120
    16f8:	11 f0       	breq	.+4      	; 0x16fe <vfprintf+0x524>
    16fa:	be c0       	rjmp	.+380    	; 0x1878 <vfprintf+0x69e>
    16fc:	00 61       	ori	r16, 0x10	; 16
    16fe:	04 ff       	sbrs	r16, 4
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <vfprintf+0x53a>
    1702:	04 60       	ori	r16, 0x04	; 4
    1704:	07 c0       	rjmp	.+14     	; 0x1714 <vfprintf+0x53a>
    1706:	94 fe       	sbrs	r9, 4
    1708:	08 c0       	rjmp	.+16     	; 0x171a <vfprintf+0x540>
    170a:	06 60       	ori	r16, 0x06	; 6
    170c:	06 c0       	rjmp	.+12     	; 0x171a <vfprintf+0x540>
    170e:	28 e0       	ldi	r18, 0x08	; 8
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	05 c0       	rjmp	.+10     	; 0x171e <vfprintf+0x544>
    1714:	20 e1       	ldi	r18, 0x10	; 16
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	02 c0       	rjmp	.+4      	; 0x171e <vfprintf+0x544>
    171a:	20 e1       	ldi	r18, 0x10	; 16
    171c:	32 e0       	ldi	r19, 0x02	; 2
    171e:	56 01       	movw	r10, r12
    1720:	07 ff       	sbrs	r16, 7
    1722:	09 c0       	rjmp	.+18     	; 0x1736 <vfprintf+0x55c>
    1724:	84 e0       	ldi	r24, 0x04	; 4
    1726:	a8 0e       	add	r10, r24
    1728:	b1 1c       	adc	r11, r1
    172a:	f6 01       	movw	r30, r12
    172c:	60 81       	ld	r22, Z
    172e:	71 81       	ldd	r23, Z+1	; 0x01
    1730:	82 81       	ldd	r24, Z+2	; 0x02
    1732:	93 81       	ldd	r25, Z+3	; 0x03
    1734:	08 c0       	rjmp	.+16     	; 0x1746 <vfprintf+0x56c>
    1736:	f2 e0       	ldi	r31, 0x02	; 2
    1738:	af 0e       	add	r10, r31
    173a:	b1 1c       	adc	r11, r1
    173c:	f6 01       	movw	r30, r12
    173e:	60 81       	ld	r22, Z
    1740:	71 81       	ldd	r23, Z+1	; 0x01
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	a3 01       	movw	r20, r6
    1748:	0e 94 18 10 	call	0x2030	; 0x2030 <__ultoa_invert>
    174c:	c8 2e       	mov	r12, r24
    174e:	c6 18       	sub	r12, r6
    1750:	0f 77       	andi	r16, 0x7F	; 127
    1752:	90 2e       	mov	r9, r16
    1754:	96 fe       	sbrs	r9, 6
    1756:	0b c0       	rjmp	.+22     	; 0x176e <vfprintf+0x594>
    1758:	09 2d       	mov	r16, r9
    175a:	0e 7f       	andi	r16, 0xFE	; 254
    175c:	c1 16       	cp	r12, r17
    175e:	50 f4       	brcc	.+20     	; 0x1774 <vfprintf+0x59a>
    1760:	94 fe       	sbrs	r9, 4
    1762:	0a c0       	rjmp	.+20     	; 0x1778 <vfprintf+0x59e>
    1764:	92 fc       	sbrc	r9, 2
    1766:	08 c0       	rjmp	.+16     	; 0x1778 <vfprintf+0x59e>
    1768:	09 2d       	mov	r16, r9
    176a:	0e 7e       	andi	r16, 0xEE	; 238
    176c:	05 c0       	rjmp	.+10     	; 0x1778 <vfprintf+0x59e>
    176e:	dc 2c       	mov	r13, r12
    1770:	09 2d       	mov	r16, r9
    1772:	03 c0       	rjmp	.+6      	; 0x177a <vfprintf+0x5a0>
    1774:	dc 2c       	mov	r13, r12
    1776:	01 c0       	rjmp	.+2      	; 0x177a <vfprintf+0x5a0>
    1778:	d1 2e       	mov	r13, r17
    177a:	04 ff       	sbrs	r16, 4
    177c:	0d c0       	rjmp	.+26     	; 0x1798 <vfprintf+0x5be>
    177e:	fe 01       	movw	r30, r28
    1780:	ec 0d       	add	r30, r12
    1782:	f1 1d       	adc	r31, r1
    1784:	80 81       	ld	r24, Z
    1786:	80 33       	cpi	r24, 0x30	; 48
    1788:	11 f4       	brne	.+4      	; 0x178e <vfprintf+0x5b4>
    178a:	09 7e       	andi	r16, 0xE9	; 233
    178c:	09 c0       	rjmp	.+18     	; 0x17a0 <vfprintf+0x5c6>
    178e:	02 ff       	sbrs	r16, 2
    1790:	06 c0       	rjmp	.+12     	; 0x179e <vfprintf+0x5c4>
    1792:	d3 94       	inc	r13
    1794:	d3 94       	inc	r13
    1796:	04 c0       	rjmp	.+8      	; 0x17a0 <vfprintf+0x5c6>
    1798:	80 2f       	mov	r24, r16
    179a:	86 78       	andi	r24, 0x86	; 134
    179c:	09 f0       	breq	.+2      	; 0x17a0 <vfprintf+0x5c6>
    179e:	d3 94       	inc	r13
    17a0:	03 fd       	sbrc	r16, 3
    17a2:	11 c0       	rjmp	.+34     	; 0x17c6 <vfprintf+0x5ec>
    17a4:	00 ff       	sbrs	r16, 0
    17a6:	06 c0       	rjmp	.+12     	; 0x17b4 <vfprintf+0x5da>
    17a8:	1c 2d       	mov	r17, r12
    17aa:	d5 14       	cp	r13, r5
    17ac:	80 f4       	brcc	.+32     	; 0x17ce <vfprintf+0x5f4>
    17ae:	15 0d       	add	r17, r5
    17b0:	1d 19       	sub	r17, r13
    17b2:	0d c0       	rjmp	.+26     	; 0x17ce <vfprintf+0x5f4>
    17b4:	d5 14       	cp	r13, r5
    17b6:	58 f4       	brcc	.+22     	; 0x17ce <vfprintf+0x5f4>
    17b8:	b7 01       	movw	r22, r14
    17ba:	80 e2       	ldi	r24, 0x20	; 32
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    17c2:	d3 94       	inc	r13
    17c4:	f7 cf       	rjmp	.-18     	; 0x17b4 <vfprintf+0x5da>
    17c6:	d5 14       	cp	r13, r5
    17c8:	10 f4       	brcc	.+4      	; 0x17ce <vfprintf+0x5f4>
    17ca:	5d 18       	sub	r5, r13
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <vfprintf+0x5f6>
    17ce:	51 2c       	mov	r5, r1
    17d0:	04 ff       	sbrs	r16, 4
    17d2:	10 c0       	rjmp	.+32     	; 0x17f4 <vfprintf+0x61a>
    17d4:	b7 01       	movw	r22, r14
    17d6:	80 e3       	ldi	r24, 0x30	; 48
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    17de:	02 ff       	sbrs	r16, 2
    17e0:	17 c0       	rjmp	.+46     	; 0x1810 <vfprintf+0x636>
    17e2:	01 fd       	sbrc	r16, 1
    17e4:	03 c0       	rjmp	.+6      	; 0x17ec <vfprintf+0x612>
    17e6:	88 e7       	ldi	r24, 0x78	; 120
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <vfprintf+0x616>
    17ec:	88 e5       	ldi	r24, 0x58	; 88
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	b7 01       	movw	r22, r14
    17f2:	0c c0       	rjmp	.+24     	; 0x180c <vfprintf+0x632>
    17f4:	80 2f       	mov	r24, r16
    17f6:	86 78       	andi	r24, 0x86	; 134
    17f8:	59 f0       	breq	.+22     	; 0x1810 <vfprintf+0x636>
    17fa:	01 ff       	sbrs	r16, 1
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <vfprintf+0x628>
    17fe:	8b e2       	ldi	r24, 0x2B	; 43
    1800:	01 c0       	rjmp	.+2      	; 0x1804 <vfprintf+0x62a>
    1802:	80 e2       	ldi	r24, 0x20	; 32
    1804:	07 fd       	sbrc	r16, 7
    1806:	8d e2       	ldi	r24, 0x2D	; 45
    1808:	b7 01       	movw	r22, r14
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    1810:	c1 16       	cp	r12, r17
    1812:	38 f4       	brcc	.+14     	; 0x1822 <vfprintf+0x648>
    1814:	b7 01       	movw	r22, r14
    1816:	80 e3       	ldi	r24, 0x30	; 48
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    181e:	11 50       	subi	r17, 0x01	; 1
    1820:	f7 cf       	rjmp	.-18     	; 0x1810 <vfprintf+0x636>
    1822:	ca 94       	dec	r12
    1824:	f3 01       	movw	r30, r6
    1826:	ec 0d       	add	r30, r12
    1828:	f1 1d       	adc	r31, r1
    182a:	80 81       	ld	r24, Z
    182c:	b7 01       	movw	r22, r14
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    1834:	c1 10       	cpse	r12, r1
    1836:	f5 cf       	rjmp	.-22     	; 0x1822 <vfprintf+0x648>
    1838:	15 c0       	rjmp	.+42     	; 0x1864 <vfprintf+0x68a>
    183a:	f4 e0       	ldi	r31, 0x04	; 4
    183c:	f5 15       	cp	r31, r5
    183e:	60 f5       	brcc	.+88     	; 0x1898 <vfprintf+0x6be>
    1840:	84 e0       	ldi	r24, 0x04	; 4
    1842:	58 1a       	sub	r5, r24
    1844:	93 fe       	sbrs	r9, 3
    1846:	1f c0       	rjmp	.+62     	; 0x1886 <vfprintf+0x6ac>
    1848:	01 11       	cpse	r16, r1
    184a:	27 c0       	rjmp	.+78     	; 0x189a <vfprintf+0x6c0>
    184c:	2c 85       	ldd	r18, Y+12	; 0x0c
    184e:	23 ff       	sbrs	r18, 3
    1850:	2a c0       	rjmp	.+84     	; 0x18a6 <vfprintf+0x6cc>
    1852:	0c ec       	ldi	r16, 0xCC	; 204
    1854:	10 e0       	ldi	r17, 0x00	; 0
    1856:	39 2d       	mov	r19, r9
    1858:	30 71       	andi	r19, 0x10	; 16
    185a:	93 2e       	mov	r9, r19
    185c:	f8 01       	movw	r30, r16
    185e:	84 91       	lpm	r24, Z
    1860:	81 11       	cpse	r24, r1
    1862:	24 c0       	rjmp	.+72     	; 0x18ac <vfprintf+0x6d2>
    1864:	55 20       	and	r5, r5
    1866:	09 f4       	brne	.+2      	; 0x186a <vfprintf+0x690>
    1868:	e4 cc       	rjmp	.-1592   	; 0x1232 <vfprintf+0x58>
    186a:	b7 01       	movw	r22, r14
    186c:	80 e2       	ldi	r24, 0x20	; 32
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    1874:	5a 94       	dec	r5
    1876:	f6 cf       	rjmp	.-20     	; 0x1864 <vfprintf+0x68a>
    1878:	f7 01       	movw	r30, r14
    187a:	86 81       	ldd	r24, Z+6	; 0x06
    187c:	97 81       	ldd	r25, Z+7	; 0x07
    187e:	26 c0       	rjmp	.+76     	; 0x18cc <vfprintf+0x6f2>
    1880:	8f ef       	ldi	r24, 0xFF	; 255
    1882:	9f ef       	ldi	r25, 0xFF	; 255
    1884:	23 c0       	rjmp	.+70     	; 0x18cc <vfprintf+0x6f2>
    1886:	b7 01       	movw	r22, r14
    1888:	80 e2       	ldi	r24, 0x20	; 32
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    1890:	5a 94       	dec	r5
    1892:	51 10       	cpse	r5, r1
    1894:	f8 cf       	rjmp	.-16     	; 0x1886 <vfprintf+0x6ac>
    1896:	d8 cf       	rjmp	.-80     	; 0x1848 <vfprintf+0x66e>
    1898:	51 2c       	mov	r5, r1
    189a:	b7 01       	movw	r22, r14
    189c:	80 2f       	mov	r24, r16
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    18a4:	d3 cf       	rjmp	.-90     	; 0x184c <vfprintf+0x672>
    18a6:	00 ed       	ldi	r16, 0xD0	; 208
    18a8:	10 e0       	ldi	r17, 0x00	; 0
    18aa:	d5 cf       	rjmp	.-86     	; 0x1856 <vfprintf+0x67c>
    18ac:	91 10       	cpse	r9, r1
    18ae:	80 52       	subi	r24, 0x20	; 32
    18b0:	b7 01       	movw	r22, r14
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    18b8:	0f 5f       	subi	r16, 0xFF	; 255
    18ba:	1f 4f       	sbci	r17, 0xFF	; 255
    18bc:	cf cf       	rjmp	.-98     	; 0x185c <vfprintf+0x682>
    18be:	23 e0       	ldi	r18, 0x03	; 3
    18c0:	25 15       	cp	r18, r5
    18c2:	10 f4       	brcc	.+4      	; 0x18c8 <vfprintf+0x6ee>
    18c4:	83 e0       	ldi	r24, 0x03	; 3
    18c6:	bd cf       	rjmp	.-134    	; 0x1842 <vfprintf+0x668>
    18c8:	51 2c       	mov	r5, r1
    18ca:	c0 cf       	rjmp	.-128    	; 0x184c <vfprintf+0x672>
    18cc:	60 96       	adiw	r28, 0x10	; 16
    18ce:	e2 e1       	ldi	r30, 0x12	; 18
    18d0:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <__epilogue_restores__>

000018d4 <__udivmodsi4>:
    18d4:	a1 e2       	ldi	r26, 0x21	; 33
    18d6:	1a 2e       	mov	r1, r26
    18d8:	aa 1b       	sub	r26, r26
    18da:	bb 1b       	sub	r27, r27
    18dc:	fd 01       	movw	r30, r26
    18de:	0d c0       	rjmp	.+26     	; 0x18fa <__udivmodsi4_ep>

000018e0 <__udivmodsi4_loop>:
    18e0:	aa 1f       	adc	r26, r26
    18e2:	bb 1f       	adc	r27, r27
    18e4:	ee 1f       	adc	r30, r30
    18e6:	ff 1f       	adc	r31, r31
    18e8:	a2 17       	cp	r26, r18
    18ea:	b3 07       	cpc	r27, r19
    18ec:	e4 07       	cpc	r30, r20
    18ee:	f5 07       	cpc	r31, r21
    18f0:	20 f0       	brcs	.+8      	; 0x18fa <__udivmodsi4_ep>
    18f2:	a2 1b       	sub	r26, r18
    18f4:	b3 0b       	sbc	r27, r19
    18f6:	e4 0b       	sbc	r30, r20
    18f8:	f5 0b       	sbc	r31, r21

000018fa <__udivmodsi4_ep>:
    18fa:	66 1f       	adc	r22, r22
    18fc:	77 1f       	adc	r23, r23
    18fe:	88 1f       	adc	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	1a 94       	dec	r1
    1904:	69 f7       	brne	.-38     	; 0x18e0 <__udivmodsi4_loop>
    1906:	60 95       	com	r22
    1908:	70 95       	com	r23
    190a:	80 95       	com	r24
    190c:	90 95       	com	r25
    190e:	9b 01       	movw	r18, r22
    1910:	ac 01       	movw	r20, r24
    1912:	bd 01       	movw	r22, r26
    1914:	cf 01       	movw	r24, r30
    1916:	08 95       	ret

00001918 <__prologue_saves__>:
    1918:	2f 92       	push	r2
    191a:	3f 92       	push	r3
    191c:	4f 92       	push	r4
    191e:	5f 92       	push	r5
    1920:	6f 92       	push	r6
    1922:	7f 92       	push	r7
    1924:	8f 92       	push	r8
    1926:	9f 92       	push	r9
    1928:	af 92       	push	r10
    192a:	bf 92       	push	r11
    192c:	cf 92       	push	r12
    192e:	df 92       	push	r13
    1930:	ef 92       	push	r14
    1932:	ff 92       	push	r15
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	ca 1b       	sub	r28, r26
    1942:	db 0b       	sbc	r29, r27
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	09 94       	ijmp

00001950 <__epilogue_restores__>:
    1950:	2a 88       	ldd	r2, Y+18	; 0x12
    1952:	39 88       	ldd	r3, Y+17	; 0x11
    1954:	48 88       	ldd	r4, Y+16	; 0x10
    1956:	5f 84       	ldd	r5, Y+15	; 0x0f
    1958:	6e 84       	ldd	r6, Y+14	; 0x0e
    195a:	7d 84       	ldd	r7, Y+13	; 0x0d
    195c:	8c 84       	ldd	r8, Y+12	; 0x0c
    195e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1960:	aa 84       	ldd	r10, Y+10	; 0x0a
    1962:	b9 84       	ldd	r11, Y+9	; 0x09
    1964:	c8 84       	ldd	r12, Y+8	; 0x08
    1966:	df 80       	ldd	r13, Y+7	; 0x07
    1968:	ee 80       	ldd	r14, Y+6	; 0x06
    196a:	fd 80       	ldd	r15, Y+5	; 0x05
    196c:	0c 81       	ldd	r16, Y+4	; 0x04
    196e:	1b 81       	ldd	r17, Y+3	; 0x03
    1970:	aa 81       	ldd	r26, Y+2	; 0x02
    1972:	b9 81       	ldd	r27, Y+1	; 0x01
    1974:	ce 0f       	add	r28, r30
    1976:	d1 1d       	adc	r29, r1
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	ed 01       	movw	r28, r26
    1984:	08 95       	ret

00001986 <__divsf3>:
    1986:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__divsf3x>
    198a:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_round>
    198e:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__fp_pscB>
    1992:	58 f0       	brcs	.+22     	; 0x19aa <__divsf3+0x24>
    1994:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__fp_pscA>
    1998:	40 f0       	brcs	.+16     	; 0x19aa <__divsf3+0x24>
    199a:	29 f4       	brne	.+10     	; 0x19a6 <__divsf3+0x20>
    199c:	5f 3f       	cpi	r21, 0xFF	; 255
    199e:	29 f0       	breq	.+10     	; 0x19aa <__divsf3+0x24>
    19a0:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_inf>
    19a4:	51 11       	cpse	r21, r1
    19a6:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__fp_szero>
    19aa:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__fp_nan>

000019ae <__divsf3x>:
    19ae:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__fp_split3>
    19b2:	68 f3       	brcs	.-38     	; 0x198e <__divsf3+0x8>

000019b4 <__divsf3_pse>:
    19b4:	99 23       	and	r25, r25
    19b6:	b1 f3       	breq	.-20     	; 0x19a4 <__divsf3+0x1e>
    19b8:	55 23       	and	r21, r21
    19ba:	91 f3       	breq	.-28     	; 0x19a0 <__divsf3+0x1a>
    19bc:	95 1b       	sub	r25, r21
    19be:	55 0b       	sbc	r21, r21
    19c0:	bb 27       	eor	r27, r27
    19c2:	aa 27       	eor	r26, r26
    19c4:	62 17       	cp	r22, r18
    19c6:	73 07       	cpc	r23, r19
    19c8:	84 07       	cpc	r24, r20
    19ca:	38 f0       	brcs	.+14     	; 0x19da <__divsf3_pse+0x26>
    19cc:	9f 5f       	subi	r25, 0xFF	; 255
    19ce:	5f 4f       	sbci	r21, 0xFF	; 255
    19d0:	22 0f       	add	r18, r18
    19d2:	33 1f       	adc	r19, r19
    19d4:	44 1f       	adc	r20, r20
    19d6:	aa 1f       	adc	r26, r26
    19d8:	a9 f3       	breq	.-22     	; 0x19c4 <__divsf3_pse+0x10>
    19da:	35 d0       	rcall	.+106    	; 0x1a46 <__divsf3_pse+0x92>
    19dc:	0e 2e       	mov	r0, r30
    19de:	3a f0       	brmi	.+14     	; 0x19ee <__divsf3_pse+0x3a>
    19e0:	e0 e8       	ldi	r30, 0x80	; 128
    19e2:	32 d0       	rcall	.+100    	; 0x1a48 <__divsf3_pse+0x94>
    19e4:	91 50       	subi	r25, 0x01	; 1
    19e6:	50 40       	sbci	r21, 0x00	; 0
    19e8:	e6 95       	lsr	r30
    19ea:	00 1c       	adc	r0, r0
    19ec:	ca f7       	brpl	.-14     	; 0x19e0 <__divsf3_pse+0x2c>
    19ee:	2b d0       	rcall	.+86     	; 0x1a46 <__divsf3_pse+0x92>
    19f0:	fe 2f       	mov	r31, r30
    19f2:	29 d0       	rcall	.+82     	; 0x1a46 <__divsf3_pse+0x92>
    19f4:	66 0f       	add	r22, r22
    19f6:	77 1f       	adc	r23, r23
    19f8:	88 1f       	adc	r24, r24
    19fa:	bb 1f       	adc	r27, r27
    19fc:	26 17       	cp	r18, r22
    19fe:	37 07       	cpc	r19, r23
    1a00:	48 07       	cpc	r20, r24
    1a02:	ab 07       	cpc	r26, r27
    1a04:	b0 e8       	ldi	r27, 0x80	; 128
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <__divsf3_pse+0x56>
    1a08:	bb 0b       	sbc	r27, r27
    1a0a:	80 2d       	mov	r24, r0
    1a0c:	bf 01       	movw	r22, r30
    1a0e:	ff 27       	eor	r31, r31
    1a10:	93 58       	subi	r25, 0x83	; 131
    1a12:	5f 4f       	sbci	r21, 0xFF	; 255
    1a14:	3a f0       	brmi	.+14     	; 0x1a24 <__divsf3_pse+0x70>
    1a16:	9e 3f       	cpi	r25, 0xFE	; 254
    1a18:	51 05       	cpc	r21, r1
    1a1a:	78 f0       	brcs	.+30     	; 0x1a3a <__divsf3_pse+0x86>
    1a1c:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_inf>
    1a20:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__fp_szero>
    1a24:	5f 3f       	cpi	r21, 0xFF	; 255
    1a26:	e4 f3       	brlt	.-8      	; 0x1a20 <__divsf3_pse+0x6c>
    1a28:	98 3e       	cpi	r25, 0xE8	; 232
    1a2a:	d4 f3       	brlt	.-12     	; 0x1a20 <__divsf3_pse+0x6c>
    1a2c:	86 95       	lsr	r24
    1a2e:	77 95       	ror	r23
    1a30:	67 95       	ror	r22
    1a32:	b7 95       	ror	r27
    1a34:	f7 95       	ror	r31
    1a36:	9f 5f       	subi	r25, 0xFF	; 255
    1a38:	c9 f7       	brne	.-14     	; 0x1a2c <__divsf3_pse+0x78>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	91 1d       	adc	r25, r1
    1a3e:	96 95       	lsr	r25
    1a40:	87 95       	ror	r24
    1a42:	97 f9       	bld	r25, 7
    1a44:	08 95       	ret
    1a46:	e1 e0       	ldi	r30, 0x01	; 1
    1a48:	66 0f       	add	r22, r22
    1a4a:	77 1f       	adc	r23, r23
    1a4c:	88 1f       	adc	r24, r24
    1a4e:	bb 1f       	adc	r27, r27
    1a50:	62 17       	cp	r22, r18
    1a52:	73 07       	cpc	r23, r19
    1a54:	84 07       	cpc	r24, r20
    1a56:	ba 07       	cpc	r27, r26
    1a58:	20 f0       	brcs	.+8      	; 0x1a62 <__divsf3_pse+0xae>
    1a5a:	62 1b       	sub	r22, r18
    1a5c:	73 0b       	sbc	r23, r19
    1a5e:	84 0b       	sbc	r24, r20
    1a60:	ba 0b       	sbc	r27, r26
    1a62:	ee 1f       	adc	r30, r30
    1a64:	88 f7       	brcc	.-30     	; 0x1a48 <__divsf3_pse+0x94>
    1a66:	e0 95       	com	r30
    1a68:	08 95       	ret

00001a6a <__fixsfsi>:
    1a6a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__fixunssfsi>
    1a6e:	68 94       	set
    1a70:	b1 11       	cpse	r27, r1
    1a72:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__fp_szero>
    1a76:	08 95       	ret

00001a78 <__fixunssfsi>:
    1a78:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__fp_splitA>
    1a7c:	88 f0       	brcs	.+34     	; 0x1aa0 <__fixunssfsi+0x28>
    1a7e:	9f 57       	subi	r25, 0x7F	; 127
    1a80:	98 f0       	brcs	.+38     	; 0x1aa8 <__fixunssfsi+0x30>
    1a82:	b9 2f       	mov	r27, r25
    1a84:	99 27       	eor	r25, r25
    1a86:	b7 51       	subi	r27, 0x17	; 23
    1a88:	b0 f0       	brcs	.+44     	; 0x1ab6 <__fixunssfsi+0x3e>
    1a8a:	e1 f0       	breq	.+56     	; 0x1ac4 <__fixunssfsi+0x4c>
    1a8c:	66 0f       	add	r22, r22
    1a8e:	77 1f       	adc	r23, r23
    1a90:	88 1f       	adc	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	1a f0       	brmi	.+6      	; 0x1a9c <__fixunssfsi+0x24>
    1a96:	ba 95       	dec	r27
    1a98:	c9 f7       	brne	.-14     	; 0x1a8c <__fixunssfsi+0x14>
    1a9a:	14 c0       	rjmp	.+40     	; 0x1ac4 <__fixunssfsi+0x4c>
    1a9c:	b1 30       	cpi	r27, 0x01	; 1
    1a9e:	91 f0       	breq	.+36     	; 0x1ac4 <__fixunssfsi+0x4c>
    1aa0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__fp_zero>
    1aa4:	b1 e0       	ldi	r27, 0x01	; 1
    1aa6:	08 95       	ret
    1aa8:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__fp_zero>
    1aac:	67 2f       	mov	r22, r23
    1aae:	78 2f       	mov	r23, r24
    1ab0:	88 27       	eor	r24, r24
    1ab2:	b8 5f       	subi	r27, 0xF8	; 248
    1ab4:	39 f0       	breq	.+14     	; 0x1ac4 <__fixunssfsi+0x4c>
    1ab6:	b9 3f       	cpi	r27, 0xF9	; 249
    1ab8:	cc f3       	brlt	.-14     	; 0x1aac <__fixunssfsi+0x34>
    1aba:	86 95       	lsr	r24
    1abc:	77 95       	ror	r23
    1abe:	67 95       	ror	r22
    1ac0:	b3 95       	inc	r27
    1ac2:	d9 f7       	brne	.-10     	; 0x1aba <__fixunssfsi+0x42>
    1ac4:	3e f4       	brtc	.+14     	; 0x1ad4 <__fixunssfsi+0x5c>
    1ac6:	90 95       	com	r25
    1ac8:	80 95       	com	r24
    1aca:	70 95       	com	r23
    1acc:	61 95       	neg	r22
    1ace:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad4:	08 95       	ret

00001ad6 <__floatunsisf>:
    1ad6:	e8 94       	clt
    1ad8:	09 c0       	rjmp	.+18     	; 0x1aec <__floatsisf+0x12>

00001ada <__floatsisf>:
    1ada:	97 fb       	bst	r25, 7
    1adc:	3e f4       	brtc	.+14     	; 0x1aec <__floatsisf+0x12>
    1ade:	90 95       	com	r25
    1ae0:	80 95       	com	r24
    1ae2:	70 95       	com	r23
    1ae4:	61 95       	neg	r22
    1ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aea:	9f 4f       	sbci	r25, 0xFF	; 255
    1aec:	99 23       	and	r25, r25
    1aee:	a9 f0       	breq	.+42     	; 0x1b1a <__floatsisf+0x40>
    1af0:	f9 2f       	mov	r31, r25
    1af2:	96 e9       	ldi	r25, 0x96	; 150
    1af4:	bb 27       	eor	r27, r27
    1af6:	93 95       	inc	r25
    1af8:	f6 95       	lsr	r31
    1afa:	87 95       	ror	r24
    1afc:	77 95       	ror	r23
    1afe:	67 95       	ror	r22
    1b00:	b7 95       	ror	r27
    1b02:	f1 11       	cpse	r31, r1
    1b04:	f8 cf       	rjmp	.-16     	; 0x1af6 <__floatsisf+0x1c>
    1b06:	fa f4       	brpl	.+62     	; 0x1b46 <__floatsisf+0x6c>
    1b08:	bb 0f       	add	r27, r27
    1b0a:	11 f4       	brne	.+4      	; 0x1b10 <__floatsisf+0x36>
    1b0c:	60 ff       	sbrs	r22, 0
    1b0e:	1b c0       	rjmp	.+54     	; 0x1b46 <__floatsisf+0x6c>
    1b10:	6f 5f       	subi	r22, 0xFF	; 255
    1b12:	7f 4f       	sbci	r23, 0xFF	; 255
    1b14:	8f 4f       	sbci	r24, 0xFF	; 255
    1b16:	9f 4f       	sbci	r25, 0xFF	; 255
    1b18:	16 c0       	rjmp	.+44     	; 0x1b46 <__floatsisf+0x6c>
    1b1a:	88 23       	and	r24, r24
    1b1c:	11 f0       	breq	.+4      	; 0x1b22 <__floatsisf+0x48>
    1b1e:	96 e9       	ldi	r25, 0x96	; 150
    1b20:	11 c0       	rjmp	.+34     	; 0x1b44 <__floatsisf+0x6a>
    1b22:	77 23       	and	r23, r23
    1b24:	21 f0       	breq	.+8      	; 0x1b2e <__floatsisf+0x54>
    1b26:	9e e8       	ldi	r25, 0x8E	; 142
    1b28:	87 2f       	mov	r24, r23
    1b2a:	76 2f       	mov	r23, r22
    1b2c:	05 c0       	rjmp	.+10     	; 0x1b38 <__floatsisf+0x5e>
    1b2e:	66 23       	and	r22, r22
    1b30:	71 f0       	breq	.+28     	; 0x1b4e <__floatsisf+0x74>
    1b32:	96 e8       	ldi	r25, 0x86	; 134
    1b34:	86 2f       	mov	r24, r22
    1b36:	70 e0       	ldi	r23, 0x00	; 0
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	2a f0       	brmi	.+10     	; 0x1b46 <__floatsisf+0x6c>
    1b3c:	9a 95       	dec	r25
    1b3e:	66 0f       	add	r22, r22
    1b40:	77 1f       	adc	r23, r23
    1b42:	88 1f       	adc	r24, r24
    1b44:	da f7       	brpl	.-10     	; 0x1b3c <__floatsisf+0x62>
    1b46:	88 0f       	add	r24, r24
    1b48:	96 95       	lsr	r25
    1b4a:	87 95       	ror	r24
    1b4c:	97 f9       	bld	r25, 7
    1b4e:	08 95       	ret

00001b50 <__fp_inf>:
    1b50:	97 f9       	bld	r25, 7
    1b52:	9f 67       	ori	r25, 0x7F	; 127
    1b54:	80 e8       	ldi	r24, 0x80	; 128
    1b56:	70 e0       	ldi	r23, 0x00	; 0
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	08 95       	ret

00001b5c <__fp_nan>:
    1b5c:	9f ef       	ldi	r25, 0xFF	; 255
    1b5e:	80 ec       	ldi	r24, 0xC0	; 192
    1b60:	08 95       	ret

00001b62 <__fp_pscA>:
    1b62:	00 24       	eor	r0, r0
    1b64:	0a 94       	dec	r0
    1b66:	16 16       	cp	r1, r22
    1b68:	17 06       	cpc	r1, r23
    1b6a:	18 06       	cpc	r1, r24
    1b6c:	09 06       	cpc	r0, r25
    1b6e:	08 95       	ret

00001b70 <__fp_pscB>:
    1b70:	00 24       	eor	r0, r0
    1b72:	0a 94       	dec	r0
    1b74:	12 16       	cp	r1, r18
    1b76:	13 06       	cpc	r1, r19
    1b78:	14 06       	cpc	r1, r20
    1b7a:	05 06       	cpc	r0, r21
    1b7c:	08 95       	ret

00001b7e <__fp_round>:
    1b7e:	09 2e       	mov	r0, r25
    1b80:	03 94       	inc	r0
    1b82:	00 0c       	add	r0, r0
    1b84:	11 f4       	brne	.+4      	; 0x1b8a <__fp_round+0xc>
    1b86:	88 23       	and	r24, r24
    1b88:	52 f0       	brmi	.+20     	; 0x1b9e <__fp_round+0x20>
    1b8a:	bb 0f       	add	r27, r27
    1b8c:	40 f4       	brcc	.+16     	; 0x1b9e <__fp_round+0x20>
    1b8e:	bf 2b       	or	r27, r31
    1b90:	11 f4       	brne	.+4      	; 0x1b96 <__fp_round+0x18>
    1b92:	60 ff       	sbrs	r22, 0
    1b94:	04 c0       	rjmp	.+8      	; 0x1b9e <__fp_round+0x20>
    1b96:	6f 5f       	subi	r22, 0xFF	; 255
    1b98:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9e:	08 95       	ret

00001ba0 <__fp_split3>:
    1ba0:	57 fd       	sbrc	r21, 7
    1ba2:	90 58       	subi	r25, 0x80	; 128
    1ba4:	44 0f       	add	r20, r20
    1ba6:	55 1f       	adc	r21, r21
    1ba8:	59 f0       	breq	.+22     	; 0x1bc0 <__fp_splitA+0x10>
    1baa:	5f 3f       	cpi	r21, 0xFF	; 255
    1bac:	71 f0       	breq	.+28     	; 0x1bca <__fp_splitA+0x1a>
    1bae:	47 95       	ror	r20

00001bb0 <__fp_splitA>:
    1bb0:	88 0f       	add	r24, r24
    1bb2:	97 fb       	bst	r25, 7
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	61 f0       	breq	.+24     	; 0x1bd0 <__fp_splitA+0x20>
    1bb8:	9f 3f       	cpi	r25, 0xFF	; 255
    1bba:	79 f0       	breq	.+30     	; 0x1bda <__fp_splitA+0x2a>
    1bbc:	87 95       	ror	r24
    1bbe:	08 95       	ret
    1bc0:	12 16       	cp	r1, r18
    1bc2:	13 06       	cpc	r1, r19
    1bc4:	14 06       	cpc	r1, r20
    1bc6:	55 1f       	adc	r21, r21
    1bc8:	f2 cf       	rjmp	.-28     	; 0x1bae <__fp_split3+0xe>
    1bca:	46 95       	lsr	r20
    1bcc:	f1 df       	rcall	.-30     	; 0x1bb0 <__fp_splitA>
    1bce:	08 c0       	rjmp	.+16     	; 0x1be0 <__fp_splitA+0x30>
    1bd0:	16 16       	cp	r1, r22
    1bd2:	17 06       	cpc	r1, r23
    1bd4:	18 06       	cpc	r1, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	f1 cf       	rjmp	.-30     	; 0x1bbc <__fp_splitA+0xc>
    1bda:	86 95       	lsr	r24
    1bdc:	71 05       	cpc	r23, r1
    1bde:	61 05       	cpc	r22, r1
    1be0:	08 94       	sec
    1be2:	08 95       	ret

00001be4 <__fp_zero>:
    1be4:	e8 94       	clt

00001be6 <__fp_szero>:
    1be6:	bb 27       	eor	r27, r27
    1be8:	66 27       	eor	r22, r22
    1bea:	77 27       	eor	r23, r23
    1bec:	cb 01       	movw	r24, r22
    1bee:	97 f9       	bld	r25, 7
    1bf0:	08 95       	ret

00001bf2 <__mulsf3>:
    1bf2:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__mulsf3x>
    1bf6:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_round>
    1bfa:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__fp_pscA>
    1bfe:	38 f0       	brcs	.+14     	; 0x1c0e <__mulsf3+0x1c>
    1c00:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__fp_pscB>
    1c04:	20 f0       	brcs	.+8      	; 0x1c0e <__mulsf3+0x1c>
    1c06:	95 23       	and	r25, r21
    1c08:	11 f0       	breq	.+4      	; 0x1c0e <__mulsf3+0x1c>
    1c0a:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_inf>
    1c0e:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__fp_nan>
    1c12:	11 24       	eor	r1, r1
    1c14:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__fp_szero>

00001c18 <__mulsf3x>:
    1c18:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__fp_split3>
    1c1c:	70 f3       	brcs	.-36     	; 0x1bfa <__mulsf3+0x8>

00001c1e <__mulsf3_pse>:
    1c1e:	95 9f       	mul	r25, r21
    1c20:	c1 f3       	breq	.-16     	; 0x1c12 <__mulsf3+0x20>
    1c22:	95 0f       	add	r25, r21
    1c24:	50 e0       	ldi	r21, 0x00	; 0
    1c26:	55 1f       	adc	r21, r21
    1c28:	62 9f       	mul	r22, r18
    1c2a:	f0 01       	movw	r30, r0
    1c2c:	72 9f       	mul	r23, r18
    1c2e:	bb 27       	eor	r27, r27
    1c30:	f0 0d       	add	r31, r0
    1c32:	b1 1d       	adc	r27, r1
    1c34:	63 9f       	mul	r22, r19
    1c36:	aa 27       	eor	r26, r26
    1c38:	f0 0d       	add	r31, r0
    1c3a:	b1 1d       	adc	r27, r1
    1c3c:	aa 1f       	adc	r26, r26
    1c3e:	64 9f       	mul	r22, r20
    1c40:	66 27       	eor	r22, r22
    1c42:	b0 0d       	add	r27, r0
    1c44:	a1 1d       	adc	r26, r1
    1c46:	66 1f       	adc	r22, r22
    1c48:	82 9f       	mul	r24, r18
    1c4a:	22 27       	eor	r18, r18
    1c4c:	b0 0d       	add	r27, r0
    1c4e:	a1 1d       	adc	r26, r1
    1c50:	62 1f       	adc	r22, r18
    1c52:	73 9f       	mul	r23, r19
    1c54:	b0 0d       	add	r27, r0
    1c56:	a1 1d       	adc	r26, r1
    1c58:	62 1f       	adc	r22, r18
    1c5a:	83 9f       	mul	r24, r19
    1c5c:	a0 0d       	add	r26, r0
    1c5e:	61 1d       	adc	r22, r1
    1c60:	22 1f       	adc	r18, r18
    1c62:	74 9f       	mul	r23, r20
    1c64:	33 27       	eor	r19, r19
    1c66:	a0 0d       	add	r26, r0
    1c68:	61 1d       	adc	r22, r1
    1c6a:	23 1f       	adc	r18, r19
    1c6c:	84 9f       	mul	r24, r20
    1c6e:	60 0d       	add	r22, r0
    1c70:	21 1d       	adc	r18, r1
    1c72:	82 2f       	mov	r24, r18
    1c74:	76 2f       	mov	r23, r22
    1c76:	6a 2f       	mov	r22, r26
    1c78:	11 24       	eor	r1, r1
    1c7a:	9f 57       	subi	r25, 0x7F	; 127
    1c7c:	50 40       	sbci	r21, 0x00	; 0
    1c7e:	9a f0       	brmi	.+38     	; 0x1ca6 <__mulsf3_pse+0x88>
    1c80:	f1 f0       	breq	.+60     	; 0x1cbe <__mulsf3_pse+0xa0>
    1c82:	88 23       	and	r24, r24
    1c84:	4a f0       	brmi	.+18     	; 0x1c98 <__mulsf3_pse+0x7a>
    1c86:	ee 0f       	add	r30, r30
    1c88:	ff 1f       	adc	r31, r31
    1c8a:	bb 1f       	adc	r27, r27
    1c8c:	66 1f       	adc	r22, r22
    1c8e:	77 1f       	adc	r23, r23
    1c90:	88 1f       	adc	r24, r24
    1c92:	91 50       	subi	r25, 0x01	; 1
    1c94:	50 40       	sbci	r21, 0x00	; 0
    1c96:	a9 f7       	brne	.-22     	; 0x1c82 <__mulsf3_pse+0x64>
    1c98:	9e 3f       	cpi	r25, 0xFE	; 254
    1c9a:	51 05       	cpc	r21, r1
    1c9c:	80 f0       	brcs	.+32     	; 0x1cbe <__mulsf3_pse+0xa0>
    1c9e:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_inf>
    1ca2:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__fp_szero>
    1ca6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ca8:	e4 f3       	brlt	.-8      	; 0x1ca2 <__mulsf3_pse+0x84>
    1caa:	98 3e       	cpi	r25, 0xE8	; 232
    1cac:	d4 f3       	brlt	.-12     	; 0x1ca2 <__mulsf3_pse+0x84>
    1cae:	86 95       	lsr	r24
    1cb0:	77 95       	ror	r23
    1cb2:	67 95       	ror	r22
    1cb4:	b7 95       	ror	r27
    1cb6:	f7 95       	ror	r31
    1cb8:	e7 95       	ror	r30
    1cba:	9f 5f       	subi	r25, 0xFF	; 255
    1cbc:	c1 f7       	brne	.-16     	; 0x1cae <__mulsf3_pse+0x90>
    1cbe:	fe 2b       	or	r31, r30
    1cc0:	88 0f       	add	r24, r24
    1cc2:	91 1d       	adc	r25, r1
    1cc4:	96 95       	lsr	r25
    1cc6:	87 95       	ror	r24
    1cc8:	97 f9       	bld	r25, 7
    1cca:	08 95       	ret

00001ccc <__ftoa_engine>:
    1ccc:	28 30       	cpi	r18, 0x08	; 8
    1cce:	08 f0       	brcs	.+2      	; 0x1cd2 <__ftoa_engine+0x6>
    1cd0:	27 e0       	ldi	r18, 0x07	; 7
    1cd2:	33 27       	eor	r19, r19
    1cd4:	da 01       	movw	r26, r20
    1cd6:	99 0f       	add	r25, r25
    1cd8:	31 1d       	adc	r19, r1
    1cda:	87 fd       	sbrc	r24, 7
    1cdc:	91 60       	ori	r25, 0x01	; 1
    1cde:	00 96       	adiw	r24, 0x00	; 0
    1ce0:	61 05       	cpc	r22, r1
    1ce2:	71 05       	cpc	r23, r1
    1ce4:	39 f4       	brne	.+14     	; 0x1cf4 <__ftoa_engine+0x28>
    1ce6:	32 60       	ori	r19, 0x02	; 2
    1ce8:	2e 5f       	subi	r18, 0xFE	; 254
    1cea:	3d 93       	st	X+, r19
    1cec:	30 e3       	ldi	r19, 0x30	; 48
    1cee:	2a 95       	dec	r18
    1cf0:	e1 f7       	brne	.-8      	; 0x1cea <__ftoa_engine+0x1e>
    1cf2:	08 95       	ret
    1cf4:	9f 3f       	cpi	r25, 0xFF	; 255
    1cf6:	30 f0       	brcs	.+12     	; 0x1d04 <__ftoa_engine+0x38>
    1cf8:	80 38       	cpi	r24, 0x80	; 128
    1cfa:	71 05       	cpc	r23, r1
    1cfc:	61 05       	cpc	r22, r1
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <__ftoa_engine+0x36>
    1d00:	3c 5f       	subi	r19, 0xFC	; 252
    1d02:	3c 5f       	subi	r19, 0xFC	; 252
    1d04:	3d 93       	st	X+, r19
    1d06:	91 30       	cpi	r25, 0x01	; 1
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <__ftoa_engine+0x40>
    1d0a:	80 68       	ori	r24, 0x80	; 128
    1d0c:	91 1d       	adc	r25, r1
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	1f 93       	push	r17
    1d14:	0f 93       	push	r16
    1d16:	ff 92       	push	r15
    1d18:	ef 92       	push	r14
    1d1a:	19 2f       	mov	r17, r25
    1d1c:	98 7f       	andi	r25, 0xF8	; 248
    1d1e:	96 95       	lsr	r25
    1d20:	e9 2f       	mov	r30, r25
    1d22:	96 95       	lsr	r25
    1d24:	96 95       	lsr	r25
    1d26:	e9 0f       	add	r30, r25
    1d28:	ff 27       	eor	r31, r31
    1d2a:	e2 5d       	subi	r30, 0xD2	; 210
    1d2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d2e:	99 27       	eor	r25, r25
    1d30:	33 27       	eor	r19, r19
    1d32:	ee 24       	eor	r14, r14
    1d34:	ff 24       	eor	r15, r15
    1d36:	a7 01       	movw	r20, r14
    1d38:	e7 01       	movw	r28, r14
    1d3a:	05 90       	lpm	r0, Z+
    1d3c:	08 94       	sec
    1d3e:	07 94       	ror	r0
    1d40:	28 f4       	brcc	.+10     	; 0x1d4c <__ftoa_engine+0x80>
    1d42:	36 0f       	add	r19, r22
    1d44:	e7 1e       	adc	r14, r23
    1d46:	f8 1e       	adc	r15, r24
    1d48:	49 1f       	adc	r20, r25
    1d4a:	51 1d       	adc	r21, r1
    1d4c:	66 0f       	add	r22, r22
    1d4e:	77 1f       	adc	r23, r23
    1d50:	88 1f       	adc	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	06 94       	lsr	r0
    1d56:	a1 f7       	brne	.-24     	; 0x1d40 <__ftoa_engine+0x74>
    1d58:	05 90       	lpm	r0, Z+
    1d5a:	07 94       	ror	r0
    1d5c:	28 f4       	brcc	.+10     	; 0x1d68 <__ftoa_engine+0x9c>
    1d5e:	e7 0e       	add	r14, r23
    1d60:	f8 1e       	adc	r15, r24
    1d62:	49 1f       	adc	r20, r25
    1d64:	56 1f       	adc	r21, r22
    1d66:	c1 1d       	adc	r28, r1
    1d68:	77 0f       	add	r23, r23
    1d6a:	88 1f       	adc	r24, r24
    1d6c:	99 1f       	adc	r25, r25
    1d6e:	66 1f       	adc	r22, r22
    1d70:	06 94       	lsr	r0
    1d72:	a1 f7       	brne	.-24     	; 0x1d5c <__ftoa_engine+0x90>
    1d74:	05 90       	lpm	r0, Z+
    1d76:	07 94       	ror	r0
    1d78:	28 f4       	brcc	.+10     	; 0x1d84 <__ftoa_engine+0xb8>
    1d7a:	f8 0e       	add	r15, r24
    1d7c:	49 1f       	adc	r20, r25
    1d7e:	56 1f       	adc	r21, r22
    1d80:	c7 1f       	adc	r28, r23
    1d82:	d1 1d       	adc	r29, r1
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	66 1f       	adc	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	06 94       	lsr	r0
    1d8e:	a1 f7       	brne	.-24     	; 0x1d78 <__ftoa_engine+0xac>
    1d90:	05 90       	lpm	r0, Z+
    1d92:	07 94       	ror	r0
    1d94:	20 f4       	brcc	.+8      	; 0x1d9e <__ftoa_engine+0xd2>
    1d96:	49 0f       	add	r20, r25
    1d98:	56 1f       	adc	r21, r22
    1d9a:	c7 1f       	adc	r28, r23
    1d9c:	d8 1f       	adc	r29, r24
    1d9e:	99 0f       	add	r25, r25
    1da0:	66 1f       	adc	r22, r22
    1da2:	77 1f       	adc	r23, r23
    1da4:	88 1f       	adc	r24, r24
    1da6:	06 94       	lsr	r0
    1da8:	a9 f7       	brne	.-22     	; 0x1d94 <__ftoa_engine+0xc8>
    1daa:	84 91       	lpm	r24, Z
    1dac:	10 95       	com	r17
    1dae:	17 70       	andi	r17, 0x07	; 7
    1db0:	41 f0       	breq	.+16     	; 0x1dc2 <__ftoa_engine+0xf6>
    1db2:	d6 95       	lsr	r29
    1db4:	c7 95       	ror	r28
    1db6:	57 95       	ror	r21
    1db8:	47 95       	ror	r20
    1dba:	f7 94       	ror	r15
    1dbc:	e7 94       	ror	r14
    1dbe:	1a 95       	dec	r17
    1dc0:	c1 f7       	brne	.-16     	; 0x1db2 <__ftoa_engine+0xe6>
    1dc2:	e4 ed       	ldi	r30, 0xD4	; 212
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	68 94       	set
    1dc8:	15 90       	lpm	r1, Z+
    1dca:	15 91       	lpm	r17, Z+
    1dcc:	35 91       	lpm	r19, Z+
    1dce:	65 91       	lpm	r22, Z+
    1dd0:	95 91       	lpm	r25, Z+
    1dd2:	05 90       	lpm	r0, Z+
    1dd4:	7f e2       	ldi	r23, 0x2F	; 47
    1dd6:	73 95       	inc	r23
    1dd8:	e1 18       	sub	r14, r1
    1dda:	f1 0a       	sbc	r15, r17
    1ddc:	43 0b       	sbc	r20, r19
    1dde:	56 0b       	sbc	r21, r22
    1de0:	c9 0b       	sbc	r28, r25
    1de2:	d0 09       	sbc	r29, r0
    1de4:	c0 f7       	brcc	.-16     	; 0x1dd6 <__ftoa_engine+0x10a>
    1de6:	e1 0c       	add	r14, r1
    1de8:	f1 1e       	adc	r15, r17
    1dea:	43 1f       	adc	r20, r19
    1dec:	56 1f       	adc	r21, r22
    1dee:	c9 1f       	adc	r28, r25
    1df0:	d0 1d       	adc	r29, r0
    1df2:	7e f4       	brtc	.+30     	; 0x1e12 <__ftoa_engine+0x146>
    1df4:	70 33       	cpi	r23, 0x30	; 48
    1df6:	11 f4       	brne	.+4      	; 0x1dfc <__ftoa_engine+0x130>
    1df8:	8a 95       	dec	r24
    1dfa:	e6 cf       	rjmp	.-52     	; 0x1dc8 <__ftoa_engine+0xfc>
    1dfc:	e8 94       	clt
    1dfe:	01 50       	subi	r16, 0x01	; 1
    1e00:	30 f0       	brcs	.+12     	; 0x1e0e <__ftoa_engine+0x142>
    1e02:	08 0f       	add	r16, r24
    1e04:	0a f4       	brpl	.+2      	; 0x1e08 <__ftoa_engine+0x13c>
    1e06:	00 27       	eor	r16, r16
    1e08:	02 17       	cp	r16, r18
    1e0a:	08 f4       	brcc	.+2      	; 0x1e0e <__ftoa_engine+0x142>
    1e0c:	20 2f       	mov	r18, r16
    1e0e:	23 95       	inc	r18
    1e10:	02 2f       	mov	r16, r18
    1e12:	7a 33       	cpi	r23, 0x3A	; 58
    1e14:	28 f0       	brcs	.+10     	; 0x1e20 <__ftoa_engine+0x154>
    1e16:	79 e3       	ldi	r23, 0x39	; 57
    1e18:	7d 93       	st	X+, r23
    1e1a:	2a 95       	dec	r18
    1e1c:	e9 f7       	brne	.-6      	; 0x1e18 <__ftoa_engine+0x14c>
    1e1e:	10 c0       	rjmp	.+32     	; 0x1e40 <__ftoa_engine+0x174>
    1e20:	7d 93       	st	X+, r23
    1e22:	2a 95       	dec	r18
    1e24:	89 f6       	brne	.-94     	; 0x1dc8 <__ftoa_engine+0xfc>
    1e26:	06 94       	lsr	r0
    1e28:	97 95       	ror	r25
    1e2a:	67 95       	ror	r22
    1e2c:	37 95       	ror	r19
    1e2e:	17 95       	ror	r17
    1e30:	17 94       	ror	r1
    1e32:	e1 18       	sub	r14, r1
    1e34:	f1 0a       	sbc	r15, r17
    1e36:	43 0b       	sbc	r20, r19
    1e38:	56 0b       	sbc	r21, r22
    1e3a:	c9 0b       	sbc	r28, r25
    1e3c:	d0 09       	sbc	r29, r0
    1e3e:	98 f0       	brcs	.+38     	; 0x1e66 <__ftoa_engine+0x19a>
    1e40:	23 95       	inc	r18
    1e42:	7e 91       	ld	r23, -X
    1e44:	73 95       	inc	r23
    1e46:	7a 33       	cpi	r23, 0x3A	; 58
    1e48:	08 f0       	brcs	.+2      	; 0x1e4c <__ftoa_engine+0x180>
    1e4a:	70 e3       	ldi	r23, 0x30	; 48
    1e4c:	7c 93       	st	X, r23
    1e4e:	20 13       	cpse	r18, r16
    1e50:	b8 f7       	brcc	.-18     	; 0x1e40 <__ftoa_engine+0x174>
    1e52:	7e 91       	ld	r23, -X
    1e54:	70 61       	ori	r23, 0x10	; 16
    1e56:	7d 93       	st	X+, r23
    1e58:	30 f0       	brcs	.+12     	; 0x1e66 <__ftoa_engine+0x19a>
    1e5a:	83 95       	inc	r24
    1e5c:	71 e3       	ldi	r23, 0x31	; 49
    1e5e:	7d 93       	st	X+, r23
    1e60:	70 e3       	ldi	r23, 0x30	; 48
    1e62:	2a 95       	dec	r18
    1e64:	e1 f7       	brne	.-8      	; 0x1e5e <__ftoa_engine+0x192>
    1e66:	11 24       	eor	r1, r1
    1e68:	ef 90       	pop	r14
    1e6a:	ff 90       	pop	r15
    1e6c:	0f 91       	pop	r16
    1e6e:	1f 91       	pop	r17
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	99 27       	eor	r25, r25
    1e76:	87 fd       	sbrc	r24, 7
    1e78:	90 95       	com	r25
    1e7a:	08 95       	ret

00001e7c <strnlen_P>:
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	05 90       	lpm	r0, Z+
    1e80:	61 50       	subi	r22, 0x01	; 1
    1e82:	70 40       	sbci	r23, 0x00	; 0
    1e84:	01 10       	cpse	r0, r1
    1e86:	d8 f7       	brcc	.-10     	; 0x1e7e <strnlen_P+0x2>
    1e88:	80 95       	com	r24
    1e8a:	90 95       	com	r25
    1e8c:	8e 0f       	add	r24, r30
    1e8e:	9f 1f       	adc	r25, r31
    1e90:	08 95       	ret

00001e92 <strcat>:
    1e92:	fb 01       	movw	r30, r22
    1e94:	dc 01       	movw	r26, r24
    1e96:	0d 90       	ld	r0, X+
    1e98:	00 20       	and	r0, r0
    1e9a:	e9 f7       	brne	.-6      	; 0x1e96 <strcat+0x4>
    1e9c:	11 97       	sbiw	r26, 0x01	; 1
    1e9e:	01 90       	ld	r0, Z+
    1ea0:	0d 92       	st	X+, r0
    1ea2:	00 20       	and	r0, r0
    1ea4:	e1 f7       	brne	.-8      	; 0x1e9e <strcat+0xc>
    1ea6:	08 95       	ret

00001ea8 <strcpy>:
    1ea8:	fb 01       	movw	r30, r22
    1eaa:	dc 01       	movw	r26, r24
    1eac:	01 90       	ld	r0, Z+
    1eae:	0d 92       	st	X+, r0
    1eb0:	00 20       	and	r0, r0
    1eb2:	e1 f7       	brne	.-8      	; 0x1eac <strcpy+0x4>
    1eb4:	08 95       	ret

00001eb6 <strncmp>:
    1eb6:	fb 01       	movw	r30, r22
    1eb8:	dc 01       	movw	r26, r24
    1eba:	41 50       	subi	r20, 0x01	; 1
    1ebc:	50 40       	sbci	r21, 0x00	; 0
    1ebe:	30 f0       	brcs	.+12     	; 0x1ecc <strncmp+0x16>
    1ec0:	8d 91       	ld	r24, X+
    1ec2:	01 90       	ld	r0, Z+
    1ec4:	80 19       	sub	r24, r0
    1ec6:	19 f4       	brne	.+6      	; 0x1ece <strncmp+0x18>
    1ec8:	00 20       	and	r0, r0
    1eca:	b9 f7       	brne	.-18     	; 0x1eba <strncmp+0x4>
    1ecc:	88 1b       	sub	r24, r24
    1ece:	99 0b       	sbc	r25, r25
    1ed0:	08 95       	ret

00001ed2 <strnlen>:
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	61 50       	subi	r22, 0x01	; 1
    1ed6:	70 40       	sbci	r23, 0x00	; 0
    1ed8:	01 90       	ld	r0, Z+
    1eda:	01 10       	cpse	r0, r1
    1edc:	d8 f7       	brcc	.-10     	; 0x1ed4 <strnlen+0x2>
    1ede:	80 95       	com	r24
    1ee0:	90 95       	com	r25
    1ee2:	8e 0f       	add	r24, r30
    1ee4:	9f 1f       	adc	r25, r31
    1ee6:	08 95       	ret

00001ee8 <fputc>:
    1ee8:	0f 93       	push	r16
    1eea:	1f 93       	push	r17
    1eec:	cf 93       	push	r28
    1eee:	df 93       	push	r29
    1ef0:	fb 01       	movw	r30, r22
    1ef2:	23 81       	ldd	r18, Z+3	; 0x03
    1ef4:	21 fd       	sbrc	r18, 1
    1ef6:	03 c0       	rjmp	.+6      	; 0x1efe <fputc+0x16>
    1ef8:	8f ef       	ldi	r24, 0xFF	; 255
    1efa:	9f ef       	ldi	r25, 0xFF	; 255
    1efc:	2c c0       	rjmp	.+88     	; 0x1f56 <fputc+0x6e>
    1efe:	22 ff       	sbrs	r18, 2
    1f00:	16 c0       	rjmp	.+44     	; 0x1f2e <fputc+0x46>
    1f02:	46 81       	ldd	r20, Z+6	; 0x06
    1f04:	57 81       	ldd	r21, Z+7	; 0x07
    1f06:	24 81       	ldd	r18, Z+4	; 0x04
    1f08:	35 81       	ldd	r19, Z+5	; 0x05
    1f0a:	42 17       	cp	r20, r18
    1f0c:	53 07       	cpc	r21, r19
    1f0e:	44 f4       	brge	.+16     	; 0x1f20 <fputc+0x38>
    1f10:	a0 81       	ld	r26, Z
    1f12:	b1 81       	ldd	r27, Z+1	; 0x01
    1f14:	9d 01       	movw	r18, r26
    1f16:	2f 5f       	subi	r18, 0xFF	; 255
    1f18:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1a:	31 83       	std	Z+1, r19	; 0x01
    1f1c:	20 83       	st	Z, r18
    1f1e:	8c 93       	st	X, r24
    1f20:	26 81       	ldd	r18, Z+6	; 0x06
    1f22:	37 81       	ldd	r19, Z+7	; 0x07
    1f24:	2f 5f       	subi	r18, 0xFF	; 255
    1f26:	3f 4f       	sbci	r19, 0xFF	; 255
    1f28:	37 83       	std	Z+7, r19	; 0x07
    1f2a:	26 83       	std	Z+6, r18	; 0x06
    1f2c:	14 c0       	rjmp	.+40     	; 0x1f56 <fputc+0x6e>
    1f2e:	8b 01       	movw	r16, r22
    1f30:	ec 01       	movw	r28, r24
    1f32:	fb 01       	movw	r30, r22
    1f34:	00 84       	ldd	r0, Z+8	; 0x08
    1f36:	f1 85       	ldd	r31, Z+9	; 0x09
    1f38:	e0 2d       	mov	r30, r0
    1f3a:	09 95       	icall
    1f3c:	89 2b       	or	r24, r25
    1f3e:	e1 f6       	brne	.-72     	; 0x1ef8 <fputc+0x10>
    1f40:	d8 01       	movw	r26, r16
    1f42:	16 96       	adiw	r26, 0x06	; 6
    1f44:	8d 91       	ld	r24, X+
    1f46:	9c 91       	ld	r25, X
    1f48:	17 97       	sbiw	r26, 0x07	; 7
    1f4a:	01 96       	adiw	r24, 0x01	; 1
    1f4c:	17 96       	adiw	r26, 0x07	; 7
    1f4e:	9c 93       	st	X, r25
    1f50:	8e 93       	st	-X, r24
    1f52:	16 97       	sbiw	r26, 0x06	; 6
    1f54:	ce 01       	movw	r24, r28
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	1f 91       	pop	r17
    1f5c:	0f 91       	pop	r16
    1f5e:	08 95       	ret

00001f60 <printf>:
    1f60:	a0 e0       	ldi	r26, 0x00	; 0
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e6 eb       	ldi	r30, 0xB6	; 182
    1f66:	ff e0       	ldi	r31, 0x0F	; 15
    1f68:	0c 94 9c 0c 	jmp	0x1938	; 0x1938 <__prologue_saves__+0x20>
    1f6c:	ae 01       	movw	r20, r28
    1f6e:	4b 5f       	subi	r20, 0xFB	; 251
    1f70:	5f 4f       	sbci	r21, 0xFF	; 255
    1f72:	fa 01       	movw	r30, r20
    1f74:	61 91       	ld	r22, Z+
    1f76:	71 91       	ld	r23, Z+
    1f78:	af 01       	movw	r20, r30
    1f7a:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <__iob+0x2>
    1f7e:	90 91 77 07 	lds	r25, 0x0777	; 0x800777 <__iob+0x3>
    1f82:	0e 94 ed 08 	call	0x11da	; 0x11da <vfprintf>
    1f86:	e2 e0       	ldi	r30, 0x02	; 2
    1f88:	0c 94 b8 0c 	jmp	0x1970	; 0x1970 <__epilogue_restores__+0x20>

00001f8c <puts>:
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
    1f94:	e0 91 76 07 	lds	r30, 0x0776	; 0x800776 <__iob+0x2>
    1f98:	f0 91 77 07 	lds	r31, 0x0777	; 0x800777 <__iob+0x3>
    1f9c:	23 81       	ldd	r18, Z+3	; 0x03
    1f9e:	21 ff       	sbrs	r18, 1
    1fa0:	1b c0       	rjmp	.+54     	; 0x1fd8 <puts+0x4c>
    1fa2:	8c 01       	movw	r16, r24
    1fa4:	d0 e0       	ldi	r29, 0x00	; 0
    1fa6:	c0 e0       	ldi	r28, 0x00	; 0
    1fa8:	f8 01       	movw	r30, r16
    1faa:	81 91       	ld	r24, Z+
    1fac:	8f 01       	movw	r16, r30
    1fae:	60 91 76 07 	lds	r22, 0x0776	; 0x800776 <__iob+0x2>
    1fb2:	70 91 77 07 	lds	r23, 0x0777	; 0x800777 <__iob+0x3>
    1fb6:	db 01       	movw	r26, r22
    1fb8:	18 96       	adiw	r26, 0x08	; 8
    1fba:	ed 91       	ld	r30, X+
    1fbc:	fc 91       	ld	r31, X
    1fbe:	19 97       	sbiw	r26, 0x09	; 9
    1fc0:	88 23       	and	r24, r24
    1fc2:	31 f0       	breq	.+12     	; 0x1fd0 <puts+0x44>
    1fc4:	09 95       	icall
    1fc6:	89 2b       	or	r24, r25
    1fc8:	79 f3       	breq	.-34     	; 0x1fa8 <puts+0x1c>
    1fca:	df ef       	ldi	r29, 0xFF	; 255
    1fcc:	cf ef       	ldi	r28, 0xFF	; 255
    1fce:	ec cf       	rjmp	.-40     	; 0x1fa8 <puts+0x1c>
    1fd0:	8a e0       	ldi	r24, 0x0A	; 10
    1fd2:	09 95       	icall
    1fd4:	89 2b       	or	r24, r25
    1fd6:	19 f0       	breq	.+6      	; 0x1fde <puts+0x52>
    1fd8:	8f ef       	ldi	r24, 0xFF	; 255
    1fda:	9f ef       	ldi	r25, 0xFF	; 255
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <puts+0x56>
    1fde:	8d 2f       	mov	r24, r29
    1fe0:	9c 2f       	mov	r25, r28
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	08 95       	ret

00001fec <sprintf>:
    1fec:	ae e0       	ldi	r26, 0x0E	; 14
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	ec ef       	ldi	r30, 0xFC	; 252
    1ff2:	ff e0       	ldi	r31, 0x0F	; 15
    1ff4:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__prologue_saves__+0x1c>
    1ff8:	0d 89       	ldd	r16, Y+21	; 0x15
    1ffa:	1e 89       	ldd	r17, Y+22	; 0x16
    1ffc:	86 e0       	ldi	r24, 0x06	; 6
    1ffe:	8c 83       	std	Y+4, r24	; 0x04
    2000:	1a 83       	std	Y+2, r17	; 0x02
    2002:	09 83       	std	Y+1, r16	; 0x01
    2004:	8f ef       	ldi	r24, 0xFF	; 255
    2006:	9f e7       	ldi	r25, 0x7F	; 127
    2008:	9e 83       	std	Y+6, r25	; 0x06
    200a:	8d 83       	std	Y+5, r24	; 0x05
    200c:	ae 01       	movw	r20, r28
    200e:	47 5e       	subi	r20, 0xE7	; 231
    2010:	5f 4f       	sbci	r21, 0xFF	; 255
    2012:	6f 89       	ldd	r22, Y+23	; 0x17
    2014:	78 8d       	ldd	r23, Y+24	; 0x18
    2016:	ce 01       	movw	r24, r28
    2018:	01 96       	adiw	r24, 0x01	; 1
    201a:	0e 94 ed 08 	call	0x11da	; 0x11da <vfprintf>
    201e:	ef 81       	ldd	r30, Y+7	; 0x07
    2020:	f8 85       	ldd	r31, Y+8	; 0x08
    2022:	e0 0f       	add	r30, r16
    2024:	f1 1f       	adc	r31, r17
    2026:	10 82       	st	Z, r1
    2028:	2e 96       	adiw	r28, 0x0e	; 14
    202a:	e4 e0       	ldi	r30, 0x04	; 4
    202c:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__epilogue_restores__+0x1c>

00002030 <__ultoa_invert>:
    2030:	fa 01       	movw	r30, r20
    2032:	aa 27       	eor	r26, r26
    2034:	28 30       	cpi	r18, 0x08	; 8
    2036:	51 f1       	breq	.+84     	; 0x208c <__ultoa_invert+0x5c>
    2038:	20 31       	cpi	r18, 0x10	; 16
    203a:	81 f1       	breq	.+96     	; 0x209c <__ultoa_invert+0x6c>
    203c:	e8 94       	clt
    203e:	6f 93       	push	r22
    2040:	6e 7f       	andi	r22, 0xFE	; 254
    2042:	6e 5f       	subi	r22, 0xFE	; 254
    2044:	7f 4f       	sbci	r23, 0xFF	; 255
    2046:	8f 4f       	sbci	r24, 0xFF	; 255
    2048:	9f 4f       	sbci	r25, 0xFF	; 255
    204a:	af 4f       	sbci	r26, 0xFF	; 255
    204c:	b1 e0       	ldi	r27, 0x01	; 1
    204e:	3e d0       	rcall	.+124    	; 0x20cc <__ultoa_invert+0x9c>
    2050:	b4 e0       	ldi	r27, 0x04	; 4
    2052:	3c d0       	rcall	.+120    	; 0x20cc <__ultoa_invert+0x9c>
    2054:	67 0f       	add	r22, r23
    2056:	78 1f       	adc	r23, r24
    2058:	89 1f       	adc	r24, r25
    205a:	9a 1f       	adc	r25, r26
    205c:	a1 1d       	adc	r26, r1
    205e:	68 0f       	add	r22, r24
    2060:	79 1f       	adc	r23, r25
    2062:	8a 1f       	adc	r24, r26
    2064:	91 1d       	adc	r25, r1
    2066:	a1 1d       	adc	r26, r1
    2068:	6a 0f       	add	r22, r26
    206a:	71 1d       	adc	r23, r1
    206c:	81 1d       	adc	r24, r1
    206e:	91 1d       	adc	r25, r1
    2070:	a1 1d       	adc	r26, r1
    2072:	20 d0       	rcall	.+64     	; 0x20b4 <__ultoa_invert+0x84>
    2074:	09 f4       	brne	.+2      	; 0x2078 <__ultoa_invert+0x48>
    2076:	68 94       	set
    2078:	3f 91       	pop	r19
    207a:	2a e0       	ldi	r18, 0x0A	; 10
    207c:	26 9f       	mul	r18, r22
    207e:	11 24       	eor	r1, r1
    2080:	30 19       	sub	r19, r0
    2082:	30 5d       	subi	r19, 0xD0	; 208
    2084:	31 93       	st	Z+, r19
    2086:	de f6       	brtc	.-74     	; 0x203e <__ultoa_invert+0xe>
    2088:	cf 01       	movw	r24, r30
    208a:	08 95       	ret
    208c:	46 2f       	mov	r20, r22
    208e:	47 70       	andi	r20, 0x07	; 7
    2090:	40 5d       	subi	r20, 0xD0	; 208
    2092:	41 93       	st	Z+, r20
    2094:	b3 e0       	ldi	r27, 0x03	; 3
    2096:	0f d0       	rcall	.+30     	; 0x20b6 <__ultoa_invert+0x86>
    2098:	c9 f7       	brne	.-14     	; 0x208c <__ultoa_invert+0x5c>
    209a:	f6 cf       	rjmp	.-20     	; 0x2088 <__ultoa_invert+0x58>
    209c:	46 2f       	mov	r20, r22
    209e:	4f 70       	andi	r20, 0x0F	; 15
    20a0:	40 5d       	subi	r20, 0xD0	; 208
    20a2:	4a 33       	cpi	r20, 0x3A	; 58
    20a4:	18 f0       	brcs	.+6      	; 0x20ac <__ultoa_invert+0x7c>
    20a6:	49 5d       	subi	r20, 0xD9	; 217
    20a8:	31 fd       	sbrc	r19, 1
    20aa:	40 52       	subi	r20, 0x20	; 32
    20ac:	41 93       	st	Z+, r20
    20ae:	02 d0       	rcall	.+4      	; 0x20b4 <__ultoa_invert+0x84>
    20b0:	a9 f7       	brne	.-22     	; 0x209c <__ultoa_invert+0x6c>
    20b2:	ea cf       	rjmp	.-44     	; 0x2088 <__ultoa_invert+0x58>
    20b4:	b4 e0       	ldi	r27, 0x04	; 4
    20b6:	a6 95       	lsr	r26
    20b8:	97 95       	ror	r25
    20ba:	87 95       	ror	r24
    20bc:	77 95       	ror	r23
    20be:	67 95       	ror	r22
    20c0:	ba 95       	dec	r27
    20c2:	c9 f7       	brne	.-14     	; 0x20b6 <__ultoa_invert+0x86>
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	61 05       	cpc	r22, r1
    20c8:	71 05       	cpc	r23, r1
    20ca:	08 95       	ret
    20cc:	9b 01       	movw	r18, r22
    20ce:	ac 01       	movw	r20, r24
    20d0:	0a 2e       	mov	r0, r26
    20d2:	06 94       	lsr	r0
    20d4:	57 95       	ror	r21
    20d6:	47 95       	ror	r20
    20d8:	37 95       	ror	r19
    20da:	27 95       	ror	r18
    20dc:	ba 95       	dec	r27
    20de:	c9 f7       	brne	.-14     	; 0x20d2 <__ultoa_invert+0xa2>
    20e0:	62 0f       	add	r22, r18
    20e2:	73 1f       	adc	r23, r19
    20e4:	84 1f       	adc	r24, r20
    20e6:	95 1f       	adc	r25, r21
    20e8:	a0 1d       	adc	r26, r0
    20ea:	08 95       	ret

000020ec <_exit>:
    20ec:	f8 94       	cli

000020ee <__stop_program>:
    20ee:	ff cf       	rjmp	.-2      	; 0x20ee <__stop_program>
