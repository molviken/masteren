
LoRa-node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000450  00800100  00002362  000023f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002362  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000dc  00800550  00800550  00002846  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002846  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000028a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  000028e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c51  00000000  00000000  00002bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ab9  00000000  00000000  0000680d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f91  00000000  00000000  000082c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ac  00000000  00000000  0000a258  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001155  00000000  00000000  0000aa04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bfe  00000000  00000000  0000bb59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  0000d757  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__ctors_end>
       4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
       8:	0c 94 31 03 	jmp	0x662	; 0x662 <__vector_2>
       c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      10:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      14:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      18:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      1c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      20:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      24:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      28:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      2c:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__vector_11>
      30:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      34:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      38:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      3c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      40:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      44:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      48:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      4c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      50:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      54:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      58:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      5c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      60:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      64:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      68:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      6c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      70:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      74:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      78:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      7c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      80:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      84:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      88:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      8c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      90:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      94:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      98:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      9c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      ac:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      bc:	0c 94 40 03 	jmp	0x680	; 0x680 <__vector_47>
      c0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      c4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      c8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>

000000cc <__trampolines_end>:
      cc:	6e 61       	ori	r22, 0x1E	; 30
      ce:	6e 00       	.word	0x006e	; ????

000000d0 <__c.2332>:
      d0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      e0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      f0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     100:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     110:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     120:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     130:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     140:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     150:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     160:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     170:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     180:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     190:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1a0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1b0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1c0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001ce <__ctors_end>:
     1ce:	11 24       	eor	r1, r1
     1d0:	1f be       	out	0x3f, r1	; 63
     1d2:	cf ef       	ldi	r28, 0xFF	; 255
     1d4:	d8 e0       	ldi	r29, 0x08	; 8
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	cd bf       	out	0x3d, r28	; 61

000001da <__do_copy_data>:
     1da:	15 e0       	ldi	r17, 0x05	; 5
     1dc:	a0 e0       	ldi	r26, 0x00	; 0
     1de:	b1 e0       	ldi	r27, 0x01	; 1
     1e0:	e2 e6       	ldi	r30, 0x62	; 98
     1e2:	f3 e2       	ldi	r31, 0x23	; 35
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <__do_copy_data+0x10>
     1e6:	05 90       	lpm	r0, Z+
     1e8:	0d 92       	st	X+, r0
     1ea:	a0 35       	cpi	r26, 0x50	; 80
     1ec:	b1 07       	cpc	r27, r17
     1ee:	d9 f7       	brne	.-10     	; 0x1e6 <__do_copy_data+0xc>

000001f0 <__do_clear_bss>:
     1f0:	26 e0       	ldi	r18, 0x06	; 6
     1f2:	a0 e5       	ldi	r26, 0x50	; 80
     1f4:	b5 e0       	ldi	r27, 0x05	; 5
     1f6:	01 c0       	rjmp	.+2      	; 0x1fa <.do_clear_bss_start>

000001f8 <.do_clear_bss_loop>:
     1f8:	1d 92       	st	X+, r1

000001fa <.do_clear_bss_start>:
     1fa:	ac 32       	cpi	r26, 0x2C	; 44
     1fc:	b2 07       	cpc	r27, r18
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <.do_clear_bss_loop>
     200:	0e 94 06 01 	call	0x20c	; 0x20c <main>
     204:	0c 94 af 11 	jmp	0x235e	; 0x235e <_exit>

00000208 <__bad_interrupt>:
     208:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020c <main>:
	_delay_ms(100);
}


int main(void){
	MCUSR &= ~(1 << WDRF);
     20c:	84 b7       	in	r24, 0x34	; 52
     20e:	87 7f       	andi	r24, 0xF7	; 247
     210:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	a8 95       	wdr
     218:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     21c:	88 61       	ori	r24, 0x18	; 24
     21e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     222:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     226:	0f be       	out	0x3f, r0	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     228:	2f ef       	ldi	r18, 0xFF	; 255
     22a:	83 ec       	ldi	r24, 0xC3	; 195
     22c:	99 e0       	ldi	r25, 0x09	; 9
     22e:	21 50       	subi	r18, 0x01	; 1
     230:	80 40       	sbci	r24, 0x00	; 0
     232:	90 40       	sbci	r25, 0x00	; 0
     234:	e1 f7       	brne	.-8      	; 0x22e <main+0x22>
     236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x2c>
     238:	00 00       	nop
	wdt_disable();
	_delay_ms(400); // Start-up time after pressing reset button

	FSM_run();
     23a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <FSM_run>
	puts("Program ended");
     23e:	8a ea       	ldi	r24, 0xAA	; 170
     240:	92 e0       	ldi	r25, 0x02	; 2
     242:	0e 94 ff 10 	call	0x21fe	; 0x21fe <puts>
		//PORTB ^= (1<<LED1);
		//lora_test_command();
		//_delay_ms(100);
	//}
	return 0;
}
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	08 95       	ret

0000024c <adc_init>:




void adc_init(){
	ADMUX = 0;
     24c:	ac e7       	ldi	r26, 0x7C	; 124
     24e:	b0 e0       	ldi	r27, 0x00	; 0
     250:	1c 92       	st	X, r1
	ADCSRA = 0;
     252:	ea e7       	ldi	r30, 0x7A	; 122
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	10 82       	st	Z, r1
	ADMUX |= ADC_VOLTAGE_REF_AVCC;											// Sets adc voltage reference
     258:	8c 91       	ld	r24, X
     25a:	80 64       	ori	r24, 0x40	; 64
     25c:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESCALAR_128;											// ADC prescaler = 128 ---> 8MHz goes to 62.5 kHz
     25e:	80 81       	ld	r24, Z
     260:	86 60       	ori	r24, 0x06	; 6
     262:	80 83       	st	Z, r24
	//ADCSRA |= (0 << ADIE);												// Enables ADC interrupt
	ADCSRA |= (1 << ADEN);													// Enabling the ADC
     264:	80 81       	ld	r24, Z
     266:	80 68       	ori	r24, 0x80	; 128
     268:	80 83       	st	Z, r24
     26a:	08 95       	ret

0000026c <adc_read>:
}


uint16_t adc_read(){
	uint16_t val;					
	ADCSRA |= (1 << ADSC);													// Starts single conversion
     26c:	ea e7       	ldi	r30, 0x7A	; 122
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	80 64       	ori	r24, 0x40	; 64
     274:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));
     276:	80 81       	ld	r24, Z
     278:	84 ff       	sbrs	r24, 4
     27a:	fd cf       	rjmp	.-6      	; 0x276 <adc_read+0xa>
	val = ADCW;
     27c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     280:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	if ((int)val > 1000){val = 1000;}
     284:	89 3e       	cpi	r24, 0xE9	; 233
     286:	23 e0       	ldi	r18, 0x03	; 3
     288:	92 07       	cpc	r25, r18
     28a:	14 f0       	brlt	.+4      	; 0x290 <adc_read+0x24>
     28c:	88 ee       	ldi	r24, 0xE8	; 232
     28e:	93 e0       	ldi	r25, 0x03	; 3
	return val;
}
     290:	08 95       	ret

00000292 <adc_change_channel>:

void adc_change_channel(uint8_t channel){
	ADMUX |= channel;														// Setting adc channel to be read
     292:	ec e7       	ldi	r30, 0x7C	; 124
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	90 81       	ld	r25, Z
     298:	89 2b       	or	r24, r25
     29a:	80 83       	st	Z, r24
	adc_read();																// Discard first measurement after channel change
     29c:	0e 94 36 01 	call	0x26c	; 0x26c <adc_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a0:	8a e1       	ldi	r24, 0x1A	; 26
     2a2:	8a 95       	dec	r24
     2a4:	f1 f7       	brne	.-4      	; 0x2a2 <adc_change_channel+0x10>
     2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <adc_change_channel+0x16>
     2a8:	08 95       	ret

000002aa <board_charge>:
	DDRD |= (1 << DDRD4);	  // Set PD4 as output
	
}

void board_charge(int on){
	if (on){
     2aa:	89 2b       	or	r24, r25
     2ac:	11 f0       	breq	.+4      	; 0x2b2 <board_charge+0x8>
		clear_bit(PORTD, PORTD4);
     2ae:	5c 98       	cbi	0x0b, 4	; 11
     2b0:	08 95       	ret
		//clear_bit(LEDS, LED1);
	}
	else {
		set_bit(PORTD, PORTD4);
     2b2:	5c 9a       	sbi	0x0b, 4	; 11
     2b4:	08 95       	ret

000002b6 <board_setup>:
		//set_bit(LEDS, LED1);
	}
}

void board_setup(uint8_t *joined_err){
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	ec 01       	movw	r28, r24
	#ifndef LORA_NODE
	USART_init();
	#endif
	adc_init();
     2bc:	0e 94 26 01 	call	0x24c	; 0x24c <adc_init>

static void board_dmy_btn_init();
static void board_gpio_init();

void board_dmy_btn_init(void){
	DDRD &= ~(1 << DDD3);     // Clear the PD2 pin
     2c0:	53 98       	cbi	0x0a, 3	; 10
	EICRA |= (1 << ISC11);    // set INT1 to trigger on falling edge
     2c2:	e9 e6       	ldi	r30, 0x69	; 105
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	88 60       	ori	r24, 0x08	; 8
     2ca:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);     // Turns on INT1
     2cc:	e9 9a       	sbi	0x1d, 1	; 29
}

void board_gpio_init(void){
	DDRD |= (1 << DDRD4);	  // Set PD4 as output
     2ce:	54 9a       	sbi	0x0a, 4	; 10
	USART_init();
	#endif
	adc_init();
	board_dmy_btn_init();
	board_gpio_init();
	board_charge(0);
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 55 01 	call	0x2aa	; 0x2aa <board_charge>
	#ifdef LORA_NODE
		lora_init(joined_err);
     2d8:	ce 01       	movw	r24, r28
     2da:	0e 94 0e 06 	call	0xc1c	; 0xc1c <lora_init>
	#else
		*joined_err = 0;
	#endif

	i2c_init();
     2de:	0e 94 8c 03 	call	0x718	; 0x718 <i2c_init>
	INA219_init();
     2e2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <INA219_init>
	timers_init();
     2e6:	0e 94 05 08 	call	0x100a	; 0x100a <timers_init>
	sei();
     2ea:	78 94       	sei
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <board_get_battery_level>:
	
	r1 = 174;
	r2 = 255;
	battery_max = 4.2;
	
	adc_change_channel(VBAT);
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	0e 94 49 01 	call	0x292	; 0x292 <adc_change_channel>
	val = adc_read();
     2f8:	0e 94 36 01 	call	0x26c	; 0x26c <adc_read>
	
	v_div_tick = (((r2)/(r1+r2))*battery_max) / 1024;
	vbat = v_div_tick*val*(r1+r2)/r2;
	bat_percentage = vbat*100/battery_max;
	
	return bat_percentage;
     2fc:	bc 01       	movw	r22, r24
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__floatunsisf>
     306:	26 eb       	ldi	r18, 0xB6	; 182
     308:	36 ec       	ldi	r19, 0xC6	; 198
     30a:	4f e1       	ldi	r20, 0x1F	; 31
     30c:	5b e3       	ldi	r21, 0x3B	; 59
     30e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__mulsf3>
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e8       	ldi	r19, 0x80	; 128
     316:	46 ed       	ldi	r20, 0xD6	; 214
     318:	53 e4       	ldi	r21, 0x43	; 67
     31a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__mulsf3>
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	4f e7       	ldi	r20, 0x7F	; 127
     324:	53 e4       	ldi	r21, 0x43	; 67
     326:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__divsf3>
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	48 ec       	ldi	r20, 0xC8	; 200
     330:	52 e4       	ldi	r21, 0x42	; 66
     332:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__mulsf3>
     336:	26 e6       	ldi	r18, 0x66	; 102
     338:	36 e6       	ldi	r19, 0x66	; 102
     33a:	46 e8       	ldi	r20, 0x86	; 134
     33c:	50 e4       	ldi	r21, 0x40	; 64
     33e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__divsf3>
     342:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__fixsfsi>
     346:	86 2f       	mov	r24, r22
     348:	08 95       	ret

0000034a <FSM_system_reset>:
	#ifdef DEBUG_M
	puts("Init complete, FSM running");
	#endif
}
void FSM_system_reset(){
	cli();	
     34a:	f8 94       	cli
	WDTCSR = 0x00;
     34c:	e0 e6       	ldi	r30, 0x60	; 96
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	10 82       	st	Z, r1
	WDTCSR = (1<<WDE);
     352:	88 e0       	ldi	r24, 0x08	; 8
     354:	80 83       	st	Z, r24
     356:	08 95       	ret

00000358 <FSM_assert_downlink>:
}
void FSM_assert_downlink(){
	uint32_t ts = 0;
	uint16_t sample_size_new;
	size_t str_len = strlen(downlink);
     358:	e3 e5       	ldi	r30, 0x53	; 83
     35a:	f5 e0       	ldi	r31, 0x05	; 5
     35c:	01 90       	ld	r0, Z+
     35e:	00 20       	and	r0, r0
     360:	e9 f7       	brne	.-6      	; 0x35c <FSM_assert_downlink+0x4>
     362:	31 97       	sbiw	r30, 0x01	; 1
     364:	bf 01       	movw	r22, r30
     366:	63 55       	subi	r22, 0x53	; 83
     368:	75 40       	sbci	r23, 0x05	; 5
	#ifdef LORA_NODE
		if (str_len > 28) ascii_hex_decode(downlink, str_len, downlink_pairs, LORA_RX_PAYLOAD_OFFSET);
     36a:	6d 31       	cpi	r22, 0x1D	; 29
     36c:	71 05       	cpc	r23, r1
     36e:	48 f0       	brcs	.+18     	; 0x382 <FSM_assert_downlink+0x2a>
     370:	29 e0       	ldi	r18, 0x09	; 9
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	4d eb       	ldi	r20, 0xBD	; 189
     376:	55 e0       	ldi	r21, 0x05	; 5
     378:	83 e5       	ldi	r24, 0x53	; 83
     37a:	95 e0       	ldi	r25, 0x05	; 5
     37c:	0e 94 3f 08 	call	0x107e	; 0x107e <ascii_hex_decode>
     380:	08 c0       	rjmp	.+16     	; 0x392 <FSM_assert_downlink+0x3a>
		else hex_decode(downlink, str_len, downlink_pairs, LORA_RX_PAYLOAD_OFFSET);
     382:	29 e0       	ldi	r18, 0x09	; 9
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	4d eb       	ldi	r20, 0xBD	; 189
     388:	55 e0       	ldi	r21, 0x05	; 5
     38a:	83 e5       	ldi	r24, 0x53	; 83
     38c:	95 e0       	ldi	r25, 0x05	; 5
     38e:	0e 94 b6 08 	call	0x116c	; 0x116c <hex_decode>
	
	#else
		hex_decode(downlink, str_len, downlink_pairs, 0);
	#endif
	//printf("%02X %02X %02X\n", downlink_pairs[0], downlink_pairs[1], downlink_pairs[2]);
	switch (downlink_pairs[0]){
     392:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <downlink_pairs>
     396:	82 32       	cpi	r24, 0x22	; 34
     398:	e1 f0       	breq	.+56     	; 0x3d2 <FSM_assert_downlink+0x7a>
     39a:	89 39       	cpi	r24, 0x99	; 153
     39c:	39 f1       	breq	.+78     	; 0x3ec <FSM_assert_downlink+0x94>
     39e:	81 31       	cpi	r24, 0x11	; 17
     3a0:	39 f5       	brne	.+78     	; 0x3f0 <FSM_assert_downlink+0x98>
		case 0x11:
			ts = (uint32_t)downlink_pairs[4] | ((uint32_t)downlink_pairs[3] << 8) | ((uint32_t)downlink_pairs[2] << 16) | ((uint32_t)downlink_pairs[1] << 24);
     3a2:	ed eb       	ldi	r30, 0xBD	; 189
     3a4:	f5 e0       	ldi	r31, 0x05	; 5
     3a6:	23 81       	ldd	r18, Z+3	; 0x03
     3a8:	82 81       	ldd	r24, Z+2	; 0x02
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	a0 e0       	ldi	r26, 0x00	; 0
     3ae:	b0 e0       	ldi	r27, 0x00	; 0
     3b0:	dc 01       	movw	r26, r24
     3b2:	99 27       	eor	r25, r25
     3b4:	88 27       	eor	r24, r24
     3b6:	92 2b       	or	r25, r18
     3b8:	24 81       	ldd	r18, Z+4	; 0x04
     3ba:	82 2b       	or	r24, r18
     3bc:	21 81       	ldd	r18, Z+1	; 0x01
     3be:	b2 2b       	or	r27, r18
			current_time = ts;
     3c0:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <current_time>
     3c4:	90 93 b8 05 	sts	0x05B8, r25	; 0x8005b8 <current_time+0x1>
     3c8:	a0 93 b9 05 	sts	0x05B9, r26	; 0x8005b9 <current_time+0x2>
     3cc:	b0 93 ba 05 	sts	0x05BA, r27	; 0x8005ba <current_time+0x3>
			break;
     3d0:	08 95       	ret
		
		case 0x22:
			sample_size_new = (uint16_t)downlink_pairs[2] | ((uint16_t)downlink_pairs[1] << 8);
     3d2:	ed eb       	ldi	r30, 0xBD	; 189
     3d4:	f5 e0       	ldi	r31, 0x05	; 5
			sample_size = sample_size_new;
     3d6:	81 81       	ldd	r24, Z+1	; 0x01
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	98 2f       	mov	r25, r24
     3dc:	88 27       	eor	r24, r24
     3de:	22 81       	ldd	r18, Z+2	; 0x02
     3e0:	82 2b       	or	r24, r18
     3e2:	90 93 bc 05 	sts	0x05BC, r25	; 0x8005bc <sample_size+0x1>
     3e6:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <sample_size>
			break;
     3ea:	08 95       	ret
		
		case 0x99:
			FSM_system_reset();
     3ec:	0e 94 a5 01 	call	0x34a	; 0x34a <FSM_system_reset>
     3f0:	08 95       	ret

000003f2 <FSM_run>:
			break;
	}
}

void FSM_run(void){
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	63 97       	sbiw	r28, 0x13	; 19
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
	data_receive_flag = 0;
     406:	10 92 21 06 	sts	0x0621, r1	; 0x800621 <data_receive_flag>
	sample_size = BOARD_SAMPLE_SIZE;
     40a:	8c e3       	ldi	r24, 0x3C	; 60
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	90 93 bc 05 	sts	0x05BC, r25	; 0x8005bc <sample_size+0x1>
     412:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <sample_size>
	board_t board1 = {0, 100, {0, 0, 0, 0}, 0, sample_size, ""};
     416:	19 82       	std	Y+1, r1	; 0x01
     418:	24 e6       	ldi	r18, 0x64	; 100
     41a:	2a 83       	std	Y+2, r18	; 0x02
     41c:	1c 82       	std	Y+4, r1	; 0x04
     41e:	1b 82       	std	Y+3, r1	; 0x03
     420:	1e 82       	std	Y+6, r1	; 0x06
     422:	1d 82       	std	Y+5, r1	; 0x05
     424:	1f 82       	std	Y+7, r1	; 0x07
     426:	18 86       	std	Y+8, r1	; 0x08
     428:	19 86       	std	Y+9, r1	; 0x09
     42a:	1a 86       	std	Y+10, r1	; 0x0a
     42c:	1b 86       	std	Y+11, r1	; 0x0b
     42e:	1c 86       	std	Y+12, r1	; 0x0c
     430:	1d 86       	std	Y+13, r1	; 0x0d
     432:	1e 86       	std	Y+14, r1	; 0x0e
     434:	1f 86       	std	Y+15, r1	; 0x0f
     436:	99 8b       	std	Y+17, r25	; 0x11
     438:	88 8b       	std	Y+16, r24	; 0x10
     43a:	81 eb       	ldi	r24, 0xB1	; 177
     43c:	93 e0       	ldi	r25, 0x03	; 3
     43e:	9b 8b       	std	Y+19, r25	; 0x13
     440:	8a 8b       	std	Y+18, r24	; 0x12
		
	int rejoin_attempts = 0;
     442:	00 e0       	ldi	r16, 0x00	; 0
     444:	10 e0       	ldi	r17, 0x00	; 0
			case ST_DATA_RECEIVED:
				
			
			case ST_ACTIVE:
				clear_bit(LEDS,LED1);
				PORTB ^= (1<<LED2);
     446:	68 94       	set
     448:	ff 24       	eor	r15, r15
     44a:	f1 f8       	bld	r15, 1
					#endif
					free(board1.msg);
					board1.ina219.bus_voltage_avg = 0;
					board1.ina219.current_avg = 0;
				}
				nextState = ST_SLEEP;
     44c:	ee 24       	eor	r14, r14
     44e:	e3 94       	inc	r14
		}
		switch (nextState){
			
			case ST_INIT:
				FSM_system_init(&board1.lora_joined_err);
				if (board1.lora_joined_err) nextState = ST_NOT_JOINED;
     450:	0f 2e       	mov	r0, r31
     452:	f3 e0       	ldi	r31, 0x03	; 3
     454:	df 2e       	mov	r13, r31
     456:	f0 2d       	mov	r31, r0
		
	int rejoin_attempts = 0;
	uint8_t lora_wait_rejoin_minutes = 3;
	
	while (1){
		if (data_receive_flag){
     458:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <data_receive_flag>
     45c:	88 23       	and	r24, r24
     45e:	21 f0       	breq	.+8      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
			data_receive_flag = 0;
     460:	10 92 21 06 	sts	0x0621, r1	; 0x800621 <data_receive_flag>
			FSM_assert_downlink();
     464:	0e 94 ac 01 	call	0x358	; 0x358 <FSM_assert_downlink>
			
		}
		if (tx_test_flag){
     468:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <__data_end>
     46c:	88 23       	and	r24, r24
     46e:	51 f0       	breq	.+20     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			tx_test_flag = 0;
     470:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <__data_end>
			printf("Transmit test\n");
     474:	88 eb       	ldi	r24, 0xB8	; 184
     476:	92 e0       	ldi	r25, 0x02	; 2
     478:	0e 94 ff 10 	call	0x21fe	; 0x21fe <puts>
			#ifdef LORA_NODE
				lora_transmit("025403210876");
     47c:	86 ec       	ldi	r24, 0xC6	; 198
     47e:	92 e0       	ldi	r25, 0x02	; 2
     480:	0e 94 27 07 	call	0xe4e	; 0xe4e <lora_transmit>
			#else
				USART_putstring2("025403210876");
			#endif
		}
		switch (nextState){
     484:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <nextState>
     488:	82 30       	cpi	r24, 0x02	; 2
     48a:	89 f1       	breq	.+98     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     48c:	30 f4       	brcc	.+12     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     48e:	88 23       	and	r24, r24
     490:	49 f0       	breq	.+18     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     492:	81 30       	cpi	r24, 0x01	; 1
     494:	09 f4       	brne	.+2      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     496:	d4 c0       	rjmp	.+424    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
     498:	df cf       	rjmp	.-66     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     49a:	83 30       	cpi	r24, 0x03	; 3
     49c:	81 f0       	breq	.+32     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     49e:	84 30       	cpi	r24, 0x04	; 4
     4a0:	31 f1       	breq	.+76     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4a2:	da cf       	rjmp	.-76     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
static volatile int rec_flag = 0;
static void FSM_system_init(uint8_t *joined_flag);
static uint8_t tx_test_flag;

void FSM_system_init(uint8_t *joined_flag){
	board_setup(joined_flag);
     4a4:	ce 01       	movw	r24, r28
     4a6:	0f 96       	adiw	r24, 0x0f	; 15
     4a8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <board_setup>
		}
		switch (nextState){
			
			case ST_INIT:
				FSM_system_init(&board1.lora_joined_err);
				if (board1.lora_joined_err) nextState = ST_NOT_JOINED;
     4ac:	8f 85       	ldd	r24, Y+15	; 0x0f
     4ae:	88 23       	and	r24, r24
     4b0:	19 f0       	breq	.+6      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4b2:	d0 92 52 05 	sts	0x0552, r13	; 0x800552 <nextState>
     4b6:	d0 cf       	rjmp	.-96     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
				else nextState = ST_ACTIVE;
     4b8:	f0 92 52 05 	sts	0x0552, r15	; 0x800552 <nextState>
     4bc:	cd cf       	rjmp	.-102    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
				break;
			
			case ST_NOT_JOINED:
				set_bit(LEDS,LED1);
     4be:	28 9a       	sbi	0x05, 0	; 5
				#ifdef DEBUG_M
					puts("Not joined");
				#endif
				
				rejoin_attempts++;
     4c0:	0f 5f       	subi	r16, 0xFF	; 255
     4c2:	1f 4f       	sbci	r17, 0xFF	; 255
				if (rejoin_attempts < 3) board1.lora_joined_err = lora_join_OTAA();
     4c4:	03 30       	cpi	r16, 0x03	; 3
     4c6:	11 05       	cpc	r17, r1
     4c8:	24 f4       	brge	.+8      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4ca:	0e 94 fd 05 	call	0xbfa	; 0xbfa <lora_join_OTAA>
     4ce:	8f 87       	std	Y+15, r24	; 0x0f
     4d0:	05 c0       	rjmp	.+10     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
				else if (rejoin_attempts >= lora_wait_rejoin_minutes*60) rejoin_attempts = 0;
     4d2:	04 3b       	cpi	r16, 0xB4	; 180
     4d4:	11 05       	cpc	r17, r1
     4d6:	14 f0       	brlt	.+4      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     4d8:	00 e0       	ldi	r16, 0x00	; 0
     4da:	10 e0       	ldi	r17, 0x00	; 0
				
				
				if(board1.lora_joined_err) nextState = ST_ACTIVE;
     4dc:	8f 85       	ldd	r24, Y+15	; 0x0f
     4de:	88 23       	and	r24, r24
     4e0:	19 f0       	breq	.+6      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4e2:	f0 92 52 05 	sts	0x0552, r15	; 0x800552 <nextState>
     4e6:	b8 cf       	rjmp	.-144    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
				else nextState = ST_SLEEP;
     4e8:	e0 92 52 05 	sts	0x0552, r14	; 0x800552 <nextState>
     4ec:	b5 cf       	rjmp	.-150    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			
			case ST_DATA_RECEIVED:
				
			
			case ST_ACTIVE:
				clear_bit(LEDS,LED1);
     4ee:	28 98       	cbi	0x05, 0	; 5
				PORTB ^= (1<<LED2);
     4f0:	85 b1       	in	r24, 0x05	; 5
     4f2:	8f 25       	eor	r24, r15
     4f4:	85 b9       	out	0x05, r24	; 5
				#ifdef DEBUG_M
					//puts("Active");
				#endif
				board1.ina219.bus_voltage_avg	+= INA219_readBusVoltageReg();
     4f6:	0e 94 94 04 	call	0x928	; 0x928 <INA219_readBusVoltageReg>
     4fa:	09 2e       	mov	r0, r25
     4fc:	00 0c       	add	r0, r0
     4fe:	aa 0b       	sbc	r26, r26
     500:	bb 0b       	sbc	r27, r27
     502:	4f 81       	ldd	r20, Y+7	; 0x07
     504:	58 85       	ldd	r21, Y+8	; 0x08
     506:	69 85       	ldd	r22, Y+9	; 0x09
     508:	7a 85       	ldd	r23, Y+10	; 0x0a
     50a:	84 0f       	add	r24, r20
     50c:	95 1f       	adc	r25, r21
     50e:	a6 1f       	adc	r26, r22
     510:	b7 1f       	adc	r27, r23
     512:	8f 83       	std	Y+7, r24	; 0x07
     514:	98 87       	std	Y+8, r25	; 0x08
     516:	a9 87       	std	Y+9, r26	; 0x09
     518:	ba 87       	std	Y+10, r27	; 0x0a
				board1.ina219.current_avg		+= INA219_readCurrentReg();
     51a:	0e 94 c5 04 	call	0x98a	; 0x98a <INA219_readCurrentReg>
     51e:	4b 85       	ldd	r20, Y+11	; 0x0b
     520:	5c 85       	ldd	r21, Y+12	; 0x0c
     522:	6d 85       	ldd	r22, Y+13	; 0x0d
     524:	7e 85       	ldd	r23, Y+14	; 0x0e
     526:	48 0f       	add	r20, r24
     528:	59 1f       	adc	r21, r25
     52a:	61 1d       	adc	r22, r1
     52c:	71 1d       	adc	r23, r1
     52e:	4b 87       	std	Y+11, r20	; 0x0b
     530:	5c 87       	std	Y+12, r21	; 0x0c
     532:	6d 87       	std	Y+13, r22	; 0x0d
     534:	7e 87       	std	Y+14, r23	; 0x0e
				board1.batteryLevel = board_get_battery_level();
     536:	0e 94 79 01 	call	0x2f2	; 0x2f2 <board_get_battery_level>
     53a:	8a 83       	std	Y+2, r24	; 0x02
				board1.sample_size = sample_size;
     53c:	20 91 bb 05 	lds	r18, 0x05BB	; 0x8005bb <sample_size>
     540:	30 91 bc 05 	lds	r19, 0x05BC	; 0x8005bc <sample_size+0x1>
     544:	39 8b       	std	Y+17, r19	; 0x11
     546:	28 8b       	std	Y+16, r18	; 0x10
				if (board1.batteryLevel < 70) board_charge(BOARD_CHARGE_ON);
     548:	86 34       	cpi	r24, 0x46	; 70
     54a:	28 f4       	brcc	.+10     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 55 01 	call	0x2aa	; 0x2aa <board_charge>
     554:	06 c0       	rjmp	.+12     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
				else if (board1.batteryLevel > 95) board_charge(BOARD_CHARGE_OFF);
     556:	80 36       	cpi	r24, 0x60	; 96
     558:	20 f0       	brcs	.+8      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 55 01 	call	0x2aa	; 0x2aa <board_charge>
				if(!(current_time%board1.sample_size) && (current_time != 0)){
     562:	60 91 b7 05 	lds	r22, 0x05B7	; 0x8005b7 <current_time>
     566:	70 91 b8 05 	lds	r23, 0x05B8	; 0x8005b8 <current_time+0x1>
     56a:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <current_time+0x2>
     56e:	90 91 ba 05 	lds	r25, 0x05BA	; 0x8005ba <current_time+0x3>
     572:	88 88       	ldd	r8, Y+16	; 0x10
     574:	99 88       	ldd	r9, Y+17	; 0x11
     576:	a1 2c       	mov	r10, r1
     578:	b1 2c       	mov	r11, r1
     57a:	a5 01       	movw	r20, r10
     57c:	94 01       	movw	r18, r8
     57e:	0e 94 91 0c 	call	0x1922	; 0x1922 <__udivmodsi4>
     582:	67 2b       	or	r22, r23
     584:	68 2b       	or	r22, r24
     586:	69 2b       	or	r22, r25
     588:	09 f0       	breq	.+2      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
     58a:	57 c0       	rjmp	.+174    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     58c:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <current_time>
     590:	90 91 b8 05 	lds	r25, 0x05B8	; 0x8005b8 <current_time+0x1>
     594:	a0 91 b9 05 	lds	r26, 0x05B9	; 0x8005b9 <current_time+0x2>
     598:	b0 91 ba 05 	lds	r27, 0x05BA	; 0x8005ba <current_time+0x3>
     59c:	89 2b       	or	r24, r25
     59e:	8a 2b       	or	r24, r26
     5a0:	8b 2b       	or	r24, r27
     5a2:	09 f4       	brne	.+2      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     5a4:	4a c0       	rjmp	.+148    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
					#ifdef DEBUG_M
						puts("It's time");
					#endif
					if (frame_counter == 0xFF) frame_counter = 0;
     5a6:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <frame_counter>
     5aa:	8f 3f       	cpi	r24, 0xFF	; 255
     5ac:	11 f4       	brne	.+4      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     5ae:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <frame_counter>
					board1.frame_counter = frame_counter++;
     5b2:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <frame_counter>
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	98 0f       	add	r25, r24
     5ba:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <frame_counter>
     5be:	89 83       	std	Y+1, r24	; 0x01
					board1.ina219.bus_voltage	= board1.ina219.bus_voltage_avg / board1.sample_size;
     5c0:	6f 81       	ldd	r22, Y+7	; 0x07
     5c2:	78 85       	ldd	r23, Y+8	; 0x08
     5c4:	89 85       	ldd	r24, Y+9	; 0x09
     5c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     5c8:	a5 01       	movw	r20, r10
     5ca:	94 01       	movw	r18, r8
     5cc:	0e 94 91 0c 	call	0x1922	; 0x1922 <__udivmodsi4>
     5d0:	3c 83       	std	Y+4, r19	; 0x04
     5d2:	2b 83       	std	Y+3, r18	; 0x03
					board1.ina219.current		= board1.ina219.current_avg / board1.sample_size;
     5d4:	6b 85       	ldd	r22, Y+11	; 0x0b
     5d6:	7c 85       	ldd	r23, Y+12	; 0x0c
     5d8:	8d 85       	ldd	r24, Y+13	; 0x0d
     5da:	9e 85       	ldd	r25, Y+14	; 0x0e
     5dc:	a5 01       	movw	r20, r10
     5de:	94 01       	movw	r18, r8
     5e0:	0e 94 91 0c 	call	0x1922	; 0x1922 <__udivmodsi4>
     5e4:	3e 83       	std	Y+6, r19	; 0x06
     5e6:	2d 83       	std	Y+5, r18	; 0x05
					board1.msg = hex_encode(board1);
     5e8:	8d b7       	in	r24, 0x3d	; 61
     5ea:	9e b7       	in	r25, 0x3e	; 62
     5ec:	43 97       	sbiw	r24, 0x13	; 19
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	9e bf       	out	0x3e, r25	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	8d bf       	out	0x3d, r24	; 61
     5f8:	ad b7       	in	r26, 0x3d	; 61
     5fa:	be b7       	in	r27, 0x3e	; 62
     5fc:	11 96       	adiw	r26, 0x01	; 1
     5fe:	83 e1       	ldi	r24, 0x13	; 19
     600:	fe 01       	movw	r30, r28
     602:	31 96       	adiw	r30, 0x01	; 1
     604:	01 90       	ld	r0, Z+
     606:	0d 92       	st	X+, r0
     608:	8a 95       	dec	r24
     60a:	e1 f7       	brne	.-8      	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     60c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <hex_encode>
     610:	9b 8b       	std	Y+19, r25	; 0x13
     612:	8a 8b       	std	Y+18, r24	; 0x12
						puts(board1.msg);
					#else 
						#ifdef DEBUG_M
						//puts(board1.msg);
						#endif
						lora_transmit(board1.msg);
     614:	0e 94 27 07 	call	0xe4e	; 0xe4e <lora_transmit>
					#endif
					free(board1.msg);
     618:	8a 89       	ldd	r24, Y+18	; 0x12
     61a:	9b 89       	ldd	r25, Y+19	; 0x13
     61c:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <free>
					board1.ina219.bus_voltage_avg = 0;
     620:	1f 82       	std	Y+7, r1	; 0x07
     622:	18 86       	std	Y+8, r1	; 0x08
     624:	19 86       	std	Y+9, r1	; 0x09
     626:	1a 86       	std	Y+10, r1	; 0x0a
					board1.ina219.current_avg = 0;
     628:	1b 86       	std	Y+11, r1	; 0x0b
     62a:	1c 86       	std	Y+12, r1	; 0x0c
     62c:	1d 86       	std	Y+13, r1	; 0x0d
     62e:	1e 86       	std	Y+14, r1	; 0x0e
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
				}
				nextState = ST_SLEEP;
     63a:	e0 92 52 05 	sts	0x0552, r14	; 0x800552 <nextState>
				break;
     63e:	0c cf       	rjmp	.-488    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     640:	8f e9       	ldi	r24, 0x9F	; 159
     642:	9f e0       	ldi	r25, 0x0F	; 15
     644:	01 97       	sbiw	r24, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
     648:	00 c0       	rjmp	.+0      	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
     64a:	00 00       	nop
				_delay_ms(2); // Delay to allow a print to be written over serial before sleep
				
				#ifndef TIMER2
				_delay_ms(1000);
				#else
				enter_powerSave();
     64c:	0e 94 22 08 	call	0x1044	; 0x1044 <enter_powerSave>
				#endif

				if(board1.lora_joined_err) nextState = ST_NOT_JOINED;
     650:	8f 85       	ldd	r24, Y+15	; 0x0f
     652:	88 23       	and	r24, r24
     654:	19 f0       	breq	.+6      	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
     656:	d0 92 52 05 	sts	0x0552, r13	; 0x800552 <nextState>
     65a:	fe ce       	rjmp	.-516    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
				else nextState = ST_ACTIVE;
     65c:	f0 92 52 05 	sts	0x0552, r15	; 0x800552 <nextState>
     660:	fb ce       	rjmp	.-522    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>

00000662 <__vector_2>:
		}
	}
}

ISR (INT1_vect)          //External interrupt_zero ISR
{	
     662:	1f 92       	push	r1
     664:	0f 92       	push	r0
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	0f 92       	push	r0
     66a:	11 24       	eor	r1, r1
     66c:	8f 93       	push	r24
	tx_test_flag = 1;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <__data_end>
}
     674:	8f 91       	pop	r24
     676:	0f 90       	pop	r0
     678:	0f be       	out	0x3f, r0	; 63
     67a:	0f 90       	pop	r0
     67c:	1f 90       	pop	r1
     67e:	18 95       	reti

00000680 <__vector_47>:

ISR (USART2_RX_vect){
     680:	1f 92       	push	r1
     682:	0f 92       	push	r0
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	0f 92       	push	r0
     688:	11 24       	eor	r1, r1
     68a:	2f 93       	push	r18
     68c:	3f 93       	push	r19
     68e:	4f 93       	push	r20
     690:	5f 93       	push	r21
     692:	6f 93       	push	r22
     694:	7f 93       	push	r23
     696:	8f 93       	push	r24
     698:	9f 93       	push	r25
     69a:	af 93       	push	r26
     69c:	bf 93       	push	r27
     69e:	ef 93       	push	r30
     6a0:	ff 93       	push	r31
	USART_receiveString2();
     6a2:	0e 94 ca 07 	call	0xf94	; 0xf94 <USART_receiveString2>
	data_receive_flag = 1;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <data_receive_flag>
}
     6ac:	ff 91       	pop	r31
     6ae:	ef 91       	pop	r30
     6b0:	bf 91       	pop	r27
     6b2:	af 91       	pop	r26
     6b4:	9f 91       	pop	r25
     6b6:	8f 91       	pop	r24
     6b8:	7f 91       	pop	r23
     6ba:	6f 91       	pop	r22
     6bc:	5f 91       	pop	r21
     6be:	4f 91       	pop	r20
     6c0:	3f 91       	pop	r19
     6c2:	2f 91       	pop	r18
     6c4:	0f 90       	pop	r0
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	0f 90       	pop	r0
     6ca:	1f 90       	pop	r1
     6cc:	18 95       	reti

000006ce <__vector_11>:


ISR(TIMER2_OVF_vect){
     6ce:	1f 92       	push	r1
     6d0:	0f 92       	push	r0
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	0f 92       	push	r0
     6d6:	11 24       	eor	r1, r1
     6d8:	8f 93       	push	r24
     6da:	9f 93       	push	r25
     6dc:	af 93       	push	r26
     6de:	bf 93       	push	r27
	current_time ++;
     6e0:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <current_time>
     6e4:	90 91 b8 05 	lds	r25, 0x05B8	; 0x8005b8 <current_time+0x1>
     6e8:	a0 91 b9 05 	lds	r26, 0x05B9	; 0x8005b9 <current_time+0x2>
     6ec:	b0 91 ba 05 	lds	r27, 0x05BA	; 0x8005ba <current_time+0x3>
     6f0:	01 96       	adiw	r24, 0x01	; 1
     6f2:	a1 1d       	adc	r26, r1
     6f4:	b1 1d       	adc	r27, r1
     6f6:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <current_time>
     6fa:	90 93 b8 05 	sts	0x05B8, r25	; 0x8005b8 <current_time+0x1>
     6fe:	a0 93 b9 05 	sts	0x05B9, r26	; 0x8005b9 <current_time+0x2>
     702:	b0 93 ba 05 	sts	0x05BA, r27	; 0x8005ba <current_time+0x3>
     706:	bf 91       	pop	r27
     708:	af 91       	pop	r26
     70a:	9f 91       	pop	r25
     70c:	8f 91       	pop	r24
     70e:	0f 90       	pop	r0
     710:	0f be       	out	0x3f, r0	; 63
     712:	0f 90       	pop	r0
     714:	1f 90       	pop	r1
     716:	18 95       	reti

00000718 <i2c_init>:
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address){
    return i2c_start( address );

}
     718:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     71c:	80 e2       	ldi	r24, 0x20	; 32
     71e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     722:	08 95       	ret

00000724 <i2c_sync>:
     724:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     728:	88 23       	and	r24, r24
     72a:	bc f0       	brlt	.+46     	; 0x75a <i2c_sync+0x36>
     72c:	24 e6       	ldi	r18, 0x64	; 100
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	ec ed       	ldi	r30, 0xDC	; 220
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	8a 95       	dec	r24
     738:	f1 f7       	brne	.-4      	; 0x736 <i2c_sync+0x12>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <i2c_sync+0x18>
     73c:	21 50       	subi	r18, 0x01	; 1
     73e:	31 09       	sbc	r19, r1
     740:	80 81       	ld	r24, Z
     742:	88 23       	and	r24, r24
     744:	24 f0       	brlt	.+8      	; 0x74e <i2c_sync+0x2a>
     746:	21 15       	cp	r18, r1
     748:	31 05       	cpc	r19, r1
     74a:	a1 f7       	brne	.-24     	; 0x734 <i2c_sync+0x10>
     74c:	03 c0       	rjmp	.+6      	; 0x754 <i2c_sync+0x30>
     74e:	21 15       	cp	r18, r1
     750:	31 05       	cpc	r19, r1
     752:	29 f4       	brne	.+10     	; 0x75e <i2c_sync+0x3a>
     754:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     758:	02 c0       	rjmp	.+4      	; 0x75e <i2c_sync+0x3a>
     75a:	24 e6       	ldi	r18, 0x64	; 100
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	23 2b       	or	r18, r19
     762:	09 f4       	brne	.+2      	; 0x766 <i2c_sync+0x42>
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	08 95       	ret

00000768 <i2c_waitStop>:
     768:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     76c:	84 ff       	sbrs	r24, 4
     76e:	17 c0       	rjmp	.+46     	; 0x79e <i2c_waitStop+0x36>
     770:	24 e6       	ldi	r18, 0x64	; 100
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	ec ed       	ldi	r30, 0xDC	; 220
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	8a 95       	dec	r24
     77c:	f1 f7       	brne	.-4      	; 0x77a <i2c_waitStop+0x12>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <i2c_waitStop+0x18>
     780:	21 50       	subi	r18, 0x01	; 1
     782:	31 09       	sbc	r19, r1
     784:	80 81       	ld	r24, Z
     786:	84 ff       	sbrs	r24, 4
     788:	04 c0       	rjmp	.+8      	; 0x792 <i2c_waitStop+0x2a>
     78a:	21 15       	cp	r18, r1
     78c:	31 05       	cpc	r19, r1
     78e:	a1 f7       	brne	.-24     	; 0x778 <i2c_waitStop+0x10>
     790:	03 c0       	rjmp	.+6      	; 0x798 <i2c_waitStop+0x30>
     792:	21 15       	cp	r18, r1
     794:	31 05       	cpc	r19, r1
     796:	29 f4       	brne	.+10     	; 0x7a2 <i2c_waitStop+0x3a>
     798:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <i2c_waitStop+0x3a>
     79e:	24 e6       	ldi	r18, 0x64	; 100
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	23 2b       	or	r18, r19
     7a6:	09 f4       	brne	.+2      	; 0x7aa <i2c_waitStop+0x42>
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	08 95       	ret

000007ac <i2c_start>:
     7ac:	cf 93       	push	r28
     7ae:	c8 2f       	mov	r28, r24
     7b0:	84 ea       	ldi	r24, 0xA4	; 164
     7b2:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     7b6:	0e 94 92 03 	call	0x724	; 0x724 <i2c_sync>
     7ba:	88 23       	and	r24, r24
     7bc:	e9 f0       	breq	.+58     	; 0x7f8 <i2c_start+0x4c>
     7be:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     7c2:	88 7f       	andi	r24, 0xF8	; 248
     7c4:	88 30       	cpi	r24, 0x08	; 8
     7c6:	11 f0       	breq	.+4      	; 0x7cc <i2c_start+0x20>
     7c8:	80 31       	cpi	r24, 0x10	; 16
     7ca:	99 f4       	brne	.+38     	; 0x7f2 <i2c_start+0x46>
     7cc:	c0 93 db 00 	sts	0x00DB, r28	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
     7d0:	84 e8       	ldi	r24, 0x84	; 132
     7d2:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     7d6:	0e 94 92 03 	call	0x724	; 0x724 <i2c_sync>
     7da:	88 23       	and	r24, r24
     7dc:	69 f0       	breq	.+26     	; 0x7f8 <i2c_start+0x4c>
     7de:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     7e2:	98 7f       	andi	r25, 0xF8	; 248
     7e4:	98 31       	cpi	r25, 0x18	; 24
     7e6:	39 f0       	breq	.+14     	; 0x7f6 <i2c_start+0x4a>
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	90 34       	cpi	r25, 0x40	; 64
     7ec:	29 f4       	brne	.+10     	; 0x7f8 <i2c_start+0x4c>
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <i2c_start+0x4c>
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <i2c_start+0x4c>
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <i2c_stop>:
/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void){
    /* send stop condition */
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     7fc:	84 e9       	ldi	r24, 0x94	; 148
     7fe:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	
	// wait until stop condition is executed and bus released
	i2c_waitStop(); 
     802:	0e 94 b4 03 	call	0x768	; 0x768 <i2c_waitStop>
     806:	08 95       	ret

00000808 <i2c_write>:
*************************************************************************/
unsigned char i2c_write( unsigned char data ){	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR1 = data;
     808:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	TWCR1 = (1<<TWINT) | (1<<TWEN);
     80c:	84 e8       	ldi	r24, 0x84	; 132
     80e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

	// wait until transmission completed
	i2c_sync();
     812:	0e 94 92 03 	call	0x724	; 0x724 <i2c_sync>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     816:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     81a:	98 7f       	andi	r25, 0xF8	; 248
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	98 32       	cpi	r25, 0x28	; 40
     820:	09 f4       	brne	.+2      	; 0x824 <i2c_write+0x1c>
     822:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}
     824:	08 95       	ret

00000826 <i2c_readAck>:
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void){
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     826:	84 ec       	ldi	r24, 0xC4	; 196
     828:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	i2c_sync();    
     82c:	0e 94 92 03 	call	0x724	; 0x724 <i2c_sync>
	return TWDR1;
     830:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
}
     834:	08 95       	ret

00000836 <i2c_readNak>:
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void){
	TWCR1 = (1<<TWINT) | (1<<TWEN);
     836:	84 e8       	ldi	r24, 0x84	; 132
     838:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	i2c_sync(); 
     83c:	0e 94 92 03 	call	0x724	; 0x724 <i2c_sync>
	return TWDR1;
     840:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
}
     844:	08 95       	ret

00000846 <i2c_read2ByteRegister>:
  
  Input:    device address, register address, buffer for storage
  Return:   0 write successful 
            1 write failed
*************************************************************************/
uint8_t i2c_read2ByteRegister(uint8_t adr, uint8_t regAddr, uint8_t *data){
     846:	ff 92       	push	r15
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	d8 2f       	mov	r29, r24
     852:	f6 2e       	mov	r15, r22
     854:	8a 01       	movw	r16, r20
	uint8_t error = 0;
	error += i2c_start(adr | I2C_WRITE);
     856:	0e 94 d6 03 	call	0x7ac	; 0x7ac <i2c_start>
     85a:	c8 2f       	mov	r28, r24
	error += i2c_write(regAddr);
     85c:	8f 2d       	mov	r24, r15
     85e:	0e 94 04 04 	call	0x808	; 0x808 <i2c_write>
     862:	c8 0f       	add	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     864:	8a e1       	ldi	r24, 0x1A	; 26
     866:	8a 95       	dec	r24
     868:	f1 f7       	brne	.-4      	; 0x866 <i2c_read2ByteRegister+0x20>
     86a:	00 c0       	rjmp	.+0      	; 0x86c <i2c_read2ByteRegister+0x26>
	_delay_us(10);
	//read data
	error += i2c_start(adr | I2C_READ);
     86c:	8d 2f       	mov	r24, r29
     86e:	81 60       	ori	r24, 0x01	; 1
     870:	0e 94 d6 03 	call	0x7ac	; 0x7ac <i2c_start>
     874:	c8 0f       	add	r28, r24
	data[1] = i2c_readAck();
     876:	0e 94 13 04 	call	0x826	; 0x826 <i2c_readAck>
     87a:	f8 01       	movw	r30, r16
     87c:	81 83       	std	Z+1, r24	; 0x01
	data[0] = i2c_readNak();
     87e:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_readNak>
     882:	f8 01       	movw	r30, r16
     884:	80 83       	st	Z, r24
	i2c_stop();
     886:	0e 94 fe 03 	call	0x7fc	; 0x7fc <i2c_stop>
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	c1 11       	cpse	r28, r1
     88e:	01 c0       	rjmp	.+2      	; 0x892 <i2c_read2ByteRegister+0x4c>
     890:	80 e0       	ldi	r24, 0x00	; 0
	
	if (error) return 1;
	else return 0;
}
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	ff 90       	pop	r15
     89c:	08 95       	ret

0000089e <i2c_write2ByteRegister>:
  
  Input:    device address, register address, bytes to be transfered 
  Return:   0 write successful
			1 write failed
*************************************************************************/
uint8_t i2c_write2ByteRegister(uint8_t adr, uint8_t regAddr, uint16_t data){
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	06 2f       	mov	r16, r22
     8a8:	d4 2f       	mov	r29, r20
     8aa:	15 2f       	mov	r17, r21
	uint8_t error = 0;
	error += i2c_start(adr | I2C_WRITE);
     8ac:	0e 94 d6 03 	call	0x7ac	; 0x7ac <i2c_start>
     8b0:	c8 2f       	mov	r28, r24
	error += i2c_write(regAddr);
     8b2:	80 2f       	mov	r24, r16
     8b4:	0e 94 04 04 	call	0x808	; 0x808 <i2c_write>
     8b8:	c8 0f       	add	r28, r24
     8ba:	8a e1       	ldi	r24, 0x1A	; 26
     8bc:	8a 95       	dec	r24
     8be:	f1 f7       	brne	.-4      	; 0x8bc <i2c_write2ByteRegister+0x1e>
     8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <i2c_write2ByteRegister+0x24>
	_delay_us(10);
	error += i2c_write((uint8_t)(data >> 8));
     8c2:	81 2f       	mov	r24, r17
     8c4:	0e 94 04 04 	call	0x808	; 0x808 <i2c_write>
     8c8:	c8 0f       	add	r28, r24
	error += i2c_write((uint8_t)(data & 0xFF));
     8ca:	8d 2f       	mov	r24, r29
     8cc:	0e 94 04 04 	call	0x808	; 0x808 <i2c_write>
     8d0:	c8 0f       	add	r28, r24
	i2c_stop();
     8d2:	0e 94 fe 03 	call	0x7fc	; 0x7fc <i2c_stop>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	c1 11       	cpse	r28, r1
     8da:	01 c0       	rjmp	.+2      	; 0x8de <i2c_write2ByteRegister+0x40>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
	if (error) return 1;
	else return 0;
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	08 95       	ret

000008e8 <INA219_trigger_oneshow_conversion>:

uint16_t INA219_readShuntVoltageReg(){ // Not operational
	uint8_t value[2];
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_SHUNTVOLTAGE, value)) return 1;
	return ((value[1] << 8) | value[0]);
}
     8e8:	4b e9       	ldi	r20, 0x9B	; 155
     8ea:	51 e0       	ldi	r21, 0x01	; 1
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	0e 94 4f 04 	call	0x89e	; 0x89e <i2c_write2ByteRegister>
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	81 11       	cpse	r24, r1
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <INA219_trigger_oneshow_conversion+0x14>
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	89 2f       	mov	r24, r25
     8fe:	08 95       	ret

00000900 <INA219_setCalibration_16V_400mA>:
     900:	cf 93       	push	r28
     902:	40 e8       	ldi	r20, 0x80	; 128
     904:	5a e6       	ldi	r21, 0x6A	; 106
     906:	65 e0       	ldi	r22, 0x05	; 5
     908:	80 e8       	ldi	r24, 0x80	; 128
     90a:	0e 94 4f 04 	call	0x89e	; 0x89e <i2c_write2ByteRegister>
     90e:	c8 2f       	mov	r28, r24
     910:	4b e9       	ldi	r20, 0x9B	; 155
     912:	51 e0       	ldi	r21, 0x01	; 1
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	80 e8       	ldi	r24, 0x80	; 128
     918:	0e 94 4f 04 	call	0x89e	; 0x89e <i2c_write2ByteRegister>
     91c:	c8 0f       	add	r28, r24
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	09 f4       	brne	.+2      	; 0x924 <INA219_setCalibration_16V_400mA+0x24>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <INA219_readBusVoltageReg>:
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	00 d0       	rcall	.+0      	; 0x92e <INA219_readBusVoltageReg+0x6>
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	0e 94 74 04 	call	0x8e8	; 0x8e8 <INA219_trigger_oneshow_conversion>
     936:	8f ea       	ldi	r24, 0xAF	; 175
     938:	94 e0       	ldi	r25, 0x04	; 4
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	f1 f7       	brne	.-4      	; 0x93a <INA219_readBusVoltageReg+0x12>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <INA219_readBusVoltageReg+0x18>
     940:	00 00       	nop
     942:	ae 01       	movw	r20, r28
     944:	4f 5f       	subi	r20, 0xFF	; 255
     946:	5f 4f       	sbci	r21, 0xFF	; 255
     948:	62 e0       	ldi	r22, 0x02	; 2
     94a:	80 e8       	ldi	r24, 0x80	; 128
     94c:	0e 94 23 04 	call	0x846	; 0x846 <i2c_read2ByteRegister>
     950:	81 11       	cpse	r24, r1
     952:	11 c0       	rjmp	.+34     	; 0x976 <INA219_readBusVoltageReg+0x4e>
     954:	8a 81       	ldd	r24, Y+2	; 0x02
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	98 2f       	mov	r25, r24
     95a:	88 27       	eor	r24, r24
     95c:	29 81       	ldd	r18, Y+1	; 0x01
     95e:	82 2b       	or	r24, r18
     960:	95 95       	asr	r25
     962:	87 95       	ror	r24
     964:	95 95       	asr	r25
     966:	87 95       	ror	r24
     968:	95 95       	asr	r25
     96a:	87 95       	ror	r24
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	20 e1       	ldi	r18, 0x10	; 16
     970:	92 07       	cpc	r25, r18
     972:	30 f0       	brcs	.+12     	; 0x980 <INA219_readBusVoltageReg+0x58>
     974:	03 c0       	rjmp	.+6      	; 0x97c <INA219_readBusVoltageReg+0x54>
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	02 c0       	rjmp	.+4      	; 0x980 <INA219_readBusVoltageReg+0x58>
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	08 95       	ret

0000098a <INA219_readCurrentReg>:
uint16_t INA219_readCurrentReg(){
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	00 d0       	rcall	.+0      	; 0x990 <INA219_readCurrentReg+0x6>
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
	uint8_t value[2];
	INA219_trigger_oneshow_conversion();
     994:	0e 94 74 04 	call	0x8e8	; 0x8e8 <INA219_trigger_oneshow_conversion>
     998:	8f ea       	ldi	r24, 0xAF	; 175
     99a:	94 e0       	ldi	r25, 0x04	; 4
     99c:	01 97       	sbiw	r24, 0x01	; 1
     99e:	f1 f7       	brne	.-4      	; 0x99c <INA219_readCurrentReg+0x12>
     9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <INA219_readCurrentReg+0x18>
     9a2:	00 00       	nop
	_delay_us(600);
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_CURRENT, value)) return 0;
     9a4:	ae 01       	movw	r20, r28
     9a6:	4f 5f       	subi	r20, 0xFF	; 255
     9a8:	5f 4f       	sbci	r21, 0xFF	; 255
     9aa:	64 e0       	ldi	r22, 0x04	; 4
     9ac:	80 e8       	ldi	r24, 0x80	; 128
     9ae:	0e 94 23 04 	call	0x846	; 0x846 <i2c_read2ByteRegister>
     9b2:	81 11       	cpse	r24, r1
     9b4:	0d c0       	rjmp	.+26     	; 0x9d0 <INA219_readCurrentReg+0x46>
	uint16_t total = (value[1] << 8) | value[0];
     9b6:	2a 81       	ldd	r18, Y+2	; 0x02
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	32 2f       	mov	r19, r18
     9bc:	22 27       	eor	r18, r18
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	28 2b       	or	r18, r24
	#ifdef INA219_debug
	printf("curr: %u\n", total);
	#endif
	if(total>0x8000) return 0x00;  // Remove possibility of corruption with a bug where total is above 0xFFAE with no connected source.
     9c2:	21 30       	cpi	r18, 0x01	; 1
     9c4:	90 e8       	ldi	r25, 0x80	; 128
     9c6:	39 07       	cpc	r19, r25
     9c8:	30 f4       	brcc	.+12     	; 0x9d6 <INA219_readCurrentReg+0x4c>
	return total;
     9ca:	82 2f       	mov	r24, r18
     9cc:	93 2f       	mov	r25, r19
     9ce:	05 c0       	rjmp	.+10     	; 0x9da <INA219_readCurrentReg+0x50>
}
uint16_t INA219_readCurrentReg(){
	uint8_t value[2];
	INA219_trigger_oneshow_conversion();
	_delay_us(600);
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_CURRENT, value)) return 0;
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <INA219_readCurrentReg+0x50>
	uint16_t total = (value[1] << 8) | value[0];
	#ifdef INA219_debug
	printf("curr: %u\n", total);
	#endif
	if(total>0x8000) return 0x00;  // Remove possibility of corruption with a bug where total is above 0xFFAE with no connected source.
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
	return total;
}
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	08 95       	ret

000009e4 <INA219_init>:


uint8_t INA219_init(){
	if (INA219_setCalibration_16V_400mA()) {
     9e4:	0e 94 80 04 	call	0x900	; 0x900 <INA219_setCalibration_16V_400mA>
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	81 11       	cpse	r24, r1
     9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <INA219_init+0xc>
     9ee:	90 e0       	ldi	r25, 0x00	; 0
		INA219_readCalibrationReg();
		INA219_readConfigReg();
		#endif
		return 0;
	}
     9f0:	89 2f       	mov	r24, r25
     9f2:	08 95       	ret

000009f4 <lora_send_command>:
	
	
	lora_join_ABP();
	
	return 0;
}
     9f4:	0e 94 9d 07 	call	0xf3a	; 0xf3a <USART_putstring0>
     9f8:	8d e0       	ldi	r24, 0x0D	; 13
     9fa:	0e 94 95 07 	call	0xf2a	; 0xf2a <USART_transmit0>
     9fe:	8a e0       	ldi	r24, 0x0A	; 10
     a00:	0e 94 95 07 	call	0xf2a	; 0xf2a <USART_transmit0>
     a04:	08 95       	ret

00000a06 <lora_assert_response>:
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	ec 01       	movw	r28, r24
     a0c:	42 e0       	ldi	r20, 0x02	; 2
     a0e:	50 e0       	ldi	r21, 0x00	; 0
     a10:	61 ef       	ldi	r22, 0xF1	; 241
     a12:	72 e0       	ldi	r23, 0x02	; 2
     a14:	0e 94 a3 10 	call	0x2146	; 0x2146 <strncmp>
     a18:	89 2b       	or	r24, r25
     a1a:	09 f4       	brne	.+2      	; 0xa1e <lora_assert_response+0x18>
     a1c:	8f c0       	rjmp	.+286    	; 0xb3c <lora_assert_response+0x136>
     a1e:	48 e0       	ldi	r20, 0x08	; 8
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	61 ee       	ldi	r22, 0xE1	; 225
     a24:	72 e0       	ldi	r23, 0x02	; 2
     a26:	ce 01       	movw	r24, r28
     a28:	0e 94 a3 10 	call	0x2146	; 0x2146 <strncmp>
     a2c:	89 2b       	or	r24, r25
     a2e:	09 f4       	brne	.+2      	; 0xa32 <lora_assert_response+0x2c>
     a30:	87 c0       	rjmp	.+270    	; 0xb40 <lora_assert_response+0x13a>
     a32:	49 e0       	ldi	r20, 0x09	; 9
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	6a ee       	ldi	r22, 0xEA	; 234
     a38:	72 e0       	ldi	r23, 0x02	; 2
     a3a:	ce 01       	movw	r24, r28
     a3c:	0e 94 a3 10 	call	0x2146	; 0x2146 <strncmp>
     a40:	89 2b       	or	r24, r25
     a42:	09 f4       	brne	.+2      	; 0xa46 <lora_assert_response+0x40>
     a44:	7f c0       	rjmp	.+254    	; 0xb44 <lora_assert_response+0x13e>
     a46:	47 e0       	ldi	r20, 0x07	; 7
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	64 ef       	ldi	r22, 0xF4	; 244
     a4c:	72 e0       	ldi	r23, 0x02	; 2
     a4e:	ce 01       	movw	r24, r28
     a50:	0e 94 a3 10 	call	0x2146	; 0x2146 <strncmp>
     a54:	89 2b       	or	r24, r25
     a56:	39 f4       	brne	.+14     	; 0xa66 <lora_assert_response+0x60>
     a58:	be 01       	movw	r22, r28
     a5a:	83 e5       	ldi	r24, 0x53	; 83
     a5c:	95 e0       	ldi	r25, 0x05	; 5
     a5e:	0e 94 9c 10 	call	0x2138	; 0x2138 <strcpy>
     a62:	81 e1       	ldi	r24, 0x11	; 17
     a64:	86 c0       	rjmp	.+268    	; 0xb72 <lora_assert_response+0x16c>
     a66:	46 e0       	ldi	r20, 0x06	; 6
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	6c ef       	ldi	r22, 0xFC	; 252
     a6c:	72 e0       	ldi	r23, 0x02	; 2
     a6e:	ce 01       	movw	r24, r28
     a70:	0e 94 a3 10 	call	0x2146	; 0x2146 <strncmp>
     a74:	89 2b       	or	r24, r25
     a76:	09 f4       	brne	.+2      	; 0xa7a <lora_assert_response+0x74>
     a78:	67 c0       	rjmp	.+206    	; 0xb48 <lora_assert_response+0x142>
     a7a:	4d e0       	ldi	r20, 0x0D	; 13
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	63 e0       	ldi	r22, 0x03	; 3
     a80:	73 e0       	ldi	r23, 0x03	; 3
     a82:	ce 01       	movw	r24, r28
     a84:	0e 94 a3 10 	call	0x2146	; 0x2146 <strncmp>
     a88:	89 2b       	or	r24, r25
     a8a:	09 f4       	brne	.+2      	; 0xa8e <lora_assert_response+0x88>
     a8c:	5f c0       	rjmp	.+190    	; 0xb4c <lora_assert_response+0x146>
     a8e:	4c e0       	ldi	r20, 0x0C	; 12
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	61 e1       	ldi	r22, 0x11	; 17
     a94:	73 e0       	ldi	r23, 0x03	; 3
     a96:	ce 01       	movw	r24, r28
     a98:	0e 94 a3 10 	call	0x2146	; 0x2146 <strncmp>
     a9c:	89 2b       	or	r24, r25
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <lora_assert_response+0x9c>
     aa0:	57 c0       	rjmp	.+174    	; 0xb50 <lora_assert_response+0x14a>
     aa2:	46 e0       	ldi	r20, 0x06	; 6
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	6e e1       	ldi	r22, 0x1E	; 30
     aa8:	73 e0       	ldi	r23, 0x03	; 3
     aaa:	ce 01       	movw	r24, r28
     aac:	0e 94 a3 10 	call	0x2146	; 0x2146 <strncmp>
     ab0:	89 2b       	or	r24, r25
     ab2:	09 f4       	brne	.+2      	; 0xab6 <lora_assert_response+0xb0>
     ab4:	4f c0       	rjmp	.+158    	; 0xb54 <lora_assert_response+0x14e>
     ab6:	44 e0       	ldi	r20, 0x04	; 4
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	65 e2       	ldi	r22, 0x25	; 37
     abc:	73 e0       	ldi	r23, 0x03	; 3
     abe:	ce 01       	movw	r24, r28
     ac0:	0e 94 a3 10 	call	0x2146	; 0x2146 <strncmp>
     ac4:	89 2b       	or	r24, r25
     ac6:	09 f4       	brne	.+2      	; 0xaca <lora_assert_response+0xc4>
     ac8:	47 c0       	rjmp	.+142    	; 0xb58 <lora_assert_response+0x152>
     aca:	4a e0       	ldi	r20, 0x0A	; 10
     acc:	50 e0       	ldi	r21, 0x00	; 0
     ace:	6a e2       	ldi	r22, 0x2A	; 42
     ad0:	73 e0       	ldi	r23, 0x03	; 3
     ad2:	ce 01       	movw	r24, r28
     ad4:	0e 94 a3 10 	call	0x2146	; 0x2146 <strncmp>
     ad8:	89 2b       	or	r24, r25
     ada:	09 f4       	brne	.+2      	; 0xade <lora_assert_response+0xd8>
     adc:	3f c0       	rjmp	.+126    	; 0xb5c <lora_assert_response+0x156>
     ade:	4d e0       	ldi	r20, 0x0D	; 13
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	65 e3       	ldi	r22, 0x35	; 53
     ae4:	73 e0       	ldi	r23, 0x03	; 3
     ae6:	ce 01       	movw	r24, r28
     ae8:	0e 94 a3 10 	call	0x2146	; 0x2146 <strncmp>
     aec:	89 2b       	or	r24, r25
     aee:	c1 f1       	breq	.+112    	; 0xb60 <lora_assert_response+0x15a>
     af0:	4a e0       	ldi	r20, 0x0A	; 10
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	63 e4       	ldi	r22, 0x43	; 67
     af6:	73 e0       	ldi	r23, 0x03	; 3
     af8:	ce 01       	movw	r24, r28
     afa:	0e 94 a3 10 	call	0x2146	; 0x2146 <strncmp>
     afe:	89 2b       	or	r24, r25
     b00:	89 f1       	breq	.+98     	; 0xb64 <lora_assert_response+0x15e>
     b02:	4f e1       	ldi	r20, 0x1F	; 31
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	6e e4       	ldi	r22, 0x4E	; 78
     b08:	73 e0       	ldi	r23, 0x03	; 3
     b0a:	ce 01       	movw	r24, r28
     b0c:	0e 94 a3 10 	call	0x2146	; 0x2146 <strncmp>
     b10:	89 2b       	or	r24, r25
     b12:	51 f1       	breq	.+84     	; 0xb68 <lora_assert_response+0x162>
     b14:	40 e1       	ldi	r20, 0x10	; 16
     b16:	50 e0       	ldi	r21, 0x00	; 0
     b18:	6e e6       	ldi	r22, 0x6E	; 110
     b1a:	73 e0       	ldi	r23, 0x03	; 3
     b1c:	ce 01       	movw	r24, r28
     b1e:	0e 94 a3 10 	call	0x2146	; 0x2146 <strncmp>
     b22:	89 2b       	or	r24, r25
     b24:	19 f1       	breq	.+70     	; 0xb6c <lora_assert_response+0x166>
     b26:	47 e0       	ldi	r20, 0x07	; 7
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	6f e7       	ldi	r22, 0x7F	; 127
     b2c:	73 e0       	ldi	r23, 0x03	; 3
     b2e:	ce 01       	movw	r24, r28
     b30:	0e 94 a3 10 	call	0x2146	; 0x2146 <strncmp>
     b34:	89 2b       	or	r24, r25
     b36:	e1 f0       	breq	.+56     	; 0xb70 <lora_assert_response+0x16a>
     b38:	8a ea       	ldi	r24, 0xAA	; 170
     b3a:	1b c0       	rjmp	.+54     	; 0xb72 <lora_assert_response+0x16c>
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	19 c0       	rjmp	.+50     	; 0xb72 <lora_assert_response+0x16c>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	17 c0       	rjmp	.+46     	; 0xb72 <lora_assert_response+0x16c>
     b44:	80 e1       	ldi	r24, 0x10	; 16
     b46:	15 c0       	rjmp	.+42     	; 0xb72 <lora_assert_response+0x16c>
     b48:	8a e0       	ldi	r24, 0x0A	; 10
     b4a:	13 c0       	rjmp	.+38     	; 0xb72 <lora_assert_response+0x16c>
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	11 c0       	rjmp	.+34     	; 0xb72 <lora_assert_response+0x16c>
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	0f c0       	rjmp	.+30     	; 0xb72 <lora_assert_response+0x16c>
     b54:	83 e0       	ldi	r24, 0x03	; 3
     b56:	0d c0       	rjmp	.+26     	; 0xb72 <lora_assert_response+0x16c>
     b58:	84 e0       	ldi	r24, 0x04	; 4
     b5a:	0b c0       	rjmp	.+22     	; 0xb72 <lora_assert_response+0x16c>
     b5c:	85 e0       	ldi	r24, 0x05	; 5
     b5e:	09 c0       	rjmp	.+18     	; 0xb72 <lora_assert_response+0x16c>
     b60:	86 e0       	ldi	r24, 0x06	; 6
     b62:	07 c0       	rjmp	.+14     	; 0xb72 <lora_assert_response+0x16c>
     b64:	87 e0       	ldi	r24, 0x07	; 7
     b66:	05 c0       	rjmp	.+10     	; 0xb72 <lora_assert_response+0x16c>
     b68:	88 e0       	ldi	r24, 0x08	; 8
     b6a:	03 c0       	rjmp	.+6      	; 0xb72 <lora_assert_response+0x16c>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	01 c0       	rjmp	.+2      	; 0xb72 <lora_assert_response+0x16c>
     b70:	8d e0       	ldi	r24, 0x0D	; 13
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	08 95       	ret

00000b78 <lora_receive_response>:
     b78:	cf 92       	push	r12
     b7a:	df 92       	push	r13
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	1f 93       	push	r17
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	ca 5f       	subi	r28, 0xFA	; 250
     b8c:	d1 09       	sbc	r29, r1
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	cd bf       	out	0x3d, r28	; 61
     b98:	ce 01       	movw	r24, r28
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	6c 01       	movw	r12, r24
     b9e:	e1 2c       	mov	r14, r1
     ba0:	f1 2c       	mov	r15, r1
     ba2:	0e 94 8d 07 	call	0xf1a	; 0xf1a <USART_receive0>
     ba6:	18 2f       	mov	r17, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <putchar>
     bae:	1d 30       	cpi	r17, 0x0D	; 13
     bb0:	71 f4       	brne	.+28     	; 0xbce <lora_receive_response+0x56>
     bb2:	0e 94 8d 07 	call	0xf1a	; 0xf1a <USART_receive0>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	ec 0f       	add	r30, r28
     bbc:	fd 1f       	adc	r31, r29
     bbe:	ee 0d       	add	r30, r14
     bc0:	ff 1d       	adc	r31, r15
     bc2:	10 82       	st	Z, r1
     bc4:	ce 01       	movw	r24, r28
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	0e 94 03 05 	call	0xa06	; 0xa06 <lora_assert_response>
     bcc:	07 c0       	rjmp	.+14     	; 0xbdc <lora_receive_response+0x64>
     bce:	f6 01       	movw	r30, r12
     bd0:	11 93       	st	Z+, r17
     bd2:	6f 01       	movw	r12, r30
     bd4:	ff ef       	ldi	r31, 0xFF	; 255
     bd6:	ef 1a       	sub	r14, r31
     bd8:	ff 0a       	sbc	r15, r31
     bda:	e3 cf       	rjmp	.-58     	; 0xba2 <lora_receive_response+0x2a>
     bdc:	c6 50       	subi	r28, 0x06	; 6
     bde:	df 4f       	sbci	r29, 0xFF	; 255
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	de bf       	out	0x3e, r29	; 62
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	ff 90       	pop	r15
     bf2:	ef 90       	pop	r14
     bf4:	df 90       	pop	r13
     bf6:	cf 90       	pop	r12
     bf8:	08 95       	ret

00000bfa <lora_join_OTAA>:
     bfa:	81 e9       	ldi	r24, 0x91	; 145
     bfc:	93 e0       	ldi	r25, 0x03	; 3
     bfe:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <lora_send_command>
     c02:	0e 94 bc 05 	call	0xb78	; 0xb78 <lora_receive_response>
     c06:	81 11       	cpse	r24, r1
     c08:	05 c0       	rjmp	.+10     	; 0xc14 <lora_join_OTAA+0x1a>
     c0a:	0e 94 bc 05 	call	0xb78	; 0xb78 <lora_receive_response>
     c0e:	81 11       	cpse	r24, r1
     c10:	03 c0       	rjmp	.+6      	; 0xc18 <lora_join_OTAA+0x1e>
     c12:	08 95       	ret
     c14:	82 e2       	ldi	r24, 0x22	; 34
     c16:	08 95       	ret
     c18:	83 e2       	ldi	r24, 0x23	; 35
     c1a:	08 95       	ret

00000c1c <lora_init>:

}



uint8_t lora_init(uint8_t *joined_err){
     c1c:	ef 92       	push	r14
     c1e:	ff 92       	push	r15
     c20:	0f 93       	push	r16
     c22:	1f 93       	push	r17
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	e2 97       	sbiw	r28, 0x32	; 50
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	cd bf       	out	0x3d, r28	; 61
     c38:	7c 01       	movw	r14, r24

static uint8_t lora_set_dcycle(void);
static uint8_t lora_save_settings(void);

void lora_auto_baud_detect(void){
	DDRD |= (1<<PORTD1);
     c3a:	51 9a       	sbi	0x0a, 1	; 10
	PORTD &= ~(1<<PORTD1);
     c3c:	59 98       	cbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c3e:	8f e1       	ldi	r24, 0x1F	; 31
     c40:	9e e4       	ldi	r25, 0x4E	; 78
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <lora_init+0x26>
     c46:	00 c0       	rjmp	.+0      	; 0xc48 <lora_init+0x2c>
     c48:	00 00       	nop
	_delay_ms(10);
	DDRD = 0x00;
     c4a:	1a b8       	out	0x0a, r1	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c4c:	9a e1       	ldi	r25, 0x1A	; 26
     c4e:	9a 95       	dec	r25
     c50:	f1 f7       	brne	.-4      	; 0xc4e <lora_init+0x32>
     c52:	00 c0       	rjmp	.+0      	; 0xc54 <lora_init+0x38>
	_delay_us(10);
	USART_init();
     c54:	0e 94 62 07 	call	0xec4	; 0xec4 <USART_init>
	USART_transmit0(0x55);
     c58:	85 e5       	ldi	r24, 0x55	; 85
     c5a:	0e 94 95 07 	call	0xf2a	; 0xf2a <USART_transmit0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c5e:	af ef       	ldi	r26, 0xFF	; 255
     c60:	b0 e7       	ldi	r27, 0x70	; 112
     c62:	e2 e0       	ldi	r30, 0x02	; 2
     c64:	a1 50       	subi	r26, 0x01	; 1
     c66:	b0 40       	sbci	r27, 0x00	; 0
     c68:	e0 40       	sbci	r30, 0x00	; 0
     c6a:	e1 f7       	brne	.-8      	; 0xc64 <lora_init+0x48>
     c6c:	00 c0       	rjmp	.+0      	; 0xc6e <lora_init+0x52>
     c6e:	00 00       	nop

uint8_t lora_reset_to_band(){

	char cmd[20];
	#ifdef LORA_BAND
		sprintf(cmd, "mac reset %d", LORA_BAND);
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	8f 93       	push	r24
     c74:	84 e6       	ldi	r24, 0x64	; 100
     c76:	8f 93       	push	r24
     c78:	83 e3       	ldi	r24, 0x33	; 51
     c7a:	94 e0       	ldi	r25, 0x04	; 4
     c7c:	9f 93       	push	r25
     c7e:	8f 93       	push	r24
     c80:	8e 01       	movw	r16, r28
     c82:	0f 5f       	subi	r16, 0xFF	; 255
     c84:	1f 4f       	sbci	r17, 0xFF	; 255
     c86:	1f 93       	push	r17
     c88:	0f 93       	push	r16
     c8a:	0e 94 2f 11 	call	0x225e	; 0x225e <sprintf>
	#endif
	
	#ifdef DEBUG_M
		printf("%s: ",cmd);
	#endif
	lora_send_command(cmd);
     c8e:	c8 01       	movw	r24, r16
     c90:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <lora_send_command>
	return lora_receive_response();
     c94:	0e 94 bc 05 	call	0xb78	; 0xb78 <lora_receive_response>
	#endif
	


	err = lora_reset_to_band();
	if (err) return 1;
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	81 11       	cpse	r24, r1
     ca6:	bc c0       	rjmp	.+376    	; 0xe20 <lora_init+0x204>
	#ifdef DEBUG_M
		printf("Set ADR: ");
	#endif
	
	#ifdef LORA_ADR
		lora_send_command("mac set adr on");
     ca8:	80 e4       	ldi	r24, 0x40	; 64
     caa:	94 e0       	ldi	r25, 0x04	; 4
     cac:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <lora_send_command>
	#else
		lora_send_command("mac set adr off");
	#endif
	return lora_receive_response();
     cb0:	0e 94 bc 05 	call	0xb78	; 0xb78 <lora_receive_response>
	err = lora_reset_to_band();
	if (err) return 1;
	
	
	err = lora_set_adr() ;
	if (err) return 2;
     cb4:	81 11       	cpse	r24, r1
     cb6:	b6 c0       	rjmp	.+364    	; 0xe24 <lora_init+0x208>
	return lora_receive_response();
}
uint8_t lora_set_dr(){
	char cmd[20];
	#ifdef LORA_DR
	sprintf(cmd, "mac set dr %d",LORA_DR);
     cb8:	1f 92       	push	r1
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	8f 93       	push	r24
     cbe:	8f e4       	ldi	r24, 0x4F	; 79
     cc0:	94 e0       	ldi	r25, 0x04	; 4
     cc2:	9f 93       	push	r25
     cc4:	8f 93       	push	r24
     cc6:	1f 93       	push	r17
     cc8:	0f 93       	push	r16
     cca:	0e 94 2f 11 	call	0x225e	; 0x225e <sprintf>
	#endif
	#ifdef DEBUG_M
		printf("%s: ",cmd);
	#endif
	lora_send_command(cmd);
     cce:	c8 01       	movw	r24, r16
     cd0:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <lora_send_command>
	return lora_receive_response();
     cd4:	0e 94 bc 05 	call	0xb78	; 0xb78 <lora_receive_response>
	err = lora_set_adr() ;
	if (err) return 2;
	
	
	err = lora_set_dr();
	if (err) return 3;
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	81 11       	cpse	r24, r1
     ce6:	a0 c0       	rjmp	.+320    	; 0xe28 <lora_init+0x20c>
}
uint8_t lora_set_pwridx(){
	
	char cmd[20];
	#ifdef LORA_PWRIDX
	sprintf(cmd, "mac set pwridx %d",LORA_PWRIDX);
     ce8:	1f 92       	push	r1
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	8f 93       	push	r24
     cee:	8d e5       	ldi	r24, 0x5D	; 93
     cf0:	94 e0       	ldi	r25, 0x04	; 4
     cf2:	9f 93       	push	r25
     cf4:	8f 93       	push	r24
     cf6:	1f 93       	push	r17
     cf8:	0f 93       	push	r16
     cfa:	0e 94 2f 11 	call	0x225e	; 0x225e <sprintf>
	#endif
	#ifdef DEBUG_M
		printf("%s: ",cmd);
	#endif
	lora_send_command(cmd);
     cfe:	c8 01       	movw	r24, r16
     d00:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <lora_send_command>
	return lora_receive_response();
     d04:	0e 94 bc 05 	call	0xb78	; 0xb78 <lora_receive_response>
	err = lora_set_dr();
	if (err) return 3;
	
	
	err = lora_set_pwridx();
	if (err) return 4;
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	81 11       	cpse	r24, r1
     d16:	8a c0       	rjmp	.+276    	; 0xe2c <lora_init+0x210>
uint8_t lora_set_dcycle(void){
	uint8_t err;
	#ifdef DEBUG_M
		printf("Setting dcycle for ch 0: ");
	#endif
	lora_send_command("mac set ch dcycle 0 9");
     d18:	8f e6       	ldi	r24, 0x6F	; 111
     d1a:	94 e0       	ldi	r25, 0x04	; 4
     d1c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <lora_send_command>
	err = lora_receive_response();
     d20:	0e 94 bc 05 	call	0xb78	; 0xb78 <lora_receive_response>
	if (err) return 0xB1;
     d24:	81 11       	cpse	r24, r1
     d26:	0e c0       	rjmp	.+28     	; 0xd44 <lora_init+0x128>
	
	#ifdef DEBUG_M
	printf("Setting dcycle for ch 1: ");
	#endif
	lora_send_command("mac set ch dcycle 1 9");
     d28:	85 e8       	ldi	r24, 0x85	; 133
     d2a:	94 e0       	ldi	r25, 0x04	; 4
     d2c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <lora_send_command>
	err = lora_receive_response();
     d30:	0e 94 bc 05 	call	0xb78	; 0xb78 <lora_receive_response>
	if (err) return 0xB2;
     d34:	81 11       	cpse	r24, r1
     d36:	06 c0       	rjmp	.+12     	; 0xd44 <lora_init+0x128>
	
	#ifdef DEBUG_M
	printf("Setting dcycle for ch 2: ");
	#endif
	lora_send_command("mac set ch dcycle 2 9");
     d38:	8b e9       	ldi	r24, 0x9B	; 155
     d3a:	94 e0       	ldi	r25, 0x04	; 4
     d3c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <lora_send_command>
	err = lora_receive_response();
     d40:	0e 94 bc 05 	call	0xb78	; 0xb78 <lora_receive_response>
#endif

uint8_t lora_set_deveui(){

	
	char cmd[50] = "mac set deveui ";
     d44:	80 e1       	ldi	r24, 0x10	; 16
     d46:	e0 eb       	ldi	r30, 0xB0	; 176
     d48:	f1 e0       	ldi	r31, 0x01	; 1
     d4a:	de 01       	movw	r26, r28
     d4c:	11 96       	adiw	r26, 0x01	; 1
     d4e:	01 90       	ld	r0, Z+
     d50:	0d 92       	st	X+, r0
     d52:	8a 95       	dec	r24
     d54:	e1 f7       	brne	.-8      	; 0xd4e <lora_init+0x132>
     d56:	fe 01       	movw	r30, r28
     d58:	71 96       	adiw	r30, 0x11	; 17
     d5a:	82 e2       	ldi	r24, 0x22	; 34
     d5c:	df 01       	movw	r26, r30
     d5e:	1d 92       	st	X+, r1
     d60:	8a 95       	dec	r24
     d62:	e9 f7       	brne	.-6      	; 0xd5e <lora_init+0x142>
	strcat(cmd, devEui);
     d64:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <devEui>
     d68:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <devEui+0x1>
     d6c:	ce 01       	movw	r24, r28
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	0e 94 91 10 	call	0x2122	; 0x2122 <strcat>
	
	#ifdef DEBUG_M
		printf("%s:  ", cmd);
	#endif
	lora_send_command(cmd);
     d74:	ce 01       	movw	r24, r28
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <lora_send_command>
	return lora_receive_response();
     d7c:	0e 94 bc 05 	call	0xb78	; 0xb78 <lora_receive_response>
		puts("Loading OTAA settings...");
	#endif
	uint8_t err = 0;
	
	err = lora_set_deveui();
	if (err) return 7;
     d80:	81 11       	cpse	r24, r1
     d82:	56 c0       	rjmp	.+172    	; 0xe30 <lora_init+0x214>
uint8_t lora_set_appeui(){
	#ifdef DEBUG_M
		printf("Set appeui: ");
	#endif	
	
	char cmd[50] = "mac set appeui ";
     d84:	80 e1       	ldi	r24, 0x10	; 16
     d86:	e2 ee       	ldi	r30, 0xE2	; 226
     d88:	f1 e0       	ldi	r31, 0x01	; 1
     d8a:	de 01       	movw	r26, r28
     d8c:	11 96       	adiw	r26, 0x01	; 1
     d8e:	01 90       	ld	r0, Z+
     d90:	0d 92       	st	X+, r0
     d92:	8a 95       	dec	r24
     d94:	e1 f7       	brne	.-8      	; 0xd8e <lora_init+0x172>
     d96:	fe 01       	movw	r30, r28
     d98:	71 96       	adiw	r30, 0x11	; 17
     d9a:	82 e2       	ldi	r24, 0x22	; 34
     d9c:	df 01       	movw	r26, r30
     d9e:	1d 92       	st	X+, r1
     da0:	8a 95       	dec	r24
     da2:	e9 f7       	brne	.-6      	; 0xd9e <lora_init+0x182>
 	strcat(cmd, appEui);
     da4:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <appEui>
     da8:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <appEui+0x1>
     dac:	ce 01       	movw	r24, r28
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	0e 94 91 10 	call	0x2122	; 0x2122 <strcat>
 	lora_send_command(cmd);
     db4:	ce 01       	movw	r24, r28
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <lora_send_command>
	return lora_receive_response();
     dbc:	0e 94 bc 05 	call	0xb78	; 0xb78 <lora_receive_response>
	
	err = lora_set_deveui();
	if (err) return 7;
		
	err = lora_set_appeui();
	if (err) return 8;
     dc0:	81 11       	cpse	r24, r1
     dc2:	36 c0       	rjmp	.+108    	; 0xe30 <lora_init+0x214>
 	strcat(cmd, appEui);
 	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_set_appkey(){
	char cmd[50] = "mac set appkey ";
     dc4:	80 e1       	ldi	r24, 0x10	; 16
     dc6:	e4 e1       	ldi	r30, 0x14	; 20
     dc8:	f2 e0       	ldi	r31, 0x02	; 2
     dca:	de 01       	movw	r26, r28
     dcc:	11 96       	adiw	r26, 0x01	; 1
     dce:	01 90       	ld	r0, Z+
     dd0:	0d 92       	st	X+, r0
     dd2:	8a 95       	dec	r24
     dd4:	e1 f7       	brne	.-8      	; 0xdce <lora_init+0x1b2>
     dd6:	fe 01       	movw	r30, r28
     dd8:	71 96       	adiw	r30, 0x11	; 17
     dda:	82 e2       	ldi	r24, 0x22	; 34
     ddc:	df 01       	movw	r26, r30
     dde:	1d 92       	st	X+, r1
     de0:	8a 95       	dec	r24
     de2:	e9 f7       	brne	.-6      	; 0xdde <lora_init+0x1c2>
	strcat(cmd, appKey);
     de4:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <appKey>
     de8:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <appKey+0x1>
     dec:	ce 01       	movw	r24, r28
     dee:	01 96       	adiw	r24, 0x01	; 1
     df0:	0e 94 91 10 	call	0x2122	; 0x2122 <strcat>
	#ifdef DEBUG_M
		printf("mac set appkey ****: ");
	#endif
	lora_send_command(cmd);
     df4:	ce 01       	movw	r24, r28
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <lora_send_command>
	return lora_receive_response();
     dfc:	0e 94 bc 05 	call	0xb78	; 0xb78 <lora_receive_response>
		
	err = lora_set_appeui();
	if (err) return 8;
			
	err = lora_set_appkey();
	if (err) return 9;
     e00:	81 11       	cpse	r24, r1
     e02:	16 c0       	rjmp	.+44     	; 0xe30 <lora_init+0x214>
uint8_t lora_save_settings(){
	#ifdef DEBUG_M
		printf("Save settings: ");
	#endif
	
	lora_send_command("mac save");
     e04:	8a e2       	ldi	r24, 0x2A	; 42
     e06:	94 e0       	ldi	r25, 0x04	; 4
     e08:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <lora_send_command>
	return lora_receive_response();
     e0c:	0e 94 bc 05 	call	0xb78	; 0xb78 <lora_receive_response>
     e10:	18 2f       	mov	r17, r24
			
	err = lora_set_appkey();
	if (err) return 9;

	err = lora_save_settings();
	if (err) return 10;
     e12:	81 11       	cpse	r24, r1
     e14:	0d c0       	rjmp	.+26     	; 0xe30 <lora_init+0x214>
	
	*joined_err = lora_join_OTAA();
     e16:	0e 94 fd 05 	call	0xbfa	; 0xbfa <lora_join_OTAA>
     e1a:	f7 01       	movw	r30, r14
     e1c:	80 83       	st	Z, r24
     e1e:	09 c0       	rjmp	.+18     	; 0xe32 <lora_init+0x216>
	#endif
	


	err = lora_reset_to_band();
	if (err) return 1;
     e20:	11 e0       	ldi	r17, 0x01	; 1
     e22:	07 c0       	rjmp	.+14     	; 0xe32 <lora_init+0x216>
	
	
	err = lora_set_adr() ;
	if (err) return 2;
     e24:	12 e0       	ldi	r17, 0x02	; 2
     e26:	05 c0       	rjmp	.+10     	; 0xe32 <lora_init+0x216>
	
	
	err = lora_set_dr();
	if (err) return 3;
     e28:	13 e0       	ldi	r17, 0x03	; 3
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <lora_init+0x216>
	
	
	err = lora_set_pwridx();
	if (err) return 4;
     e2c:	14 e0       	ldi	r17, 0x04	; 4
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <lora_init+0x216>
	
	lora_set_dcycle();
	#ifdef OTAA
	err = lora_set_OTAA_settings(joined_err);
	if (err) return 5;
     e30:	15 e0       	ldi	r17, 0x05	; 5
	puts("Init success");
	#endif
	
	return 0;

}
     e32:	81 2f       	mov	r24, r17
     e34:	e2 96       	adiw	r28, 0x32	; 50
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	08 95       	ret

00000e4e <lora_transmit>:
void lora_transmit(const char *payload){
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	c4 56       	subi	r28, 0x64	; 100
     e58:	d1 09       	sbc	r29, r1
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	bc 01       	movw	r22, r24
	uint8_t err;
	char buf[100] = "mac tx uncnf 3 ";
     e66:	90 e1       	ldi	r25, 0x10	; 16
     e68:	e6 e4       	ldi	r30, 0x46	; 70
     e6a:	f2 e0       	ldi	r31, 0x02	; 2
     e6c:	de 01       	movw	r26, r28
     e6e:	11 96       	adiw	r26, 0x01	; 1
     e70:	01 90       	ld	r0, Z+
     e72:	0d 92       	st	X+, r0
     e74:	9a 95       	dec	r25
     e76:	e1 f7       	brne	.-8      	; 0xe70 <lora_transmit+0x22>
     e78:	fe 01       	movw	r30, r28
     e7a:	71 96       	adiw	r30, 0x11	; 17
     e7c:	84 e5       	ldi	r24, 0x54	; 84
     e7e:	df 01       	movw	r26, r30
     e80:	1d 92       	st	X+, r1
     e82:	8a 95       	dec	r24
     e84:	e9 f7       	brne	.-6      	; 0xe80 <lora_transmit+0x32>
	strcat(buf, payload);
     e86:	ce 01       	movw	r24, r28
     e88:	01 96       	adiw	r24, 0x01	; 1
     e8a:	0e 94 91 10 	call	0x2122	; 0x2122 <strcat>

	lora_send_command(buf);
     e8e:	ce 01       	movw	r24, r28
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <lora_send_command>
	err = lora_receive_response();
     e96:	0e 94 bc 05 	call	0xb78	; 0xb78 <lora_receive_response>
	if (!err){
     e9a:	81 11       	cpse	r24, r1
     e9c:	08 c0       	rjmp	.+16     	; 0xeae <lora_transmit+0x60>
		err = lora_receive_response();
     e9e:	0e 94 bc 05 	call	0xb78	; 0xb78 <lora_receive_response>
		if(err == RESP_MAC_RX_INC){
     ea2:	81 31       	cpi	r24, 0x11	; 17
     ea4:	29 f4       	brne	.+10     	; 0xeb0 <lora_transmit+0x62>
			data_receive_flag = 1;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <data_receive_flag>
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <lora_transmit+0x62>
		}
	}
	else set_bit(LEDS,LED3);
     eae:	2a 9a       	sbi	0x05, 2	; 5
}
     eb0:	cc 59       	subi	r28, 0x9C	; 156
     eb2:	df 4f       	sbci	r29, 0xFF	; 255
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	08 95       	ret

00000ec4 <USART_init>:
	for(; *string; ++string){
		USART_transmit2(*string);
	}
	//USART_transmit2(0x0D);
	USART_transmit2(0x0A);
}
     ec4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     ec8:	83 e3       	ldi	r24, 0x33	; 51
     eca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     ece:	28 e1       	ldi	r18, 0x18	; 24
     ed0:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     ed4:	e2 ec       	ldi	r30, 0xC2	; 194
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	90 81       	ld	r25, Z
     eda:	96 60       	ori	r25, 0x06	; 6
     edc:	90 83       	st	Z, r25
     ede:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     ee2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     ee6:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     eea:	ea ec       	ldi	r30, 0xCA	; 202
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	90 81       	ld	r25, Z
     ef0:	96 60       	ori	r25, 0x06	; 6
     ef2:	90 83       	st	Z, r25
     ef4:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7e00d5>
     ef8:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7e00d4>
     efc:	88 e9       	ldi	r24, 0x98	; 152
     efe:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
     f02:	e2 ed       	ldi	r30, 0xD2	; 210
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	86 60       	ori	r24, 0x06	; 6
     f0a:	80 83       	st	Z, r24
     f0c:	8c e0       	ldi	r24, 0x0C	; 12
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	90 93 29 06 	sts	0x0629, r25	; 0x800629 <__iob+0x3>
     f14:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <__iob+0x2>
     f18:	08 95       	ret

00000f1a <USART_receive0>:
     f1a:	e0 ec       	ldi	r30, 0xC0	; 192
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	88 23       	and	r24, r24
     f22:	ec f7       	brge	.-6      	; 0xf1e <USART_receive0+0x4>
     f24:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     f28:	08 95       	ret

00000f2a <USART_transmit0>:
     f2a:	e0 ec       	ldi	r30, 0xC0	; 192
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	90 81       	ld	r25, Z
     f30:	95 ff       	sbrs	r25, 5
     f32:	fd cf       	rjmp	.-6      	; 0xf2e <USART_transmit0+0x4>
     f34:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     f38:	08 95       	ret

00000f3a <USART_putstring0>:
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	ec 01       	movw	r28, r24
     f40:	88 81       	ld	r24, Y
     f42:	88 23       	and	r24, r24
     f44:	31 f0       	breq	.+12     	; 0xf52 <USART_putstring0+0x18>
     f46:	21 96       	adiw	r28, 0x01	; 1
     f48:	0e 94 95 07 	call	0xf2a	; 0xf2a <USART_transmit0>
     f4c:	89 91       	ld	r24, Y+
     f4e:	81 11       	cpse	r24, r1
     f50:	fb cf       	rjmp	.-10     	; 0xf48 <USART_putstring0+0xe>
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	08 95       	ret

00000f58 <USART_transmit2>:
     f58:	e0 ed       	ldi	r30, 0xD0	; 208
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	90 81       	ld	r25, Z
     f5e:	95 ff       	sbrs	r25, 5
     f60:	fd cf       	rjmp	.-6      	; 0xf5c <USART_transmit2+0x4>
     f62:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
     f66:	08 95       	ret

00000f68 <USART_TRANSMIT_printf>:
     f68:	cf 93       	push	r28
     f6a:	c8 2f       	mov	r28, r24
     f6c:	8a 30       	cpi	r24, 0x0A	; 10
     f6e:	19 f4       	brne	.+6      	; 0xf76 <USART_TRANSMIT_printf+0xe>
     f70:	8d e0       	ldi	r24, 0x0D	; 13
     f72:	0e 94 ac 07 	call	0xf58	; 0xf58 <USART_transmit2>
     f76:	8c 2f       	mov	r24, r28
     f78:	0e 94 ac 07 	call	0xf58	; 0xf58 <USART_transmit2>
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	cf 91       	pop	r28
     f82:	08 95       	ret

00000f84 <USART_receive2>:
     f84:	e0 ed       	ldi	r30, 0xD0	; 208
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	88 23       	and	r24, r24
     f8c:	ec f7       	brge	.-6      	; 0xf88 <USART_receive2+0x4>
     f8e:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
     f92:	08 95       	ret

00000f94 <USART_receiveString2>:

void USART_receiveString2(void){
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	ca 5f       	subi	r28, 0xFA	; 250
     fa6:	d1 09       	sbc	r29, r1
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	ce 01       	movw	r24, r28
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	7c 01       	movw	r14, r24
	char rx_buf[250];
	unsigned char rec = 0;
	int i = 0;
     fb8:	00 e0       	ldi	r16, 0x00	; 0
     fba:	10 e0       	ldi	r17, 0x00	; 0
	while (1){
		rec = USART_receive2();
     fbc:	0e 94 c2 07 	call	0xf84	; 0xf84 <USART_receive2>
		if (rec == 0x0A){
     fc0:	8a 30       	cpi	r24, 0x0A	; 10
     fc2:	79 f4       	brne	.+30     	; 0xfe2 <USART_receiveString2+0x4e>
			rx_buf[i] = '\0';
     fc4:	e1 e0       	ldi	r30, 0x01	; 1
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	ec 0f       	add	r30, r28
     fca:	fd 1f       	adc	r31, r29
     fcc:	e0 0f       	add	r30, r16
     fce:	f1 1f       	adc	r31, r17
     fd0:	10 82       	st	Z, r1
		i++;
	}
	#ifdef DEBUG_M
	printf("rx int: %s\n", rx_buf);
	#endif
	strcpy(downlink, rx_buf);
     fd2:	be 01       	movw	r22, r28
     fd4:	6f 5f       	subi	r22, 0xFF	; 255
     fd6:	7f 4f       	sbci	r23, 0xFF	; 255
     fd8:	83 e5       	ldi	r24, 0x53	; 83
     fda:	95 e0       	ldi	r25, 0x05	; 5
     fdc:	0e 94 9c 10 	call	0x2138	; 0x2138 <strcpy>
}
     fe0:	06 c0       	rjmp	.+12     	; 0xfee <USART_receiveString2+0x5a>
		rec = USART_receive2();
		if (rec == 0x0A){
			rx_buf[i] = '\0';
			break;
		}
		rx_buf[i] = rec;
     fe2:	f7 01       	movw	r30, r14
     fe4:	81 93       	st	Z+, r24
     fe6:	7f 01       	movw	r14, r30
		i++;
     fe8:	0f 5f       	subi	r16, 0xFF	; 255
     fea:	1f 4f       	sbci	r17, 0xFF	; 255
	}
     fec:	e7 cf       	rjmp	.-50     	; 0xfbc <USART_receiveString2+0x28>
	#ifdef DEBUG_M
	printf("rx int: %s\n", rx_buf);
	#endif
	strcpy(downlink, rx_buf);
}
     fee:	c6 50       	subi	r28, 0x06	; 6
     ff0:	df 4f       	sbci	r29, 0xFF	; 255
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	ff 90       	pop	r15
    1006:	ef 90       	pop	r14
    1008:	08 95       	ret

0000100a <timers_init>:
		OCR1A = 31250;
		TIMSK1 |= (1 << OCIE1A);
	#endif

	#ifdef TIMER2
		TIMSK2 = 0;
    100a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		ASSR = 0b00100000;
    100e:	80 e2       	ldi	r24, 0x20	; 32
    1010:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
    1014:	2f ef       	ldi	r18, 0xFF	; 255
    1016:	89 e6       	ldi	r24, 0x69	; 105
    1018:	98 e1       	ldi	r25, 0x18	; 24
    101a:	21 50       	subi	r18, 0x01	; 1
    101c:	80 40       	sbci	r24, 0x00	; 0
    101e:	90 40       	sbci	r25, 0x00	; 0
    1020:	e1 f7       	brne	.-8      	; 0x101a <timers_init+0x10>
    1022:	00 c0       	rjmp	.+0      	; 0x1024 <timers_init+0x1a>
    1024:	00 00       	nop
		_delay_ms(1000);
		TCCR2A = 0b00000000;
    1026:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		TCCR2B = 0b00000101;
    102a:	85 e0       	ldi	r24, 0x05	; 5
    102c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		//Synchronize registers
		while (ASSR & ( (1 << TCN2UB) | (1 << TCR2AUB) | (1 << TCR2BUB) )) ;
    1030:	e6 eb       	ldi	r30, 0xB6	; 182
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	83 71       	andi	r24, 0x13	; 19
    1038:	e9 f7       	brne	.-6      	; 0x1034 <timers_init+0x2a>
		TIFR2 = 0; //Clear interrupt flags
    103a:	17 ba       	out	0x17, r1	; 23
		TIMSK2 = (1 << TOIE2); //Enable overflow interrupt
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1042:	08 95       	ret

00001044 <enter_powerSave>:
}


void enter_powerSave(){
	#ifdef USART2_START_COND_INTERRUPT
	UCSR2D |= (1<<SFDE) | (0<<RXSIE);			// Enable start condition detection with interrupt on RXCIE
    1044:	e3 ed       	ldi	r30, 0xD3	; 211
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	80 62       	ori	r24, 0x20	; 32
    104c:	80 83       	st	Z, r24
	#endif
	
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
    104e:	83 b7       	in	r24, 0x33	; 51
    1050:	81 7f       	andi	r24, 0xF1	; 241
    1052:	86 60       	ori	r24, 0x06	; 6
    1054:	83 bf       	out	0x33, r24	; 51
	sleep_mode();
    1056:	83 b7       	in	r24, 0x33	; 51
    1058:	81 60       	ori	r24, 0x01	; 1
    105a:	83 bf       	out	0x33, r24	; 51
    105c:	88 95       	sleep
    105e:	83 b7       	in	r24, 0x33	; 51
    1060:	8e 7f       	andi	r24, 0xFE	; 254
    1062:	83 bf       	out	0x33, r24	; 51
    1064:	2f e7       	ldi	r18, 0x7F	; 127
    1066:	85 eb       	ldi	r24, 0xB5	; 181
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	21 50       	subi	r18, 0x01	; 1
    106c:	80 40       	sbci	r24, 0x00	; 0
    106e:	90 40       	sbci	r25, 0x00	; 0
    1070:	e1 f7       	brne	.-8      	; 0x106a <enter_powerSave+0x26>
    1072:	00 c0       	rjmp	.+0      	; 0x1074 <enter_powerSave+0x30>
    1074:	00 00       	nop
	_delay_ms(70);
	
	#ifdef USART2_START_COND_INTERRUPT
	UCSR2D &= ~(1<<SFDE);						// Disable start condition detection while awake.
    1076:	80 81       	ld	r24, Z
    1078:	8f 7d       	andi	r24, 0xDF	; 223
    107a:	80 83       	st	Z, r24
    107c:	08 95       	ret

0000107e <ascii_hex_decode>:
#include "USART.h"
#include <math.h>
#include <string.h>
//const char* test2 = "6363 3131 3535 6262 6666"; = "cc 11 55 bb ff" = "204 17 85 187 255"
//const char* test = "3565623838383532";
void ascii_hex_decode(const char *in, size_t len, uint8_t *out, int start){
    107e:	ef 92       	push	r14
    1080:	ff 92       	push	r15
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	e2 97       	sbiw	r28, 0x32	; 50
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	dc 01       	movw	r26, r24
    109c:	79 01       	movw	r14, r18
	char buf[50];
	uint8_t i, t, j, h, hn, ln, p1, p2;
	for (t = 0, i = start; i<len; i+=2, t++){
    109e:	32 2f       	mov	r19, r18
    10a0:	f7 01       	movw	r30, r14
    10a2:	ff 27       	eor	r31, r31
    10a4:	e6 17       	cp	r30, r22
    10a6:	f7 07       	cpc	r31, r23
    10a8:	c8 f4       	brcc	.+50     	; 0x10dc <ascii_hex_decode+0x5e>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
		p1 = ((uint8_t)(in[i]) - '0')*16;
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
    10ac:	01 e0       	ldi	r16, 0x01	; 1
    10ae:	10 e0       	ldi	r17, 0x00	; 0
    10b0:	0c 0f       	add	r16, r28
    10b2:	1d 1f       	adc	r17, r29
    10b4:	08 0f       	add	r16, r24
    10b6:	11 1d       	adc	r17, r1
//const char* test = "3565623838383532";
void ascii_hex_decode(const char *in, size_t len, uint8_t *out, int start){
	char buf[50];
	uint8_t i, t, j, h, hn, ln, p1, p2;
	for (t = 0, i = start; i<len; i+=2, t++){
		p1 = ((uint8_t)(in[i]) - '0')*16;
    10b8:	ea 0f       	add	r30, r26
    10ba:	fb 1f       	adc	r31, r27
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
    10bc:	20 81       	ld	r18, Z
    10be:	91 81       	ldd	r25, Z+1	; 0x01
    10c0:	90 53       	subi	r25, 0x30	; 48
    10c2:	e0 e1       	ldi	r30, 0x10	; 16
    10c4:	2e 9f       	mul	r18, r30
    10c6:	90 0d       	add	r25, r0
    10c8:	11 24       	eor	r1, r1
    10ca:	f8 01       	movw	r30, r16
    10cc:	90 83       	st	Z, r25
//const char* test2 = "6363 3131 3535 6262 6666"; = "cc 11 55 bb ff" = "204 17 85 187 255"
//const char* test = "3565623838383532";
void ascii_hex_decode(const char *in, size_t len, uint8_t *out, int start){
	char buf[50];
	uint8_t i, t, j, h, hn, ln, p1, p2;
	for (t = 0, i = start; i<len; i+=2, t++){
    10ce:	3e 5f       	subi	r19, 0xFE	; 254
    10d0:	8f 5f       	subi	r24, 0xFF	; 255
    10d2:	e3 2f       	mov	r30, r19
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	e6 17       	cp	r30, r22
    10d8:	f7 07       	cpc	r31, r23
    10da:	40 f3       	brcs	.-48     	; 0x10ac <ascii_hex_decode+0x2e>
		p1 = ((uint8_t)(in[i]) - '0')*16;
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
	}
	for (h= 0,j = 0; j<(len-start)/2; j+=2, h++){
    10dc:	6e 19       	sub	r22, r14
    10de:	7f 09       	sbc	r23, r15
    10e0:	7b 01       	movw	r14, r22
    10e2:	f6 94       	lsr	r15
    10e4:	e7 94       	ror	r14
    10e6:	e1 14       	cp	r14, r1
    10e8:	f1 04       	cpc	r15, r1
    10ea:	99 f1       	breq	.+102    	; 0x1152 <ascii_hex_decode+0xd4>
    10ec:	e0 e0       	ldi	r30, 0x00	; 0
    10ee:	70 e0       	ldi	r23, 0x00	; 0
		hn = buf[j] > '9' ? buf[j] - 'a' + 10 : buf[j] - '0';
    10f0:	27 2f       	mov	r18, r23
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	8c 0f       	add	r24, r28
    10fa:	9d 1f       	adc	r25, r29
    10fc:	82 0f       	add	r24, r18
    10fe:	93 1f       	adc	r25, r19
    1100:	dc 01       	movw	r26, r24
    1102:	8c 91       	ld	r24, X
    1104:	8a 33       	cpi	r24, 0x3A	; 58
    1106:	18 f0       	brcs	.+6      	; 0x110e <ascii_hex_decode+0x90>
    1108:	99 ea       	ldi	r25, 0xA9	; 169
    110a:	98 0f       	add	r25, r24
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <ascii_hex_decode+0x94>
    110e:	90 ed       	ldi	r25, 0xD0	; 208
    1110:	98 0f       	add	r25, r24
		ln = buf[j+1] > '9' ? buf[j+1] - 'a' + 10 : buf[j+1] - '0';
    1112:	a2 e0       	ldi	r26, 0x02	; 2
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	ac 0f       	add	r26, r28
    1118:	bd 1f       	adc	r27, r29
    111a:	2a 0f       	add	r18, r26
    111c:	3b 1f       	adc	r19, r27
    111e:	d9 01       	movw	r26, r18
    1120:	8c 91       	ld	r24, X
    1122:	8a 33       	cpi	r24, 0x3A	; 58
    1124:	18 f0       	brcs	.+6      	; 0x112c <ascii_hex_decode+0xae>
    1126:	29 ea       	ldi	r18, 0xA9	; 169
    1128:	28 0f       	add	r18, r24
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <ascii_hex_decode+0xb2>
    112c:	20 ed       	ldi	r18, 0xD0	; 208
    112e:	28 0f       	add	r18, r24
		out[h] = (hn << 4) | ln;
    1130:	8a 01       	movw	r16, r20
    1132:	0e 0f       	add	r16, r30
    1134:	11 1d       	adc	r17, r1
    1136:	b0 e1       	ldi	r27, 0x10	; 16
    1138:	9b 9f       	mul	r25, r27
    113a:	c0 01       	movw	r24, r0
    113c:	11 24       	eor	r1, r1
    113e:	82 2b       	or	r24, r18
    1140:	d8 01       	movw	r26, r16
    1142:	8c 93       	st	X, r24
	for (t = 0, i = start; i<len; i+=2, t++){
		p1 = ((uint8_t)(in[i]) - '0')*16;
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
	}
	for (h= 0,j = 0; j<(len-start)/2; j+=2, h++){
    1144:	7e 5f       	subi	r23, 0xFE	; 254
    1146:	ef 5f       	subi	r30, 0xFF	; 255
    1148:	87 2f       	mov	r24, r23
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	8e 15       	cp	r24, r14
    114e:	9f 05       	cpc	r25, r15
    1150:	78 f2       	brcs	.-98     	; 0x10f0 <ascii_hex_decode+0x72>
		hn = buf[j] > '9' ? buf[j] - 'a' + 10 : buf[j] - '0';
		ln = buf[j+1] > '9' ? buf[j+1] - 'a' + 10 : buf[j+1] - '0';
		out[h] = (hn << 4) | ln;
	}
	//puts("");
}
    1152:	e2 96       	adiw	r28, 0x32	; 50
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	08 95       	ret

0000116c <hex_decode>:

uint8_t* hex_decode(const char *in, size_t len,uint8_t *out, int start){
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	ec 01       	movw	r28, r24
    1176:	95 2f       	mov	r25, r21
	unsigned int i, t, hn, ln;
	for (t = 0,i = start; i < len; i+=2,++t) {
    1178:	26 17       	cp	r18, r22
    117a:	37 07       	cpc	r19, r23
    117c:	08 f5       	brcc	.+66     	; 0x11c0 <hex_decode+0x54>
    117e:	c2 0f       	add	r28, r18
    1180:	d3 1f       	adc	r29, r19
    1182:	04 2f       	mov	r16, r20
    1184:	15 2f       	mov	r17, r21
    1186:	fe 01       	movw	r30, r28
		hn = in[i] > '9' ? in[i] - 'A' + 10 : in[i] - '0';
    1188:	a8 81       	ld	r26, Y
    118a:	aa 33       	cpi	r26, 0x3A	; 58
    118c:	18 f0       	brcs	.+6      	; 0x1194 <hex_decode+0x28>
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	d7 97       	sbiw	r26, 0x37	; 55
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <hex_decode+0x2c>
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	d0 97       	sbiw	r26, 0x30	; 48
		ln = in[i+1] > '9' ? in[i+1] - 'A' + 10 : in[i+1] - '0';
    1198:	e1 81       	ldd	r30, Z+1	; 0x01
    119a:	ea 33       	cpi	r30, 0x3A	; 58
    119c:	18 f0       	brcs	.+6      	; 0x11a4 <hex_decode+0x38>
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	f7 97       	sbiw	r30, 0x37	; 55
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <hex_decode+0x3c>
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	f0 97       	sbiw	r30, 0x30	; 48
		out[t] = (hn << 4 ) | ln;
    11a8:	a2 95       	swap	r26
    11aa:	a0 7f       	andi	r26, 0xF0	; 240
    11ac:	ea 2b       	or	r30, r26
    11ae:	d8 01       	movw	r26, r16
    11b0:	ed 93       	st	X+, r30
    11b2:	8d 01       	movw	r16, r26
	//puts("");
}

uint8_t* hex_decode(const char *in, size_t len,uint8_t *out, int start){
	unsigned int i, t, hn, ln;
	for (t = 0,i = start; i < len; i+=2,++t) {
    11b4:	2e 5f       	subi	r18, 0xFE	; 254
    11b6:	3f 4f       	sbci	r19, 0xFF	; 255
    11b8:	22 96       	adiw	r28, 0x02	; 2
    11ba:	26 17       	cp	r18, r22
    11bc:	37 07       	cpc	r19, r23
    11be:	18 f3       	brcs	.-58     	; 0x1186 <hex_decode+0x1a>
		hn = in[i] > '9' ? in[i] - 'A' + 10 : in[i] - '0';
		ln = in[i+1] > '9' ? in[i+1] - 'A' + 10 : in[i+1] - '0';
		out[t] = (hn << 4 ) | ln;
	}
	return out;
}
    11c0:	84 2f       	mov	r24, r20
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	08 95       	ret

000011cc <hex_encode>:

//				1  2  3  4  5  6  7  8  9 10 11 byte pair
//  MSG STYLE: xx xx xx xx xx xx xx xx xx xx xx
//  1: frame, 2-5: timestamp, 6: battery, 7+8: bus voltage, 9+10: current

char* hex_encode(board_t board){
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
	char *msg = malloc(30);
    11d8:	8e e1       	ldi	r24, 0x1E	; 30
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <malloc>
    11e0:	08 2f       	mov	r16, r24
    11e2:	19 2f       	mov	r17, r25
	sprintf(msg, "%02X%02X%04X%04X", board.frame_counter, board.batteryLevel, board.ina219.bus_voltage, board.ina219.current);
    11e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    11e6:	8f 93       	push	r24
    11e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ea:	8f 93       	push	r24
    11ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ee:	8f 93       	push	r24
    11f0:	89 85       	ldd	r24, Y+9	; 0x09
    11f2:	8f 93       	push	r24
    11f4:	88 85       	ldd	r24, Y+8	; 0x08
    11f6:	1f 92       	push	r1
    11f8:	8f 93       	push	r24
    11fa:	8f 81       	ldd	r24, Y+7	; 0x07
    11fc:	1f 92       	push	r1
    11fe:	8f 93       	push	r24
    1200:	8f e3       	ldi	r24, 0x3F	; 63
    1202:	95 e0       	ldi	r25, 0x05	; 5
    1204:	9f 93       	push	r25
    1206:	8f 93       	push	r24
    1208:	1f 93       	push	r17
    120a:	0f 93       	push	r16
    120c:	0e 94 2f 11 	call	0x225e	; 0x225e <sprintf>
	return msg;
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
}
    121a:	80 2f       	mov	r24, r16
    121c:	91 2f       	mov	r25, r17
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	08 95       	ret

00001228 <vfprintf>:
    1228:	a0 e1       	ldi	r26, 0x10	; 16
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ea e1       	ldi	r30, 0x1A	; 26
    122e:	f9 e0       	ldi	r31, 0x09	; 9
    1230:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__prologue_saves__>
    1234:	7c 01       	movw	r14, r24
    1236:	1b 01       	movw	r2, r22
    1238:	6a 01       	movw	r12, r20
    123a:	fc 01       	movw	r30, r24
    123c:	17 82       	std	Z+7, r1	; 0x07
    123e:	16 82       	std	Z+6, r1	; 0x06
    1240:	83 81       	ldd	r24, Z+3	; 0x03
    1242:	81 ff       	sbrs	r24, 1
    1244:	44 c3       	rjmp	.+1672   	; 0x18ce <vfprintf+0x6a6>
    1246:	9e 01       	movw	r18, r28
    1248:	2f 5f       	subi	r18, 0xFF	; 255
    124a:	3f 4f       	sbci	r19, 0xFF	; 255
    124c:	39 01       	movw	r6, r18
    124e:	f7 01       	movw	r30, r14
    1250:	93 81       	ldd	r25, Z+3	; 0x03
    1252:	f1 01       	movw	r30, r2
    1254:	93 fd       	sbrc	r25, 3
    1256:	85 91       	lpm	r24, Z+
    1258:	93 ff       	sbrs	r25, 3
    125a:	81 91       	ld	r24, Z+
    125c:	1f 01       	movw	r2, r30
    125e:	88 23       	and	r24, r24
    1260:	09 f4       	brne	.+2      	; 0x1264 <vfprintf+0x3c>
    1262:	31 c3       	rjmp	.+1634   	; 0x18c6 <vfprintf+0x69e>
    1264:	85 32       	cpi	r24, 0x25	; 37
    1266:	39 f4       	brne	.+14     	; 0x1276 <vfprintf+0x4e>
    1268:	93 fd       	sbrc	r25, 3
    126a:	85 91       	lpm	r24, Z+
    126c:	93 ff       	sbrs	r25, 3
    126e:	81 91       	ld	r24, Z+
    1270:	1f 01       	movw	r2, r30
    1272:	85 32       	cpi	r24, 0x25	; 37
    1274:	39 f4       	brne	.+14     	; 0x1284 <vfprintf+0x5c>
    1276:	b7 01       	movw	r22, r14
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    127e:	56 01       	movw	r10, r12
    1280:	65 01       	movw	r12, r10
    1282:	e5 cf       	rjmp	.-54     	; 0x124e <vfprintf+0x26>
    1284:	10 e0       	ldi	r17, 0x00	; 0
    1286:	51 2c       	mov	r5, r1
    1288:	91 2c       	mov	r9, r1
    128a:	ff e1       	ldi	r31, 0x1F	; 31
    128c:	f9 15       	cp	r31, r9
    128e:	d8 f0       	brcs	.+54     	; 0x12c6 <vfprintf+0x9e>
    1290:	8b 32       	cpi	r24, 0x2B	; 43
    1292:	79 f0       	breq	.+30     	; 0x12b2 <vfprintf+0x8a>
    1294:	38 f4       	brcc	.+14     	; 0x12a4 <vfprintf+0x7c>
    1296:	80 32       	cpi	r24, 0x20	; 32
    1298:	79 f0       	breq	.+30     	; 0x12b8 <vfprintf+0x90>
    129a:	83 32       	cpi	r24, 0x23	; 35
    129c:	a1 f4       	brne	.+40     	; 0x12c6 <vfprintf+0x9e>
    129e:	f9 2d       	mov	r31, r9
    12a0:	f0 61       	ori	r31, 0x10	; 16
    12a2:	2e c0       	rjmp	.+92     	; 0x1300 <vfprintf+0xd8>
    12a4:	8d 32       	cpi	r24, 0x2D	; 45
    12a6:	61 f0       	breq	.+24     	; 0x12c0 <vfprintf+0x98>
    12a8:	80 33       	cpi	r24, 0x30	; 48
    12aa:	69 f4       	brne	.+26     	; 0x12c6 <vfprintf+0x9e>
    12ac:	29 2d       	mov	r18, r9
    12ae:	21 60       	ori	r18, 0x01	; 1
    12b0:	2d c0       	rjmp	.+90     	; 0x130c <vfprintf+0xe4>
    12b2:	39 2d       	mov	r19, r9
    12b4:	32 60       	ori	r19, 0x02	; 2
    12b6:	93 2e       	mov	r9, r19
    12b8:	89 2d       	mov	r24, r9
    12ba:	84 60       	ori	r24, 0x04	; 4
    12bc:	98 2e       	mov	r9, r24
    12be:	2a c0       	rjmp	.+84     	; 0x1314 <vfprintf+0xec>
    12c0:	e9 2d       	mov	r30, r9
    12c2:	e8 60       	ori	r30, 0x08	; 8
    12c4:	15 c0       	rjmp	.+42     	; 0x12f0 <vfprintf+0xc8>
    12c6:	97 fc       	sbrc	r9, 7
    12c8:	2d c0       	rjmp	.+90     	; 0x1324 <vfprintf+0xfc>
    12ca:	20 ed       	ldi	r18, 0xD0	; 208
    12cc:	28 0f       	add	r18, r24
    12ce:	2a 30       	cpi	r18, 0x0A	; 10
    12d0:	88 f4       	brcc	.+34     	; 0x12f4 <vfprintf+0xcc>
    12d2:	96 fe       	sbrs	r9, 6
    12d4:	06 c0       	rjmp	.+12     	; 0x12e2 <vfprintf+0xba>
    12d6:	3a e0       	ldi	r19, 0x0A	; 10
    12d8:	13 9f       	mul	r17, r19
    12da:	20 0d       	add	r18, r0
    12dc:	11 24       	eor	r1, r1
    12de:	12 2f       	mov	r17, r18
    12e0:	19 c0       	rjmp	.+50     	; 0x1314 <vfprintf+0xec>
    12e2:	8a e0       	ldi	r24, 0x0A	; 10
    12e4:	58 9e       	mul	r5, r24
    12e6:	20 0d       	add	r18, r0
    12e8:	11 24       	eor	r1, r1
    12ea:	52 2e       	mov	r5, r18
    12ec:	e9 2d       	mov	r30, r9
    12ee:	e0 62       	ori	r30, 0x20	; 32
    12f0:	9e 2e       	mov	r9, r30
    12f2:	10 c0       	rjmp	.+32     	; 0x1314 <vfprintf+0xec>
    12f4:	8e 32       	cpi	r24, 0x2E	; 46
    12f6:	31 f4       	brne	.+12     	; 0x1304 <vfprintf+0xdc>
    12f8:	96 fc       	sbrc	r9, 6
    12fa:	e5 c2       	rjmp	.+1482   	; 0x18c6 <vfprintf+0x69e>
    12fc:	f9 2d       	mov	r31, r9
    12fe:	f0 64       	ori	r31, 0x40	; 64
    1300:	9f 2e       	mov	r9, r31
    1302:	08 c0       	rjmp	.+16     	; 0x1314 <vfprintf+0xec>
    1304:	8c 36       	cpi	r24, 0x6C	; 108
    1306:	21 f4       	brne	.+8      	; 0x1310 <vfprintf+0xe8>
    1308:	29 2d       	mov	r18, r9
    130a:	20 68       	ori	r18, 0x80	; 128
    130c:	92 2e       	mov	r9, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <vfprintf+0xec>
    1310:	88 36       	cpi	r24, 0x68	; 104
    1312:	41 f4       	brne	.+16     	; 0x1324 <vfprintf+0xfc>
    1314:	f1 01       	movw	r30, r2
    1316:	93 fd       	sbrc	r25, 3
    1318:	85 91       	lpm	r24, Z+
    131a:	93 ff       	sbrs	r25, 3
    131c:	81 91       	ld	r24, Z+
    131e:	1f 01       	movw	r2, r30
    1320:	81 11       	cpse	r24, r1
    1322:	b3 cf       	rjmp	.-154    	; 0x128a <vfprintf+0x62>
    1324:	9b eb       	ldi	r25, 0xBB	; 187
    1326:	98 0f       	add	r25, r24
    1328:	93 30       	cpi	r25, 0x03	; 3
    132a:	20 f4       	brcc	.+8      	; 0x1334 <vfprintf+0x10c>
    132c:	99 2d       	mov	r25, r9
    132e:	90 61       	ori	r25, 0x10	; 16
    1330:	80 5e       	subi	r24, 0xE0	; 224
    1332:	07 c0       	rjmp	.+14     	; 0x1342 <vfprintf+0x11a>
    1334:	9b e9       	ldi	r25, 0x9B	; 155
    1336:	98 0f       	add	r25, r24
    1338:	93 30       	cpi	r25, 0x03	; 3
    133a:	08 f0       	brcs	.+2      	; 0x133e <vfprintf+0x116>
    133c:	66 c1       	rjmp	.+716    	; 0x160a <vfprintf+0x3e2>
    133e:	99 2d       	mov	r25, r9
    1340:	9f 7e       	andi	r25, 0xEF	; 239
    1342:	96 ff       	sbrs	r25, 6
    1344:	16 e0       	ldi	r17, 0x06	; 6
    1346:	9f 73       	andi	r25, 0x3F	; 63
    1348:	99 2e       	mov	r9, r25
    134a:	85 36       	cpi	r24, 0x65	; 101
    134c:	19 f4       	brne	.+6      	; 0x1354 <vfprintf+0x12c>
    134e:	90 64       	ori	r25, 0x40	; 64
    1350:	99 2e       	mov	r9, r25
    1352:	08 c0       	rjmp	.+16     	; 0x1364 <vfprintf+0x13c>
    1354:	86 36       	cpi	r24, 0x66	; 102
    1356:	21 f4       	brne	.+8      	; 0x1360 <vfprintf+0x138>
    1358:	39 2f       	mov	r19, r25
    135a:	30 68       	ori	r19, 0x80	; 128
    135c:	93 2e       	mov	r9, r19
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <vfprintf+0x13c>
    1360:	11 11       	cpse	r17, r1
    1362:	11 50       	subi	r17, 0x01	; 1
    1364:	97 fe       	sbrs	r9, 7
    1366:	07 c0       	rjmp	.+14     	; 0x1376 <vfprintf+0x14e>
    1368:	1c 33       	cpi	r17, 0x3C	; 60
    136a:	50 f4       	brcc	.+20     	; 0x1380 <vfprintf+0x158>
    136c:	44 24       	eor	r4, r4
    136e:	43 94       	inc	r4
    1370:	41 0e       	add	r4, r17
    1372:	27 e0       	ldi	r18, 0x07	; 7
    1374:	0b c0       	rjmp	.+22     	; 0x138c <vfprintf+0x164>
    1376:	18 30       	cpi	r17, 0x08	; 8
    1378:	38 f0       	brcs	.+14     	; 0x1388 <vfprintf+0x160>
    137a:	27 e0       	ldi	r18, 0x07	; 7
    137c:	17 e0       	ldi	r17, 0x07	; 7
    137e:	05 c0       	rjmp	.+10     	; 0x138a <vfprintf+0x162>
    1380:	27 e0       	ldi	r18, 0x07	; 7
    1382:	9c e3       	ldi	r25, 0x3C	; 60
    1384:	49 2e       	mov	r4, r25
    1386:	02 c0       	rjmp	.+4      	; 0x138c <vfprintf+0x164>
    1388:	21 2f       	mov	r18, r17
    138a:	41 2c       	mov	r4, r1
    138c:	56 01       	movw	r10, r12
    138e:	84 e0       	ldi	r24, 0x04	; 4
    1390:	a8 0e       	add	r10, r24
    1392:	b1 1c       	adc	r11, r1
    1394:	f6 01       	movw	r30, r12
    1396:	60 81       	ld	r22, Z
    1398:	71 81       	ldd	r23, Z+1	; 0x01
    139a:	82 81       	ldd	r24, Z+2	; 0x02
    139c:	93 81       	ldd	r25, Z+3	; 0x03
    139e:	04 2d       	mov	r16, r4
    13a0:	a3 01       	movw	r20, r6
    13a2:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__ftoa_engine>
    13a6:	6c 01       	movw	r12, r24
    13a8:	f9 81       	ldd	r31, Y+1	; 0x01
    13aa:	fc 87       	std	Y+12, r31	; 0x0c
    13ac:	f0 ff       	sbrs	r31, 0
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <vfprintf+0x18c>
    13b0:	f3 ff       	sbrs	r31, 3
    13b2:	06 c0       	rjmp	.+12     	; 0x13c0 <vfprintf+0x198>
    13b4:	91 fc       	sbrc	r9, 1
    13b6:	06 c0       	rjmp	.+12     	; 0x13c4 <vfprintf+0x19c>
    13b8:	92 fe       	sbrs	r9, 2
    13ba:	06 c0       	rjmp	.+12     	; 0x13c8 <vfprintf+0x1a0>
    13bc:	00 e2       	ldi	r16, 0x20	; 32
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <vfprintf+0x1a2>
    13c0:	0d e2       	ldi	r16, 0x2D	; 45
    13c2:	03 c0       	rjmp	.+6      	; 0x13ca <vfprintf+0x1a2>
    13c4:	0b e2       	ldi	r16, 0x2B	; 43
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <vfprintf+0x1a2>
    13c8:	00 e0       	ldi	r16, 0x00	; 0
    13ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    13cc:	8c 70       	andi	r24, 0x0C	; 12
    13ce:	19 f0       	breq	.+6      	; 0x13d6 <vfprintf+0x1ae>
    13d0:	01 11       	cpse	r16, r1
    13d2:	5a c2       	rjmp	.+1204   	; 0x1888 <vfprintf+0x660>
    13d4:	9b c2       	rjmp	.+1334   	; 0x190c <vfprintf+0x6e4>
    13d6:	97 fe       	sbrs	r9, 7
    13d8:	10 c0       	rjmp	.+32     	; 0x13fa <vfprintf+0x1d2>
    13da:	4c 0c       	add	r4, r12
    13dc:	fc 85       	ldd	r31, Y+12	; 0x0c
    13de:	f4 ff       	sbrs	r31, 4
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <vfprintf+0x1c2>
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	81 33       	cpi	r24, 0x31	; 49
    13e6:	09 f4       	brne	.+2      	; 0x13ea <vfprintf+0x1c2>
    13e8:	4a 94       	dec	r4
    13ea:	14 14       	cp	r1, r4
    13ec:	74 f5       	brge	.+92     	; 0x144a <vfprintf+0x222>
    13ee:	28 e0       	ldi	r18, 0x08	; 8
    13f0:	24 15       	cp	r18, r4
    13f2:	78 f5       	brcc	.+94     	; 0x1452 <vfprintf+0x22a>
    13f4:	88 e0       	ldi	r24, 0x08	; 8
    13f6:	48 2e       	mov	r4, r24
    13f8:	2c c0       	rjmp	.+88     	; 0x1452 <vfprintf+0x22a>
    13fa:	96 fc       	sbrc	r9, 6
    13fc:	2a c0       	rjmp	.+84     	; 0x1452 <vfprintf+0x22a>
    13fe:	81 2f       	mov	r24, r17
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	8c 15       	cp	r24, r12
    1404:	9d 05       	cpc	r25, r13
    1406:	9c f0       	brlt	.+38     	; 0x142e <vfprintf+0x206>
    1408:	3c ef       	ldi	r19, 0xFC	; 252
    140a:	c3 16       	cp	r12, r19
    140c:	3f ef       	ldi	r19, 0xFF	; 255
    140e:	d3 06       	cpc	r13, r19
    1410:	74 f0       	brlt	.+28     	; 0x142e <vfprintf+0x206>
    1412:	89 2d       	mov	r24, r9
    1414:	80 68       	ori	r24, 0x80	; 128
    1416:	98 2e       	mov	r9, r24
    1418:	0a c0       	rjmp	.+20     	; 0x142e <vfprintf+0x206>
    141a:	e2 e0       	ldi	r30, 0x02	; 2
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	ec 0f       	add	r30, r28
    1420:	fd 1f       	adc	r31, r29
    1422:	e1 0f       	add	r30, r17
    1424:	f1 1d       	adc	r31, r1
    1426:	80 81       	ld	r24, Z
    1428:	80 33       	cpi	r24, 0x30	; 48
    142a:	19 f4       	brne	.+6      	; 0x1432 <vfprintf+0x20a>
    142c:	11 50       	subi	r17, 0x01	; 1
    142e:	11 11       	cpse	r17, r1
    1430:	f4 cf       	rjmp	.-24     	; 0x141a <vfprintf+0x1f2>
    1432:	97 fe       	sbrs	r9, 7
    1434:	0e c0       	rjmp	.+28     	; 0x1452 <vfprintf+0x22a>
    1436:	44 24       	eor	r4, r4
    1438:	43 94       	inc	r4
    143a:	41 0e       	add	r4, r17
    143c:	81 2f       	mov	r24, r17
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	c8 16       	cp	r12, r24
    1442:	d9 06       	cpc	r13, r25
    1444:	2c f4       	brge	.+10     	; 0x1450 <vfprintf+0x228>
    1446:	1c 19       	sub	r17, r12
    1448:	04 c0       	rjmp	.+8      	; 0x1452 <vfprintf+0x22a>
    144a:	44 24       	eor	r4, r4
    144c:	43 94       	inc	r4
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <vfprintf+0x22a>
    1450:	10 e0       	ldi	r17, 0x00	; 0
    1452:	97 fe       	sbrs	r9, 7
    1454:	06 c0       	rjmp	.+12     	; 0x1462 <vfprintf+0x23a>
    1456:	1c 14       	cp	r1, r12
    1458:	1d 04       	cpc	r1, r13
    145a:	34 f4       	brge	.+12     	; 0x1468 <vfprintf+0x240>
    145c:	c6 01       	movw	r24, r12
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	05 c0       	rjmp	.+10     	; 0x146c <vfprintf+0x244>
    1462:	85 e0       	ldi	r24, 0x05	; 5
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 c0       	rjmp	.+4      	; 0x146c <vfprintf+0x244>
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	01 11       	cpse	r16, r1
    146e:	01 96       	adiw	r24, 0x01	; 1
    1470:	11 23       	and	r17, r17
    1472:	31 f0       	breq	.+12     	; 0x1480 <vfprintf+0x258>
    1474:	21 2f       	mov	r18, r17
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	2f 5f       	subi	r18, 0xFF	; 255
    147a:	3f 4f       	sbci	r19, 0xFF	; 255
    147c:	82 0f       	add	r24, r18
    147e:	93 1f       	adc	r25, r19
    1480:	25 2d       	mov	r18, r5
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	82 17       	cp	r24, r18
    1486:	93 07       	cpc	r25, r19
    1488:	14 f4       	brge	.+4      	; 0x148e <vfprintf+0x266>
    148a:	58 1a       	sub	r5, r24
    148c:	01 c0       	rjmp	.+2      	; 0x1490 <vfprintf+0x268>
    148e:	51 2c       	mov	r5, r1
    1490:	89 2d       	mov	r24, r9
    1492:	89 70       	andi	r24, 0x09	; 9
    1494:	49 f4       	brne	.+18     	; 0x14a8 <vfprintf+0x280>
    1496:	55 20       	and	r5, r5
    1498:	39 f0       	breq	.+14     	; 0x14a8 <vfprintf+0x280>
    149a:	b7 01       	movw	r22, r14
    149c:	80 e2       	ldi	r24, 0x20	; 32
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    14a4:	5a 94       	dec	r5
    14a6:	f7 cf       	rjmp	.-18     	; 0x1496 <vfprintf+0x26e>
    14a8:	00 23       	and	r16, r16
    14aa:	29 f0       	breq	.+10     	; 0x14b6 <vfprintf+0x28e>
    14ac:	b7 01       	movw	r22, r14
    14ae:	80 2f       	mov	r24, r16
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    14b6:	93 fc       	sbrc	r9, 3
    14b8:	09 c0       	rjmp	.+18     	; 0x14cc <vfprintf+0x2a4>
    14ba:	55 20       	and	r5, r5
    14bc:	39 f0       	breq	.+14     	; 0x14cc <vfprintf+0x2a4>
    14be:	b7 01       	movw	r22, r14
    14c0:	80 e3       	ldi	r24, 0x30	; 48
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    14c8:	5a 94       	dec	r5
    14ca:	f7 cf       	rjmp	.-18     	; 0x14ba <vfprintf+0x292>
    14cc:	97 fe       	sbrs	r9, 7
    14ce:	4c c0       	rjmp	.+152    	; 0x1568 <vfprintf+0x340>
    14d0:	46 01       	movw	r8, r12
    14d2:	d7 fe       	sbrs	r13, 7
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <vfprintf+0x2b2>
    14d6:	81 2c       	mov	r8, r1
    14d8:	91 2c       	mov	r9, r1
    14da:	c6 01       	movw	r24, r12
    14dc:	88 19       	sub	r24, r8
    14de:	99 09       	sbc	r25, r9
    14e0:	f3 01       	movw	r30, r6
    14e2:	e8 0f       	add	r30, r24
    14e4:	f9 1f       	adc	r31, r25
    14e6:	fe 87       	std	Y+14, r31	; 0x0e
    14e8:	ed 87       	std	Y+13, r30	; 0x0d
    14ea:	96 01       	movw	r18, r12
    14ec:	24 19       	sub	r18, r4
    14ee:	31 09       	sbc	r19, r1
    14f0:	38 8b       	std	Y+16, r19	; 0x10
    14f2:	2f 87       	std	Y+15, r18	; 0x0f
    14f4:	01 2f       	mov	r16, r17
    14f6:	10 e0       	ldi	r17, 0x00	; 0
    14f8:	11 95       	neg	r17
    14fa:	01 95       	neg	r16
    14fc:	11 09       	sbc	r17, r1
    14fe:	3f ef       	ldi	r19, 0xFF	; 255
    1500:	83 16       	cp	r8, r19
    1502:	93 06       	cpc	r9, r19
    1504:	29 f4       	brne	.+10     	; 0x1510 <vfprintf+0x2e8>
    1506:	b7 01       	movw	r22, r14
    1508:	8e e2       	ldi	r24, 0x2E	; 46
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    1510:	c8 14       	cp	r12, r8
    1512:	d9 04       	cpc	r13, r9
    1514:	4c f0       	brlt	.+18     	; 0x1528 <vfprintf+0x300>
    1516:	8f 85       	ldd	r24, Y+15	; 0x0f
    1518:	98 89       	ldd	r25, Y+16	; 0x10
    151a:	88 15       	cp	r24, r8
    151c:	99 05       	cpc	r25, r9
    151e:	24 f4       	brge	.+8      	; 0x1528 <vfprintf+0x300>
    1520:	ed 85       	ldd	r30, Y+13	; 0x0d
    1522:	fe 85       	ldd	r31, Y+14	; 0x0e
    1524:	81 81       	ldd	r24, Z+1	; 0x01
    1526:	01 c0       	rjmp	.+2      	; 0x152a <vfprintf+0x302>
    1528:	80 e3       	ldi	r24, 0x30	; 48
    152a:	f1 e0       	ldi	r31, 0x01	; 1
    152c:	8f 1a       	sub	r8, r31
    152e:	91 08       	sbc	r9, r1
    1530:	2d 85       	ldd	r18, Y+13	; 0x0d
    1532:	3e 85       	ldd	r19, Y+14	; 0x0e
    1534:	2f 5f       	subi	r18, 0xFF	; 255
    1536:	3f 4f       	sbci	r19, 0xFF	; 255
    1538:	3e 87       	std	Y+14, r19	; 0x0e
    153a:	2d 87       	std	Y+13, r18	; 0x0d
    153c:	80 16       	cp	r8, r16
    153e:	91 06       	cpc	r9, r17
    1540:	2c f0       	brlt	.+10     	; 0x154c <vfprintf+0x324>
    1542:	b7 01       	movw	r22, r14
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    154a:	d9 cf       	rjmp	.-78     	; 0x14fe <vfprintf+0x2d6>
    154c:	c8 14       	cp	r12, r8
    154e:	d9 04       	cpc	r13, r9
    1550:	41 f4       	brne	.+16     	; 0x1562 <vfprintf+0x33a>
    1552:	9a 81       	ldd	r25, Y+2	; 0x02
    1554:	96 33       	cpi	r25, 0x36	; 54
    1556:	20 f4       	brcc	.+8      	; 0x1560 <vfprintf+0x338>
    1558:	95 33       	cpi	r25, 0x35	; 53
    155a:	19 f4       	brne	.+6      	; 0x1562 <vfprintf+0x33a>
    155c:	3c 85       	ldd	r19, Y+12	; 0x0c
    155e:	34 ff       	sbrs	r19, 4
    1560:	81 e3       	ldi	r24, 0x31	; 49
    1562:	b7 01       	movw	r22, r14
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	4e c0       	rjmp	.+156    	; 0x1604 <vfprintf+0x3dc>
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	81 33       	cpi	r24, 0x31	; 49
    156c:	19 f0       	breq	.+6      	; 0x1574 <vfprintf+0x34c>
    156e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1570:	9f 7e       	andi	r25, 0xEF	; 239
    1572:	9c 87       	std	Y+12, r25	; 0x0c
    1574:	b7 01       	movw	r22, r14
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    157c:	11 11       	cpse	r17, r1
    157e:	05 c0       	rjmp	.+10     	; 0x158a <vfprintf+0x362>
    1580:	94 fc       	sbrc	r9, 4
    1582:	18 c0       	rjmp	.+48     	; 0x15b4 <vfprintf+0x38c>
    1584:	85 e6       	ldi	r24, 0x65	; 101
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	17 c0       	rjmp	.+46     	; 0x15b8 <vfprintf+0x390>
    158a:	b7 01       	movw	r22, r14
    158c:	8e e2       	ldi	r24, 0x2E	; 46
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    1594:	1e 5f       	subi	r17, 0xFE	; 254
    1596:	82 e0       	ldi	r24, 0x02	; 2
    1598:	01 e0       	ldi	r16, 0x01	; 1
    159a:	08 0f       	add	r16, r24
    159c:	f3 01       	movw	r30, r6
    159e:	e8 0f       	add	r30, r24
    15a0:	f1 1d       	adc	r31, r1
    15a2:	80 81       	ld	r24, Z
    15a4:	b7 01       	movw	r22, r14
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    15ac:	80 2f       	mov	r24, r16
    15ae:	01 13       	cpse	r16, r17
    15b0:	f3 cf       	rjmp	.-26     	; 0x1598 <vfprintf+0x370>
    15b2:	e6 cf       	rjmp	.-52     	; 0x1580 <vfprintf+0x358>
    15b4:	85 e4       	ldi	r24, 0x45	; 69
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	b7 01       	movw	r22, r14
    15ba:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    15be:	d7 fc       	sbrc	r13, 7
    15c0:	06 c0       	rjmp	.+12     	; 0x15ce <vfprintf+0x3a6>
    15c2:	c1 14       	cp	r12, r1
    15c4:	d1 04       	cpc	r13, r1
    15c6:	41 f4       	brne	.+16     	; 0x15d8 <vfprintf+0x3b0>
    15c8:	ec 85       	ldd	r30, Y+12	; 0x0c
    15ca:	e4 ff       	sbrs	r30, 4
    15cc:	05 c0       	rjmp	.+10     	; 0x15d8 <vfprintf+0x3b0>
    15ce:	d1 94       	neg	r13
    15d0:	c1 94       	neg	r12
    15d2:	d1 08       	sbc	r13, r1
    15d4:	8d e2       	ldi	r24, 0x2D	; 45
    15d6:	01 c0       	rjmp	.+2      	; 0x15da <vfprintf+0x3b2>
    15d8:	8b e2       	ldi	r24, 0x2B	; 43
    15da:	b7 01       	movw	r22, r14
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    15e2:	80 e3       	ldi	r24, 0x30	; 48
    15e4:	2a e0       	ldi	r18, 0x0A	; 10
    15e6:	c2 16       	cp	r12, r18
    15e8:	d1 04       	cpc	r13, r1
    15ea:	2c f0       	brlt	.+10     	; 0x15f6 <vfprintf+0x3ce>
    15ec:	8f 5f       	subi	r24, 0xFF	; 255
    15ee:	fa e0       	ldi	r31, 0x0A	; 10
    15f0:	cf 1a       	sub	r12, r31
    15f2:	d1 08       	sbc	r13, r1
    15f4:	f7 cf       	rjmp	.-18     	; 0x15e4 <vfprintf+0x3bc>
    15f6:	b7 01       	movw	r22, r14
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    15fe:	b7 01       	movw	r22, r14
    1600:	c6 01       	movw	r24, r12
    1602:	c0 96       	adiw	r24, 0x30	; 48
    1604:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    1608:	54 c1       	rjmp	.+680    	; 0x18b2 <vfprintf+0x68a>
    160a:	83 36       	cpi	r24, 0x63	; 99
    160c:	31 f0       	breq	.+12     	; 0x161a <vfprintf+0x3f2>
    160e:	83 37       	cpi	r24, 0x73	; 115
    1610:	79 f0       	breq	.+30     	; 0x1630 <vfprintf+0x408>
    1612:	83 35       	cpi	r24, 0x53	; 83
    1614:	09 f0       	breq	.+2      	; 0x1618 <vfprintf+0x3f0>
    1616:	56 c0       	rjmp	.+172    	; 0x16c4 <vfprintf+0x49c>
    1618:	20 c0       	rjmp	.+64     	; 0x165a <vfprintf+0x432>
    161a:	56 01       	movw	r10, r12
    161c:	32 e0       	ldi	r19, 0x02	; 2
    161e:	a3 0e       	add	r10, r19
    1620:	b1 1c       	adc	r11, r1
    1622:	f6 01       	movw	r30, r12
    1624:	80 81       	ld	r24, Z
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	01 e0       	ldi	r16, 0x01	; 1
    162a:	10 e0       	ldi	r17, 0x00	; 0
    162c:	63 01       	movw	r12, r6
    162e:	12 c0       	rjmp	.+36     	; 0x1654 <vfprintf+0x42c>
    1630:	56 01       	movw	r10, r12
    1632:	f2 e0       	ldi	r31, 0x02	; 2
    1634:	af 0e       	add	r10, r31
    1636:	b1 1c       	adc	r11, r1
    1638:	f6 01       	movw	r30, r12
    163a:	c0 80       	ld	r12, Z
    163c:	d1 80       	ldd	r13, Z+1	; 0x01
    163e:	96 fe       	sbrs	r9, 6
    1640:	03 c0       	rjmp	.+6      	; 0x1648 <vfprintf+0x420>
    1642:	61 2f       	mov	r22, r17
    1644:	70 e0       	ldi	r23, 0x00	; 0
    1646:	02 c0       	rjmp	.+4      	; 0x164c <vfprintf+0x424>
    1648:	6f ef       	ldi	r22, 0xFF	; 255
    164a:	7f ef       	ldi	r23, 0xFF	; 255
    164c:	c6 01       	movw	r24, r12
    164e:	0e 94 b1 10 	call	0x2162	; 0x2162 <strnlen>
    1652:	8c 01       	movw	r16, r24
    1654:	f9 2d       	mov	r31, r9
    1656:	ff 77       	andi	r31, 0x7F	; 127
    1658:	14 c0       	rjmp	.+40     	; 0x1682 <vfprintf+0x45a>
    165a:	56 01       	movw	r10, r12
    165c:	22 e0       	ldi	r18, 0x02	; 2
    165e:	a2 0e       	add	r10, r18
    1660:	b1 1c       	adc	r11, r1
    1662:	f6 01       	movw	r30, r12
    1664:	c0 80       	ld	r12, Z
    1666:	d1 80       	ldd	r13, Z+1	; 0x01
    1668:	96 fe       	sbrs	r9, 6
    166a:	03 c0       	rjmp	.+6      	; 0x1672 <vfprintf+0x44a>
    166c:	61 2f       	mov	r22, r17
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <vfprintf+0x44e>
    1672:	6f ef       	ldi	r22, 0xFF	; 255
    1674:	7f ef       	ldi	r23, 0xFF	; 255
    1676:	c6 01       	movw	r24, r12
    1678:	0e 94 86 10 	call	0x210c	; 0x210c <strnlen_P>
    167c:	8c 01       	movw	r16, r24
    167e:	f9 2d       	mov	r31, r9
    1680:	f0 68       	ori	r31, 0x80	; 128
    1682:	9f 2e       	mov	r9, r31
    1684:	f3 fd       	sbrc	r31, 3
    1686:	1a c0       	rjmp	.+52     	; 0x16bc <vfprintf+0x494>
    1688:	85 2d       	mov	r24, r5
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	08 17       	cp	r16, r24
    168e:	19 07       	cpc	r17, r25
    1690:	a8 f4       	brcc	.+42     	; 0x16bc <vfprintf+0x494>
    1692:	b7 01       	movw	r22, r14
    1694:	80 e2       	ldi	r24, 0x20	; 32
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    169c:	5a 94       	dec	r5
    169e:	f4 cf       	rjmp	.-24     	; 0x1688 <vfprintf+0x460>
    16a0:	f6 01       	movw	r30, r12
    16a2:	97 fc       	sbrc	r9, 7
    16a4:	85 91       	lpm	r24, Z+
    16a6:	97 fe       	sbrs	r9, 7
    16a8:	81 91       	ld	r24, Z+
    16aa:	6f 01       	movw	r12, r30
    16ac:	b7 01       	movw	r22, r14
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    16b4:	51 10       	cpse	r5, r1
    16b6:	5a 94       	dec	r5
    16b8:	01 50       	subi	r16, 0x01	; 1
    16ba:	11 09       	sbc	r17, r1
    16bc:	01 15       	cp	r16, r1
    16be:	11 05       	cpc	r17, r1
    16c0:	79 f7       	brne	.-34     	; 0x16a0 <vfprintf+0x478>
    16c2:	f7 c0       	rjmp	.+494    	; 0x18b2 <vfprintf+0x68a>
    16c4:	84 36       	cpi	r24, 0x64	; 100
    16c6:	11 f0       	breq	.+4      	; 0x16cc <vfprintf+0x4a4>
    16c8:	89 36       	cpi	r24, 0x69	; 105
    16ca:	61 f5       	brne	.+88     	; 0x1724 <vfprintf+0x4fc>
    16cc:	56 01       	movw	r10, r12
    16ce:	97 fe       	sbrs	r9, 7
    16d0:	09 c0       	rjmp	.+18     	; 0x16e4 <vfprintf+0x4bc>
    16d2:	24 e0       	ldi	r18, 0x04	; 4
    16d4:	a2 0e       	add	r10, r18
    16d6:	b1 1c       	adc	r11, r1
    16d8:	f6 01       	movw	r30, r12
    16da:	60 81       	ld	r22, Z
    16dc:	71 81       	ldd	r23, Z+1	; 0x01
    16de:	82 81       	ldd	r24, Z+2	; 0x02
    16e0:	93 81       	ldd	r25, Z+3	; 0x03
    16e2:	0a c0       	rjmp	.+20     	; 0x16f8 <vfprintf+0x4d0>
    16e4:	f2 e0       	ldi	r31, 0x02	; 2
    16e6:	af 0e       	add	r10, r31
    16e8:	b1 1c       	adc	r11, r1
    16ea:	f6 01       	movw	r30, r12
    16ec:	60 81       	ld	r22, Z
    16ee:	71 81       	ldd	r23, Z+1	; 0x01
    16f0:	07 2e       	mov	r0, r23
    16f2:	00 0c       	add	r0, r0
    16f4:	88 0b       	sbc	r24, r24
    16f6:	99 0b       	sbc	r25, r25
    16f8:	f9 2d       	mov	r31, r9
    16fa:	ff 76       	andi	r31, 0x6F	; 111
    16fc:	9f 2e       	mov	r9, r31
    16fe:	97 ff       	sbrs	r25, 7
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <vfprintf+0x4ec>
    1702:	90 95       	com	r25
    1704:	80 95       	com	r24
    1706:	70 95       	com	r23
    1708:	61 95       	neg	r22
    170a:	7f 4f       	sbci	r23, 0xFF	; 255
    170c:	8f 4f       	sbci	r24, 0xFF	; 255
    170e:	9f 4f       	sbci	r25, 0xFF	; 255
    1710:	f0 68       	ori	r31, 0x80	; 128
    1712:	9f 2e       	mov	r9, r31
    1714:	2a e0       	ldi	r18, 0x0A	; 10
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	a3 01       	movw	r20, r6
    171a:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__ultoa_invert>
    171e:	c8 2e       	mov	r12, r24
    1720:	c6 18       	sub	r12, r6
    1722:	3f c0       	rjmp	.+126    	; 0x17a2 <vfprintf+0x57a>
    1724:	09 2d       	mov	r16, r9
    1726:	85 37       	cpi	r24, 0x75	; 117
    1728:	21 f4       	brne	.+8      	; 0x1732 <vfprintf+0x50a>
    172a:	0f 7e       	andi	r16, 0xEF	; 239
    172c:	2a e0       	ldi	r18, 0x0A	; 10
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	1d c0       	rjmp	.+58     	; 0x176c <vfprintf+0x544>
    1732:	09 7f       	andi	r16, 0xF9	; 249
    1734:	8f 36       	cpi	r24, 0x6F	; 111
    1736:	91 f0       	breq	.+36     	; 0x175c <vfprintf+0x534>
    1738:	18 f4       	brcc	.+6      	; 0x1740 <vfprintf+0x518>
    173a:	88 35       	cpi	r24, 0x58	; 88
    173c:	59 f0       	breq	.+22     	; 0x1754 <vfprintf+0x52c>
    173e:	c3 c0       	rjmp	.+390    	; 0x18c6 <vfprintf+0x69e>
    1740:	80 37       	cpi	r24, 0x70	; 112
    1742:	19 f0       	breq	.+6      	; 0x174a <vfprintf+0x522>
    1744:	88 37       	cpi	r24, 0x78	; 120
    1746:	11 f0       	breq	.+4      	; 0x174c <vfprintf+0x524>
    1748:	be c0       	rjmp	.+380    	; 0x18c6 <vfprintf+0x69e>
    174a:	00 61       	ori	r16, 0x10	; 16
    174c:	04 ff       	sbrs	r16, 4
    174e:	09 c0       	rjmp	.+18     	; 0x1762 <vfprintf+0x53a>
    1750:	04 60       	ori	r16, 0x04	; 4
    1752:	07 c0       	rjmp	.+14     	; 0x1762 <vfprintf+0x53a>
    1754:	94 fe       	sbrs	r9, 4
    1756:	08 c0       	rjmp	.+16     	; 0x1768 <vfprintf+0x540>
    1758:	06 60       	ori	r16, 0x06	; 6
    175a:	06 c0       	rjmp	.+12     	; 0x1768 <vfprintf+0x540>
    175c:	28 e0       	ldi	r18, 0x08	; 8
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	05 c0       	rjmp	.+10     	; 0x176c <vfprintf+0x544>
    1762:	20 e1       	ldi	r18, 0x10	; 16
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	02 c0       	rjmp	.+4      	; 0x176c <vfprintf+0x544>
    1768:	20 e1       	ldi	r18, 0x10	; 16
    176a:	32 e0       	ldi	r19, 0x02	; 2
    176c:	56 01       	movw	r10, r12
    176e:	07 ff       	sbrs	r16, 7
    1770:	09 c0       	rjmp	.+18     	; 0x1784 <vfprintf+0x55c>
    1772:	84 e0       	ldi	r24, 0x04	; 4
    1774:	a8 0e       	add	r10, r24
    1776:	b1 1c       	adc	r11, r1
    1778:	f6 01       	movw	r30, r12
    177a:	60 81       	ld	r22, Z
    177c:	71 81       	ldd	r23, Z+1	; 0x01
    177e:	82 81       	ldd	r24, Z+2	; 0x02
    1780:	93 81       	ldd	r25, Z+3	; 0x03
    1782:	08 c0       	rjmp	.+16     	; 0x1794 <vfprintf+0x56c>
    1784:	f2 e0       	ldi	r31, 0x02	; 2
    1786:	af 0e       	add	r10, r31
    1788:	b1 1c       	adc	r11, r1
    178a:	f6 01       	movw	r30, r12
    178c:	60 81       	ld	r22, Z
    178e:	71 81       	ldd	r23, Z+1	; 0x01
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	a3 01       	movw	r20, r6
    1796:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__ultoa_invert>
    179a:	c8 2e       	mov	r12, r24
    179c:	c6 18       	sub	r12, r6
    179e:	0f 77       	andi	r16, 0x7F	; 127
    17a0:	90 2e       	mov	r9, r16
    17a2:	96 fe       	sbrs	r9, 6
    17a4:	0b c0       	rjmp	.+22     	; 0x17bc <vfprintf+0x594>
    17a6:	09 2d       	mov	r16, r9
    17a8:	0e 7f       	andi	r16, 0xFE	; 254
    17aa:	c1 16       	cp	r12, r17
    17ac:	50 f4       	brcc	.+20     	; 0x17c2 <vfprintf+0x59a>
    17ae:	94 fe       	sbrs	r9, 4
    17b0:	0a c0       	rjmp	.+20     	; 0x17c6 <vfprintf+0x59e>
    17b2:	92 fc       	sbrc	r9, 2
    17b4:	08 c0       	rjmp	.+16     	; 0x17c6 <vfprintf+0x59e>
    17b6:	09 2d       	mov	r16, r9
    17b8:	0e 7e       	andi	r16, 0xEE	; 238
    17ba:	05 c0       	rjmp	.+10     	; 0x17c6 <vfprintf+0x59e>
    17bc:	dc 2c       	mov	r13, r12
    17be:	09 2d       	mov	r16, r9
    17c0:	03 c0       	rjmp	.+6      	; 0x17c8 <vfprintf+0x5a0>
    17c2:	dc 2c       	mov	r13, r12
    17c4:	01 c0       	rjmp	.+2      	; 0x17c8 <vfprintf+0x5a0>
    17c6:	d1 2e       	mov	r13, r17
    17c8:	04 ff       	sbrs	r16, 4
    17ca:	0d c0       	rjmp	.+26     	; 0x17e6 <vfprintf+0x5be>
    17cc:	fe 01       	movw	r30, r28
    17ce:	ec 0d       	add	r30, r12
    17d0:	f1 1d       	adc	r31, r1
    17d2:	80 81       	ld	r24, Z
    17d4:	80 33       	cpi	r24, 0x30	; 48
    17d6:	11 f4       	brne	.+4      	; 0x17dc <vfprintf+0x5b4>
    17d8:	09 7e       	andi	r16, 0xE9	; 233
    17da:	09 c0       	rjmp	.+18     	; 0x17ee <vfprintf+0x5c6>
    17dc:	02 ff       	sbrs	r16, 2
    17de:	06 c0       	rjmp	.+12     	; 0x17ec <vfprintf+0x5c4>
    17e0:	d3 94       	inc	r13
    17e2:	d3 94       	inc	r13
    17e4:	04 c0       	rjmp	.+8      	; 0x17ee <vfprintf+0x5c6>
    17e6:	80 2f       	mov	r24, r16
    17e8:	86 78       	andi	r24, 0x86	; 134
    17ea:	09 f0       	breq	.+2      	; 0x17ee <vfprintf+0x5c6>
    17ec:	d3 94       	inc	r13
    17ee:	03 fd       	sbrc	r16, 3
    17f0:	11 c0       	rjmp	.+34     	; 0x1814 <vfprintf+0x5ec>
    17f2:	00 ff       	sbrs	r16, 0
    17f4:	06 c0       	rjmp	.+12     	; 0x1802 <vfprintf+0x5da>
    17f6:	1c 2d       	mov	r17, r12
    17f8:	d5 14       	cp	r13, r5
    17fa:	80 f4       	brcc	.+32     	; 0x181c <vfprintf+0x5f4>
    17fc:	15 0d       	add	r17, r5
    17fe:	1d 19       	sub	r17, r13
    1800:	0d c0       	rjmp	.+26     	; 0x181c <vfprintf+0x5f4>
    1802:	d5 14       	cp	r13, r5
    1804:	58 f4       	brcc	.+22     	; 0x181c <vfprintf+0x5f4>
    1806:	b7 01       	movw	r22, r14
    1808:	80 e2       	ldi	r24, 0x20	; 32
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    1810:	d3 94       	inc	r13
    1812:	f7 cf       	rjmp	.-18     	; 0x1802 <vfprintf+0x5da>
    1814:	d5 14       	cp	r13, r5
    1816:	10 f4       	brcc	.+4      	; 0x181c <vfprintf+0x5f4>
    1818:	5d 18       	sub	r5, r13
    181a:	01 c0       	rjmp	.+2      	; 0x181e <vfprintf+0x5f6>
    181c:	51 2c       	mov	r5, r1
    181e:	04 ff       	sbrs	r16, 4
    1820:	10 c0       	rjmp	.+32     	; 0x1842 <vfprintf+0x61a>
    1822:	b7 01       	movw	r22, r14
    1824:	80 e3       	ldi	r24, 0x30	; 48
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    182c:	02 ff       	sbrs	r16, 2
    182e:	17 c0       	rjmp	.+46     	; 0x185e <vfprintf+0x636>
    1830:	01 fd       	sbrc	r16, 1
    1832:	03 c0       	rjmp	.+6      	; 0x183a <vfprintf+0x612>
    1834:	88 e7       	ldi	r24, 0x78	; 120
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 c0       	rjmp	.+4      	; 0x183e <vfprintf+0x616>
    183a:	88 e5       	ldi	r24, 0x58	; 88
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	b7 01       	movw	r22, r14
    1840:	0c c0       	rjmp	.+24     	; 0x185a <vfprintf+0x632>
    1842:	80 2f       	mov	r24, r16
    1844:	86 78       	andi	r24, 0x86	; 134
    1846:	59 f0       	breq	.+22     	; 0x185e <vfprintf+0x636>
    1848:	01 ff       	sbrs	r16, 1
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <vfprintf+0x628>
    184c:	8b e2       	ldi	r24, 0x2B	; 43
    184e:	01 c0       	rjmp	.+2      	; 0x1852 <vfprintf+0x62a>
    1850:	80 e2       	ldi	r24, 0x20	; 32
    1852:	07 fd       	sbrc	r16, 7
    1854:	8d e2       	ldi	r24, 0x2D	; 45
    1856:	b7 01       	movw	r22, r14
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    185e:	c1 16       	cp	r12, r17
    1860:	38 f4       	brcc	.+14     	; 0x1870 <vfprintf+0x648>
    1862:	b7 01       	movw	r22, r14
    1864:	80 e3       	ldi	r24, 0x30	; 48
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    186c:	11 50       	subi	r17, 0x01	; 1
    186e:	f7 cf       	rjmp	.-18     	; 0x185e <vfprintf+0x636>
    1870:	ca 94       	dec	r12
    1872:	f3 01       	movw	r30, r6
    1874:	ec 0d       	add	r30, r12
    1876:	f1 1d       	adc	r31, r1
    1878:	80 81       	ld	r24, Z
    187a:	b7 01       	movw	r22, r14
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    1882:	c1 10       	cpse	r12, r1
    1884:	f5 cf       	rjmp	.-22     	; 0x1870 <vfprintf+0x648>
    1886:	15 c0       	rjmp	.+42     	; 0x18b2 <vfprintf+0x68a>
    1888:	f4 e0       	ldi	r31, 0x04	; 4
    188a:	f5 15       	cp	r31, r5
    188c:	60 f5       	brcc	.+88     	; 0x18e6 <vfprintf+0x6be>
    188e:	84 e0       	ldi	r24, 0x04	; 4
    1890:	58 1a       	sub	r5, r24
    1892:	93 fe       	sbrs	r9, 3
    1894:	1f c0       	rjmp	.+62     	; 0x18d4 <vfprintf+0x6ac>
    1896:	01 11       	cpse	r16, r1
    1898:	27 c0       	rjmp	.+78     	; 0x18e8 <vfprintf+0x6c0>
    189a:	2c 85       	ldd	r18, Y+12	; 0x0c
    189c:	23 ff       	sbrs	r18, 3
    189e:	2a c0       	rjmp	.+84     	; 0x18f4 <vfprintf+0x6cc>
    18a0:	0c ec       	ldi	r16, 0xCC	; 204
    18a2:	10 e0       	ldi	r17, 0x00	; 0
    18a4:	39 2d       	mov	r19, r9
    18a6:	30 71       	andi	r19, 0x10	; 16
    18a8:	93 2e       	mov	r9, r19
    18aa:	f8 01       	movw	r30, r16
    18ac:	84 91       	lpm	r24, Z
    18ae:	81 11       	cpse	r24, r1
    18b0:	24 c0       	rjmp	.+72     	; 0x18fa <vfprintf+0x6d2>
    18b2:	55 20       	and	r5, r5
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <vfprintf+0x690>
    18b6:	e4 cc       	rjmp	.-1592   	; 0x1280 <vfprintf+0x58>
    18b8:	b7 01       	movw	r22, r14
    18ba:	80 e2       	ldi	r24, 0x20	; 32
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    18c2:	5a 94       	dec	r5
    18c4:	f6 cf       	rjmp	.-20     	; 0x18b2 <vfprintf+0x68a>
    18c6:	f7 01       	movw	r30, r14
    18c8:	86 81       	ldd	r24, Z+6	; 0x06
    18ca:	97 81       	ldd	r25, Z+7	; 0x07
    18cc:	26 c0       	rjmp	.+76     	; 0x191a <vfprintf+0x6f2>
    18ce:	8f ef       	ldi	r24, 0xFF	; 255
    18d0:	9f ef       	ldi	r25, 0xFF	; 255
    18d2:	23 c0       	rjmp	.+70     	; 0x191a <vfprintf+0x6f2>
    18d4:	b7 01       	movw	r22, r14
    18d6:	80 e2       	ldi	r24, 0x20	; 32
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    18de:	5a 94       	dec	r5
    18e0:	51 10       	cpse	r5, r1
    18e2:	f8 cf       	rjmp	.-16     	; 0x18d4 <vfprintf+0x6ac>
    18e4:	d8 cf       	rjmp	.-80     	; 0x1896 <vfprintf+0x66e>
    18e6:	51 2c       	mov	r5, r1
    18e8:	b7 01       	movw	r22, r14
    18ea:	80 2f       	mov	r24, r16
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    18f2:	d3 cf       	rjmp	.-90     	; 0x189a <vfprintf+0x672>
    18f4:	00 ed       	ldi	r16, 0xD0	; 208
    18f6:	10 e0       	ldi	r17, 0x00	; 0
    18f8:	d5 cf       	rjmp	.-86     	; 0x18a4 <vfprintf+0x67c>
    18fa:	91 10       	cpse	r9, r1
    18fc:	80 52       	subi	r24, 0x20	; 32
    18fe:	b7 01       	movw	r22, r14
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    1906:	0f 5f       	subi	r16, 0xFF	; 255
    1908:	1f 4f       	sbci	r17, 0xFF	; 255
    190a:	cf cf       	rjmp	.-98     	; 0x18aa <vfprintf+0x682>
    190c:	23 e0       	ldi	r18, 0x03	; 3
    190e:	25 15       	cp	r18, r5
    1910:	10 f4       	brcc	.+4      	; 0x1916 <vfprintf+0x6ee>
    1912:	83 e0       	ldi	r24, 0x03	; 3
    1914:	bd cf       	rjmp	.-134    	; 0x1890 <vfprintf+0x668>
    1916:	51 2c       	mov	r5, r1
    1918:	c0 cf       	rjmp	.-128    	; 0x189a <vfprintf+0x672>
    191a:	60 96       	adiw	r28, 0x10	; 16
    191c:	e2 e1       	ldi	r30, 0x12	; 18
    191e:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__epilogue_restores__>

00001922 <__udivmodsi4>:
    1922:	a1 e2       	ldi	r26, 0x21	; 33
    1924:	1a 2e       	mov	r1, r26
    1926:	aa 1b       	sub	r26, r26
    1928:	bb 1b       	sub	r27, r27
    192a:	fd 01       	movw	r30, r26
    192c:	0d c0       	rjmp	.+26     	; 0x1948 <__udivmodsi4_ep>

0000192e <__udivmodsi4_loop>:
    192e:	aa 1f       	adc	r26, r26
    1930:	bb 1f       	adc	r27, r27
    1932:	ee 1f       	adc	r30, r30
    1934:	ff 1f       	adc	r31, r31
    1936:	a2 17       	cp	r26, r18
    1938:	b3 07       	cpc	r27, r19
    193a:	e4 07       	cpc	r30, r20
    193c:	f5 07       	cpc	r31, r21
    193e:	20 f0       	brcs	.+8      	; 0x1948 <__udivmodsi4_ep>
    1940:	a2 1b       	sub	r26, r18
    1942:	b3 0b       	sbc	r27, r19
    1944:	e4 0b       	sbc	r30, r20
    1946:	f5 0b       	sbc	r31, r21

00001948 <__udivmodsi4_ep>:
    1948:	66 1f       	adc	r22, r22
    194a:	77 1f       	adc	r23, r23
    194c:	88 1f       	adc	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	1a 94       	dec	r1
    1952:	69 f7       	brne	.-38     	; 0x192e <__udivmodsi4_loop>
    1954:	60 95       	com	r22
    1956:	70 95       	com	r23
    1958:	80 95       	com	r24
    195a:	90 95       	com	r25
    195c:	9b 01       	movw	r18, r22
    195e:	ac 01       	movw	r20, r24
    1960:	bd 01       	movw	r22, r26
    1962:	cf 01       	movw	r24, r30
    1964:	08 95       	ret

00001966 <__prologue_saves__>:
    1966:	2f 92       	push	r2
    1968:	3f 92       	push	r3
    196a:	4f 92       	push	r4
    196c:	5f 92       	push	r5
    196e:	6f 92       	push	r6
    1970:	7f 92       	push	r7
    1972:	8f 92       	push	r8
    1974:	9f 92       	push	r9
    1976:	af 92       	push	r10
    1978:	bf 92       	push	r11
    197a:	cf 92       	push	r12
    197c:	df 92       	push	r13
    197e:	ef 92       	push	r14
    1980:	ff 92       	push	r15
    1982:	0f 93       	push	r16
    1984:	1f 93       	push	r17
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	ca 1b       	sub	r28, r26
    1990:	db 0b       	sbc	r29, r27
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	09 94       	ijmp

0000199e <__epilogue_restores__>:
    199e:	2a 88       	ldd	r2, Y+18	; 0x12
    19a0:	39 88       	ldd	r3, Y+17	; 0x11
    19a2:	48 88       	ldd	r4, Y+16	; 0x10
    19a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    19a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    19a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    19aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    19ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    19ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    19b0:	b9 84       	ldd	r11, Y+9	; 0x09
    19b2:	c8 84       	ldd	r12, Y+8	; 0x08
    19b4:	df 80       	ldd	r13, Y+7	; 0x07
    19b6:	ee 80       	ldd	r14, Y+6	; 0x06
    19b8:	fd 80       	ldd	r15, Y+5	; 0x05
    19ba:	0c 81       	ldd	r16, Y+4	; 0x04
    19bc:	1b 81       	ldd	r17, Y+3	; 0x03
    19be:	aa 81       	ldd	r26, Y+2	; 0x02
    19c0:	b9 81       	ldd	r27, Y+1	; 0x01
    19c2:	ce 0f       	add	r28, r30
    19c4:	d1 1d       	adc	r29, r1
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	ed 01       	movw	r28, r26
    19d2:	08 95       	ret

000019d4 <__divsf3>:
    19d4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__divsf3x>
    19d8:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__fp_round>
    19dc:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <__fp_pscB>
    19e0:	58 f0       	brcs	.+22     	; 0x19f8 <__divsf3+0x24>
    19e2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__fp_pscA>
    19e6:	40 f0       	brcs	.+16     	; 0x19f8 <__divsf3+0x24>
    19e8:	29 f4       	brne	.+10     	; 0x19f4 <__divsf3+0x20>
    19ea:	5f 3f       	cpi	r21, 0xFF	; 255
    19ec:	29 f0       	breq	.+10     	; 0x19f8 <__divsf3+0x24>
    19ee:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__fp_inf>
    19f2:	51 11       	cpse	r21, r1
    19f4:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_szero>
    19f8:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <__fp_nan>

000019fc <__divsf3x>:
    19fc:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__fp_split3>
    1a00:	68 f3       	brcs	.-38     	; 0x19dc <__divsf3+0x8>

00001a02 <__divsf3_pse>:
    1a02:	99 23       	and	r25, r25
    1a04:	b1 f3       	breq	.-20     	; 0x19f2 <__divsf3+0x1e>
    1a06:	55 23       	and	r21, r21
    1a08:	91 f3       	breq	.-28     	; 0x19ee <__divsf3+0x1a>
    1a0a:	95 1b       	sub	r25, r21
    1a0c:	55 0b       	sbc	r21, r21
    1a0e:	bb 27       	eor	r27, r27
    1a10:	aa 27       	eor	r26, r26
    1a12:	62 17       	cp	r22, r18
    1a14:	73 07       	cpc	r23, r19
    1a16:	84 07       	cpc	r24, r20
    1a18:	38 f0       	brcs	.+14     	; 0x1a28 <__divsf3_pse+0x26>
    1a1a:	9f 5f       	subi	r25, 0xFF	; 255
    1a1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a1e:	22 0f       	add	r18, r18
    1a20:	33 1f       	adc	r19, r19
    1a22:	44 1f       	adc	r20, r20
    1a24:	aa 1f       	adc	r26, r26
    1a26:	a9 f3       	breq	.-22     	; 0x1a12 <__divsf3_pse+0x10>
    1a28:	35 d0       	rcall	.+106    	; 0x1a94 <__divsf3_pse+0x92>
    1a2a:	0e 2e       	mov	r0, r30
    1a2c:	3a f0       	brmi	.+14     	; 0x1a3c <__divsf3_pse+0x3a>
    1a2e:	e0 e8       	ldi	r30, 0x80	; 128
    1a30:	32 d0       	rcall	.+100    	; 0x1a96 <__divsf3_pse+0x94>
    1a32:	91 50       	subi	r25, 0x01	; 1
    1a34:	50 40       	sbci	r21, 0x00	; 0
    1a36:	e6 95       	lsr	r30
    1a38:	00 1c       	adc	r0, r0
    1a3a:	ca f7       	brpl	.-14     	; 0x1a2e <__divsf3_pse+0x2c>
    1a3c:	2b d0       	rcall	.+86     	; 0x1a94 <__divsf3_pse+0x92>
    1a3e:	fe 2f       	mov	r31, r30
    1a40:	29 d0       	rcall	.+82     	; 0x1a94 <__divsf3_pse+0x92>
    1a42:	66 0f       	add	r22, r22
    1a44:	77 1f       	adc	r23, r23
    1a46:	88 1f       	adc	r24, r24
    1a48:	bb 1f       	adc	r27, r27
    1a4a:	26 17       	cp	r18, r22
    1a4c:	37 07       	cpc	r19, r23
    1a4e:	48 07       	cpc	r20, r24
    1a50:	ab 07       	cpc	r26, r27
    1a52:	b0 e8       	ldi	r27, 0x80	; 128
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <__divsf3_pse+0x56>
    1a56:	bb 0b       	sbc	r27, r27
    1a58:	80 2d       	mov	r24, r0
    1a5a:	bf 01       	movw	r22, r30
    1a5c:	ff 27       	eor	r31, r31
    1a5e:	93 58       	subi	r25, 0x83	; 131
    1a60:	5f 4f       	sbci	r21, 0xFF	; 255
    1a62:	3a f0       	brmi	.+14     	; 0x1a72 <__divsf3_pse+0x70>
    1a64:	9e 3f       	cpi	r25, 0xFE	; 254
    1a66:	51 05       	cpc	r21, r1
    1a68:	78 f0       	brcs	.+30     	; 0x1a88 <__divsf3_pse+0x86>
    1a6a:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__fp_inf>
    1a6e:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_szero>
    1a72:	5f 3f       	cpi	r21, 0xFF	; 255
    1a74:	e4 f3       	brlt	.-8      	; 0x1a6e <__divsf3_pse+0x6c>
    1a76:	98 3e       	cpi	r25, 0xE8	; 232
    1a78:	d4 f3       	brlt	.-12     	; 0x1a6e <__divsf3_pse+0x6c>
    1a7a:	86 95       	lsr	r24
    1a7c:	77 95       	ror	r23
    1a7e:	67 95       	ror	r22
    1a80:	b7 95       	ror	r27
    1a82:	f7 95       	ror	r31
    1a84:	9f 5f       	subi	r25, 0xFF	; 255
    1a86:	c9 f7       	brne	.-14     	; 0x1a7a <__divsf3_pse+0x78>
    1a88:	88 0f       	add	r24, r24
    1a8a:	91 1d       	adc	r25, r1
    1a8c:	96 95       	lsr	r25
    1a8e:	87 95       	ror	r24
    1a90:	97 f9       	bld	r25, 7
    1a92:	08 95       	ret
    1a94:	e1 e0       	ldi	r30, 0x01	; 1
    1a96:	66 0f       	add	r22, r22
    1a98:	77 1f       	adc	r23, r23
    1a9a:	88 1f       	adc	r24, r24
    1a9c:	bb 1f       	adc	r27, r27
    1a9e:	62 17       	cp	r22, r18
    1aa0:	73 07       	cpc	r23, r19
    1aa2:	84 07       	cpc	r24, r20
    1aa4:	ba 07       	cpc	r27, r26
    1aa6:	20 f0       	brcs	.+8      	; 0x1ab0 <__divsf3_pse+0xae>
    1aa8:	62 1b       	sub	r22, r18
    1aaa:	73 0b       	sbc	r23, r19
    1aac:	84 0b       	sbc	r24, r20
    1aae:	ba 0b       	sbc	r27, r26
    1ab0:	ee 1f       	adc	r30, r30
    1ab2:	88 f7       	brcc	.-30     	; 0x1a96 <__divsf3_pse+0x94>
    1ab4:	e0 95       	com	r30
    1ab6:	08 95       	ret

00001ab8 <__fixsfsi>:
    1ab8:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__fixunssfsi>
    1abc:	68 94       	set
    1abe:	b1 11       	cpse	r27, r1
    1ac0:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_szero>
    1ac4:	08 95       	ret

00001ac6 <__fixunssfsi>:
    1ac6:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__fp_splitA>
    1aca:	88 f0       	brcs	.+34     	; 0x1aee <__fixunssfsi+0x28>
    1acc:	9f 57       	subi	r25, 0x7F	; 127
    1ace:	98 f0       	brcs	.+38     	; 0x1af6 <__fixunssfsi+0x30>
    1ad0:	b9 2f       	mov	r27, r25
    1ad2:	99 27       	eor	r25, r25
    1ad4:	b7 51       	subi	r27, 0x17	; 23
    1ad6:	b0 f0       	brcs	.+44     	; 0x1b04 <__fixunssfsi+0x3e>
    1ad8:	e1 f0       	breq	.+56     	; 0x1b12 <__fixunssfsi+0x4c>
    1ada:	66 0f       	add	r22, r22
    1adc:	77 1f       	adc	r23, r23
    1ade:	88 1f       	adc	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	1a f0       	brmi	.+6      	; 0x1aea <__fixunssfsi+0x24>
    1ae4:	ba 95       	dec	r27
    1ae6:	c9 f7       	brne	.-14     	; 0x1ada <__fixunssfsi+0x14>
    1ae8:	14 c0       	rjmp	.+40     	; 0x1b12 <__fixunssfsi+0x4c>
    1aea:	b1 30       	cpi	r27, 0x01	; 1
    1aec:	91 f0       	breq	.+36     	; 0x1b12 <__fixunssfsi+0x4c>
    1aee:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__fp_zero>
    1af2:	b1 e0       	ldi	r27, 0x01	; 1
    1af4:	08 95       	ret
    1af6:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__fp_zero>
    1afa:	67 2f       	mov	r22, r23
    1afc:	78 2f       	mov	r23, r24
    1afe:	88 27       	eor	r24, r24
    1b00:	b8 5f       	subi	r27, 0xF8	; 248
    1b02:	39 f0       	breq	.+14     	; 0x1b12 <__fixunssfsi+0x4c>
    1b04:	b9 3f       	cpi	r27, 0xF9	; 249
    1b06:	cc f3       	brlt	.-14     	; 0x1afa <__fixunssfsi+0x34>
    1b08:	86 95       	lsr	r24
    1b0a:	77 95       	ror	r23
    1b0c:	67 95       	ror	r22
    1b0e:	b3 95       	inc	r27
    1b10:	d9 f7       	brne	.-10     	; 0x1b08 <__fixunssfsi+0x42>
    1b12:	3e f4       	brtc	.+14     	; 0x1b22 <__fixunssfsi+0x5c>
    1b14:	90 95       	com	r25
    1b16:	80 95       	com	r24
    1b18:	70 95       	com	r23
    1b1a:	61 95       	neg	r22
    1b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b20:	9f 4f       	sbci	r25, 0xFF	; 255
    1b22:	08 95       	ret

00001b24 <__floatunsisf>:
    1b24:	e8 94       	clt
    1b26:	09 c0       	rjmp	.+18     	; 0x1b3a <__floatsisf+0x12>

00001b28 <__floatsisf>:
    1b28:	97 fb       	bst	r25, 7
    1b2a:	3e f4       	brtc	.+14     	; 0x1b3a <__floatsisf+0x12>
    1b2c:	90 95       	com	r25
    1b2e:	80 95       	com	r24
    1b30:	70 95       	com	r23
    1b32:	61 95       	neg	r22
    1b34:	7f 4f       	sbci	r23, 0xFF	; 255
    1b36:	8f 4f       	sbci	r24, 0xFF	; 255
    1b38:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3a:	99 23       	and	r25, r25
    1b3c:	a9 f0       	breq	.+42     	; 0x1b68 <__floatsisf+0x40>
    1b3e:	f9 2f       	mov	r31, r25
    1b40:	96 e9       	ldi	r25, 0x96	; 150
    1b42:	bb 27       	eor	r27, r27
    1b44:	93 95       	inc	r25
    1b46:	f6 95       	lsr	r31
    1b48:	87 95       	ror	r24
    1b4a:	77 95       	ror	r23
    1b4c:	67 95       	ror	r22
    1b4e:	b7 95       	ror	r27
    1b50:	f1 11       	cpse	r31, r1
    1b52:	f8 cf       	rjmp	.-16     	; 0x1b44 <__floatsisf+0x1c>
    1b54:	fa f4       	brpl	.+62     	; 0x1b94 <__floatsisf+0x6c>
    1b56:	bb 0f       	add	r27, r27
    1b58:	11 f4       	brne	.+4      	; 0x1b5e <__floatsisf+0x36>
    1b5a:	60 ff       	sbrs	r22, 0
    1b5c:	1b c0       	rjmp	.+54     	; 0x1b94 <__floatsisf+0x6c>
    1b5e:	6f 5f       	subi	r22, 0xFF	; 255
    1b60:	7f 4f       	sbci	r23, 0xFF	; 255
    1b62:	8f 4f       	sbci	r24, 0xFF	; 255
    1b64:	9f 4f       	sbci	r25, 0xFF	; 255
    1b66:	16 c0       	rjmp	.+44     	; 0x1b94 <__floatsisf+0x6c>
    1b68:	88 23       	and	r24, r24
    1b6a:	11 f0       	breq	.+4      	; 0x1b70 <__floatsisf+0x48>
    1b6c:	96 e9       	ldi	r25, 0x96	; 150
    1b6e:	11 c0       	rjmp	.+34     	; 0x1b92 <__floatsisf+0x6a>
    1b70:	77 23       	and	r23, r23
    1b72:	21 f0       	breq	.+8      	; 0x1b7c <__floatsisf+0x54>
    1b74:	9e e8       	ldi	r25, 0x8E	; 142
    1b76:	87 2f       	mov	r24, r23
    1b78:	76 2f       	mov	r23, r22
    1b7a:	05 c0       	rjmp	.+10     	; 0x1b86 <__floatsisf+0x5e>
    1b7c:	66 23       	and	r22, r22
    1b7e:	71 f0       	breq	.+28     	; 0x1b9c <__floatsisf+0x74>
    1b80:	96 e8       	ldi	r25, 0x86	; 134
    1b82:	86 2f       	mov	r24, r22
    1b84:	70 e0       	ldi	r23, 0x00	; 0
    1b86:	60 e0       	ldi	r22, 0x00	; 0
    1b88:	2a f0       	brmi	.+10     	; 0x1b94 <__floatsisf+0x6c>
    1b8a:	9a 95       	dec	r25
    1b8c:	66 0f       	add	r22, r22
    1b8e:	77 1f       	adc	r23, r23
    1b90:	88 1f       	adc	r24, r24
    1b92:	da f7       	brpl	.-10     	; 0x1b8a <__floatsisf+0x62>
    1b94:	88 0f       	add	r24, r24
    1b96:	96 95       	lsr	r25
    1b98:	87 95       	ror	r24
    1b9a:	97 f9       	bld	r25, 7
    1b9c:	08 95       	ret

00001b9e <__fp_inf>:
    1b9e:	97 f9       	bld	r25, 7
    1ba0:	9f 67       	ori	r25, 0x7F	; 127
    1ba2:	80 e8       	ldi	r24, 0x80	; 128
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	08 95       	ret

00001baa <__fp_nan>:
    1baa:	9f ef       	ldi	r25, 0xFF	; 255
    1bac:	80 ec       	ldi	r24, 0xC0	; 192
    1bae:	08 95       	ret

00001bb0 <__fp_pscA>:
    1bb0:	00 24       	eor	r0, r0
    1bb2:	0a 94       	dec	r0
    1bb4:	16 16       	cp	r1, r22
    1bb6:	17 06       	cpc	r1, r23
    1bb8:	18 06       	cpc	r1, r24
    1bba:	09 06       	cpc	r0, r25
    1bbc:	08 95       	ret

00001bbe <__fp_pscB>:
    1bbe:	00 24       	eor	r0, r0
    1bc0:	0a 94       	dec	r0
    1bc2:	12 16       	cp	r1, r18
    1bc4:	13 06       	cpc	r1, r19
    1bc6:	14 06       	cpc	r1, r20
    1bc8:	05 06       	cpc	r0, r21
    1bca:	08 95       	ret

00001bcc <__fp_round>:
    1bcc:	09 2e       	mov	r0, r25
    1bce:	03 94       	inc	r0
    1bd0:	00 0c       	add	r0, r0
    1bd2:	11 f4       	brne	.+4      	; 0x1bd8 <__fp_round+0xc>
    1bd4:	88 23       	and	r24, r24
    1bd6:	52 f0       	brmi	.+20     	; 0x1bec <__fp_round+0x20>
    1bd8:	bb 0f       	add	r27, r27
    1bda:	40 f4       	brcc	.+16     	; 0x1bec <__fp_round+0x20>
    1bdc:	bf 2b       	or	r27, r31
    1bde:	11 f4       	brne	.+4      	; 0x1be4 <__fp_round+0x18>
    1be0:	60 ff       	sbrs	r22, 0
    1be2:	04 c0       	rjmp	.+8      	; 0x1bec <__fp_round+0x20>
    1be4:	6f 5f       	subi	r22, 0xFF	; 255
    1be6:	7f 4f       	sbci	r23, 0xFF	; 255
    1be8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bea:	9f 4f       	sbci	r25, 0xFF	; 255
    1bec:	08 95       	ret

00001bee <__fp_split3>:
    1bee:	57 fd       	sbrc	r21, 7
    1bf0:	90 58       	subi	r25, 0x80	; 128
    1bf2:	44 0f       	add	r20, r20
    1bf4:	55 1f       	adc	r21, r21
    1bf6:	59 f0       	breq	.+22     	; 0x1c0e <__fp_splitA+0x10>
    1bf8:	5f 3f       	cpi	r21, 0xFF	; 255
    1bfa:	71 f0       	breq	.+28     	; 0x1c18 <__fp_splitA+0x1a>
    1bfc:	47 95       	ror	r20

00001bfe <__fp_splitA>:
    1bfe:	88 0f       	add	r24, r24
    1c00:	97 fb       	bst	r25, 7
    1c02:	99 1f       	adc	r25, r25
    1c04:	61 f0       	breq	.+24     	; 0x1c1e <__fp_splitA+0x20>
    1c06:	9f 3f       	cpi	r25, 0xFF	; 255
    1c08:	79 f0       	breq	.+30     	; 0x1c28 <__fp_splitA+0x2a>
    1c0a:	87 95       	ror	r24
    1c0c:	08 95       	ret
    1c0e:	12 16       	cp	r1, r18
    1c10:	13 06       	cpc	r1, r19
    1c12:	14 06       	cpc	r1, r20
    1c14:	55 1f       	adc	r21, r21
    1c16:	f2 cf       	rjmp	.-28     	; 0x1bfc <__fp_split3+0xe>
    1c18:	46 95       	lsr	r20
    1c1a:	f1 df       	rcall	.-30     	; 0x1bfe <__fp_splitA>
    1c1c:	08 c0       	rjmp	.+16     	; 0x1c2e <__fp_splitA+0x30>
    1c1e:	16 16       	cp	r1, r22
    1c20:	17 06       	cpc	r1, r23
    1c22:	18 06       	cpc	r1, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	f1 cf       	rjmp	.-30     	; 0x1c0a <__fp_splitA+0xc>
    1c28:	86 95       	lsr	r24
    1c2a:	71 05       	cpc	r23, r1
    1c2c:	61 05       	cpc	r22, r1
    1c2e:	08 94       	sec
    1c30:	08 95       	ret

00001c32 <__fp_zero>:
    1c32:	e8 94       	clt

00001c34 <__fp_szero>:
    1c34:	bb 27       	eor	r27, r27
    1c36:	66 27       	eor	r22, r22
    1c38:	77 27       	eor	r23, r23
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	97 f9       	bld	r25, 7
    1c3e:	08 95       	ret

00001c40 <__mulsf3>:
    1c40:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__mulsf3x>
    1c44:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__fp_round>
    1c48:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__fp_pscA>
    1c4c:	38 f0       	brcs	.+14     	; 0x1c5c <__mulsf3+0x1c>
    1c4e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <__fp_pscB>
    1c52:	20 f0       	brcs	.+8      	; 0x1c5c <__mulsf3+0x1c>
    1c54:	95 23       	and	r25, r21
    1c56:	11 f0       	breq	.+4      	; 0x1c5c <__mulsf3+0x1c>
    1c58:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__fp_inf>
    1c5c:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <__fp_nan>
    1c60:	11 24       	eor	r1, r1
    1c62:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_szero>

00001c66 <__mulsf3x>:
    1c66:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__fp_split3>
    1c6a:	70 f3       	brcs	.-36     	; 0x1c48 <__mulsf3+0x8>

00001c6c <__mulsf3_pse>:
    1c6c:	95 9f       	mul	r25, r21
    1c6e:	c1 f3       	breq	.-16     	; 0x1c60 <__mulsf3+0x20>
    1c70:	95 0f       	add	r25, r21
    1c72:	50 e0       	ldi	r21, 0x00	; 0
    1c74:	55 1f       	adc	r21, r21
    1c76:	62 9f       	mul	r22, r18
    1c78:	f0 01       	movw	r30, r0
    1c7a:	72 9f       	mul	r23, r18
    1c7c:	bb 27       	eor	r27, r27
    1c7e:	f0 0d       	add	r31, r0
    1c80:	b1 1d       	adc	r27, r1
    1c82:	63 9f       	mul	r22, r19
    1c84:	aa 27       	eor	r26, r26
    1c86:	f0 0d       	add	r31, r0
    1c88:	b1 1d       	adc	r27, r1
    1c8a:	aa 1f       	adc	r26, r26
    1c8c:	64 9f       	mul	r22, r20
    1c8e:	66 27       	eor	r22, r22
    1c90:	b0 0d       	add	r27, r0
    1c92:	a1 1d       	adc	r26, r1
    1c94:	66 1f       	adc	r22, r22
    1c96:	82 9f       	mul	r24, r18
    1c98:	22 27       	eor	r18, r18
    1c9a:	b0 0d       	add	r27, r0
    1c9c:	a1 1d       	adc	r26, r1
    1c9e:	62 1f       	adc	r22, r18
    1ca0:	73 9f       	mul	r23, r19
    1ca2:	b0 0d       	add	r27, r0
    1ca4:	a1 1d       	adc	r26, r1
    1ca6:	62 1f       	adc	r22, r18
    1ca8:	83 9f       	mul	r24, r19
    1caa:	a0 0d       	add	r26, r0
    1cac:	61 1d       	adc	r22, r1
    1cae:	22 1f       	adc	r18, r18
    1cb0:	74 9f       	mul	r23, r20
    1cb2:	33 27       	eor	r19, r19
    1cb4:	a0 0d       	add	r26, r0
    1cb6:	61 1d       	adc	r22, r1
    1cb8:	23 1f       	adc	r18, r19
    1cba:	84 9f       	mul	r24, r20
    1cbc:	60 0d       	add	r22, r0
    1cbe:	21 1d       	adc	r18, r1
    1cc0:	82 2f       	mov	r24, r18
    1cc2:	76 2f       	mov	r23, r22
    1cc4:	6a 2f       	mov	r22, r26
    1cc6:	11 24       	eor	r1, r1
    1cc8:	9f 57       	subi	r25, 0x7F	; 127
    1cca:	50 40       	sbci	r21, 0x00	; 0
    1ccc:	9a f0       	brmi	.+38     	; 0x1cf4 <__mulsf3_pse+0x88>
    1cce:	f1 f0       	breq	.+60     	; 0x1d0c <__mulsf3_pse+0xa0>
    1cd0:	88 23       	and	r24, r24
    1cd2:	4a f0       	brmi	.+18     	; 0x1ce6 <__mulsf3_pse+0x7a>
    1cd4:	ee 0f       	add	r30, r30
    1cd6:	ff 1f       	adc	r31, r31
    1cd8:	bb 1f       	adc	r27, r27
    1cda:	66 1f       	adc	r22, r22
    1cdc:	77 1f       	adc	r23, r23
    1cde:	88 1f       	adc	r24, r24
    1ce0:	91 50       	subi	r25, 0x01	; 1
    1ce2:	50 40       	sbci	r21, 0x00	; 0
    1ce4:	a9 f7       	brne	.-22     	; 0x1cd0 <__mulsf3_pse+0x64>
    1ce6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ce8:	51 05       	cpc	r21, r1
    1cea:	80 f0       	brcs	.+32     	; 0x1d0c <__mulsf3_pse+0xa0>
    1cec:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__fp_inf>
    1cf0:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_szero>
    1cf4:	5f 3f       	cpi	r21, 0xFF	; 255
    1cf6:	e4 f3       	brlt	.-8      	; 0x1cf0 <__mulsf3_pse+0x84>
    1cf8:	98 3e       	cpi	r25, 0xE8	; 232
    1cfa:	d4 f3       	brlt	.-12     	; 0x1cf0 <__mulsf3_pse+0x84>
    1cfc:	86 95       	lsr	r24
    1cfe:	77 95       	ror	r23
    1d00:	67 95       	ror	r22
    1d02:	b7 95       	ror	r27
    1d04:	f7 95       	ror	r31
    1d06:	e7 95       	ror	r30
    1d08:	9f 5f       	subi	r25, 0xFF	; 255
    1d0a:	c1 f7       	brne	.-16     	; 0x1cfc <__mulsf3_pse+0x90>
    1d0c:	fe 2b       	or	r31, r30
    1d0e:	88 0f       	add	r24, r24
    1d10:	91 1d       	adc	r25, r1
    1d12:	96 95       	lsr	r25
    1d14:	87 95       	ror	r24
    1d16:	97 f9       	bld	r25, 7
    1d18:	08 95       	ret

00001d1a <malloc>:
    1d1a:	0f 93       	push	r16
    1d1c:	1f 93       	push	r17
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	82 30       	cpi	r24, 0x02	; 2
    1d24:	91 05       	cpc	r25, r1
    1d26:	10 f4       	brcc	.+4      	; 0x1d2c <malloc+0x12>
    1d28:	82 e0       	ldi	r24, 0x02	; 2
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	e0 91 24 06 	lds	r30, 0x0624	; 0x800624 <__flp>
    1d30:	f0 91 25 06 	lds	r31, 0x0625	; 0x800625 <__flp+0x1>
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	a0 e0       	ldi	r26, 0x00	; 0
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	30 97       	sbiw	r30, 0x00	; 0
    1d3e:	19 f1       	breq	.+70     	; 0x1d86 <malloc+0x6c>
    1d40:	40 81       	ld	r20, Z
    1d42:	51 81       	ldd	r21, Z+1	; 0x01
    1d44:	02 81       	ldd	r16, Z+2	; 0x02
    1d46:	13 81       	ldd	r17, Z+3	; 0x03
    1d48:	48 17       	cp	r20, r24
    1d4a:	59 07       	cpc	r21, r25
    1d4c:	c8 f0       	brcs	.+50     	; 0x1d80 <malloc+0x66>
    1d4e:	84 17       	cp	r24, r20
    1d50:	95 07       	cpc	r25, r21
    1d52:	69 f4       	brne	.+26     	; 0x1d6e <malloc+0x54>
    1d54:	10 97       	sbiw	r26, 0x00	; 0
    1d56:	31 f0       	breq	.+12     	; 0x1d64 <malloc+0x4a>
    1d58:	12 96       	adiw	r26, 0x02	; 2
    1d5a:	0c 93       	st	X, r16
    1d5c:	12 97       	sbiw	r26, 0x02	; 2
    1d5e:	13 96       	adiw	r26, 0x03	; 3
    1d60:	1c 93       	st	X, r17
    1d62:	27 c0       	rjmp	.+78     	; 0x1db2 <malloc+0x98>
    1d64:	00 93 24 06 	sts	0x0624, r16	; 0x800624 <__flp>
    1d68:	10 93 25 06 	sts	0x0625, r17	; 0x800625 <__flp+0x1>
    1d6c:	22 c0       	rjmp	.+68     	; 0x1db2 <malloc+0x98>
    1d6e:	21 15       	cp	r18, r1
    1d70:	31 05       	cpc	r19, r1
    1d72:	19 f0       	breq	.+6      	; 0x1d7a <malloc+0x60>
    1d74:	42 17       	cp	r20, r18
    1d76:	53 07       	cpc	r21, r19
    1d78:	18 f4       	brcc	.+6      	; 0x1d80 <malloc+0x66>
    1d7a:	9a 01       	movw	r18, r20
    1d7c:	bd 01       	movw	r22, r26
    1d7e:	ef 01       	movw	r28, r30
    1d80:	df 01       	movw	r26, r30
    1d82:	f8 01       	movw	r30, r16
    1d84:	db cf       	rjmp	.-74     	; 0x1d3c <malloc+0x22>
    1d86:	21 15       	cp	r18, r1
    1d88:	31 05       	cpc	r19, r1
    1d8a:	f9 f0       	breq	.+62     	; 0x1dca <malloc+0xb0>
    1d8c:	28 1b       	sub	r18, r24
    1d8e:	39 0b       	sbc	r19, r25
    1d90:	24 30       	cpi	r18, 0x04	; 4
    1d92:	31 05       	cpc	r19, r1
    1d94:	80 f4       	brcc	.+32     	; 0x1db6 <malloc+0x9c>
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9a:	61 15       	cp	r22, r1
    1d9c:	71 05       	cpc	r23, r1
    1d9e:	21 f0       	breq	.+8      	; 0x1da8 <malloc+0x8e>
    1da0:	fb 01       	movw	r30, r22
    1da2:	93 83       	std	Z+3, r25	; 0x03
    1da4:	82 83       	std	Z+2, r24	; 0x02
    1da6:	04 c0       	rjmp	.+8      	; 0x1db0 <malloc+0x96>
    1da8:	90 93 25 06 	sts	0x0625, r25	; 0x800625 <__flp+0x1>
    1dac:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__flp>
    1db0:	fe 01       	movw	r30, r28
    1db2:	32 96       	adiw	r30, 0x02	; 2
    1db4:	44 c0       	rjmp	.+136    	; 0x1e3e <malloc+0x124>
    1db6:	fe 01       	movw	r30, r28
    1db8:	e2 0f       	add	r30, r18
    1dba:	f3 1f       	adc	r31, r19
    1dbc:	81 93       	st	Z+, r24
    1dbe:	91 93       	st	Z+, r25
    1dc0:	22 50       	subi	r18, 0x02	; 2
    1dc2:	31 09       	sbc	r19, r1
    1dc4:	39 83       	std	Y+1, r19	; 0x01
    1dc6:	28 83       	st	Y, r18
    1dc8:	3a c0       	rjmp	.+116    	; 0x1e3e <malloc+0x124>
    1dca:	20 91 22 06 	lds	r18, 0x0622	; 0x800622 <__brkval>
    1dce:	30 91 23 06 	lds	r19, 0x0623	; 0x800623 <__brkval+0x1>
    1dd2:	23 2b       	or	r18, r19
    1dd4:	41 f4       	brne	.+16     	; 0x1de6 <malloc+0xcc>
    1dd6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1dda:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1dde:	30 93 23 06 	sts	0x0623, r19	; 0x800623 <__brkval+0x1>
    1de2:	20 93 22 06 	sts	0x0622, r18	; 0x800622 <__brkval>
    1de6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1dea:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1dee:	21 15       	cp	r18, r1
    1df0:	31 05       	cpc	r19, r1
    1df2:	41 f4       	brne	.+16     	; 0x1e04 <malloc+0xea>
    1df4:	2d b7       	in	r18, 0x3d	; 61
    1df6:	3e b7       	in	r19, 0x3e	; 62
    1df8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1dfc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1e00:	24 1b       	sub	r18, r20
    1e02:	35 0b       	sbc	r19, r21
    1e04:	e0 91 22 06 	lds	r30, 0x0622	; 0x800622 <__brkval>
    1e08:	f0 91 23 06 	lds	r31, 0x0623	; 0x800623 <__brkval+0x1>
    1e0c:	e2 17       	cp	r30, r18
    1e0e:	f3 07       	cpc	r31, r19
    1e10:	a0 f4       	brcc	.+40     	; 0x1e3a <malloc+0x120>
    1e12:	2e 1b       	sub	r18, r30
    1e14:	3f 0b       	sbc	r19, r31
    1e16:	28 17       	cp	r18, r24
    1e18:	39 07       	cpc	r19, r25
    1e1a:	78 f0       	brcs	.+30     	; 0x1e3a <malloc+0x120>
    1e1c:	ac 01       	movw	r20, r24
    1e1e:	4e 5f       	subi	r20, 0xFE	; 254
    1e20:	5f 4f       	sbci	r21, 0xFF	; 255
    1e22:	24 17       	cp	r18, r20
    1e24:	35 07       	cpc	r19, r21
    1e26:	48 f0       	brcs	.+18     	; 0x1e3a <malloc+0x120>
    1e28:	4e 0f       	add	r20, r30
    1e2a:	5f 1f       	adc	r21, r31
    1e2c:	50 93 23 06 	sts	0x0623, r21	; 0x800623 <__brkval+0x1>
    1e30:	40 93 22 06 	sts	0x0622, r20	; 0x800622 <__brkval>
    1e34:	81 93       	st	Z+, r24
    1e36:	91 93       	st	Z+, r25
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <malloc+0x124>
    1e3a:	e0 e0       	ldi	r30, 0x00	; 0
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	cf 01       	movw	r24, r30
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	08 95       	ret

00001e4a <free>:
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <free+0xa>
    1e52:	81 c0       	rjmp	.+258    	; 0x1f56 <free+0x10c>
    1e54:	fc 01       	movw	r30, r24
    1e56:	32 97       	sbiw	r30, 0x02	; 2
    1e58:	13 82       	std	Z+3, r1	; 0x03
    1e5a:	12 82       	std	Z+2, r1	; 0x02
    1e5c:	a0 91 24 06 	lds	r26, 0x0624	; 0x800624 <__flp>
    1e60:	b0 91 25 06 	lds	r27, 0x0625	; 0x800625 <__flp+0x1>
    1e64:	10 97       	sbiw	r26, 0x00	; 0
    1e66:	81 f4       	brne	.+32     	; 0x1e88 <free+0x3e>
    1e68:	20 81       	ld	r18, Z
    1e6a:	31 81       	ldd	r19, Z+1	; 0x01
    1e6c:	82 0f       	add	r24, r18
    1e6e:	93 1f       	adc	r25, r19
    1e70:	20 91 22 06 	lds	r18, 0x0622	; 0x800622 <__brkval>
    1e74:	30 91 23 06 	lds	r19, 0x0623	; 0x800623 <__brkval+0x1>
    1e78:	28 17       	cp	r18, r24
    1e7a:	39 07       	cpc	r19, r25
    1e7c:	51 f5       	brne	.+84     	; 0x1ed2 <free+0x88>
    1e7e:	f0 93 23 06 	sts	0x0623, r31	; 0x800623 <__brkval+0x1>
    1e82:	e0 93 22 06 	sts	0x0622, r30	; 0x800622 <__brkval>
    1e86:	67 c0       	rjmp	.+206    	; 0x1f56 <free+0x10c>
    1e88:	ed 01       	movw	r28, r26
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	ce 17       	cp	r28, r30
    1e90:	df 07       	cpc	r29, r31
    1e92:	40 f4       	brcc	.+16     	; 0x1ea4 <free+0x5a>
    1e94:	4a 81       	ldd	r20, Y+2	; 0x02
    1e96:	5b 81       	ldd	r21, Y+3	; 0x03
    1e98:	9e 01       	movw	r18, r28
    1e9a:	41 15       	cp	r20, r1
    1e9c:	51 05       	cpc	r21, r1
    1e9e:	f1 f0       	breq	.+60     	; 0x1edc <free+0x92>
    1ea0:	ea 01       	movw	r28, r20
    1ea2:	f5 cf       	rjmp	.-22     	; 0x1e8e <free+0x44>
    1ea4:	d3 83       	std	Z+3, r29	; 0x03
    1ea6:	c2 83       	std	Z+2, r28	; 0x02
    1ea8:	40 81       	ld	r20, Z
    1eaa:	51 81       	ldd	r21, Z+1	; 0x01
    1eac:	84 0f       	add	r24, r20
    1eae:	95 1f       	adc	r25, r21
    1eb0:	c8 17       	cp	r28, r24
    1eb2:	d9 07       	cpc	r29, r25
    1eb4:	59 f4       	brne	.+22     	; 0x1ecc <free+0x82>
    1eb6:	88 81       	ld	r24, Y
    1eb8:	99 81       	ldd	r25, Y+1	; 0x01
    1eba:	84 0f       	add	r24, r20
    1ebc:	95 1f       	adc	r25, r21
    1ebe:	02 96       	adiw	r24, 0x02	; 2
    1ec0:	91 83       	std	Z+1, r25	; 0x01
    1ec2:	80 83       	st	Z, r24
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec8:	93 83       	std	Z+3, r25	; 0x03
    1eca:	82 83       	std	Z+2, r24	; 0x02
    1ecc:	21 15       	cp	r18, r1
    1ece:	31 05       	cpc	r19, r1
    1ed0:	29 f4       	brne	.+10     	; 0x1edc <free+0x92>
    1ed2:	f0 93 25 06 	sts	0x0625, r31	; 0x800625 <__flp+0x1>
    1ed6:	e0 93 24 06 	sts	0x0624, r30	; 0x800624 <__flp>
    1eda:	3d c0       	rjmp	.+122    	; 0x1f56 <free+0x10c>
    1edc:	e9 01       	movw	r28, r18
    1ede:	fb 83       	std	Y+3, r31	; 0x03
    1ee0:	ea 83       	std	Y+2, r30	; 0x02
    1ee2:	49 91       	ld	r20, Y+
    1ee4:	59 91       	ld	r21, Y+
    1ee6:	c4 0f       	add	r28, r20
    1ee8:	d5 1f       	adc	r29, r21
    1eea:	ec 17       	cp	r30, r28
    1eec:	fd 07       	cpc	r31, r29
    1eee:	61 f4       	brne	.+24     	; 0x1f08 <free+0xbe>
    1ef0:	80 81       	ld	r24, Z
    1ef2:	91 81       	ldd	r25, Z+1	; 0x01
    1ef4:	84 0f       	add	r24, r20
    1ef6:	95 1f       	adc	r25, r21
    1ef8:	02 96       	adiw	r24, 0x02	; 2
    1efa:	e9 01       	movw	r28, r18
    1efc:	99 83       	std	Y+1, r25	; 0x01
    1efe:	88 83       	st	Y, r24
    1f00:	82 81       	ldd	r24, Z+2	; 0x02
    1f02:	93 81       	ldd	r25, Z+3	; 0x03
    1f04:	9b 83       	std	Y+3, r25	; 0x03
    1f06:	8a 83       	std	Y+2, r24	; 0x02
    1f08:	e0 e0       	ldi	r30, 0x00	; 0
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	12 96       	adiw	r26, 0x02	; 2
    1f0e:	8d 91       	ld	r24, X+
    1f10:	9c 91       	ld	r25, X
    1f12:	13 97       	sbiw	r26, 0x03	; 3
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	19 f0       	breq	.+6      	; 0x1f1e <free+0xd4>
    1f18:	fd 01       	movw	r30, r26
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	f7 cf       	rjmp	.-18     	; 0x1f0c <free+0xc2>
    1f1e:	8d 91       	ld	r24, X+
    1f20:	9c 91       	ld	r25, X
    1f22:	11 97       	sbiw	r26, 0x01	; 1
    1f24:	9d 01       	movw	r18, r26
    1f26:	2e 5f       	subi	r18, 0xFE	; 254
    1f28:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2a:	82 0f       	add	r24, r18
    1f2c:	93 1f       	adc	r25, r19
    1f2e:	20 91 22 06 	lds	r18, 0x0622	; 0x800622 <__brkval>
    1f32:	30 91 23 06 	lds	r19, 0x0623	; 0x800623 <__brkval+0x1>
    1f36:	28 17       	cp	r18, r24
    1f38:	39 07       	cpc	r19, r25
    1f3a:	69 f4       	brne	.+26     	; 0x1f56 <free+0x10c>
    1f3c:	30 97       	sbiw	r30, 0x00	; 0
    1f3e:	29 f4       	brne	.+10     	; 0x1f4a <free+0x100>
    1f40:	10 92 25 06 	sts	0x0625, r1	; 0x800625 <__flp+0x1>
    1f44:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <__flp>
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <free+0x104>
    1f4a:	13 82       	std	Z+3, r1	; 0x03
    1f4c:	12 82       	std	Z+2, r1	; 0x02
    1f4e:	b0 93 23 06 	sts	0x0623, r27	; 0x800623 <__brkval+0x1>
    1f52:	a0 93 22 06 	sts	0x0622, r26	; 0x800622 <__brkval>
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	08 95       	ret

00001f5c <__ftoa_engine>:
    1f5c:	28 30       	cpi	r18, 0x08	; 8
    1f5e:	08 f0       	brcs	.+2      	; 0x1f62 <__ftoa_engine+0x6>
    1f60:	27 e0       	ldi	r18, 0x07	; 7
    1f62:	33 27       	eor	r19, r19
    1f64:	da 01       	movw	r26, r20
    1f66:	99 0f       	add	r25, r25
    1f68:	31 1d       	adc	r19, r1
    1f6a:	87 fd       	sbrc	r24, 7
    1f6c:	91 60       	ori	r25, 0x01	; 1
    1f6e:	00 96       	adiw	r24, 0x00	; 0
    1f70:	61 05       	cpc	r22, r1
    1f72:	71 05       	cpc	r23, r1
    1f74:	39 f4       	brne	.+14     	; 0x1f84 <__ftoa_engine+0x28>
    1f76:	32 60       	ori	r19, 0x02	; 2
    1f78:	2e 5f       	subi	r18, 0xFE	; 254
    1f7a:	3d 93       	st	X+, r19
    1f7c:	30 e3       	ldi	r19, 0x30	; 48
    1f7e:	2a 95       	dec	r18
    1f80:	e1 f7       	brne	.-8      	; 0x1f7a <__ftoa_engine+0x1e>
    1f82:	08 95       	ret
    1f84:	9f 3f       	cpi	r25, 0xFF	; 255
    1f86:	30 f0       	brcs	.+12     	; 0x1f94 <__ftoa_engine+0x38>
    1f88:	80 38       	cpi	r24, 0x80	; 128
    1f8a:	71 05       	cpc	r23, r1
    1f8c:	61 05       	cpc	r22, r1
    1f8e:	09 f0       	breq	.+2      	; 0x1f92 <__ftoa_engine+0x36>
    1f90:	3c 5f       	subi	r19, 0xFC	; 252
    1f92:	3c 5f       	subi	r19, 0xFC	; 252
    1f94:	3d 93       	st	X+, r19
    1f96:	91 30       	cpi	r25, 0x01	; 1
    1f98:	08 f0       	brcs	.+2      	; 0x1f9c <__ftoa_engine+0x40>
    1f9a:	80 68       	ori	r24, 0x80	; 128
    1f9c:	91 1d       	adc	r25, r1
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	1f 93       	push	r17
    1fa4:	0f 93       	push	r16
    1fa6:	ff 92       	push	r15
    1fa8:	ef 92       	push	r14
    1faa:	19 2f       	mov	r17, r25
    1fac:	98 7f       	andi	r25, 0xF8	; 248
    1fae:	96 95       	lsr	r25
    1fb0:	e9 2f       	mov	r30, r25
    1fb2:	96 95       	lsr	r25
    1fb4:	96 95       	lsr	r25
    1fb6:	e9 0f       	add	r30, r25
    1fb8:	ff 27       	eor	r31, r31
    1fba:	e2 5d       	subi	r30, 0xD2	; 210
    1fbc:	fe 4f       	sbci	r31, 0xFE	; 254
    1fbe:	99 27       	eor	r25, r25
    1fc0:	33 27       	eor	r19, r19
    1fc2:	ee 24       	eor	r14, r14
    1fc4:	ff 24       	eor	r15, r15
    1fc6:	a7 01       	movw	r20, r14
    1fc8:	e7 01       	movw	r28, r14
    1fca:	05 90       	lpm	r0, Z+
    1fcc:	08 94       	sec
    1fce:	07 94       	ror	r0
    1fd0:	28 f4       	brcc	.+10     	; 0x1fdc <__ftoa_engine+0x80>
    1fd2:	36 0f       	add	r19, r22
    1fd4:	e7 1e       	adc	r14, r23
    1fd6:	f8 1e       	adc	r15, r24
    1fd8:	49 1f       	adc	r20, r25
    1fda:	51 1d       	adc	r21, r1
    1fdc:	66 0f       	add	r22, r22
    1fde:	77 1f       	adc	r23, r23
    1fe0:	88 1f       	adc	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	06 94       	lsr	r0
    1fe6:	a1 f7       	brne	.-24     	; 0x1fd0 <__ftoa_engine+0x74>
    1fe8:	05 90       	lpm	r0, Z+
    1fea:	07 94       	ror	r0
    1fec:	28 f4       	brcc	.+10     	; 0x1ff8 <__ftoa_engine+0x9c>
    1fee:	e7 0e       	add	r14, r23
    1ff0:	f8 1e       	adc	r15, r24
    1ff2:	49 1f       	adc	r20, r25
    1ff4:	56 1f       	adc	r21, r22
    1ff6:	c1 1d       	adc	r28, r1
    1ff8:	77 0f       	add	r23, r23
    1ffa:	88 1f       	adc	r24, r24
    1ffc:	99 1f       	adc	r25, r25
    1ffe:	66 1f       	adc	r22, r22
    2000:	06 94       	lsr	r0
    2002:	a1 f7       	brne	.-24     	; 0x1fec <__ftoa_engine+0x90>
    2004:	05 90       	lpm	r0, Z+
    2006:	07 94       	ror	r0
    2008:	28 f4       	brcc	.+10     	; 0x2014 <__ftoa_engine+0xb8>
    200a:	f8 0e       	add	r15, r24
    200c:	49 1f       	adc	r20, r25
    200e:	56 1f       	adc	r21, r22
    2010:	c7 1f       	adc	r28, r23
    2012:	d1 1d       	adc	r29, r1
    2014:	88 0f       	add	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	66 1f       	adc	r22, r22
    201a:	77 1f       	adc	r23, r23
    201c:	06 94       	lsr	r0
    201e:	a1 f7       	brne	.-24     	; 0x2008 <__ftoa_engine+0xac>
    2020:	05 90       	lpm	r0, Z+
    2022:	07 94       	ror	r0
    2024:	20 f4       	brcc	.+8      	; 0x202e <__ftoa_engine+0xd2>
    2026:	49 0f       	add	r20, r25
    2028:	56 1f       	adc	r21, r22
    202a:	c7 1f       	adc	r28, r23
    202c:	d8 1f       	adc	r29, r24
    202e:	99 0f       	add	r25, r25
    2030:	66 1f       	adc	r22, r22
    2032:	77 1f       	adc	r23, r23
    2034:	88 1f       	adc	r24, r24
    2036:	06 94       	lsr	r0
    2038:	a9 f7       	brne	.-22     	; 0x2024 <__ftoa_engine+0xc8>
    203a:	84 91       	lpm	r24, Z
    203c:	10 95       	com	r17
    203e:	17 70       	andi	r17, 0x07	; 7
    2040:	41 f0       	breq	.+16     	; 0x2052 <__ftoa_engine+0xf6>
    2042:	d6 95       	lsr	r29
    2044:	c7 95       	ror	r28
    2046:	57 95       	ror	r21
    2048:	47 95       	ror	r20
    204a:	f7 94       	ror	r15
    204c:	e7 94       	ror	r14
    204e:	1a 95       	dec	r17
    2050:	c1 f7       	brne	.-16     	; 0x2042 <__ftoa_engine+0xe6>
    2052:	e4 ed       	ldi	r30, 0xD4	; 212
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	68 94       	set
    2058:	15 90       	lpm	r1, Z+
    205a:	15 91       	lpm	r17, Z+
    205c:	35 91       	lpm	r19, Z+
    205e:	65 91       	lpm	r22, Z+
    2060:	95 91       	lpm	r25, Z+
    2062:	05 90       	lpm	r0, Z+
    2064:	7f e2       	ldi	r23, 0x2F	; 47
    2066:	73 95       	inc	r23
    2068:	e1 18       	sub	r14, r1
    206a:	f1 0a       	sbc	r15, r17
    206c:	43 0b       	sbc	r20, r19
    206e:	56 0b       	sbc	r21, r22
    2070:	c9 0b       	sbc	r28, r25
    2072:	d0 09       	sbc	r29, r0
    2074:	c0 f7       	brcc	.-16     	; 0x2066 <__ftoa_engine+0x10a>
    2076:	e1 0c       	add	r14, r1
    2078:	f1 1e       	adc	r15, r17
    207a:	43 1f       	adc	r20, r19
    207c:	56 1f       	adc	r21, r22
    207e:	c9 1f       	adc	r28, r25
    2080:	d0 1d       	adc	r29, r0
    2082:	7e f4       	brtc	.+30     	; 0x20a2 <__ftoa_engine+0x146>
    2084:	70 33       	cpi	r23, 0x30	; 48
    2086:	11 f4       	brne	.+4      	; 0x208c <__ftoa_engine+0x130>
    2088:	8a 95       	dec	r24
    208a:	e6 cf       	rjmp	.-52     	; 0x2058 <__ftoa_engine+0xfc>
    208c:	e8 94       	clt
    208e:	01 50       	subi	r16, 0x01	; 1
    2090:	30 f0       	brcs	.+12     	; 0x209e <__ftoa_engine+0x142>
    2092:	08 0f       	add	r16, r24
    2094:	0a f4       	brpl	.+2      	; 0x2098 <__ftoa_engine+0x13c>
    2096:	00 27       	eor	r16, r16
    2098:	02 17       	cp	r16, r18
    209a:	08 f4       	brcc	.+2      	; 0x209e <__ftoa_engine+0x142>
    209c:	20 2f       	mov	r18, r16
    209e:	23 95       	inc	r18
    20a0:	02 2f       	mov	r16, r18
    20a2:	7a 33       	cpi	r23, 0x3A	; 58
    20a4:	28 f0       	brcs	.+10     	; 0x20b0 <__ftoa_engine+0x154>
    20a6:	79 e3       	ldi	r23, 0x39	; 57
    20a8:	7d 93       	st	X+, r23
    20aa:	2a 95       	dec	r18
    20ac:	e9 f7       	brne	.-6      	; 0x20a8 <__ftoa_engine+0x14c>
    20ae:	10 c0       	rjmp	.+32     	; 0x20d0 <__ftoa_engine+0x174>
    20b0:	7d 93       	st	X+, r23
    20b2:	2a 95       	dec	r18
    20b4:	89 f6       	brne	.-94     	; 0x2058 <__ftoa_engine+0xfc>
    20b6:	06 94       	lsr	r0
    20b8:	97 95       	ror	r25
    20ba:	67 95       	ror	r22
    20bc:	37 95       	ror	r19
    20be:	17 95       	ror	r17
    20c0:	17 94       	ror	r1
    20c2:	e1 18       	sub	r14, r1
    20c4:	f1 0a       	sbc	r15, r17
    20c6:	43 0b       	sbc	r20, r19
    20c8:	56 0b       	sbc	r21, r22
    20ca:	c9 0b       	sbc	r28, r25
    20cc:	d0 09       	sbc	r29, r0
    20ce:	98 f0       	brcs	.+38     	; 0x20f6 <__ftoa_engine+0x19a>
    20d0:	23 95       	inc	r18
    20d2:	7e 91       	ld	r23, -X
    20d4:	73 95       	inc	r23
    20d6:	7a 33       	cpi	r23, 0x3A	; 58
    20d8:	08 f0       	brcs	.+2      	; 0x20dc <__ftoa_engine+0x180>
    20da:	70 e3       	ldi	r23, 0x30	; 48
    20dc:	7c 93       	st	X, r23
    20de:	20 13       	cpse	r18, r16
    20e0:	b8 f7       	brcc	.-18     	; 0x20d0 <__ftoa_engine+0x174>
    20e2:	7e 91       	ld	r23, -X
    20e4:	70 61       	ori	r23, 0x10	; 16
    20e6:	7d 93       	st	X+, r23
    20e8:	30 f0       	brcs	.+12     	; 0x20f6 <__ftoa_engine+0x19a>
    20ea:	83 95       	inc	r24
    20ec:	71 e3       	ldi	r23, 0x31	; 49
    20ee:	7d 93       	st	X+, r23
    20f0:	70 e3       	ldi	r23, 0x30	; 48
    20f2:	2a 95       	dec	r18
    20f4:	e1 f7       	brne	.-8      	; 0x20ee <__ftoa_engine+0x192>
    20f6:	11 24       	eor	r1, r1
    20f8:	ef 90       	pop	r14
    20fa:	ff 90       	pop	r15
    20fc:	0f 91       	pop	r16
    20fe:	1f 91       	pop	r17
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	99 27       	eor	r25, r25
    2106:	87 fd       	sbrc	r24, 7
    2108:	90 95       	com	r25
    210a:	08 95       	ret

0000210c <strnlen_P>:
    210c:	fc 01       	movw	r30, r24
    210e:	05 90       	lpm	r0, Z+
    2110:	61 50       	subi	r22, 0x01	; 1
    2112:	70 40       	sbci	r23, 0x00	; 0
    2114:	01 10       	cpse	r0, r1
    2116:	d8 f7       	brcc	.-10     	; 0x210e <strnlen_P+0x2>
    2118:	80 95       	com	r24
    211a:	90 95       	com	r25
    211c:	8e 0f       	add	r24, r30
    211e:	9f 1f       	adc	r25, r31
    2120:	08 95       	ret

00002122 <strcat>:
    2122:	fb 01       	movw	r30, r22
    2124:	dc 01       	movw	r26, r24
    2126:	0d 90       	ld	r0, X+
    2128:	00 20       	and	r0, r0
    212a:	e9 f7       	brne	.-6      	; 0x2126 <strcat+0x4>
    212c:	11 97       	sbiw	r26, 0x01	; 1
    212e:	01 90       	ld	r0, Z+
    2130:	0d 92       	st	X+, r0
    2132:	00 20       	and	r0, r0
    2134:	e1 f7       	brne	.-8      	; 0x212e <strcat+0xc>
    2136:	08 95       	ret

00002138 <strcpy>:
    2138:	fb 01       	movw	r30, r22
    213a:	dc 01       	movw	r26, r24
    213c:	01 90       	ld	r0, Z+
    213e:	0d 92       	st	X+, r0
    2140:	00 20       	and	r0, r0
    2142:	e1 f7       	brne	.-8      	; 0x213c <strcpy+0x4>
    2144:	08 95       	ret

00002146 <strncmp>:
    2146:	fb 01       	movw	r30, r22
    2148:	dc 01       	movw	r26, r24
    214a:	41 50       	subi	r20, 0x01	; 1
    214c:	50 40       	sbci	r21, 0x00	; 0
    214e:	30 f0       	brcs	.+12     	; 0x215c <strncmp+0x16>
    2150:	8d 91       	ld	r24, X+
    2152:	01 90       	ld	r0, Z+
    2154:	80 19       	sub	r24, r0
    2156:	19 f4       	brne	.+6      	; 0x215e <strncmp+0x18>
    2158:	00 20       	and	r0, r0
    215a:	b9 f7       	brne	.-18     	; 0x214a <strncmp+0x4>
    215c:	88 1b       	sub	r24, r24
    215e:	99 0b       	sbc	r25, r25
    2160:	08 95       	ret

00002162 <strnlen>:
    2162:	fc 01       	movw	r30, r24
    2164:	61 50       	subi	r22, 0x01	; 1
    2166:	70 40       	sbci	r23, 0x00	; 0
    2168:	01 90       	ld	r0, Z+
    216a:	01 10       	cpse	r0, r1
    216c:	d8 f7       	brcc	.-10     	; 0x2164 <strnlen+0x2>
    216e:	80 95       	com	r24
    2170:	90 95       	com	r25
    2172:	8e 0f       	add	r24, r30
    2174:	9f 1f       	adc	r25, r31
    2176:	08 95       	ret

00002178 <fputc>:
    2178:	0f 93       	push	r16
    217a:	1f 93       	push	r17
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
    2180:	fb 01       	movw	r30, r22
    2182:	23 81       	ldd	r18, Z+3	; 0x03
    2184:	21 fd       	sbrc	r18, 1
    2186:	03 c0       	rjmp	.+6      	; 0x218e <fputc+0x16>
    2188:	8f ef       	ldi	r24, 0xFF	; 255
    218a:	9f ef       	ldi	r25, 0xFF	; 255
    218c:	2c c0       	rjmp	.+88     	; 0x21e6 <fputc+0x6e>
    218e:	22 ff       	sbrs	r18, 2
    2190:	16 c0       	rjmp	.+44     	; 0x21be <fputc+0x46>
    2192:	46 81       	ldd	r20, Z+6	; 0x06
    2194:	57 81       	ldd	r21, Z+7	; 0x07
    2196:	24 81       	ldd	r18, Z+4	; 0x04
    2198:	35 81       	ldd	r19, Z+5	; 0x05
    219a:	42 17       	cp	r20, r18
    219c:	53 07       	cpc	r21, r19
    219e:	44 f4       	brge	.+16     	; 0x21b0 <fputc+0x38>
    21a0:	a0 81       	ld	r26, Z
    21a2:	b1 81       	ldd	r27, Z+1	; 0x01
    21a4:	9d 01       	movw	r18, r26
    21a6:	2f 5f       	subi	r18, 0xFF	; 255
    21a8:	3f 4f       	sbci	r19, 0xFF	; 255
    21aa:	31 83       	std	Z+1, r19	; 0x01
    21ac:	20 83       	st	Z, r18
    21ae:	8c 93       	st	X, r24
    21b0:	26 81       	ldd	r18, Z+6	; 0x06
    21b2:	37 81       	ldd	r19, Z+7	; 0x07
    21b4:	2f 5f       	subi	r18, 0xFF	; 255
    21b6:	3f 4f       	sbci	r19, 0xFF	; 255
    21b8:	37 83       	std	Z+7, r19	; 0x07
    21ba:	26 83       	std	Z+6, r18	; 0x06
    21bc:	14 c0       	rjmp	.+40     	; 0x21e6 <fputc+0x6e>
    21be:	8b 01       	movw	r16, r22
    21c0:	ec 01       	movw	r28, r24
    21c2:	fb 01       	movw	r30, r22
    21c4:	00 84       	ldd	r0, Z+8	; 0x08
    21c6:	f1 85       	ldd	r31, Z+9	; 0x09
    21c8:	e0 2d       	mov	r30, r0
    21ca:	09 95       	icall
    21cc:	89 2b       	or	r24, r25
    21ce:	e1 f6       	brne	.-72     	; 0x2188 <fputc+0x10>
    21d0:	d8 01       	movw	r26, r16
    21d2:	16 96       	adiw	r26, 0x06	; 6
    21d4:	8d 91       	ld	r24, X+
    21d6:	9c 91       	ld	r25, X
    21d8:	17 97       	sbiw	r26, 0x07	; 7
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	17 96       	adiw	r26, 0x07	; 7
    21de:	9c 93       	st	X, r25
    21e0:	8e 93       	st	-X, r24
    21e2:	16 97       	sbiw	r26, 0x06	; 6
    21e4:	ce 01       	movw	r24, r28
    21e6:	df 91       	pop	r29
    21e8:	cf 91       	pop	r28
    21ea:	1f 91       	pop	r17
    21ec:	0f 91       	pop	r16
    21ee:	08 95       	ret

000021f0 <putchar>:
    21f0:	60 91 28 06 	lds	r22, 0x0628	; 0x800628 <__iob+0x2>
    21f4:	70 91 29 06 	lds	r23, 0x0629	; 0x800629 <__iob+0x3>
    21f8:	0e 94 bc 10 	call	0x2178	; 0x2178 <fputc>
    21fc:	08 95       	ret

000021fe <puts>:
    21fe:	0f 93       	push	r16
    2200:	1f 93       	push	r17
    2202:	cf 93       	push	r28
    2204:	df 93       	push	r29
    2206:	e0 91 28 06 	lds	r30, 0x0628	; 0x800628 <__iob+0x2>
    220a:	f0 91 29 06 	lds	r31, 0x0629	; 0x800629 <__iob+0x3>
    220e:	23 81       	ldd	r18, Z+3	; 0x03
    2210:	21 ff       	sbrs	r18, 1
    2212:	1b c0       	rjmp	.+54     	; 0x224a <puts+0x4c>
    2214:	8c 01       	movw	r16, r24
    2216:	d0 e0       	ldi	r29, 0x00	; 0
    2218:	c0 e0       	ldi	r28, 0x00	; 0
    221a:	f8 01       	movw	r30, r16
    221c:	81 91       	ld	r24, Z+
    221e:	8f 01       	movw	r16, r30
    2220:	60 91 28 06 	lds	r22, 0x0628	; 0x800628 <__iob+0x2>
    2224:	70 91 29 06 	lds	r23, 0x0629	; 0x800629 <__iob+0x3>
    2228:	db 01       	movw	r26, r22
    222a:	18 96       	adiw	r26, 0x08	; 8
    222c:	ed 91       	ld	r30, X+
    222e:	fc 91       	ld	r31, X
    2230:	19 97       	sbiw	r26, 0x09	; 9
    2232:	88 23       	and	r24, r24
    2234:	31 f0       	breq	.+12     	; 0x2242 <puts+0x44>
    2236:	09 95       	icall
    2238:	89 2b       	or	r24, r25
    223a:	79 f3       	breq	.-34     	; 0x221a <puts+0x1c>
    223c:	df ef       	ldi	r29, 0xFF	; 255
    223e:	cf ef       	ldi	r28, 0xFF	; 255
    2240:	ec cf       	rjmp	.-40     	; 0x221a <puts+0x1c>
    2242:	8a e0       	ldi	r24, 0x0A	; 10
    2244:	09 95       	icall
    2246:	89 2b       	or	r24, r25
    2248:	19 f0       	breq	.+6      	; 0x2250 <puts+0x52>
    224a:	8f ef       	ldi	r24, 0xFF	; 255
    224c:	9f ef       	ldi	r25, 0xFF	; 255
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <puts+0x56>
    2250:	8d 2f       	mov	r24, r29
    2252:	9c 2f       	mov	r25, r28
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	1f 91       	pop	r17
    225a:	0f 91       	pop	r16
    225c:	08 95       	ret

0000225e <sprintf>:
    225e:	ae e0       	ldi	r26, 0x0E	; 14
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e5 e3       	ldi	r30, 0x35	; 53
    2264:	f1 e1       	ldi	r31, 0x11	; 17
    2266:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__prologue_saves__+0x1c>
    226a:	0d 89       	ldd	r16, Y+21	; 0x15
    226c:	1e 89       	ldd	r17, Y+22	; 0x16
    226e:	86 e0       	ldi	r24, 0x06	; 6
    2270:	8c 83       	std	Y+4, r24	; 0x04
    2272:	1a 83       	std	Y+2, r17	; 0x02
    2274:	09 83       	std	Y+1, r16	; 0x01
    2276:	8f ef       	ldi	r24, 0xFF	; 255
    2278:	9f e7       	ldi	r25, 0x7F	; 127
    227a:	9e 83       	std	Y+6, r25	; 0x06
    227c:	8d 83       	std	Y+5, r24	; 0x05
    227e:	ae 01       	movw	r20, r28
    2280:	47 5e       	subi	r20, 0xE7	; 231
    2282:	5f 4f       	sbci	r21, 0xFF	; 255
    2284:	6f 89       	ldd	r22, Y+23	; 0x17
    2286:	78 8d       	ldd	r23, Y+24	; 0x18
    2288:	ce 01       	movw	r24, r28
    228a:	01 96       	adiw	r24, 0x01	; 1
    228c:	0e 94 14 09 	call	0x1228	; 0x1228 <vfprintf>
    2290:	ef 81       	ldd	r30, Y+7	; 0x07
    2292:	f8 85       	ldd	r31, Y+8	; 0x08
    2294:	e0 0f       	add	r30, r16
    2296:	f1 1f       	adc	r31, r17
    2298:	10 82       	st	Z, r1
    229a:	2e 96       	adiw	r28, 0x0e	; 14
    229c:	e4 e0       	ldi	r30, 0x04	; 4
    229e:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <__epilogue_restores__+0x1c>

000022a2 <__ultoa_invert>:
    22a2:	fa 01       	movw	r30, r20
    22a4:	aa 27       	eor	r26, r26
    22a6:	28 30       	cpi	r18, 0x08	; 8
    22a8:	51 f1       	breq	.+84     	; 0x22fe <__ultoa_invert+0x5c>
    22aa:	20 31       	cpi	r18, 0x10	; 16
    22ac:	81 f1       	breq	.+96     	; 0x230e <__ultoa_invert+0x6c>
    22ae:	e8 94       	clt
    22b0:	6f 93       	push	r22
    22b2:	6e 7f       	andi	r22, 0xFE	; 254
    22b4:	6e 5f       	subi	r22, 0xFE	; 254
    22b6:	7f 4f       	sbci	r23, 0xFF	; 255
    22b8:	8f 4f       	sbci	r24, 0xFF	; 255
    22ba:	9f 4f       	sbci	r25, 0xFF	; 255
    22bc:	af 4f       	sbci	r26, 0xFF	; 255
    22be:	b1 e0       	ldi	r27, 0x01	; 1
    22c0:	3e d0       	rcall	.+124    	; 0x233e <__ultoa_invert+0x9c>
    22c2:	b4 e0       	ldi	r27, 0x04	; 4
    22c4:	3c d0       	rcall	.+120    	; 0x233e <__ultoa_invert+0x9c>
    22c6:	67 0f       	add	r22, r23
    22c8:	78 1f       	adc	r23, r24
    22ca:	89 1f       	adc	r24, r25
    22cc:	9a 1f       	adc	r25, r26
    22ce:	a1 1d       	adc	r26, r1
    22d0:	68 0f       	add	r22, r24
    22d2:	79 1f       	adc	r23, r25
    22d4:	8a 1f       	adc	r24, r26
    22d6:	91 1d       	adc	r25, r1
    22d8:	a1 1d       	adc	r26, r1
    22da:	6a 0f       	add	r22, r26
    22dc:	71 1d       	adc	r23, r1
    22de:	81 1d       	adc	r24, r1
    22e0:	91 1d       	adc	r25, r1
    22e2:	a1 1d       	adc	r26, r1
    22e4:	20 d0       	rcall	.+64     	; 0x2326 <__ultoa_invert+0x84>
    22e6:	09 f4       	brne	.+2      	; 0x22ea <__ultoa_invert+0x48>
    22e8:	68 94       	set
    22ea:	3f 91       	pop	r19
    22ec:	2a e0       	ldi	r18, 0x0A	; 10
    22ee:	26 9f       	mul	r18, r22
    22f0:	11 24       	eor	r1, r1
    22f2:	30 19       	sub	r19, r0
    22f4:	30 5d       	subi	r19, 0xD0	; 208
    22f6:	31 93       	st	Z+, r19
    22f8:	de f6       	brtc	.-74     	; 0x22b0 <__ultoa_invert+0xe>
    22fa:	cf 01       	movw	r24, r30
    22fc:	08 95       	ret
    22fe:	46 2f       	mov	r20, r22
    2300:	47 70       	andi	r20, 0x07	; 7
    2302:	40 5d       	subi	r20, 0xD0	; 208
    2304:	41 93       	st	Z+, r20
    2306:	b3 e0       	ldi	r27, 0x03	; 3
    2308:	0f d0       	rcall	.+30     	; 0x2328 <__ultoa_invert+0x86>
    230a:	c9 f7       	brne	.-14     	; 0x22fe <__ultoa_invert+0x5c>
    230c:	f6 cf       	rjmp	.-20     	; 0x22fa <__ultoa_invert+0x58>
    230e:	46 2f       	mov	r20, r22
    2310:	4f 70       	andi	r20, 0x0F	; 15
    2312:	40 5d       	subi	r20, 0xD0	; 208
    2314:	4a 33       	cpi	r20, 0x3A	; 58
    2316:	18 f0       	brcs	.+6      	; 0x231e <__ultoa_invert+0x7c>
    2318:	49 5d       	subi	r20, 0xD9	; 217
    231a:	31 fd       	sbrc	r19, 1
    231c:	40 52       	subi	r20, 0x20	; 32
    231e:	41 93       	st	Z+, r20
    2320:	02 d0       	rcall	.+4      	; 0x2326 <__ultoa_invert+0x84>
    2322:	a9 f7       	brne	.-22     	; 0x230e <__ultoa_invert+0x6c>
    2324:	ea cf       	rjmp	.-44     	; 0x22fa <__ultoa_invert+0x58>
    2326:	b4 e0       	ldi	r27, 0x04	; 4
    2328:	a6 95       	lsr	r26
    232a:	97 95       	ror	r25
    232c:	87 95       	ror	r24
    232e:	77 95       	ror	r23
    2330:	67 95       	ror	r22
    2332:	ba 95       	dec	r27
    2334:	c9 f7       	brne	.-14     	; 0x2328 <__ultoa_invert+0x86>
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	61 05       	cpc	r22, r1
    233a:	71 05       	cpc	r23, r1
    233c:	08 95       	ret
    233e:	9b 01       	movw	r18, r22
    2340:	ac 01       	movw	r20, r24
    2342:	0a 2e       	mov	r0, r26
    2344:	06 94       	lsr	r0
    2346:	57 95       	ror	r21
    2348:	47 95       	ror	r20
    234a:	37 95       	ror	r19
    234c:	27 95       	ror	r18
    234e:	ba 95       	dec	r27
    2350:	c9 f7       	brne	.-14     	; 0x2344 <__ultoa_invert+0xa2>
    2352:	62 0f       	add	r22, r18
    2354:	73 1f       	adc	r23, r19
    2356:	84 1f       	adc	r24, r20
    2358:	95 1f       	adc	r25, r21
    235a:	a0 1d       	adc	r26, r0
    235c:	08 95       	ret

0000235e <_exit>:
    235e:	f8 94       	cli

00002360 <__stop_program>:
    2360:	ff cf       	rjmp	.-2      	; 0x2360 <__stop_program>
