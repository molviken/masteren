
LoRa-node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000488  00800100  000021c0  00002254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010d  00800588  00800588  000026dc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000026dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002738  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00002778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003819  00000000  00000000  00002a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019db  00000000  00000000  00006239  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d59  00000000  00000000  00007c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f4  00000000  00000000  00009970  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010a4  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001937  00000000  00000000  0000b108  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000ca3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__ctors_end>
       4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
       8:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <__vector_2>
       c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      10:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      14:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      18:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      1c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      20:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      24:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      28:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      2c:	0c 94 25 03 	jmp	0x64a	; 0x64a <__vector_11>
      30:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      34:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      38:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      3c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      40:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      44:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      48:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      4c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      50:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      54:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      58:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      5c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      60:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      64:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      68:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      6c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      70:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      74:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      78:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      7c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      80:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      84:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      88:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      8c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      90:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      94:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      98:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      9c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      ac:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      bc:	0c 94 01 03 	jmp	0x602	; 0x602 <__vector_47>
      c0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      c4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      c8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>

000000cc <__trampolines_end>:
      cc:	6e 61       	ori	r22, 0x1E	; 30
      ce:	6e 00       	.word	0x006e	; ????

000000d0 <__c.2332>:
      d0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      e0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      f0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     100:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     110:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     120:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     130:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     140:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     150:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     160:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     170:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     180:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     190:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1a0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1b0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1c0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001ce <__ctors_end>:
     1ce:	11 24       	eor	r1, r1
     1d0:	1f be       	out	0x3f, r1	; 63
     1d2:	cf ef       	ldi	r28, 0xFF	; 255
     1d4:	d8 e0       	ldi	r29, 0x08	; 8
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	cd bf       	out	0x3d, r28	; 61

000001da <__do_copy_data>:
     1da:	15 e0       	ldi	r17, 0x05	; 5
     1dc:	a0 e0       	ldi	r26, 0x00	; 0
     1de:	b1 e0       	ldi	r27, 0x01	; 1
     1e0:	e0 ec       	ldi	r30, 0xC0	; 192
     1e2:	f1 e2       	ldi	r31, 0x21	; 33
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <__do_copy_data+0x10>
     1e6:	05 90       	lpm	r0, Z+
     1e8:	0d 92       	st	X+, r0
     1ea:	a8 38       	cpi	r26, 0x88	; 136
     1ec:	b1 07       	cpc	r27, r17
     1ee:	d9 f7       	brne	.-10     	; 0x1e6 <__do_copy_data+0xc>

000001f0 <__do_clear_bss>:
     1f0:	26 e0       	ldi	r18, 0x06	; 6
     1f2:	a8 e8       	ldi	r26, 0x88	; 136
     1f4:	b5 e0       	ldi	r27, 0x05	; 5
     1f6:	01 c0       	rjmp	.+2      	; 0x1fa <.do_clear_bss_start>

000001f8 <.do_clear_bss_loop>:
     1f8:	1d 92       	st	X+, r1

000001fa <.do_clear_bss_start>:
     1fa:	a5 39       	cpi	r26, 0x95	; 149
     1fc:	b2 07       	cpc	r27, r18
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <.do_clear_bss_loop>
     200:	0e 94 06 01 	call	0x20c	; 0x20c <main>
     204:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <_exit>

00000208 <__bad_interrupt>:
     208:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020c <main>:




int main(void){
	MCUSR &= ~(1 << WDRF);
     20c:	84 b7       	in	r24, 0x34	; 52
     20e:	87 7f       	andi	r24, 0xF7	; 247
     210:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	a8 95       	wdr
     218:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     21c:	88 61       	ori	r24, 0x18	; 24
     21e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     222:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     226:	0f be       	out	0x3f, r0	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     228:	2f ef       	ldi	r18, 0xFF	; 255
     22a:	83 ec       	ldi	r24, 0xC3	; 195
     22c:	99 e0       	ldi	r25, 0x09	; 9
     22e:	21 50       	subi	r18, 0x01	; 1
     230:	80 40       	sbci	r24, 0x00	; 0
     232:	90 40       	sbci	r25, 0x00	; 0
     234:	e1 f7       	brne	.-8      	; 0x22e <main+0x22>
     236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x2c>
     238:	00 00       	nop
	wdt_disable();
	_delay_ms(400); // Start-up time after pressing reset button
	
	FSM_run();
     23a:	0e 94 ba 01 	call	0x374	; 0x374 <FSM_run>
	puts("Program ended");
     23e:	8e e0       	ldi	r24, 0x0E	; 14
     240:	92 e0       	ldi	r25, 0x02	; 2
     242:	0e 94 2e 10 	call	0x205c	; 0x205c <puts>
	return 0;
}
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	08 95       	ret

0000024c <adc_init>:




void adc_init(){
	ADMUX = 0;
     24c:	ac e7       	ldi	r26, 0x7C	; 124
     24e:	b0 e0       	ldi	r27, 0x00	; 0
     250:	1c 92       	st	X, r1
	ADCSRA = 0;
     252:	ea e7       	ldi	r30, 0x7A	; 122
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	10 82       	st	Z, r1
	ADMUX |= ADC_VOLTAGE_REF_AVCC;											// Sets adc voltage reference
     258:	8c 91       	ld	r24, X
     25a:	80 64       	ori	r24, 0x40	; 64
     25c:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESCALAR_128;											// ADC prescaler = 128 ---> 8MHz goes to 62.5 kHz
     25e:	80 81       	ld	r24, Z
     260:	86 60       	ori	r24, 0x06	; 6
     262:	80 83       	st	Z, r24
	//ADCSRA |= (0 << ADIE);												// Enables ADC interrupt
	ADCSRA |= (1 << ADEN);													// Enabling the ADC
     264:	80 81       	ld	r24, Z
     266:	80 68       	ori	r24, 0x80	; 128
     268:	80 83       	st	Z, r24
     26a:	08 95       	ret

0000026c <adc_read>:
}


uint16_t adc_read(){
	uint16_t val;					
	ADCSRA |= (1 << ADSC);													// Starts single conversion
     26c:	ea e7       	ldi	r30, 0x7A	; 122
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	80 64       	ori	r24, 0x40	; 64
     274:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));
     276:	80 81       	ld	r24, Z
     278:	84 ff       	sbrs	r24, 4
     27a:	fd cf       	rjmp	.-6      	; 0x276 <adc_read+0xa>
	val = ADCW;
     27c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     280:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	if ((int)val > 1000){val = 1000;}
     284:	89 3e       	cpi	r24, 0xE9	; 233
     286:	23 e0       	ldi	r18, 0x03	; 3
     288:	92 07       	cpc	r25, r18
     28a:	14 f0       	brlt	.+4      	; 0x290 <adc_read+0x24>
     28c:	88 ee       	ldi	r24, 0xE8	; 232
     28e:	93 e0       	ldi	r25, 0x03	; 3
	return val;
}
     290:	08 95       	ret

00000292 <adc_change_channel>:

void adc_change_channel(uint8_t channel){
	ADMUX |= channel;														// Setting adc channel to be read
     292:	ec e7       	ldi	r30, 0x7C	; 124
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	90 81       	ld	r25, Z
     298:	89 2b       	or	r24, r25
     29a:	80 83       	st	Z, r24
	adc_read();																// Discard first measurement after channel change
     29c:	0e 94 36 01 	call	0x26c	; 0x26c <adc_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a0:	8a e1       	ldi	r24, 0x1A	; 26
     2a2:	8a 95       	dec	r24
     2a4:	f1 f7       	brne	.-4      	; 0x2a2 <adc_change_channel+0x10>
     2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <adc_change_channel+0x16>
     2a8:	08 95       	ret

000002aa <board_charge>:
	DDRD |= (1 << DDRD4);	  // Set PD4 as output
	
}

void board_charge(int off){
	if (off){
     2aa:	89 2b       	or	r24, r25
     2ac:	19 f0       	breq	.+6      	; 0x2b4 <board_charge+0xa>
		clear_bit(PORTD, PORTD4);
     2ae:	5c 98       	cbi	0x0b, 4	; 11
		clear_bit(LEDS, LED1);
     2b0:	28 98       	cbi	0x05, 0	; 5
     2b2:	08 95       	ret
	}
	else {
		set_bit(PORTD, PORTD4);
     2b4:	5c 9a       	sbi	0x0b, 4	; 11
		set_bit(LEDS, LED1);
     2b6:	28 9a       	sbi	0x05, 0	; 5
     2b8:	08 95       	ret

000002ba <board_setup>:
	}
}

void board_setup(uint8_t *joined_err){
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	ec 01       	movw	r28, r24
	puts("test1");
     2c0:	8c e1       	ldi	r24, 0x1C	; 28
     2c2:	92 e0       	ldi	r25, 0x02	; 2
     2c4:	0e 94 2e 10 	call	0x205c	; 0x205c <puts>
	#ifndef LORA_NODE
	USART_init();
	#endif
	adc_init();
     2c8:	0e 94 26 01 	call	0x24c	; 0x24c <adc_init>

static void board_dmy_btn_init();
static void board_gpio_init();

void board_dmy_btn_init(void){
	DDRD &= ~(1 << DDD3);     // Clear the PD2 pin
     2cc:	53 98       	cbi	0x0a, 3	; 10
	EICRA |= (1 << ISC11);    // set INT1 to trigger on falling edge
     2ce:	e9 e6       	ldi	r30, 0x69	; 105
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	80 81       	ld	r24, Z
     2d4:	88 60       	ori	r24, 0x08	; 8
     2d6:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);     // Turns on INT1
     2d8:	e9 9a       	sbi	0x1d, 1	; 29
}

void board_gpio_init(void){
	DDRD |= (1 << DDRD4);	  // Set PD4 as output
     2da:	54 9a       	sbi	0x0a, 4	; 10
	USART_init();
	#endif
	adc_init();
	board_dmy_btn_init();
	board_gpio_init();
	board_charge(0);
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 55 01 	call	0x2aa	; 0x2aa <board_charge>
	puts("test2");
     2e4:	82 e2       	ldi	r24, 0x22	; 34
     2e6:	92 e0       	ldi	r25, 0x02	; 2
     2e8:	0e 94 2e 10 	call	0x205c	; 0x205c <puts>
	#ifdef LORA_NODE
		lora_init(joined_err);
     2ec:	ce 01       	movw	r24, r28
     2ee:	0e 94 c1 05 	call	0xb82	; 0xb82 <lora_init>
		
	#else
		*joined_err = 0;
	#endif

	i2c_init();
     2f2:	0e 94 4a 03 	call	0x694	; 0x694 <i2c_init>
	INA219_init();
     2f6:	0e 94 94 04 	call	0x928	; 0x928 <INA219_init>
	timers_init();
     2fa:	0e 94 46 08 	call	0x108c	; 0x108c <timers_init>
	sei();
     2fe:	78 94       	sei
}
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	08 95       	ret

00000306 <board_get_battery_level>:
	
	r1 = 174;
	r2 = 255;
	battery_max = 4.2;
	
	adc_change_channel(VBAT);
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	0e 94 49 01 	call	0x292	; 0x292 <adc_change_channel>
	val = adc_read();
     30c:	0e 94 36 01 	call	0x26c	; 0x26c <adc_read>
	
	v_div_tick = (((r2)/(r1+r2))*battery_max) / 1024;
	vbat = v_div_tick*val*(r1+r2)/r2;
	bat_percentage = vbat*100/battery_max;
	
	return bat_percentage;
     310:	bc 01       	movw	r22, r24
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__floatunsisf>
     31a:	26 eb       	ldi	r18, 0xB6	; 182
     31c:	36 ec       	ldi	r19, 0xC6	; 198
     31e:	4f e1       	ldi	r20, 0x1F	; 31
     320:	5b e3       	ldi	r21, 0x3B	; 59
     322:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e8       	ldi	r19, 0x80	; 128
     32a:	46 ed       	ldi	r20, 0xD6	; 214
     32c:	53 e4       	ldi	r21, 0x43	; 67
     32e:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	4f e7       	ldi	r20, 0x7F	; 127
     338:	53 e4       	ldi	r21, 0x43	; 67
     33a:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__divsf3>
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	48 ec       	ldi	r20, 0xC8	; 200
     344:	52 e4       	ldi	r21, 0x42	; 66
     346:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     34a:	26 e6       	ldi	r18, 0x66	; 102
     34c:	36 e6       	ldi	r19, 0x66	; 102
     34e:	46 e8       	ldi	r20, 0x86	; 134
     350:	50 e4       	ldi	r21, 0x40	; 64
     352:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__divsf3>
     356:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__fixsfsi>
     35a:	86 2f       	mov	r24, r22
     35c:	08 95       	ret

0000035e <FSM_system_reset>:
	puts("Init complete, FSM running");
	#endif
}

void FSM_system_reset(){
	puts("reset");
     35e:	89 e1       	ldi	r24, 0x19	; 25
     360:	93 e0       	ldi	r25, 0x03	; 3
     362:	0e 94 2e 10 	call	0x205c	; 0x205c <puts>
	cli();
     366:	f8 94       	cli
	WDTCSR = 0x00;
     368:	e0 e6       	ldi	r30, 0x60	; 96
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	10 82       	st	Z, r1
	WDTCSR = (1<<WDE);
     36e:	88 e0       	ldi	r24, 0x08	; 8
     370:	80 83       	st	Z, r24
     372:	08 95       	ret

00000374 <FSM_run>:

//const char* test = "3565623838383532";
//const char* test2 = "mac_rx 2 63633131353562626666"; 
char test3[50] = "mac_rx 2 63633131353562626666";
uint8_t out[100];
void FSM_run(void){
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	67 97       	sbiw	r28, 0x17	; 23
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
	sample_size = BOARD_SAMPLE_SIZE;
     388:	8c e3       	ldi	r24, 0x3C	; 60
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	90 93 c4 05 	sts	0x05C4, r25	; 0x8005c4 <sample_size+0x1>
     390:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <sample_size>
	uint16_t vbus = 0, curr = 0;
	board_t board1 = {0, 0, 100, {0, 0, 0, 0}, 0, sample_size, ""};
     394:	19 82       	std	Y+1, r1	; 0x01
     396:	1a 82       	std	Y+2, r1	; 0x02
     398:	1b 82       	std	Y+3, r1	; 0x03
     39a:	1c 82       	std	Y+4, r1	; 0x04
     39c:	1d 82       	std	Y+5, r1	; 0x05
     39e:	24 e6       	ldi	r18, 0x64	; 100
     3a0:	2e 83       	std	Y+6, r18	; 0x06
     3a2:	18 86       	std	Y+8, r1	; 0x08
     3a4:	1f 82       	std	Y+7, r1	; 0x07
     3a6:	1a 86       	std	Y+10, r1	; 0x0a
     3a8:	19 86       	std	Y+9, r1	; 0x09
     3aa:	1b 86       	std	Y+11, r1	; 0x0b
     3ac:	1c 86       	std	Y+12, r1	; 0x0c
     3ae:	1d 86       	std	Y+13, r1	; 0x0d
     3b0:	1e 86       	std	Y+14, r1	; 0x0e
     3b2:	1f 86       	std	Y+15, r1	; 0x0f
     3b4:	18 8a       	std	Y+16, r1	; 0x10
     3b6:	19 8a       	std	Y+17, r1	; 0x11
     3b8:	1a 8a       	std	Y+18, r1	; 0x12
     3ba:	1b 8a       	std	Y+19, r1	; 0x13
     3bc:	9d 8b       	std	Y+21, r25	; 0x15
     3be:	8c 8b       	std	Y+20, r24	; 0x14
     3c0:	8a e9       	ldi	r24, 0x9A	; 154
     3c2:	94 e0       	ldi	r25, 0x04	; 4
     3c4:	9f 8b       	std	Y+23, r25	; 0x17
     3c6:	8e 8b       	std	Y+22, r24	; 0x16
	int rejoin_attempts = 0;
     3c8:	00 e0       	ldi	r16, 0x00	; 0
     3ca:	10 e0       	ldi	r17, 0x00	; 0
				#ifndef TIMER2
				_delay_ms(1000);
				#endif

				if(board1.lora_joined_err) nextState = ST_NOT_JOINED;
				else nextState = ST_ACTIVE;
     3cc:	68 94       	set
     3ce:	dd 24       	eor	r13, r13
     3d0:	d1 f8       	bld	r13, 1
				enter_powerSave();
				#ifndef TIMER2
				_delay_ms(1000);
				#endif

				if(board1.lora_joined_err) nextState = ST_NOT_JOINED;
     3d2:	0f 2e       	mov	r0, r31
     3d4:	f3 e0       	ldi	r31, 0x03	; 3
     3d6:	ef 2e       	mov	r14, r31
     3d8:	f0 2d       	mov	r31, r0
						lora_transmit(board1.msg);
					#endif
					board1.ina219.bus_voltage_avg = 0;
					board1.ina219.current_avg = 0;
				}
				nextState = ST_SLEEP;
     3da:	ff 24       	eor	r15, r15
     3dc:	f3 94       	inc	r15
	uint16_t vbus = 0, curr = 0;
	board_t board1 = {0, 0, 100, {0, 0, 0, 0}, 0, sample_size, ""};
	int rejoin_attempts = 0;
	uint8_t lora_wait_rejoin_minutes = 3;
	while (1){
		if (lora_tx_flag){
     3de:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <__data_end>
     3e2:	88 23       	and	r24, r24
     3e4:	31 f0       	breq	.+12     	; 0x3f2 <FSM_run+0x7e>
			lora_tx_flag = 0;
     3e6:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <__data_end>
			lora_transmit("02025eb9a7165403210876");
     3ea:	88 e2       	ldi	r24, 0x28	; 40
     3ec:	92 e0       	ldi	r25, 0x02	; 2
     3ee:	0e 94 8f 07 	call	0xf1e	; 0xf1e <lora_transmit>
		}
		switch (nextState){
     3f2:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <nextState>
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	09 f4       	brne	.+2      	; 0x3fc <FSM_run+0x88>
     3fa:	e3 c0       	rjmp	.+454    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     3fc:	28 f0       	brcs	.+10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3fe:	82 30       	cpi	r24, 0x02	; 2
     400:	49 f1       	breq	.+82     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     402:	83 30       	cpi	r24, 0x03	; 3
     404:	91 f0       	breq	.+36     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     406:	eb cf       	rjmp	.-42     	; 0x3de <FSM_run+0x6a>
static volatile int rec_flag = 0;
static void FSM_system_init(uint8_t *joined_flag);
static uint8_t lora_tx_flag;

void FSM_system_init(uint8_t *joined_flag){
	board_setup(joined_flag);
     408:	ce 01       	movw	r24, r28
     40a:	43 96       	adiw	r24, 0x13	; 19
     40c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <board_setup>
	#ifdef DEBUG_M
	puts("Init complete, FSM running");
     410:	8f e3       	ldi	r24, 0x3F	; 63
     412:	92 e0       	ldi	r25, 0x02	; 2
     414:	0e 94 2e 10 	call	0x205c	; 0x205c <puts>
		}
		switch (nextState){
			
			case ST_INIT:
				FSM_system_init(&board1.lora_joined_err);
				if (board1.lora_joined_err) nextState = ST_NOT_JOINED;
     418:	8b 89       	ldd	r24, Y+19	; 0x13
     41a:	88 23       	and	r24, r24
     41c:	19 f0       	breq	.+6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     41e:	e0 92 8a 05 	sts	0x058A, r14	; 0x80058a <nextState>
     422:	dd cf       	rjmp	.-70     	; 0x3de <FSM_run+0x6a>
				else nextState = ST_ACTIVE;
     424:	d0 92 8a 05 	sts	0x058A, r13	; 0x80058a <nextState>
     428:	da cf       	rjmp	.-76     	; 0x3de <FSM_run+0x6a>
				break;
			
			case ST_NOT_JOINED:
				#ifdef DEBUG_M
					puts("Not joined");
     42a:	8a e5       	ldi	r24, 0x5A	; 90
     42c:	92 e0       	ldi	r25, 0x02	; 2
     42e:	0e 94 2e 10 	call	0x205c	; 0x205c <puts>
				#endif
				
				rejoin_attempts++;
     432:	0f 5f       	subi	r16, 0xFF	; 255
     434:	1f 4f       	sbci	r17, 0xFF	; 255
				if (rejoin_attempts < 3) board1.lora_joined_err = lora_join_OTAA();
     436:	03 30       	cpi	r16, 0x03	; 3
     438:	11 05       	cpc	r17, r1
     43a:	24 f4       	brge	.+8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     43c:	0e 94 9c 05 	call	0xb38	; 0xb38 <lora_join_OTAA>
     440:	8b 8b       	std	Y+19, r24	; 0x13
     442:	05 c0       	rjmp	.+10     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
				else if (rejoin_attempts >= lora_wait_rejoin_minutes*60) rejoin_attempts = 0;
     444:	04 3b       	cpi	r16, 0xB4	; 180
     446:	11 05       	cpc	r17, r1
     448:	14 f0       	brlt	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44a:	00 e0       	ldi	r16, 0x00	; 0
     44c:	10 e0       	ldi	r17, 0x00	; 0

				nextState = ST_SLEEP;
     44e:	f0 92 8a 05 	sts	0x058A, r15	; 0x80058a <nextState>
				break;
     452:	c5 cf       	rjmp	.-118    	; 0x3de <FSM_run+0x6a>
			
			case ST_ACTIVE:
				#ifdef DEBUG_M
					//puts("Active");
				#endif
				vbus = INA219_readBusVoltageReg();
     454:	0e 94 46 04 	call	0x88c	; 0x88c <INA219_readBusVoltageReg>
				curr = INA219_readCurrentReg();
     458:	0e 94 6f 04 	call	0x8de	; 0x8de <INA219_readCurrentReg>
				//printf("vbus: %u    curr: %u  \n", vbus,curr);
				board1.ina219.bus_voltage_avg	+= INA219_readBusVoltageReg();
     45c:	0e 94 46 04 	call	0x88c	; 0x88c <INA219_readBusVoltageReg>
     460:	09 2e       	mov	r0, r25
     462:	00 0c       	add	r0, r0
     464:	aa 0b       	sbc	r26, r26
     466:	bb 0b       	sbc	r27, r27
     468:	4b 85       	ldd	r20, Y+11	; 0x0b
     46a:	5c 85       	ldd	r21, Y+12	; 0x0c
     46c:	6d 85       	ldd	r22, Y+13	; 0x0d
     46e:	7e 85       	ldd	r23, Y+14	; 0x0e
     470:	84 0f       	add	r24, r20
     472:	95 1f       	adc	r25, r21
     474:	a6 1f       	adc	r26, r22
     476:	b7 1f       	adc	r27, r23
     478:	8b 87       	std	Y+11, r24	; 0x0b
     47a:	9c 87       	std	Y+12, r25	; 0x0c
     47c:	ad 87       	std	Y+13, r26	; 0x0d
     47e:	be 87       	std	Y+14, r27	; 0x0e
				board1.ina219.current_avg		+= INA219_readCurrentReg();
     480:	0e 94 6f 04 	call	0x8de	; 0x8de <INA219_readCurrentReg>
     484:	4f 85       	ldd	r20, Y+15	; 0x0f
     486:	58 89       	ldd	r21, Y+16	; 0x10
     488:	69 89       	ldd	r22, Y+17	; 0x11
     48a:	7a 89       	ldd	r23, Y+18	; 0x12
     48c:	48 0f       	add	r20, r24
     48e:	59 1f       	adc	r21, r25
     490:	61 1d       	adc	r22, r1
     492:	71 1d       	adc	r23, r1
     494:	4f 87       	std	Y+15, r20	; 0x0f
     496:	58 8b       	std	Y+16, r21	; 0x10
     498:	69 8b       	std	Y+17, r22	; 0x11
     49a:	7a 8b       	std	Y+18, r23	; 0x12
				board1.batteryLevel = board_get_battery_level();
     49c:	0e 94 83 01 	call	0x306	; 0x306 <board_get_battery_level>
     4a0:	8e 83       	std	Y+6, r24	; 0x06
				board1.sample_size = sample_size;
     4a2:	20 91 c3 05 	lds	r18, 0x05C3	; 0x8005c3 <sample_size>
     4a6:	30 91 c4 05 	lds	r19, 0x05C4	; 0x8005c4 <sample_size+0x1>
     4aa:	3d 8b       	std	Y+21, r19	; 0x15
     4ac:	2c 8b       	std	Y+20, r18	; 0x14
				if (board1.batteryLevel < 60) board_charge(BOARD_CHARGE_ON);
     4ae:	8c 33       	cpi	r24, 0x3C	; 60
     4b0:	28 f4       	brcc	.+10     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 55 01 	call	0x2aa	; 0x2aa <board_charge>
     4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
				else if (board1.batteryLevel > 95) board_charge(BOARD_CHARGE_OFF);
     4bc:	80 36       	cpi	r24, 0x60	; 96
     4be:	20 f0       	brcs	.+8      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 55 01 	call	0x2aa	; 0x2aa <board_charge>
				if(!(current_time%board1.sample_size) && (current_time != 0)){
     4c8:	60 91 bf 05 	lds	r22, 0x05BF	; 0x8005bf <current_time>
     4cc:	70 91 c0 05 	lds	r23, 0x05C0	; 0x8005c0 <current_time+0x1>
     4d0:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <current_time+0x2>
     4d4:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <current_time+0x3>
     4d8:	2c 89       	ldd	r18, Y+20	; 0x14
     4da:	3d 89       	ldd	r19, Y+21	; 0x15
     4dc:	40 e0       	ldi	r20, 0x00	; 0
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__udivmodsi4>
     4e4:	67 2b       	or	r22, r23
     4e6:	68 2b       	or	r22, r24
     4e8:	69 2b       	or	r22, r25
     4ea:	09 f0       	breq	.+2      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4ec:	67 c0       	rjmp	.+206    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     4ee:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <current_time>
     4f2:	90 91 c0 05 	lds	r25, 0x05C0	; 0x8005c0 <current_time+0x1>
     4f6:	a0 91 c1 05 	lds	r26, 0x05C1	; 0x8005c1 <current_time+0x2>
     4fa:	b0 91 c2 05 	lds	r27, 0x05C2	; 0x8005c2 <current_time+0x3>
     4fe:	89 2b       	or	r24, r25
     500:	8a 2b       	or	r24, r26
     502:	8b 2b       	or	r24, r27
     504:	09 f4       	brne	.+2      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     506:	5a c0       	rjmp	.+180    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
					puts("It's time");
     508:	85 e6       	ldi	r24, 0x65	; 101
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	0e 94 2e 10 	call	0x205c	; 0x205c <puts>
					if (frame_counter == 0xFF) frame_counter = 0;
     510:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <frame_counter>
     514:	8f 3f       	cpi	r24, 0xFF	; 255
     516:	11 f4       	brne	.+4      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     518:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <frame_counter>
					board1.frame_counter = frame_counter++;
     51c:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <frame_counter>
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	98 0f       	add	r25, r24
     524:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <frame_counter>
     528:	89 83       	std	Y+1, r24	; 0x01
					board1.ina219.bus_voltage	= board1.ina219.bus_voltage_avg / board1.sample_size;
     52a:	8c 88       	ldd	r8, Y+20	; 0x14
     52c:	9d 88       	ldd	r9, Y+21	; 0x15
     52e:	a1 2c       	mov	r10, r1
     530:	b1 2c       	mov	r11, r1
     532:	6b 85       	ldd	r22, Y+11	; 0x0b
     534:	7c 85       	ldd	r23, Y+12	; 0x0c
     536:	8d 85       	ldd	r24, Y+13	; 0x0d
     538:	9e 85       	ldd	r25, Y+14	; 0x0e
     53a:	a5 01       	movw	r20, r10
     53c:	94 01       	movw	r18, r8
     53e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__udivmodsi4>
     542:	38 87       	std	Y+8, r19	; 0x08
     544:	2f 83       	std	Y+7, r18	; 0x07
					board1.ina219.current		= board1.ina219.current_avg / board1.sample_size;
     546:	6f 85       	ldd	r22, Y+15	; 0x0f
     548:	78 89       	ldd	r23, Y+16	; 0x10
     54a:	89 89       	ldd	r24, Y+17	; 0x11
     54c:	9a 89       	ldd	r25, Y+18	; 0x12
     54e:	a5 01       	movw	r20, r10
     550:	94 01       	movw	r18, r8
     552:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__udivmodsi4>
     556:	3a 87       	std	Y+10, r19	; 0x0a
     558:	29 87       	std	Y+9, r18	; 0x09
					board1.time_stamp = current_time;
     55a:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <current_time>
     55e:	90 91 c0 05 	lds	r25, 0x05C0	; 0x8005c0 <current_time+0x1>
     562:	a0 91 c1 05 	lds	r26, 0x05C1	; 0x8005c1 <current_time+0x2>
     566:	b0 91 c2 05 	lds	r27, 0x05C2	; 0x8005c2 <current_time+0x3>
     56a:	8a 83       	std	Y+2, r24	; 0x02
     56c:	9b 83       	std	Y+3, r25	; 0x03
     56e:	ac 83       	std	Y+4, r26	; 0x04
     570:	bd 83       	std	Y+5, r27	; 0x05
					board1.msg = hex_encode(board1);
     572:	8d b7       	in	r24, 0x3d	; 61
     574:	9e b7       	in	r25, 0x3e	; 62
     576:	47 97       	sbiw	r24, 0x17	; 23
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	9e bf       	out	0x3e, r25	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	8d bf       	out	0x3d, r24	; 61
     582:	ad b7       	in	r26, 0x3d	; 61
     584:	be b7       	in	r27, 0x3e	; 62
     586:	11 96       	adiw	r26, 0x01	; 1
     588:	87 e1       	ldi	r24, 0x17	; 23
     58a:	fe 01       	movw	r30, r28
     58c:	31 96       	adiw	r30, 0x01	; 1
     58e:	01 90       	ld	r0, Z+
     590:	0d 92       	st	X+, r0
     592:	8a 95       	dec	r24
     594:	e1 f7       	brne	.-8      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
     596:	0e 94 27 09 	call	0x124e	; 0x124e <hex_encode>
     59a:	9f 8b       	std	Y+23, r25	; 0x17
     59c:	8e 8b       	std	Y+22, r24	; 0x16
						
					#ifndef LORA_NODE
						puts(board1.msg);
					#else 
						//puts(board1.msg);
						lora_transmit(board1.msg);
     59e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <lora_transmit>
					#endif
					board1.ina219.bus_voltage_avg = 0;
     5a2:	1b 86       	std	Y+11, r1	; 0x0b
     5a4:	1c 86       	std	Y+12, r1	; 0x0c
     5a6:	1d 86       	std	Y+13, r1	; 0x0d
     5a8:	1e 86       	std	Y+14, r1	; 0x0e
					board1.ina219.current_avg = 0;
     5aa:	1f 86       	std	Y+15, r1	; 0x0f
     5ac:	18 8a       	std	Y+16, r1	; 0x10
     5ae:	19 8a       	std	Y+17, r1	; 0x11
     5b0:	1a 8a       	std	Y+18, r1	; 0x12
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
				}
				nextState = ST_SLEEP;
     5bc:	f0 92 8a 05 	sts	0x058A, r15	; 0x80058a <nextState>
				break;
     5c0:	0e cf       	rjmp	.-484    	; 0x3de <FSM_run+0x6a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5c2:	8f e9       	ldi	r24, 0x9F	; 159
     5c4:	9f e0       	ldi	r25, 0x0F	; 15
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     5cc:	00 00       	nop
			case ST_SLEEP:
				#ifdef DEBUG_M
				//puts("Going to sleep");
				#endif
				_delay_ms(2); // Delay to allow a print to be written over serial before sleep
				enter_powerSave();
     5ce:	0e 94 63 08 	call	0x10c6	; 0x10c6 <enter_powerSave>
				#ifndef TIMER2
				_delay_ms(1000);
				#endif

				if(board1.lora_joined_err) nextState = ST_NOT_JOINED;
     5d2:	8b 89       	ldd	r24, Y+19	; 0x13
     5d4:	88 23       	and	r24, r24
     5d6:	19 f0       	breq	.+6      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
     5d8:	e0 92 8a 05 	sts	0x058A, r14	; 0x80058a <nextState>
     5dc:	00 cf       	rjmp	.-512    	; 0x3de <FSM_run+0x6a>
				else nextState = ST_ACTIVE;
     5de:	d0 92 8a 05 	sts	0x058A, r13	; 0x80058a <nextState>
     5e2:	fd ce       	rjmp	.-518    	; 0x3de <FSM_run+0x6a>

000005e4 <__vector_2>:
		}
	}
}

ISR (INT1_vect)          //External interrupt_zero ISR
{
     5e4:	1f 92       	push	r1
     5e6:	0f 92       	push	r0
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	0f 92       	push	r0
     5ec:	11 24       	eor	r1, r1
     5ee:	8f 93       	push	r24
	lora_tx_flag = 1;
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <__data_end>
	//lora_transmit("02025eb9a7165403210876");
}
     5f6:	8f 91       	pop	r24
     5f8:	0f 90       	pop	r0
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	0f 90       	pop	r0
     5fe:	1f 90       	pop	r1
     600:	18 95       	reti

00000602 <__vector_47>:

ISR (USART2_RX_vect){
     602:	1f 92       	push	r1
     604:	0f 92       	push	r0
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	0f 92       	push	r0
     60a:	11 24       	eor	r1, r1
     60c:	2f 93       	push	r18
     60e:	3f 93       	push	r19
     610:	4f 93       	push	r20
     612:	5f 93       	push	r21
     614:	6f 93       	push	r22
     616:	7f 93       	push	r23
     618:	8f 93       	push	r24
     61a:	9f 93       	push	r25
     61c:	af 93       	push	r26
     61e:	bf 93       	push	r27
     620:	ef 93       	push	r30
     622:	ff 93       	push	r31
	USART_receiveString2();
     624:	0e 94 27 08 	call	0x104e	; 0x104e <USART_receiveString2>
}
     628:	ff 91       	pop	r31
     62a:	ef 91       	pop	r30
     62c:	bf 91       	pop	r27
     62e:	af 91       	pop	r26
     630:	9f 91       	pop	r25
     632:	8f 91       	pop	r24
     634:	7f 91       	pop	r23
     636:	6f 91       	pop	r22
     638:	5f 91       	pop	r21
     63a:	4f 91       	pop	r20
     63c:	3f 91       	pop	r19
     63e:	2f 91       	pop	r18
     640:	0f 90       	pop	r0
     642:	0f be       	out	0x3f, r0	; 63
     644:	0f 90       	pop	r0
     646:	1f 90       	pop	r1
     648:	18 95       	reti

0000064a <__vector_11>:

ISR(TIMER2_OVF_vect){
     64a:	1f 92       	push	r1
     64c:	0f 92       	push	r0
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	0f 92       	push	r0
     652:	11 24       	eor	r1, r1
     654:	8f 93       	push	r24
     656:	9f 93       	push	r25
     658:	af 93       	push	r26
     65a:	bf 93       	push	r27
	current_time ++;
     65c:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <current_time>
     660:	90 91 c0 05 	lds	r25, 0x05C0	; 0x8005c0 <current_time+0x1>
     664:	a0 91 c1 05 	lds	r26, 0x05C1	; 0x8005c1 <current_time+0x2>
     668:	b0 91 c2 05 	lds	r27, 0x05C2	; 0x8005c2 <current_time+0x3>
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	a1 1d       	adc	r26, r1
     670:	b1 1d       	adc	r27, r1
     672:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <current_time>
     676:	90 93 c0 05 	sts	0x05C0, r25	; 0x8005c0 <current_time+0x1>
     67a:	a0 93 c1 05 	sts	0x05C1, r26	; 0x8005c1 <current_time+0x2>
     67e:	b0 93 c2 05 	sts	0x05C2, r27	; 0x8005c2 <current_time+0x3>
	
	//wake_up_flag = 1;
     682:	bf 91       	pop	r27
     684:	af 91       	pop	r26
     686:	9f 91       	pop	r25
     688:	8f 91       	pop	r24
     68a:	0f 90       	pop	r0
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	0f 90       	pop	r0
     690:	1f 90       	pop	r1
     692:	18 95       	reti

00000694 <i2c_init>:
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address){
    return i2c_start( address );

}
     694:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     698:	80 e2       	ldi	r24, 0x20	; 32
     69a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     69e:	08 95       	ret

000006a0 <i2c_sync>:
     6a0:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     6a4:	88 23       	and	r24, r24
     6a6:	bc f0       	brlt	.+46     	; 0x6d6 <i2c_sync+0x36>
     6a8:	24 e6       	ldi	r18, 0x64	; 100
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	ec ed       	ldi	r30, 0xDC	; 220
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	82 e0       	ldi	r24, 0x02	; 2
     6b2:	8a 95       	dec	r24
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <i2c_sync+0x12>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <i2c_sync+0x18>
     6b8:	21 50       	subi	r18, 0x01	; 1
     6ba:	31 09       	sbc	r19, r1
     6bc:	80 81       	ld	r24, Z
     6be:	88 23       	and	r24, r24
     6c0:	24 f0       	brlt	.+8      	; 0x6ca <i2c_sync+0x2a>
     6c2:	21 15       	cp	r18, r1
     6c4:	31 05       	cpc	r19, r1
     6c6:	a1 f7       	brne	.-24     	; 0x6b0 <i2c_sync+0x10>
     6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <i2c_sync+0x30>
     6ca:	21 15       	cp	r18, r1
     6cc:	31 05       	cpc	r19, r1
     6ce:	29 f4       	brne	.+10     	; 0x6da <i2c_sync+0x3a>
     6d0:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <i2c_sync+0x3a>
     6d6:	24 e6       	ldi	r18, 0x64	; 100
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	23 2b       	or	r18, r19
     6de:	09 f4       	brne	.+2      	; 0x6e2 <i2c_sync+0x42>
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	08 95       	ret

000006e4 <i2c_waitStop>:
     6e4:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     6e8:	84 ff       	sbrs	r24, 4
     6ea:	17 c0       	rjmp	.+46     	; 0x71a <i2c_waitStop+0x36>
     6ec:	24 e6       	ldi	r18, 0x64	; 100
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	ec ed       	ldi	r30, 0xDC	; 220
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	82 e0       	ldi	r24, 0x02	; 2
     6f6:	8a 95       	dec	r24
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <i2c_waitStop+0x12>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <i2c_waitStop+0x18>
     6fc:	21 50       	subi	r18, 0x01	; 1
     6fe:	31 09       	sbc	r19, r1
     700:	80 81       	ld	r24, Z
     702:	84 ff       	sbrs	r24, 4
     704:	04 c0       	rjmp	.+8      	; 0x70e <i2c_waitStop+0x2a>
     706:	21 15       	cp	r18, r1
     708:	31 05       	cpc	r19, r1
     70a:	a1 f7       	brne	.-24     	; 0x6f4 <i2c_waitStop+0x10>
     70c:	03 c0       	rjmp	.+6      	; 0x714 <i2c_waitStop+0x30>
     70e:	21 15       	cp	r18, r1
     710:	31 05       	cpc	r19, r1
     712:	29 f4       	brne	.+10     	; 0x71e <i2c_waitStop+0x3a>
     714:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     718:	02 c0       	rjmp	.+4      	; 0x71e <i2c_waitStop+0x3a>
     71a:	24 e6       	ldi	r18, 0x64	; 100
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	23 2b       	or	r18, r19
     722:	09 f4       	brne	.+2      	; 0x726 <i2c_waitStop+0x42>
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	08 95       	ret

00000728 <i2c_start>:
     728:	cf 93       	push	r28
     72a:	c8 2f       	mov	r28, r24
     72c:	84 ea       	ldi	r24, 0xA4	; 164
     72e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     732:	0e 94 50 03 	call	0x6a0	; 0x6a0 <i2c_sync>
     736:	88 23       	and	r24, r24
     738:	e9 f0       	breq	.+58     	; 0x774 <i2c_start+0x4c>
     73a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     73e:	88 7f       	andi	r24, 0xF8	; 248
     740:	88 30       	cpi	r24, 0x08	; 8
     742:	11 f0       	breq	.+4      	; 0x748 <i2c_start+0x20>
     744:	80 31       	cpi	r24, 0x10	; 16
     746:	99 f4       	brne	.+38     	; 0x76e <i2c_start+0x46>
     748:	c0 93 db 00 	sts	0x00DB, r28	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
     74c:	84 e8       	ldi	r24, 0x84	; 132
     74e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     752:	0e 94 50 03 	call	0x6a0	; 0x6a0 <i2c_sync>
     756:	88 23       	and	r24, r24
     758:	69 f0       	breq	.+26     	; 0x774 <i2c_start+0x4c>
     75a:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     75e:	98 7f       	andi	r25, 0xF8	; 248
     760:	98 31       	cpi	r25, 0x18	; 24
     762:	39 f0       	breq	.+14     	; 0x772 <i2c_start+0x4a>
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	90 34       	cpi	r25, 0x40	; 64
     768:	29 f4       	brne	.+10     	; 0x774 <i2c_start+0x4c>
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	03 c0       	rjmp	.+6      	; 0x774 <i2c_start+0x4c>
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	01 c0       	rjmp	.+2      	; 0x774 <i2c_start+0x4c>
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <i2c_stop>:
/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void){
    /* send stop condition */
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     778:	84 e9       	ldi	r24, 0x94	; 148
     77a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	
	// wait until stop condition is executed and bus released
	i2c_waitStop(); 
     77e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <i2c_waitStop>
     782:	08 95       	ret

00000784 <i2c_write>:
*************************************************************************/
unsigned char i2c_write( unsigned char data ){	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR1 = data;
     784:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	TWCR1 = (1<<TWINT) | (1<<TWEN);
     788:	84 e8       	ldi	r24, 0x84	; 132
     78a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

	// wait until transmission completed
	i2c_sync();
     78e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <i2c_sync>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     792:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     796:	98 7f       	andi	r25, 0xF8	; 248
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	98 32       	cpi	r25, 0x28	; 40
     79c:	09 f4       	brne	.+2      	; 0x7a0 <i2c_write+0x1c>
     79e:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}
     7a0:	08 95       	ret

000007a2 <i2c_readAck>:
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void){
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     7a2:	84 ec       	ldi	r24, 0xC4	; 196
     7a4:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	i2c_sync();    
     7a8:	0e 94 50 03 	call	0x6a0	; 0x6a0 <i2c_sync>
	return TWDR1;
     7ac:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
}
     7b0:	08 95       	ret

000007b2 <i2c_readNak>:
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void){
	TWCR1 = (1<<TWINT) | (1<<TWEN);
     7b2:	84 e8       	ldi	r24, 0x84	; 132
     7b4:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	i2c_sync(); 
     7b8:	0e 94 50 03 	call	0x6a0	; 0x6a0 <i2c_sync>
	return TWDR1;
     7bc:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
}
     7c0:	08 95       	ret

000007c2 <i2c_read2ByteRegister>:
  
  Input:    device address, register address, buffer for storage
  Return:   0 write successful 
            1 write failed
*************************************************************************/
uint8_t i2c_read2ByteRegister(uint8_t adr, uint8_t regAddr, uint8_t *data){
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	d8 2f       	mov	r29, r24
     7ce:	f6 2e       	mov	r15, r22
     7d0:	8a 01       	movw	r16, r20
	uint8_t error = 0;
	error += i2c_start(adr | I2C_WRITE);
     7d2:	0e 94 94 03 	call	0x728	; 0x728 <i2c_start>
     7d6:	c8 2f       	mov	r28, r24
	error += i2c_write(regAddr);
     7d8:	8f 2d       	mov	r24, r15
     7da:	0e 94 c2 03 	call	0x784	; 0x784 <i2c_write>
     7de:	c8 0f       	add	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e0:	8a e1       	ldi	r24, 0x1A	; 26
     7e2:	8a 95       	dec	r24
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <i2c_read2ByteRegister+0x20>
     7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <i2c_read2ByteRegister+0x26>
	_delay_us(10);
	//read data
	error += i2c_start(adr | I2C_READ);
     7e8:	8d 2f       	mov	r24, r29
     7ea:	81 60       	ori	r24, 0x01	; 1
     7ec:	0e 94 94 03 	call	0x728	; 0x728 <i2c_start>
     7f0:	c8 0f       	add	r28, r24
	data[1] = i2c_readAck();
     7f2:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <i2c_readAck>
     7f6:	f8 01       	movw	r30, r16
     7f8:	81 83       	std	Z+1, r24	; 0x01
	data[0] = i2c_readNak();
     7fa:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <i2c_readNak>
     7fe:	f8 01       	movw	r30, r16
     800:	80 83       	st	Z, r24
	i2c_stop();
     802:	0e 94 bc 03 	call	0x778	; 0x778 <i2c_stop>
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	c1 11       	cpse	r28, r1
     80a:	01 c0       	rjmp	.+2      	; 0x80e <i2c_read2ByteRegister+0x4c>
     80c:	80 e0       	ldi	r24, 0x00	; 0
	
	if (error) return 1;
	else return 0;
}
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	ff 90       	pop	r15
     818:	08 95       	ret

0000081a <i2c_write2ByteRegister>:
  
  Input:    device address, register address, bytes to be transfered 
  Return:   0 write successful
			1 write failed
*************************************************************************/
uint8_t i2c_write2ByteRegister(uint8_t adr, uint8_t regAddr, uint16_t data){
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	06 2f       	mov	r16, r22
     824:	d4 2f       	mov	r29, r20
     826:	15 2f       	mov	r17, r21
	uint8_t error = 0;
	error += i2c_start(adr | I2C_WRITE);
     828:	0e 94 94 03 	call	0x728	; 0x728 <i2c_start>
     82c:	c8 2f       	mov	r28, r24
	error += i2c_write(regAddr);
     82e:	80 2f       	mov	r24, r16
     830:	0e 94 c2 03 	call	0x784	; 0x784 <i2c_write>
     834:	c8 0f       	add	r28, r24
     836:	8a e1       	ldi	r24, 0x1A	; 26
     838:	8a 95       	dec	r24
     83a:	f1 f7       	brne	.-4      	; 0x838 <i2c_write2ByteRegister+0x1e>
     83c:	00 c0       	rjmp	.+0      	; 0x83e <i2c_write2ByteRegister+0x24>
	_delay_us(10);
	error += i2c_write((uint8_t)(data >> 8));
     83e:	81 2f       	mov	r24, r17
     840:	0e 94 c2 03 	call	0x784	; 0x784 <i2c_write>
     844:	c8 0f       	add	r28, r24
	error += i2c_write((uint8_t)(data & 0xFF));
     846:	8d 2f       	mov	r24, r29
     848:	0e 94 c2 03 	call	0x784	; 0x784 <i2c_write>
     84c:	c8 0f       	add	r28, r24
	i2c_stop();
     84e:	0e 94 bc 03 	call	0x778	; 0x778 <i2c_stop>
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	c1 11       	cpse	r28, r1
     856:	01 c0       	rjmp	.+2      	; 0x85a <i2c_write2ByteRegister+0x40>
     858:	80 e0       	ldi	r24, 0x00	; 0
	if (error) return 1;
	else return 0;
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	08 95       	ret

00000864 <INA219_setCalibration_16V_400mA>:

uint16_t INA219_readShuntVoltageReg(){ // Not operational
	uint8_t value[2];
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_SHUNTVOLTAGE, value)) return 1;
	return ((value[1] << 8) | value[0]);
}
     864:	cf 93       	push	r28
     866:	40 e8       	ldi	r20, 0x80	; 128
     868:	5a e6       	ldi	r21, 0x6A	; 106
     86a:	65 e0       	ldi	r22, 0x05	; 5
     86c:	80 e8       	ldi	r24, 0x80	; 128
     86e:	0e 94 0d 04 	call	0x81a	; 0x81a <i2c_write2ByteRegister>
     872:	c8 2f       	mov	r28, r24
     874:	4f e9       	ldi	r20, 0x9F	; 159
     876:	51 e0       	ldi	r21, 0x01	; 1
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	80 e8       	ldi	r24, 0x80	; 128
     87c:	0e 94 0d 04 	call	0x81a	; 0x81a <i2c_write2ByteRegister>
     880:	c8 0f       	add	r28, r24
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	09 f4       	brne	.+2      	; 0x888 <INA219_setCalibration_16V_400mA+0x24>
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	cf 91       	pop	r28
     88a:	08 95       	ret

0000088c <INA219_readBusVoltageReg>:
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	00 d0       	rcall	.+0      	; 0x892 <INA219_readBusVoltageReg+0x6>
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
     896:	ae 01       	movw	r20, r28
     898:	4f 5f       	subi	r20, 0xFF	; 255
     89a:	5f 4f       	sbci	r21, 0xFF	; 255
     89c:	62 e0       	ldi	r22, 0x02	; 2
     89e:	80 e8       	ldi	r24, 0x80	; 128
     8a0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <i2c_read2ByteRegister>
     8a4:	81 11       	cpse	r24, r1
     8a6:	11 c0       	rjmp	.+34     	; 0x8ca <INA219_readBusVoltageReg+0x3e>
     8a8:	8a 81       	ldd	r24, Y+2	; 0x02
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	98 2f       	mov	r25, r24
     8ae:	88 27       	eor	r24, r24
     8b0:	29 81       	ldd	r18, Y+1	; 0x01
     8b2:	82 2b       	or	r24, r18
     8b4:	95 95       	asr	r25
     8b6:	87 95       	ror	r24
     8b8:	95 95       	asr	r25
     8ba:	87 95       	ror	r24
     8bc:	95 95       	asr	r25
     8be:	87 95       	ror	r24
     8c0:	81 30       	cpi	r24, 0x01	; 1
     8c2:	20 e1       	ldi	r18, 0x10	; 16
     8c4:	92 07       	cpc	r25, r18
     8c6:	30 f0       	brcs	.+12     	; 0x8d4 <INA219_readBusVoltageReg+0x48>
     8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <INA219_readBusVoltageReg+0x44>
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <INA219_readBusVoltageReg+0x48>
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <INA219_readCurrentReg>:
uint16_t INA219_readCurrentReg(){
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	00 d0       	rcall	.+0      	; 0x8e4 <INA219_readCurrentReg+0x6>
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
	uint8_t value[2];
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_CURRENT, value)) return 0;
     8e8:	ae 01       	movw	r20, r28
     8ea:	4f 5f       	subi	r20, 0xFF	; 255
     8ec:	5f 4f       	sbci	r21, 0xFF	; 255
     8ee:	64 e0       	ldi	r22, 0x04	; 4
     8f0:	80 e8       	ldi	r24, 0x80	; 128
     8f2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <i2c_read2ByteRegister>
     8f6:	81 11       	cpse	r24, r1
     8f8:	0d c0       	rjmp	.+26     	; 0x914 <__stack+0x15>
	uint16_t total = (value[1] << 8) | value[0];
     8fa:	2a 81       	ldd	r18, Y+2	; 0x02
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	32 2f       	mov	r19, r18
     900:	22 27       	eor	r18, r18
     902:	89 81       	ldd	r24, Y+1	; 0x01
     904:	28 2b       	or	r18, r24
	if(total>0x8000) return 0x00;  // Remove possibility of corruption with a bug where total is above 0xFFAE with no connected source.
     906:	21 30       	cpi	r18, 0x01	; 1
     908:	80 e8       	ldi	r24, 0x80	; 128
     90a:	38 07       	cpc	r19, r24
     90c:	30 f4       	brcc	.+12     	; 0x91a <__stack+0x1b>
	return total;
     90e:	82 2f       	mov	r24, r18
     910:	93 2f       	mov	r25, r19
     912:	05 c0       	rjmp	.+10     	; 0x91e <__stack+0x1f>
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_SHUNTVOLTAGE, value)) return 1;
	return ((value[1] << 8) | value[0]);
}
uint16_t INA219_readCurrentReg(){
	uint8_t value[2];
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_CURRENT, value)) return 0;
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0x1f>
	uint16_t total = (value[1] << 8) | value[0];
	if(total>0x8000) return 0x00;  // Remove possibility of corruption with a bug where total is above 0xFFAE with no connected source.
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
	return total;
}
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <INA219_init>:


uint8_t INA219_init(){
	if (INA219_setCalibration_16V_400mA()) {
     928:	0e 94 32 04 	call	0x864	; 0x864 <INA219_setCalibration_16V_400mA>
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	81 11       	cpse	r24, r1
     930:	01 c0       	rjmp	.+2      	; 0x934 <INA219_init+0xc>
     932:	90 e0       	ldi	r25, 0x00	; 0
		INA219_readCalibrationReg();
		INA219_readConfigReg();
		#endif
		return 0;
	}
     934:	89 2f       	mov	r24, r25
     936:	08 95       	ret

00000938 <lora_send_command>:
		//printf("Join result: ");
		//err = lora_receive_response();
	//}
	//else printf("Failed sendint join cmd: %02x\n", err);
	////lora_transmit("deadbeef");
}
     938:	0e 94 10 08 	call	0x1020	; 0x1020 <USART_putstring0>
     93c:	8d e0       	ldi	r24, 0x0D	; 13
     93e:	0e 94 08 08 	call	0x1010	; 0x1010 <USART_transmit0>
     942:	8a e0       	ldi	r24, 0x0A	; 10
     944:	0e 94 08 08 	call	0x1010	; 0x1010 <USART_transmit0>
     948:	08 95       	ret

0000094a <lora_assert_response>:
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	ec 01       	movw	r28, r24
     950:	42 e0       	ldi	r20, 0x02	; 2
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	6f e7       	ldi	r22, 0x7F	; 127
     956:	72 e0       	ldi	r23, 0x02	; 2
     958:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <strncmp>
     95c:	89 2b       	or	r24, r25
     95e:	09 f4       	brne	.+2      	; 0x962 <lora_assert_response+0x18>
     960:	8f c0       	rjmp	.+286    	; 0xa80 <lora_assert_response+0x136>
     962:	48 e0       	ldi	r20, 0x08	; 8
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	6f e6       	ldi	r22, 0x6F	; 111
     968:	72 e0       	ldi	r23, 0x02	; 2
     96a:	ce 01       	movw	r24, r28
     96c:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <strncmp>
     970:	89 2b       	or	r24, r25
     972:	09 f4       	brne	.+2      	; 0x976 <lora_assert_response+0x2c>
     974:	87 c0       	rjmp	.+270    	; 0xa84 <lora_assert_response+0x13a>
     976:	49 e0       	ldi	r20, 0x09	; 9
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	68 e7       	ldi	r22, 0x78	; 120
     97c:	72 e0       	ldi	r23, 0x02	; 2
     97e:	ce 01       	movw	r24, r28
     980:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <strncmp>
     984:	89 2b       	or	r24, r25
     986:	09 f4       	brne	.+2      	; 0x98a <lora_assert_response+0x40>
     988:	7f c0       	rjmp	.+254    	; 0xa88 <lora_assert_response+0x13e>
     98a:	47 e0       	ldi	r20, 0x07	; 7
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	62 e8       	ldi	r22, 0x82	; 130
     990:	72 e0       	ldi	r23, 0x02	; 2
     992:	ce 01       	movw	r24, r28
     994:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <strncmp>
     998:	89 2b       	or	r24, r25
     99a:	39 f4       	brne	.+14     	; 0x9aa <lora_assert_response+0x60>
     99c:	be 01       	movw	r22, r28
     99e:	85 ec       	ldi	r24, 0xC5	; 197
     9a0:	95 e0       	ldi	r25, 0x05	; 5
     9a2:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <strcpy>
     9a6:	81 e1       	ldi	r24, 0x11	; 17
     9a8:	86 c0       	rjmp	.+268    	; 0xab6 <lora_assert_response+0x16c>
     9aa:	46 e0       	ldi	r20, 0x06	; 6
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	6a e8       	ldi	r22, 0x8A	; 138
     9b0:	72 e0       	ldi	r23, 0x02	; 2
     9b2:	ce 01       	movw	r24, r28
     9b4:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <strncmp>
     9b8:	89 2b       	or	r24, r25
     9ba:	09 f4       	brne	.+2      	; 0x9be <lora_assert_response+0x74>
     9bc:	67 c0       	rjmp	.+206    	; 0xa8c <lora_assert_response+0x142>
     9be:	4d e0       	ldi	r20, 0x0D	; 13
     9c0:	50 e0       	ldi	r21, 0x00	; 0
     9c2:	61 e9       	ldi	r22, 0x91	; 145
     9c4:	72 e0       	ldi	r23, 0x02	; 2
     9c6:	ce 01       	movw	r24, r28
     9c8:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <strncmp>
     9cc:	89 2b       	or	r24, r25
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <lora_assert_response+0x88>
     9d0:	5f c0       	rjmp	.+190    	; 0xa90 <lora_assert_response+0x146>
     9d2:	4c e0       	ldi	r20, 0x0C	; 12
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	6f e9       	ldi	r22, 0x9F	; 159
     9d8:	72 e0       	ldi	r23, 0x02	; 2
     9da:	ce 01       	movw	r24, r28
     9dc:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <strncmp>
     9e0:	89 2b       	or	r24, r25
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <lora_assert_response+0x9c>
     9e4:	57 c0       	rjmp	.+174    	; 0xa94 <lora_assert_response+0x14a>
     9e6:	46 e0       	ldi	r20, 0x06	; 6
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	6c ea       	ldi	r22, 0xAC	; 172
     9ec:	72 e0       	ldi	r23, 0x02	; 2
     9ee:	ce 01       	movw	r24, r28
     9f0:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <strncmp>
     9f4:	89 2b       	or	r24, r25
     9f6:	09 f4       	brne	.+2      	; 0x9fa <lora_assert_response+0xb0>
     9f8:	4f c0       	rjmp	.+158    	; 0xa98 <lora_assert_response+0x14e>
     9fa:	44 e0       	ldi	r20, 0x04	; 4
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	63 eb       	ldi	r22, 0xB3	; 179
     a00:	72 e0       	ldi	r23, 0x02	; 2
     a02:	ce 01       	movw	r24, r28
     a04:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <strncmp>
     a08:	89 2b       	or	r24, r25
     a0a:	09 f4       	brne	.+2      	; 0xa0e <lora_assert_response+0xc4>
     a0c:	47 c0       	rjmp	.+142    	; 0xa9c <lora_assert_response+0x152>
     a0e:	4a e0       	ldi	r20, 0x0A	; 10
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	68 eb       	ldi	r22, 0xB8	; 184
     a14:	72 e0       	ldi	r23, 0x02	; 2
     a16:	ce 01       	movw	r24, r28
     a18:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <strncmp>
     a1c:	89 2b       	or	r24, r25
     a1e:	09 f4       	brne	.+2      	; 0xa22 <lora_assert_response+0xd8>
     a20:	3f c0       	rjmp	.+126    	; 0xaa0 <lora_assert_response+0x156>
     a22:	4d e0       	ldi	r20, 0x0D	; 13
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	63 ec       	ldi	r22, 0xC3	; 195
     a28:	72 e0       	ldi	r23, 0x02	; 2
     a2a:	ce 01       	movw	r24, r28
     a2c:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <strncmp>
     a30:	89 2b       	or	r24, r25
     a32:	c1 f1       	breq	.+112    	; 0xaa4 <lora_assert_response+0x15a>
     a34:	4a e0       	ldi	r20, 0x0A	; 10
     a36:	50 e0       	ldi	r21, 0x00	; 0
     a38:	61 ed       	ldi	r22, 0xD1	; 209
     a3a:	72 e0       	ldi	r23, 0x02	; 2
     a3c:	ce 01       	movw	r24, r28
     a3e:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <strncmp>
     a42:	89 2b       	or	r24, r25
     a44:	89 f1       	breq	.+98     	; 0xaa8 <lora_assert_response+0x15e>
     a46:	4f e1       	ldi	r20, 0x1F	; 31
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	6c ed       	ldi	r22, 0xDC	; 220
     a4c:	72 e0       	ldi	r23, 0x02	; 2
     a4e:	ce 01       	movw	r24, r28
     a50:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <strncmp>
     a54:	89 2b       	or	r24, r25
     a56:	51 f1       	breq	.+84     	; 0xaac <lora_assert_response+0x162>
     a58:	40 e1       	ldi	r20, 0x10	; 16
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	6c ef       	ldi	r22, 0xFC	; 252
     a5e:	72 e0       	ldi	r23, 0x02	; 2
     a60:	ce 01       	movw	r24, r28
     a62:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <strncmp>
     a66:	89 2b       	or	r24, r25
     a68:	19 f1       	breq	.+70     	; 0xab0 <lora_assert_response+0x166>
     a6a:	47 e0       	ldi	r20, 0x07	; 7
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	6d e0       	ldi	r22, 0x0D	; 13
     a70:	73 e0       	ldi	r23, 0x03	; 3
     a72:	ce 01       	movw	r24, r28
     a74:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <strncmp>
     a78:	89 2b       	or	r24, r25
     a7a:	e1 f0       	breq	.+56     	; 0xab4 <lora_assert_response+0x16a>
     a7c:	8a ea       	ldi	r24, 0xAA	; 170
     a7e:	1b c0       	rjmp	.+54     	; 0xab6 <lora_assert_response+0x16c>
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	19 c0       	rjmp	.+50     	; 0xab6 <lora_assert_response+0x16c>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	17 c0       	rjmp	.+46     	; 0xab6 <lora_assert_response+0x16c>
     a88:	80 e1       	ldi	r24, 0x10	; 16
     a8a:	15 c0       	rjmp	.+42     	; 0xab6 <lora_assert_response+0x16c>
     a8c:	8a e0       	ldi	r24, 0x0A	; 10
     a8e:	13 c0       	rjmp	.+38     	; 0xab6 <lora_assert_response+0x16c>
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	11 c0       	rjmp	.+34     	; 0xab6 <lora_assert_response+0x16c>
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	0f c0       	rjmp	.+30     	; 0xab6 <lora_assert_response+0x16c>
     a98:	83 e0       	ldi	r24, 0x03	; 3
     a9a:	0d c0       	rjmp	.+26     	; 0xab6 <lora_assert_response+0x16c>
     a9c:	84 e0       	ldi	r24, 0x04	; 4
     a9e:	0b c0       	rjmp	.+22     	; 0xab6 <lora_assert_response+0x16c>
     aa0:	85 e0       	ldi	r24, 0x05	; 5
     aa2:	09 c0       	rjmp	.+18     	; 0xab6 <lora_assert_response+0x16c>
     aa4:	86 e0       	ldi	r24, 0x06	; 6
     aa6:	07 c0       	rjmp	.+14     	; 0xab6 <lora_assert_response+0x16c>
     aa8:	87 e0       	ldi	r24, 0x07	; 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <lora_assert_response+0x16c>
     aac:	88 e0       	ldi	r24, 0x08	; 8
     aae:	03 c0       	rjmp	.+6      	; 0xab6 <lora_assert_response+0x16c>
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <lora_assert_response+0x16c>
     ab4:	8d e0       	ldi	r24, 0x0D	; 13
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	08 95       	ret

00000abc <lora_receive_response>:
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	cd b7       	in	r28, 0x3d	; 61
     aca:	de b7       	in	r29, 0x3e	; 62
     acc:	ca 5f       	subi	r28, 0xFA	; 250
     ace:	d1 09       	sbc	r29, r1
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	ce 01       	movw	r24, r28
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	7c 01       	movw	r14, r24
     ae0:	00 e0       	ldi	r16, 0x00	; 0
     ae2:	10 e0       	ldi	r17, 0x00	; 0
     ae4:	0e 94 00 08 	call	0x1000	; 0x1000 <USART_receive0>
     ae8:	8d 30       	cpi	r24, 0x0D	; 13
     aea:	91 f4       	brne	.+36     	; 0xb10 <lora_receive_response+0x54>
     aec:	0e 94 00 08 	call	0x1000	; 0x1000 <USART_receive0>
     af0:	e1 e0       	ldi	r30, 0x01	; 1
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	ec 0f       	add	r30, r28
     af6:	fd 1f       	adc	r31, r29
     af8:	e0 0f       	add	r30, r16
     afa:	f1 1f       	adc	r31, r17
     afc:	10 82       	st	Z, r1
     afe:	ce 01       	movw	r24, r28
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	0e 94 2e 10 	call	0x205c	; 0x205c <puts>
     b06:	ce 01       	movw	r24, r28
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	0e 94 a5 04 	call	0x94a	; 0x94a <lora_assert_response>
     b0e:	06 c0       	rjmp	.+12     	; 0xb1c <lora_receive_response+0x60>
     b10:	f7 01       	movw	r30, r14
     b12:	81 93       	st	Z+, r24
     b14:	7f 01       	movw	r14, r30
     b16:	0f 5f       	subi	r16, 0xFF	; 255
     b18:	1f 4f       	sbci	r17, 0xFF	; 255
     b1a:	e4 cf       	rjmp	.-56     	; 0xae4 <lora_receive_response+0x28>
     b1c:	c6 50       	subi	r28, 0x06	; 6
     b1e:	df 4f       	sbci	r29, 0xFF	; 255
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ff 90       	pop	r15
     b34:	ef 90       	pop	r14
     b36:	08 95       	ret

00000b38 <lora_join_OTAA>:
     b38:	8f e1       	ldi	r24, 0x1F	; 31
     b3a:	93 e0       	ldi	r25, 0x03	; 3
     b3c:	0e 94 2e 10 	call	0x205c	; 0x205c <puts>
     b40:	8f e2       	ldi	r24, 0x2F	; 47
     b42:	93 e0       	ldi	r25, 0x03	; 3
     b44:	9f 93       	push	r25
     b46:	8f 93       	push	r24
     b48:	0e 94 18 10 	call	0x2030	; 0x2030 <printf>
     b4c:	82 e4       	ldi	r24, 0x42	; 66
     b4e:	93 e0       	ldi	r25, 0x03	; 3
     b50:	0e 94 9c 04 	call	0x938	; 0x938 <lora_send_command>
     b54:	0e 94 5e 05 	call	0xabc	; 0xabc <lora_receive_response>
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	81 11       	cpse	r24, r1
     b5e:	0d c0       	rjmp	.+26     	; 0xb7a <lora_join_OTAA+0x42>
     b60:	80 e5       	ldi	r24, 0x50	; 80
     b62:	93 e0       	ldi	r25, 0x03	; 3
     b64:	9f 93       	push	r25
     b66:	8f 93       	push	r24
     b68:	0e 94 18 10 	call	0x2030	; 0x2030 <printf>
     b6c:	0e 94 5e 05 	call	0xabc	; 0xabc <lora_receive_response>
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	81 11       	cpse	r24, r1
     b76:	03 c0       	rjmp	.+6      	; 0xb7e <lora_join_OTAA+0x46>
     b78:	08 95       	ret
     b7a:	82 e2       	ldi	r24, 0x22	; 34
     b7c:	08 95       	ret
     b7e:	83 e2       	ldi	r24, 0x23	; 35
     b80:	08 95       	ret

00000b82 <lora_init>:



uint8_t lora_init(uint8_t *joined_err){
     b82:	ef 92       	push	r14
     b84:	ff 92       	push	r15
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	e2 97       	sbiw	r28, 0x32	; 50
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
     b9e:	7c 01       	movw	r14, r24

static uint8_t lora_set_dcycle(void);
static uint8_t lora_save_settings(void);

void lora_auto_baud_detect(void){
	DDRD |= (1<<PORTD1);
     ba0:	51 9a       	sbi	0x0a, 1	; 10
	PORTD &= ~(1<<PORTD1);
     ba2:	59 98       	cbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ba4:	8f e1       	ldi	r24, 0x1F	; 31
     ba6:	9e e4       	ldi	r25, 0x4E	; 78
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	f1 f7       	brne	.-4      	; 0xba8 <lora_init+0x26>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <lora_init+0x2c>
     bae:	00 00       	nop
	_delay_ms(10);
	DDRD = 0x00;
     bb0:	1a b8       	out	0x0a, r1	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bb2:	9a e1       	ldi	r25, 0x1A	; 26
     bb4:	9a 95       	dec	r25
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <lora_init+0x32>
     bb8:	00 c0       	rjmp	.+0      	; 0xbba <lora_init+0x38>
	_delay_us(10);
	USART_init();
     bba:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <USART_init>
	USART_transmit0(0x55);
     bbe:	85 e5       	ldi	r24, 0x55	; 85
     bc0:	0e 94 08 08 	call	0x1010	; 0x1010 <USART_transmit0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bc4:	af ef       	ldi	r26, 0xFF	; 255
     bc6:	b0 e7       	ldi	r27, 0x70	; 112
     bc8:	e2 e0       	ldi	r30, 0x02	; 2
     bca:	a1 50       	subi	r26, 0x01	; 1
     bcc:	b0 40       	sbci	r27, 0x00	; 0
     bce:	e0 40       	sbci	r30, 0x00	; 0
     bd0:	e1 f7       	brne	.-8      	; 0xbca <lora_init+0x48>
     bd2:	00 c0       	rjmp	.+0      	; 0xbd4 <lora_init+0x52>
     bd4:	00 00       	nop
	lora_auto_baud_detect();
	uint8_t err = 0;
	
	
	#ifdef DEBUG_M
	puts("Lora init...");
     bd6:	84 e9       	ldi	r24, 0x94	; 148
     bd8:	93 e0       	ldi	r25, 0x03	; 3
     bda:	0e 94 2e 10 	call	0x205c	; 0x205c <puts>

uint8_t lora_reset_to_band(){

	char cmd[20];
	#ifdef LORA_BAND
		sprintf(cmd, "mac reset %d", LORA_BAND);
     bde:	83 e0       	ldi	r24, 0x03	; 3
     be0:	8f 93       	push	r24
     be2:	84 e6       	ldi	r24, 0x64	; 100
     be4:	8f 93       	push	r24
     be6:	81 ea       	ldi	r24, 0xA1	; 161
     be8:	93 e0       	ldi	r25, 0x03	; 3
     bea:	9f 93       	push	r25
     bec:	8f 93       	push	r24
     bee:	8e 01       	movw	r16, r28
     bf0:	0f 5f       	subi	r16, 0xFF	; 255
     bf2:	1f 4f       	sbci	r17, 0xFF	; 255
     bf4:	1f 93       	push	r17
     bf6:	0f 93       	push	r16
     bf8:	0e 94 5e 10 	call	0x20bc	; 0x20bc <sprintf>
	#endif
	
	#ifdef DEBUG_M
		printf("%s: ",cmd);
     bfc:	1f 93       	push	r17
     bfe:	0f 93       	push	r16
     c00:	8e ea       	ldi	r24, 0xAE	; 174
     c02:	93 e0       	ldi	r25, 0x03	; 3
     c04:	9f 93       	push	r25
     c06:	8f 93       	push	r24
     c08:	0e 94 18 10 	call	0x2030	; 0x2030 <printf>
	#endif
	lora_send_command(cmd);
     c0c:	c8 01       	movw	r24, r16
     c0e:	0e 94 9c 04 	call	0x938	; 0x938 <lora_send_command>
	return lora_receive_response();
     c12:	0e 94 5e 05 	call	0xabc	; 0xabc <lora_receive_response>
	#endif	
	


	err = lora_reset_to_band();
	if (err) return 1;
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	81 11       	cpse	r24, r1
     c22:	10 c1       	rjmp	.+544    	; 0xe44 <lora_init+0x2c2>
	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_set_adr(){
	#ifdef DEBUG_M
		printf("Set ADR: ");
     c24:	83 eb       	ldi	r24, 0xB3	; 179
     c26:	93 e0       	ldi	r25, 0x03	; 3
     c28:	9f 93       	push	r25
     c2a:	8f 93       	push	r24
     c2c:	0e 94 18 10 	call	0x2030	; 0x2030 <printf>
	#endif
	
	#ifdef LORA_ADR
		lora_send_command("mac set adr on");
     c30:	8d eb       	ldi	r24, 0xBD	; 189
     c32:	93 e0       	ldi	r25, 0x03	; 3
     c34:	0e 94 9c 04 	call	0x938	; 0x938 <lora_send_command>
	#else
		lora_send_command("mac set adr off");
	#endif
	return lora_receive_response();
     c38:	0e 94 5e 05 	call	0xabc	; 0xabc <lora_receive_response>
	err = lora_reset_to_band();
	if (err) return 1;
	
		
	err = lora_set_adr() ;
	if (err) return 2;
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	81 11       	cpse	r24, r1
     c42:	02 c1       	rjmp	.+516    	; 0xe48 <lora_init+0x2c6>
	return lora_receive_response();
}
uint8_t lora_set_dr(){

	char cmd[20];
	sprintf(cmd, "mac set dr %d",LORA_DR);
     c44:	1f 92       	push	r1
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	8f 93       	push	r24
     c4a:	8c ec       	ldi	r24, 0xCC	; 204
     c4c:	93 e0       	ldi	r25, 0x03	; 3
     c4e:	9f 93       	push	r25
     c50:	8f 93       	push	r24
     c52:	1f 93       	push	r17
     c54:	0f 93       	push	r16
     c56:	0e 94 5e 10 	call	0x20bc	; 0x20bc <sprintf>
	
	#ifdef DEBUG_M
		printf("%s: ",cmd);
     c5a:	1f 93       	push	r17
     c5c:	0f 93       	push	r16
     c5e:	8e ea       	ldi	r24, 0xAE	; 174
     c60:	93 e0       	ldi	r25, 0x03	; 3
     c62:	9f 93       	push	r25
     c64:	8f 93       	push	r24
     c66:	0e 94 18 10 	call	0x2030	; 0x2030 <printf>
	#endif
	lora_send_command(cmd);
     c6a:	c8 01       	movw	r24, r16
     c6c:	0e 94 9c 04 	call	0x938	; 0x938 <lora_send_command>
	return lora_receive_response();
     c70:	0e 94 5e 05 	call	0xabc	; 0xabc <lora_receive_response>
	err = lora_set_adr() ;
	if (err) return 2;
	
		
	err = lora_set_dr();
	if (err) return 3;
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	81 11       	cpse	r24, r1
     c80:	e5 c0       	rjmp	.+458    	; 0xe4c <lora_init+0x2ca>
}
uint8_t lora_set_pwridx(){
	
	char cmd[20];
	#ifdef LORA_PWRIDX
	sprintf(cmd, "mac set pwridx %d",LORA_PWRIDX);
     c82:	1f 92       	push	r1
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8f 93       	push	r24
     c88:	8a ed       	ldi	r24, 0xDA	; 218
     c8a:	93 e0       	ldi	r25, 0x03	; 3
     c8c:	9f 93       	push	r25
     c8e:	8f 93       	push	r24
     c90:	1f 93       	push	r17
     c92:	0f 93       	push	r16
     c94:	0e 94 5e 10 	call	0x20bc	; 0x20bc <sprintf>
	#endif
	#ifdef DEBUG_M
		printf("%s: ",cmd);
     c98:	1f 93       	push	r17
     c9a:	0f 93       	push	r16
     c9c:	8e ea       	ldi	r24, 0xAE	; 174
     c9e:	93 e0       	ldi	r25, 0x03	; 3
     ca0:	9f 93       	push	r25
     ca2:	8f 93       	push	r24
     ca4:	0e 94 18 10 	call	0x2030	; 0x2030 <printf>
	#endif
	lora_send_command(cmd);
     ca8:	c8 01       	movw	r24, r16
     caa:	0e 94 9c 04 	call	0x938	; 0x938 <lora_send_command>
	return lora_receive_response();
     cae:	0e 94 5e 05 	call	0xabc	; 0xabc <lora_receive_response>
	err = lora_set_dr();
	if (err) return 3;
	
	
	err = lora_set_pwridx();
	if (err) return 4;
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	cd bf       	out	0x3d, r28	; 61
     cbc:	81 11       	cpse	r24, r1
     cbe:	c8 c0       	rjmp	.+400    	; 0xe50 <lora_init+0x2ce>
}

uint8_t lora_set_dcycle(void){
	uint8_t err;
	#ifdef DEBUG_M
		printf("Setting dcycle for ch 0: ");
     cc0:	8c ee       	ldi	r24, 0xEC	; 236
     cc2:	93 e0       	ldi	r25, 0x03	; 3
     cc4:	9f 93       	push	r25
     cc6:	8f 93       	push	r24
     cc8:	0e 94 18 10 	call	0x2030	; 0x2030 <printf>
	#endif
	lora_send_command("mac set ch dcycle 0 9");
     ccc:	86 e0       	ldi	r24, 0x06	; 6
     cce:	94 e0       	ldi	r25, 0x04	; 4
     cd0:	0e 94 9c 04 	call	0x938	; 0x938 <lora_send_command>
	err = lora_receive_response();
     cd4:	0e 94 5e 05 	call	0xabc	; 0xabc <lora_receive_response>
	if (err) return 0xB1;
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	81 11       	cpse	r24, r1
     cde:	1e c0       	rjmp	.+60     	; 0xd1c <lora_init+0x19a>
	
	#ifdef DEBUG_M
	printf("Setting dcycle for ch 1: ");
     ce0:	8c e1       	ldi	r24, 0x1C	; 28
     ce2:	94 e0       	ldi	r25, 0x04	; 4
     ce4:	9f 93       	push	r25
     ce6:	8f 93       	push	r24
     ce8:	0e 94 18 10 	call	0x2030	; 0x2030 <printf>
	#endif
	lora_send_command("mac set ch dcycle 1 9");
     cec:	86 e3       	ldi	r24, 0x36	; 54
     cee:	94 e0       	ldi	r25, 0x04	; 4
     cf0:	0e 94 9c 04 	call	0x938	; 0x938 <lora_send_command>
	err = lora_receive_response();
     cf4:	0e 94 5e 05 	call	0xabc	; 0xabc <lora_receive_response>
	if (err) return 0xB2;
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	81 11       	cpse	r24, r1
     cfe:	0e c0       	rjmp	.+28     	; 0xd1c <lora_init+0x19a>
	
	#ifdef DEBUG_M
	printf("Setting dcycle for ch 2: ");
     d00:	8c e4       	ldi	r24, 0x4C	; 76
     d02:	94 e0       	ldi	r25, 0x04	; 4
     d04:	9f 93       	push	r25
     d06:	8f 93       	push	r24
     d08:	0e 94 18 10 	call	0x2030	; 0x2030 <printf>
	#endif
	lora_send_command("mac set ch dcycle 2 9");
     d0c:	86 e6       	ldi	r24, 0x66	; 102
     d0e:	94 e0       	ldi	r25, 0x04	; 4
     d10:	0e 94 9c 04 	call	0x938	; 0x938 <lora_send_command>
	err = lora_receive_response();
     d14:	0e 94 5e 05 	call	0xabc	; 0xabc <lora_receive_response>
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_set_OTAA_settings(uint8_t *joined_err){
	#ifdef DEBUG_M
		puts("Loading OTAA settings...");
     d1c:	8c e7       	ldi	r24, 0x7C	; 124
     d1e:	94 e0       	ldi	r25, 0x04	; 4
     d20:	0e 94 2e 10 	call	0x205c	; 0x205c <puts>
#endif

uint8_t lora_set_deveui(){

	
	char cmd[50] = "mac set deveui ";
     d24:	80 e1       	ldi	r24, 0x10	; 16
     d26:	e4 e1       	ldi	r30, 0x14	; 20
     d28:	f1 e0       	ldi	r31, 0x01	; 1
     d2a:	8e 01       	movw	r16, r28
     d2c:	0f 5f       	subi	r16, 0xFF	; 255
     d2e:	1f 4f       	sbci	r17, 0xFF	; 255
     d30:	d8 01       	movw	r26, r16
     d32:	01 90       	ld	r0, Z+
     d34:	0d 92       	st	X+, r0
     d36:	8a 95       	dec	r24
     d38:	e1 f7       	brne	.-8      	; 0xd32 <lora_init+0x1b0>
     d3a:	fe 01       	movw	r30, r28
     d3c:	71 96       	adiw	r30, 0x11	; 17
     d3e:	82 e2       	ldi	r24, 0x22	; 34
     d40:	df 01       	movw	r26, r30
     d42:	1d 92       	st	X+, r1
     d44:	8a 95       	dec	r24
     d46:	e9 f7       	brne	.-6      	; 0xd42 <lora_init+0x1c0>
	strcat(cmd, devEui);
     d48:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <devEui>
     d4c:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <devEui+0x1>
     d50:	c8 01       	movw	r24, r16
     d52:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <strcat>
	
	#ifdef DEBUG_M
		printf("%s:  ", cmd);
     d56:	1f 93       	push	r17
     d58:	0f 93       	push	r16
     d5a:	85 e9       	ldi	r24, 0x95	; 149
     d5c:	94 e0       	ldi	r25, 0x04	; 4
     d5e:	9f 93       	push	r25
     d60:	8f 93       	push	r24
     d62:	0e 94 18 10 	call	0x2030	; 0x2030 <printf>
	#endif
	lora_send_command(cmd);
     d66:	c8 01       	movw	r24, r16
     d68:	0e 94 9c 04 	call	0x938	; 0x938 <lora_send_command>
	return lora_receive_response();
     d6c:	0e 94 5e 05 	call	0xabc	; 0xabc <lora_receive_response>
		puts("Loading OTAA settings...");
	#endif
	uint8_t err = 0;
	
	err = lora_set_deveui();
	if (err) return 7;
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	81 11       	cpse	r24, r1
     d7a:	6c c0       	rjmp	.+216    	; 0xe54 <lora_init+0x2d2>
	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_set_appeui(){
	#ifdef DEBUG_M
		printf("Set appeui: ");
     d7c:	8b e9       	ldi	r24, 0x9B	; 155
     d7e:	94 e0       	ldi	r25, 0x04	; 4
     d80:	9f 93       	push	r25
     d82:	8f 93       	push	r24
     d84:	0e 94 18 10 	call	0x2030	; 0x2030 <printf>
	#endif	
	
	char cmd[50] = "mac set appeui ";
     d88:	80 e1       	ldi	r24, 0x10	; 16
     d8a:	e6 e4       	ldi	r30, 0x46	; 70
     d8c:	f1 e0       	ldi	r31, 0x01	; 1
     d8e:	d8 01       	movw	r26, r16
     d90:	01 90       	ld	r0, Z+
     d92:	0d 92       	st	X+, r0
     d94:	8a 95       	dec	r24
     d96:	e1 f7       	brne	.-8      	; 0xd90 <lora_init+0x20e>
     d98:	fe 01       	movw	r30, r28
     d9a:	71 96       	adiw	r30, 0x11	; 17
     d9c:	82 e2       	ldi	r24, 0x22	; 34
     d9e:	df 01       	movw	r26, r30
     da0:	1d 92       	st	X+, r1
     da2:	8a 95       	dec	r24
     da4:	e9 f7       	brne	.-6      	; 0xda0 <lora_init+0x21e>
 	strcat(cmd, appEui);
     da6:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <appEui>
     daa:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <appEui+0x1>
     dae:	c8 01       	movw	r24, r16
     db0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <strcat>
 	lora_send_command(cmd);
     db4:	c8 01       	movw	r24, r16
     db6:	0e 94 9c 04 	call	0x938	; 0x938 <lora_send_command>
	return lora_receive_response();
     dba:	0e 94 5e 05 	call	0xabc	; 0xabc <lora_receive_response>
	
	err = lora_set_deveui();
	if (err) return 7;
		
	err = lora_set_appeui();
	if (err) return 8;
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	81 11       	cpse	r24, r1
     dc4:	47 c0       	rjmp	.+142    	; 0xe54 <lora_init+0x2d2>
 	strcat(cmd, appEui);
 	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_set_appkey(){
	char cmd[50] = "mac set appkey ";
     dc6:	80 e1       	ldi	r24, 0x10	; 16
     dc8:	e8 e7       	ldi	r30, 0x78	; 120
     dca:	f1 e0       	ldi	r31, 0x01	; 1
     dcc:	d8 01       	movw	r26, r16
     dce:	01 90       	ld	r0, Z+
     dd0:	0d 92       	st	X+, r0
     dd2:	8a 95       	dec	r24
     dd4:	e1 f7       	brne	.-8      	; 0xdce <lora_init+0x24c>
     dd6:	fe 01       	movw	r30, r28
     dd8:	71 96       	adiw	r30, 0x11	; 17
     dda:	82 e2       	ldi	r24, 0x22	; 34
     ddc:	df 01       	movw	r26, r30
     dde:	1d 92       	st	X+, r1
     de0:	8a 95       	dec	r24
     de2:	e9 f7       	brne	.-6      	; 0xdde <lora_init+0x25c>
	strcat(cmd, appKey);
     de4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     de8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     dec:	c8 01       	movw	r24, r16
     dee:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <strcat>
	#ifdef DEBUG_M
		printf("mac set appkey ****: ");
     df2:	88 ea       	ldi	r24, 0xA8	; 168
     df4:	94 e0       	ldi	r25, 0x04	; 4
     df6:	9f 93       	push	r25
     df8:	8f 93       	push	r24
     dfa:	0e 94 18 10 	call	0x2030	; 0x2030 <printf>
	#endif
	lora_send_command(cmd);
     dfe:	c8 01       	movw	r24, r16
     e00:	0e 94 9c 04 	call	0x938	; 0x938 <lora_send_command>
	return lora_receive_response();
     e04:	0e 94 5e 05 	call	0xabc	; 0xabc <lora_receive_response>
		
	err = lora_set_appeui();
	if (err) return 8;
			
	err = lora_set_appkey();
	if (err) return 9;
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	81 11       	cpse	r24, r1
     e0e:	22 c0       	rjmp	.+68     	; 0xe54 <lora_init+0x2d2>
	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_save_settings(){
	#ifdef DEBUG_M
		printf("Save settings: ");
     e10:	8e eb       	ldi	r24, 0xBE	; 190
     e12:	94 e0       	ldi	r25, 0x04	; 4
     e14:	9f 93       	push	r25
     e16:	8f 93       	push	r24
     e18:	0e 94 18 10 	call	0x2030	; 0x2030 <printf>
	#endif
	
	lora_send_command("mac save");
     e1c:	8e ec       	ldi	r24, 0xCE	; 206
     e1e:	94 e0       	ldi	r25, 0x04	; 4
     e20:	0e 94 9c 04 	call	0x938	; 0x938 <lora_send_command>
	return lora_receive_response();
     e24:	0e 94 5e 05 	call	0xabc	; 0xabc <lora_receive_response>
     e28:	18 2f       	mov	r17, r24
			
	err = lora_set_appkey();
	if (err) return 9;

	err = lora_save_settings();
	if (err) return 10;
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	81 11       	cpse	r24, r1
     e30:	11 c0       	rjmp	.+34     	; 0xe54 <lora_init+0x2d2>
	
	*joined_err = lora_join_OTAA();
     e32:	0e 94 9c 05 	call	0xb38	; 0xb38 <lora_join_OTAA>
     e36:	f7 01       	movw	r30, r14
     e38:	80 83       	st	Z, r24
		if (err) return 6;
	#endif
	
	
	#ifdef DEBUG_M
	puts("Init success");
     e3a:	87 ed       	ldi	r24, 0xD7	; 215
     e3c:	94 e0       	ldi	r25, 0x04	; 4
     e3e:	0e 94 2e 10 	call	0x205c	; 0x205c <puts>
	#endif
	
	return 0;
     e42:	09 c0       	rjmp	.+18     	; 0xe56 <lora_init+0x2d4>
	#endif	
	


	err = lora_reset_to_band();
	if (err) return 1;
     e44:	11 e0       	ldi	r17, 0x01	; 1
     e46:	07 c0       	rjmp	.+14     	; 0xe56 <lora_init+0x2d4>
	
		
	err = lora_set_adr() ;
	if (err) return 2;
     e48:	12 e0       	ldi	r17, 0x02	; 2
     e4a:	05 c0       	rjmp	.+10     	; 0xe56 <lora_init+0x2d4>
	
		
	err = lora_set_dr();
	if (err) return 3;
     e4c:	13 e0       	ldi	r17, 0x03	; 3
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <lora_init+0x2d4>
	
	
	err = lora_set_pwridx();
	if (err) return 4;
     e50:	14 e0       	ldi	r17, 0x04	; 4
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <lora_init+0x2d4>
	lora_set_dcycle();
// 	lora_send_command("mac set ch dcycle 0 9");
// 	lora_receive_response();
	#ifdef OTAA
		err = lora_set_OTAA_settings(joined_err);
		if (err) return 5;	
     e54:	15 e0       	ldi	r17, 0x05	; 5
	puts("Init success");
	#endif
	
	return 0;

}
     e56:	81 2f       	mov	r24, r17
     e58:	e2 96       	adiw	r28, 0x32	; 50
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	08 95       	ret

00000e72 <lora_assert_downlink>:

void lora_assert_downlink(){
	static int count = 0;
	uint32_t ts = 0;
	uint16_t sample_size_new;
	size_t str_len = strlen(downlink);
     e72:	e5 ec       	ldi	r30, 0xC5	; 197
     e74:	f5 e0       	ldi	r31, 0x05	; 5
     e76:	01 90       	ld	r0, Z+
     e78:	00 20       	and	r0, r0
     e7a:	e9 f7       	brne	.-6      	; 0xe76 <lora_assert_downlink+0x4>
     e7c:	31 97       	sbiw	r30, 0x01	; 1
     e7e:	bf 01       	movw	r22, r30
     e80:	65 5c       	subi	r22, 0xC5	; 197
     e82:	75 40       	sbci	r23, 0x05	; 5
	//printf("len %d\n", str_len);
	if (str_len > 28) ascii_hex_decode(downlink, str_len, downlink_pairs, LORA_RX_PAYLOAD_OFFSET);
     e84:	6d 31       	cpi	r22, 0x1D	; 29
     e86:	71 05       	cpc	r23, r1
     e88:	48 f0       	brcs	.+18     	; 0xe9c <lora_assert_downlink+0x2a>
     e8a:	29 e0       	ldi	r18, 0x09	; 9
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	49 e2       	ldi	r20, 0x29	; 41
     e90:	56 e0       	ldi	r21, 0x06	; 6
     e92:	85 ec       	ldi	r24, 0xC5	; 197
     e94:	95 e0       	ldi	r25, 0x05	; 5
     e96:	0e 94 80 08 	call	0x1100	; 0x1100 <ascii_hex_decode>
     e9a:	08 c0       	rjmp	.+16     	; 0xeac <lora_assert_downlink+0x3a>
	else hex_decode(downlink, str_len, downlink_pairs, LORA_RX_PAYLOAD_OFFSET);
     e9c:	29 e0       	ldi	r18, 0x09	; 9
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	49 e2       	ldi	r20, 0x29	; 41
     ea2:	56 e0       	ldi	r21, 0x06	; 6
     ea4:	85 ec       	ldi	r24, 0xC5	; 197
     ea6:	95 e0       	ldi	r25, 0x05	; 5
     ea8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <hex_decode>
	//printf("pairs: %02x %02x %02x %02x %02x\n", downlink_pairs[0], downlink_pairs[1], downlink_pairs[2], downlink_pairs[3], downlink_pairs[4]);
	switch (downlink_pairs[0]){
     eac:	80 91 29 06 	lds	r24, 0x0629	; 0x800629 <downlink_pairs>
     eb0:	80 3b       	cpi	r24, 0xB0	; 176
     eb2:	29 f1       	breq	.+74     	; 0xefe <lora_assert_downlink+0x8c>
     eb4:	80 3c       	cpi	r24, 0xC0	; 192
     eb6:	81 f1       	breq	.+96     	; 0xf18 <lora_assert_downlink+0xa6>
     eb8:	8a 30       	cpi	r24, 0x0A	; 10
     eba:	81 f5       	brne	.+96     	; 0xf1c <lora_assert_downlink+0xaa>
		case 0x0a:
			ts = (uint32_t)downlink_pairs[4] | ((uint32_t)downlink_pairs[3] << 8) | ((uint32_t)downlink_pairs[2] << 16) | ((uint32_t)downlink_pairs[1] << 24);
     ebc:	e9 e2       	ldi	r30, 0x29	; 41
     ebe:	f6 e0       	ldi	r31, 0x06	; 6
     ec0:	23 81       	ldd	r18, Z+3	; 0x03
     ec2:	82 81       	ldd	r24, Z+2	; 0x02
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	a0 e0       	ldi	r26, 0x00	; 0
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	dc 01       	movw	r26, r24
     ecc:	99 27       	eor	r25, r25
     ece:	88 27       	eor	r24, r24
     ed0:	92 2b       	or	r25, r18
     ed2:	24 81       	ldd	r18, Z+4	; 0x04
     ed4:	82 2b       	or	r24, r18
     ed6:	21 81       	ldd	r18, Z+1	; 0x01
     ed8:	b2 2b       	or	r27, r18
			current_time = ts;
     eda:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <current_time>
     ede:	90 93 c0 05 	sts	0x05C0, r25	; 0x8005c0 <current_time+0x1>
     ee2:	a0 93 c1 05 	sts	0x05C1, r26	; 0x8005c1 <current_time+0x2>
     ee6:	b0 93 c2 05 	sts	0x05C2, r27	; 0x8005c2 <current_time+0x3>
			count ++;
     eea:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <count.2463>
     eee:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <count.2463+0x1>
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	90 93 8c 05 	sts	0x058C, r25	; 0x80058c <count.2463+0x1>
     ef8:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <count.2463>
			break;
     efc:	08 95       	ret
		case 0xb0:
			
			sample_size_new = (uint16_t)downlink_pairs[2] | ((uint16_t)downlink_pairs[1] << 8);
     efe:	e9 e2       	ldi	r30, 0x29	; 41
     f00:	f6 e0       	ldi	r31, 0x06	; 6
			sample_size = sample_size_new;
     f02:	81 81       	ldd	r24, Z+1	; 0x01
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	98 2f       	mov	r25, r24
     f08:	88 27       	eor	r24, r24
     f0a:	22 81       	ldd	r18, Z+2	; 0x02
     f0c:	82 2b       	or	r24, r18
     f0e:	90 93 c4 05 	sts	0x05C4, r25	; 0x8005c4 <sample_size+0x1>
     f12:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <sample_size>
			//printf("Transfer rate change with new: %u\n", sample_size);
			break;
     f16:	08 95       	ret
			
		case 0xc0:
			FSM_system_reset();
     f18:	0e 94 af 01 	call	0x35e	; 0x35e <FSM_system_reset>
     f1c:	08 95       	ret

00000f1e <lora_transmit>:
	#endif
	
	return 0;

}
void lora_transmit(const char *payload){
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	c4 56       	subi	r28, 0x64	; 100
     f28:	d1 09       	sbc	r29, r1
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	bc 01       	movw	r22, r24
	uint8_t err;
	char buf[100] = "mac tx uncnf 3 ";
     f36:	90 e1       	ldi	r25, 0x10	; 16
     f38:	ea ea       	ldi	r30, 0xAA	; 170
     f3a:	f1 e0       	ldi	r31, 0x01	; 1
     f3c:	de 01       	movw	r26, r28
     f3e:	11 96       	adiw	r26, 0x01	; 1
     f40:	01 90       	ld	r0, Z+
     f42:	0d 92       	st	X+, r0
     f44:	9a 95       	dec	r25
     f46:	e1 f7       	brne	.-8      	; 0xf40 <lora_transmit+0x22>
     f48:	fe 01       	movw	r30, r28
     f4a:	71 96       	adiw	r30, 0x11	; 17
     f4c:	84 e5       	ldi	r24, 0x54	; 84
     f4e:	df 01       	movw	r26, r30
     f50:	1d 92       	st	X+, r1
     f52:	8a 95       	dec	r24
     f54:	e9 f7       	brne	.-6      	; 0xf50 <lora_transmit+0x32>
	strcat(buf, payload);
     f56:	ce 01       	movw	r24, r28
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <strcat>

	lora_send_command(buf);
     f5e:	ce 01       	movw	r24, r28
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	0e 94 9c 04 	call	0x938	; 0x938 <lora_send_command>
	err = lora_receive_response();
     f66:	0e 94 5e 05 	call	0xabc	; 0xabc <lora_receive_response>
	if (!err){
     f6a:	81 11       	cpse	r24, r1
     f6c:	08 c0       	rjmp	.+16     	; 0xf7e <lora_transmit+0x60>
		clear_bit(LEDS,LED3);
     f6e:	2a 98       	cbi	0x05, 2	; 5
		err = lora_receive_response();
     f70:	0e 94 5e 05 	call	0xabc	; 0xabc <lora_receive_response>
		if(err == RESP_MAC_RX_INC){
     f74:	81 31       	cpi	r24, 0x11	; 17
     f76:	21 f4       	brne	.+8      	; 0xf80 <lora_transmit+0x62>
			lora_assert_downlink();
     f78:	0e 94 39 07 	call	0xe72	; 0xe72 <lora_assert_downlink>
     f7c:	01 c0       	rjmp	.+2      	; 0xf80 <lora_transmit+0x62>
		}
	}
	else set_bit(LEDS,LED3);
     f7e:	2a 9a       	sbi	0x05, 2	; 5
}
     f80:	cc 59       	subi	r28, 0x9C	; 156
     f82:	df 4f       	sbci	r29, 0xFF	; 255
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	08 95       	ret

00000f94 <USART_transmit2>:
	for(; *string; ++string){
		USART_transmit2(*string);
	}
	//USART_transmit2(0x0D);
	USART_transmit2(0x0A);
}
     f94:	e0 ed       	ldi	r30, 0xD0	; 208
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	90 81       	ld	r25, Z
     f9a:	95 ff       	sbrs	r25, 5
     f9c:	fd cf       	rjmp	.-6      	; 0xf98 <USART_transmit2+0x4>
     f9e:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
     fa2:	08 95       	ret

00000fa4 <USART_TRANSMIT_printf>:
     fa4:	cf 93       	push	r28
     fa6:	c8 2f       	mov	r28, r24
     fa8:	8a 30       	cpi	r24, 0x0A	; 10
     faa:	19 f4       	brne	.+6      	; 0xfb2 <USART_TRANSMIT_printf+0xe>
     fac:	8d e0       	ldi	r24, 0x0D	; 13
     fae:	0e 94 ca 07 	call	0xf94	; 0xf94 <USART_transmit2>
     fb2:	8c 2f       	mov	r24, r28
     fb4:	0e 94 ca 07 	call	0xf94	; 0xf94 <USART_transmit2>
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	cf 91       	pop	r28
     fbe:	08 95       	ret

00000fc0 <USART_init>:
     fc0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     fc4:	93 e3       	ldi	r25, 0x33	; 51
     fc6:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     fca:	88 e1       	ldi	r24, 0x18	; 24
     fcc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     fd0:	e2 ec       	ldi	r30, 0xC2	; 194
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	86 60       	ori	r24, 0x06	; 6
     fd8:	80 83       	st	Z, r24
     fda:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7e00d5>
     fde:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7e00d4>
     fe2:	88 e9       	ldi	r24, 0x98	; 152
     fe4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
     fe8:	e2 ed       	ldi	r30, 0xD2	; 210
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	86 60       	ori	r24, 0x06	; 6
     ff0:	80 83       	st	Z, r24
     ff2:	86 e0       	ldi	r24, 0x06	; 6
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	90 93 92 06 	sts	0x0692, r25	; 0x800692 <__iob+0x3>
     ffa:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <__iob+0x2>
     ffe:	08 95       	ret

00001000 <USART_receive0>:
    1000:	e0 ec       	ldi	r30, 0xC0	; 192
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	88 23       	and	r24, r24
    1008:	ec f7       	brge	.-6      	; 0x1004 <USART_receive0+0x4>
    100a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    100e:	08 95       	ret

00001010 <USART_transmit0>:
    1010:	e0 ec       	ldi	r30, 0xC0	; 192
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	90 81       	ld	r25, Z
    1016:	95 ff       	sbrs	r25, 5
    1018:	fd cf       	rjmp	.-6      	; 0x1014 <USART_transmit0+0x4>
    101a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    101e:	08 95       	ret

00001020 <USART_putstring0>:
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	ec 01       	movw	r28, r24
    1026:	88 81       	ld	r24, Y
    1028:	88 23       	and	r24, r24
    102a:	31 f0       	breq	.+12     	; 0x1038 <USART_putstring0+0x18>
    102c:	21 96       	adiw	r28, 0x01	; 1
    102e:	0e 94 08 08 	call	0x1010	; 0x1010 <USART_transmit0>
    1032:	89 91       	ld	r24, Y+
    1034:	81 11       	cpse	r24, r1
    1036:	fb cf       	rjmp	.-10     	; 0x102e <USART_putstring0+0xe>
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <USART_receive2>:
    103e:	e0 ed       	ldi	r30, 0xD0	; 208
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	88 23       	and	r24, r24
    1046:	ec f7       	brge	.-6      	; 0x1042 <USART_receive2+0x4>
    1048:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
    104c:	08 95       	ret

0000104e <USART_receiveString2>:

char * USART_receiveString2(void){
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	0d e8       	ldi	r16, 0x8D	; 141
    1058:	15 e0       	ldi	r17, 0x05	; 5
	//char rx_buf[250];
	unsigned char rec = 0;
	int i = 0;
    105a:	c0 e0       	ldi	r28, 0x00	; 0
    105c:	d0 e0       	ldi	r29, 0x00	; 0
	while (1){
		rec = USART_receive2();
    105e:	0e 94 1f 08 	call	0x103e	; 0x103e <USART_receive2>
		if (rec == 0x0A){
    1062:	8a 30       	cpi	r24, 0x0A	; 10
    1064:	29 f0       	breq	.+10     	; 0x1070 <USART_receiveString2+0x22>
			rx_buf[i] = '\0';
			break;
		}
		rx_buf[i] = rec;
    1066:	f8 01       	movw	r30, r16
    1068:	81 93       	st	Z+, r24
    106a:	8f 01       	movw	r16, r30
		i++;
    106c:	21 96       	adiw	r28, 0x01	; 1
	}
    106e:	f7 cf       	rjmp	.-18     	; 0x105e <USART_receiveString2+0x10>
	unsigned char rec = 0;
	int i = 0;
	while (1){
		rec = USART_receive2();
		if (rec == 0x0A){
			rx_buf[i] = '\0';
    1070:	c3 57       	subi	r28, 0x73	; 115
    1072:	da 4f       	sbci	r29, 0xFA	; 250
    1074:	18 82       	st	Y, r1
			break;
		}
		rx_buf[i] = rec;
		i++;
	}
	puts(rx_buf);
    1076:	8d e8       	ldi	r24, 0x8D	; 141
    1078:	95 e0       	ldi	r25, 0x05	; 5
    107a:	0e 94 2e 10 	call	0x205c	; 0x205c <puts>
	return &rx_buf[0];
}
    107e:	8d e8       	ldi	r24, 0x8D	; 141
    1080:	95 e0       	ldi	r25, 0x05	; 5
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	08 95       	ret

0000108c <timers_init>:
		OCR1A = 31250;
		TIMSK1 |= (1 << OCIE1A);
	#endif

	#ifdef TIMER2
		TIMSK2 = 0;
    108c:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		ASSR = 0b00100000;
    1090:	80 e2       	ldi	r24, 0x20	; 32
    1092:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
    1096:	2f ef       	ldi	r18, 0xFF	; 255
    1098:	89 e6       	ldi	r24, 0x69	; 105
    109a:	98 e1       	ldi	r25, 0x18	; 24
    109c:	21 50       	subi	r18, 0x01	; 1
    109e:	80 40       	sbci	r24, 0x00	; 0
    10a0:	90 40       	sbci	r25, 0x00	; 0
    10a2:	e1 f7       	brne	.-8      	; 0x109c <timers_init+0x10>
    10a4:	00 c0       	rjmp	.+0      	; 0x10a6 <timers_init+0x1a>
    10a6:	00 00       	nop
		_delay_ms(1000);
		TCCR2A = 0b00000000;
    10a8:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		TCCR2B = 0b00000101;
    10ac:	85 e0       	ldi	r24, 0x05	; 5
    10ae:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		//Synchronize registers
		while (ASSR & ( (1 << TCN2UB) | (1 << TCR2AUB) | (1 << TCR2BUB) )) ;
    10b2:	e6 eb       	ldi	r30, 0xB6	; 182
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	83 71       	andi	r24, 0x13	; 19
    10ba:	e9 f7       	brne	.-6      	; 0x10b6 <timers_init+0x2a>
		TIFR2 = 0; //Clear interrupt flags
    10bc:	17 ba       	out	0x17, r1	; 23
		TIMSK2 = (1 << TOIE2); //Enable overflow interrupt
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    10c4:	08 95       	ret

000010c6 <enter_powerSave>:
}


void enter_powerSave(){
	#ifdef USART2_START_COND_INTERRUPT
	UCSR2D |= (1<<SFDE) | (0<<RXSIE);			// Enable start condition detection with interrupt on RXCIE
    10c6:	e3 ed       	ldi	r30, 0xD3	; 211
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	80 62       	ori	r24, 0x20	; 32
    10ce:	80 83       	st	Z, r24
	#endif
	
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
    10d0:	83 b7       	in	r24, 0x33	; 51
    10d2:	81 7f       	andi	r24, 0xF1	; 241
    10d4:	86 60       	ori	r24, 0x06	; 6
    10d6:	83 bf       	out	0x33, r24	; 51
	sleep_mode();
    10d8:	83 b7       	in	r24, 0x33	; 51
    10da:	81 60       	ori	r24, 0x01	; 1
    10dc:	83 bf       	out	0x33, r24	; 51
    10de:	88 95       	sleep
    10e0:	83 b7       	in	r24, 0x33	; 51
    10e2:	8e 7f       	andi	r24, 0xFE	; 254
    10e4:	83 bf       	out	0x33, r24	; 51
    10e6:	2f e7       	ldi	r18, 0x7F	; 127
    10e8:	85 eb       	ldi	r24, 0xB5	; 181
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	21 50       	subi	r18, 0x01	; 1
    10ee:	80 40       	sbci	r24, 0x00	; 0
    10f0:	90 40       	sbci	r25, 0x00	; 0
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <enter_powerSave+0x26>
    10f4:	00 c0       	rjmp	.+0      	; 0x10f6 <enter_powerSave+0x30>
    10f6:	00 00       	nop
	_delay_ms(70);
	
	#ifdef USART2_START_COND_INTERRUPT
	UCSR2D &= ~(1<<SFDE);						// Disable start condition detection while awake.
    10f8:	80 81       	ld	r24, Z
    10fa:	8f 7d       	andi	r24, 0xDF	; 223
    10fc:	80 83       	st	Z, r24
    10fe:	08 95       	ret

00001100 <ascii_hex_decode>:
#include "USART.h"
#include <math.h>
#include <string.h>
//const char* test2 = "6363 3131 3535 6262 6666"; = "cc 11 55 bb ff" = "204 17 85 187 255"
//const char* test = "3565623838383532";
void ascii_hex_decode(const char *in, size_t len, uint8_t *out, int start){
    1100:	ef 92       	push	r14
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	e2 97       	sbiw	r28, 0x32	; 50
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	dc 01       	movw	r26, r24
    111e:	79 01       	movw	r14, r18
	char buf[50];
	uint8_t i, t, j, h, hn, ln, p1, p2;
	for (t = 0, i = start; i<len; i+=2, t++){
    1120:	32 2f       	mov	r19, r18
    1122:	f7 01       	movw	r30, r14
    1124:	ff 27       	eor	r31, r31
    1126:	e6 17       	cp	r30, r22
    1128:	f7 07       	cpc	r31, r23
    112a:	c8 f4       	brcc	.+50     	; 0x115e <ascii_hex_decode+0x5e>
    112c:	80 e0       	ldi	r24, 0x00	; 0
		p1 = ((uint8_t)(in[i]) - '0')*16;
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
    112e:	01 e0       	ldi	r16, 0x01	; 1
    1130:	10 e0       	ldi	r17, 0x00	; 0
    1132:	0c 0f       	add	r16, r28
    1134:	1d 1f       	adc	r17, r29
    1136:	08 0f       	add	r16, r24
    1138:	11 1d       	adc	r17, r1
//const char* test = "3565623838383532";
void ascii_hex_decode(const char *in, size_t len, uint8_t *out, int start){
	char buf[50];
	uint8_t i, t, j, h, hn, ln, p1, p2;
	for (t = 0, i = start; i<len; i+=2, t++){
		p1 = ((uint8_t)(in[i]) - '0')*16;
    113a:	ea 0f       	add	r30, r26
    113c:	fb 1f       	adc	r31, r27
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
    113e:	20 81       	ld	r18, Z
    1140:	91 81       	ldd	r25, Z+1	; 0x01
    1142:	90 53       	subi	r25, 0x30	; 48
    1144:	e0 e1       	ldi	r30, 0x10	; 16
    1146:	2e 9f       	mul	r18, r30
    1148:	90 0d       	add	r25, r0
    114a:	11 24       	eor	r1, r1
    114c:	f8 01       	movw	r30, r16
    114e:	90 83       	st	Z, r25
//const char* test2 = "6363 3131 3535 6262 6666"; = "cc 11 55 bb ff" = "204 17 85 187 255"
//const char* test = "3565623838383532";
void ascii_hex_decode(const char *in, size_t len, uint8_t *out, int start){
	char buf[50];
	uint8_t i, t, j, h, hn, ln, p1, p2;
	for (t = 0, i = start; i<len; i+=2, t++){
    1150:	3e 5f       	subi	r19, 0xFE	; 254
    1152:	8f 5f       	subi	r24, 0xFF	; 255
    1154:	e3 2f       	mov	r30, r19
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	e6 17       	cp	r30, r22
    115a:	f7 07       	cpc	r31, r23
    115c:	40 f3       	brcs	.-48     	; 0x112e <ascii_hex_decode+0x2e>
		p1 = ((uint8_t)(in[i]) - '0')*16;
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
	}
	for (h= 0,j = 0; j<(len-start)/2; j+=2, h++){
    115e:	6e 19       	sub	r22, r14
    1160:	7f 09       	sbc	r23, r15
    1162:	7b 01       	movw	r14, r22
    1164:	f6 94       	lsr	r15
    1166:	e7 94       	ror	r14
    1168:	e1 14       	cp	r14, r1
    116a:	f1 04       	cpc	r15, r1
    116c:	99 f1       	breq	.+102    	; 0x11d4 <ascii_hex_decode+0xd4>
    116e:	e0 e0       	ldi	r30, 0x00	; 0
    1170:	70 e0       	ldi	r23, 0x00	; 0
		hn = buf[j] > '9' ? buf[j] - 'a' + 10 : buf[j] - '0';
    1172:	27 2f       	mov	r18, r23
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	8c 0f       	add	r24, r28
    117c:	9d 1f       	adc	r25, r29
    117e:	82 0f       	add	r24, r18
    1180:	93 1f       	adc	r25, r19
    1182:	dc 01       	movw	r26, r24
    1184:	8c 91       	ld	r24, X
    1186:	8a 33       	cpi	r24, 0x3A	; 58
    1188:	18 f0       	brcs	.+6      	; 0x1190 <ascii_hex_decode+0x90>
    118a:	99 ea       	ldi	r25, 0xA9	; 169
    118c:	98 0f       	add	r25, r24
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <ascii_hex_decode+0x94>
    1190:	90 ed       	ldi	r25, 0xD0	; 208
    1192:	98 0f       	add	r25, r24
		ln = buf[j+1] > '9' ? buf[j+1] - 'a' + 10 : buf[j+1] - '0';
    1194:	a2 e0       	ldi	r26, 0x02	; 2
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ac 0f       	add	r26, r28
    119a:	bd 1f       	adc	r27, r29
    119c:	2a 0f       	add	r18, r26
    119e:	3b 1f       	adc	r19, r27
    11a0:	d9 01       	movw	r26, r18
    11a2:	8c 91       	ld	r24, X
    11a4:	8a 33       	cpi	r24, 0x3A	; 58
    11a6:	18 f0       	brcs	.+6      	; 0x11ae <ascii_hex_decode+0xae>
    11a8:	29 ea       	ldi	r18, 0xA9	; 169
    11aa:	28 0f       	add	r18, r24
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <ascii_hex_decode+0xb2>
    11ae:	20 ed       	ldi	r18, 0xD0	; 208
    11b0:	28 0f       	add	r18, r24
		out[h] = (hn << 4) | ln;
    11b2:	8a 01       	movw	r16, r20
    11b4:	0e 0f       	add	r16, r30
    11b6:	11 1d       	adc	r17, r1
    11b8:	b0 e1       	ldi	r27, 0x10	; 16
    11ba:	9b 9f       	mul	r25, r27
    11bc:	c0 01       	movw	r24, r0
    11be:	11 24       	eor	r1, r1
    11c0:	82 2b       	or	r24, r18
    11c2:	d8 01       	movw	r26, r16
    11c4:	8c 93       	st	X, r24
	for (t = 0, i = start; i<len; i+=2, t++){
		p1 = ((uint8_t)(in[i]) - '0')*16;
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
	}
	for (h= 0,j = 0; j<(len-start)/2; j+=2, h++){
    11c6:	7e 5f       	subi	r23, 0xFE	; 254
    11c8:	ef 5f       	subi	r30, 0xFF	; 255
    11ca:	87 2f       	mov	r24, r23
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	8e 15       	cp	r24, r14
    11d0:	9f 05       	cpc	r25, r15
    11d2:	78 f2       	brcs	.-98     	; 0x1172 <ascii_hex_decode+0x72>
		ln = buf[j+1] > '9' ? buf[j+1] - 'a' + 10 : buf[j+1] - '0';
		out[h] = (hn << 4) | ln;
		//printf("%02x", out[h]);
	}
	//puts("");
}
    11d4:	e2 96       	adiw	r28, 0x32	; 50
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	ff 90       	pop	r15
    11ea:	ef 90       	pop	r14
    11ec:	08 95       	ret

000011ee <hex_decode>:

uint8_t* hex_decode(const char *in, size_t len,uint8_t *out, int start){
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	ec 01       	movw	r28, r24
    11f8:	95 2f       	mov	r25, r21
	unsigned int i, t, hn, ln;
	for (t = 0,i = start; i < len; i+=2,++t) {
    11fa:	26 17       	cp	r18, r22
    11fc:	37 07       	cpc	r19, r23
    11fe:	08 f5       	brcc	.+66     	; 0x1242 <hex_decode+0x54>
    1200:	c2 0f       	add	r28, r18
    1202:	d3 1f       	adc	r29, r19
    1204:	04 2f       	mov	r16, r20
    1206:	15 2f       	mov	r17, r21
    1208:	fe 01       	movw	r30, r28
		hn = in[i] > '9' ? in[i] - 'A' + 10 : in[i] - '0';
    120a:	a8 81       	ld	r26, Y
    120c:	aa 33       	cpi	r26, 0x3A	; 58
    120e:	18 f0       	brcs	.+6      	; 0x1216 <hex_decode+0x28>
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	d7 97       	sbiw	r26, 0x37	; 55
    1214:	02 c0       	rjmp	.+4      	; 0x121a <hex_decode+0x2c>
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	d0 97       	sbiw	r26, 0x30	; 48
		ln = in[i+1] > '9' ? in[i+1] - 'A' + 10 : in[i+1] - '0';
    121a:	e1 81       	ldd	r30, Z+1	; 0x01
    121c:	ea 33       	cpi	r30, 0x3A	; 58
    121e:	18 f0       	brcs	.+6      	; 0x1226 <hex_decode+0x38>
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	f7 97       	sbiw	r30, 0x37	; 55
    1224:	02 c0       	rjmp	.+4      	; 0x122a <hex_decode+0x3c>
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	f0 97       	sbiw	r30, 0x30	; 48
		out[t] = (hn << 4 ) | ln;
    122a:	a2 95       	swap	r26
    122c:	a0 7f       	andi	r26, 0xF0	; 240
    122e:	ea 2b       	or	r30, r26
    1230:	d8 01       	movw	r26, r16
    1232:	ed 93       	st	X+, r30
    1234:	8d 01       	movw	r16, r26
	//puts("");
}

uint8_t* hex_decode(const char *in, size_t len,uint8_t *out, int start){
	unsigned int i, t, hn, ln;
	for (t = 0,i = start; i < len; i+=2,++t) {
    1236:	2e 5f       	subi	r18, 0xFE	; 254
    1238:	3f 4f       	sbci	r19, 0xFF	; 255
    123a:	22 96       	adiw	r28, 0x02	; 2
    123c:	26 17       	cp	r18, r22
    123e:	37 07       	cpc	r19, r23
    1240:	18 f3       	brcs	.-58     	; 0x1208 <hex_decode+0x1a>
		hn = in[i] > '9' ? in[i] - 'A' + 10 : in[i] - '0';
		ln = in[i+1] > '9' ? in[i+1] - 'A' + 10 : in[i+1] - '0';
		out[t] = (hn << 4 ) | ln;
	}
	return out;
}
    1242:	84 2f       	mov	r24, r20
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	08 95       	ret

0000124e <hex_encode>:

//				1  2  3  4  5  6  7  8  9 10 11 byte pair
//  MSG STYLE: xx xx xx xx xx xx xx xx xx xx xx
//  1: frame, 2-5: timestamp, 6: battery, 7+8: bus voltage, 9+10: current

char* hex_encode(board_t board){
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
	char *msg = "";
	sprintf(msg, "%02X%08lX%02X%04X%04X", board.frame_counter, board.time_stamp, board.batteryLevel, board.ina219.bus_voltage, board.ina219.current);
    1256:	8e 85       	ldd	r24, Y+14	; 0x0e
    1258:	8f 93       	push	r24
    125a:	8d 85       	ldd	r24, Y+13	; 0x0d
    125c:	8f 93       	push	r24
    125e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1260:	8f 93       	push	r24
    1262:	8b 85       	ldd	r24, Y+11	; 0x0b
    1264:	8f 93       	push	r24
    1266:	8a 85       	ldd	r24, Y+10	; 0x0a
    1268:	1f 92       	push	r1
    126a:	8f 93       	push	r24
    126c:	89 85       	ldd	r24, Y+9	; 0x09
    126e:	8f 93       	push	r24
    1270:	88 85       	ldd	r24, Y+8	; 0x08
    1272:	8f 93       	push	r24
    1274:	8f 81       	ldd	r24, Y+7	; 0x07
    1276:	8f 93       	push	r24
    1278:	8e 81       	ldd	r24, Y+6	; 0x06
    127a:	8f 93       	push	r24
    127c:	8d 81       	ldd	r24, Y+5	; 0x05
    127e:	1f 92       	push	r1
    1280:	8f 93       	push	r24
    1282:	82 e7       	ldi	r24, 0x72	; 114
    1284:	95 e0       	ldi	r25, 0x05	; 5
    1286:	9f 93       	push	r25
    1288:	8f 93       	push	r24
    128a:	8a e9       	ldi	r24, 0x9A	; 154
    128c:	94 e0       	ldi	r25, 0x04	; 4
    128e:	9f 93       	push	r25
    1290:	8f 93       	push	r24
    1292:	0e 94 5e 10 	call	0x20bc	; 0x20bc <sprintf>
	return msg;
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
}
    12a0:	8a e9       	ldi	r24, 0x9A	; 154
    12a2:	94 e0       	ldi	r25, 0x04	; 4
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	08 95       	ret

000012aa <vfprintf>:
    12aa:	a0 e1       	ldi	r26, 0x10	; 16
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	eb e5       	ldi	r30, 0x5B	; 91
    12b0:	f9 e0       	ldi	r31, 0x09	; 9
    12b2:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__prologue_saves__>
    12b6:	7c 01       	movw	r14, r24
    12b8:	1b 01       	movw	r2, r22
    12ba:	6a 01       	movw	r12, r20
    12bc:	fc 01       	movw	r30, r24
    12be:	17 82       	std	Z+7, r1	; 0x07
    12c0:	16 82       	std	Z+6, r1	; 0x06
    12c2:	83 81       	ldd	r24, Z+3	; 0x03
    12c4:	81 ff       	sbrs	r24, 1
    12c6:	44 c3       	rjmp	.+1672   	; 0x1950 <vfprintf+0x6a6>
    12c8:	9e 01       	movw	r18, r28
    12ca:	2f 5f       	subi	r18, 0xFF	; 255
    12cc:	3f 4f       	sbci	r19, 0xFF	; 255
    12ce:	39 01       	movw	r6, r18
    12d0:	f7 01       	movw	r30, r14
    12d2:	93 81       	ldd	r25, Z+3	; 0x03
    12d4:	f1 01       	movw	r30, r2
    12d6:	93 fd       	sbrc	r25, 3
    12d8:	85 91       	lpm	r24, Z+
    12da:	93 ff       	sbrs	r25, 3
    12dc:	81 91       	ld	r24, Z+
    12de:	1f 01       	movw	r2, r30
    12e0:	88 23       	and	r24, r24
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <vfprintf+0x3c>
    12e4:	31 c3       	rjmp	.+1634   	; 0x1948 <vfprintf+0x69e>
    12e6:	85 32       	cpi	r24, 0x25	; 37
    12e8:	39 f4       	brne	.+14     	; 0x12f8 <vfprintf+0x4e>
    12ea:	93 fd       	sbrc	r25, 3
    12ec:	85 91       	lpm	r24, Z+
    12ee:	93 ff       	sbrs	r25, 3
    12f0:	81 91       	ld	r24, Z+
    12f2:	1f 01       	movw	r2, r30
    12f4:	85 32       	cpi	r24, 0x25	; 37
    12f6:	39 f4       	brne	.+14     	; 0x1306 <vfprintf+0x5c>
    12f8:	b7 01       	movw	r22, r14
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    1300:	56 01       	movw	r10, r12
    1302:	65 01       	movw	r12, r10
    1304:	e5 cf       	rjmp	.-54     	; 0x12d0 <vfprintf+0x26>
    1306:	10 e0       	ldi	r17, 0x00	; 0
    1308:	51 2c       	mov	r5, r1
    130a:	91 2c       	mov	r9, r1
    130c:	ff e1       	ldi	r31, 0x1F	; 31
    130e:	f9 15       	cp	r31, r9
    1310:	d8 f0       	brcs	.+54     	; 0x1348 <vfprintf+0x9e>
    1312:	8b 32       	cpi	r24, 0x2B	; 43
    1314:	79 f0       	breq	.+30     	; 0x1334 <vfprintf+0x8a>
    1316:	38 f4       	brcc	.+14     	; 0x1326 <vfprintf+0x7c>
    1318:	80 32       	cpi	r24, 0x20	; 32
    131a:	79 f0       	breq	.+30     	; 0x133a <vfprintf+0x90>
    131c:	83 32       	cpi	r24, 0x23	; 35
    131e:	a1 f4       	brne	.+40     	; 0x1348 <vfprintf+0x9e>
    1320:	f9 2d       	mov	r31, r9
    1322:	f0 61       	ori	r31, 0x10	; 16
    1324:	2e c0       	rjmp	.+92     	; 0x1382 <vfprintf+0xd8>
    1326:	8d 32       	cpi	r24, 0x2D	; 45
    1328:	61 f0       	breq	.+24     	; 0x1342 <vfprintf+0x98>
    132a:	80 33       	cpi	r24, 0x30	; 48
    132c:	69 f4       	brne	.+26     	; 0x1348 <vfprintf+0x9e>
    132e:	29 2d       	mov	r18, r9
    1330:	21 60       	ori	r18, 0x01	; 1
    1332:	2d c0       	rjmp	.+90     	; 0x138e <vfprintf+0xe4>
    1334:	39 2d       	mov	r19, r9
    1336:	32 60       	ori	r19, 0x02	; 2
    1338:	93 2e       	mov	r9, r19
    133a:	89 2d       	mov	r24, r9
    133c:	84 60       	ori	r24, 0x04	; 4
    133e:	98 2e       	mov	r9, r24
    1340:	2a c0       	rjmp	.+84     	; 0x1396 <vfprintf+0xec>
    1342:	e9 2d       	mov	r30, r9
    1344:	e8 60       	ori	r30, 0x08	; 8
    1346:	15 c0       	rjmp	.+42     	; 0x1372 <vfprintf+0xc8>
    1348:	97 fc       	sbrc	r9, 7
    134a:	2d c0       	rjmp	.+90     	; 0x13a6 <vfprintf+0xfc>
    134c:	20 ed       	ldi	r18, 0xD0	; 208
    134e:	28 0f       	add	r18, r24
    1350:	2a 30       	cpi	r18, 0x0A	; 10
    1352:	88 f4       	brcc	.+34     	; 0x1376 <vfprintf+0xcc>
    1354:	96 fe       	sbrs	r9, 6
    1356:	06 c0       	rjmp	.+12     	; 0x1364 <vfprintf+0xba>
    1358:	3a e0       	ldi	r19, 0x0A	; 10
    135a:	13 9f       	mul	r17, r19
    135c:	20 0d       	add	r18, r0
    135e:	11 24       	eor	r1, r1
    1360:	12 2f       	mov	r17, r18
    1362:	19 c0       	rjmp	.+50     	; 0x1396 <vfprintf+0xec>
    1364:	8a e0       	ldi	r24, 0x0A	; 10
    1366:	58 9e       	mul	r5, r24
    1368:	20 0d       	add	r18, r0
    136a:	11 24       	eor	r1, r1
    136c:	52 2e       	mov	r5, r18
    136e:	e9 2d       	mov	r30, r9
    1370:	e0 62       	ori	r30, 0x20	; 32
    1372:	9e 2e       	mov	r9, r30
    1374:	10 c0       	rjmp	.+32     	; 0x1396 <vfprintf+0xec>
    1376:	8e 32       	cpi	r24, 0x2E	; 46
    1378:	31 f4       	brne	.+12     	; 0x1386 <vfprintf+0xdc>
    137a:	96 fc       	sbrc	r9, 6
    137c:	e5 c2       	rjmp	.+1482   	; 0x1948 <vfprintf+0x69e>
    137e:	f9 2d       	mov	r31, r9
    1380:	f0 64       	ori	r31, 0x40	; 64
    1382:	9f 2e       	mov	r9, r31
    1384:	08 c0       	rjmp	.+16     	; 0x1396 <vfprintf+0xec>
    1386:	8c 36       	cpi	r24, 0x6C	; 108
    1388:	21 f4       	brne	.+8      	; 0x1392 <vfprintf+0xe8>
    138a:	29 2d       	mov	r18, r9
    138c:	20 68       	ori	r18, 0x80	; 128
    138e:	92 2e       	mov	r9, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <vfprintf+0xec>
    1392:	88 36       	cpi	r24, 0x68	; 104
    1394:	41 f4       	brne	.+16     	; 0x13a6 <vfprintf+0xfc>
    1396:	f1 01       	movw	r30, r2
    1398:	93 fd       	sbrc	r25, 3
    139a:	85 91       	lpm	r24, Z+
    139c:	93 ff       	sbrs	r25, 3
    139e:	81 91       	ld	r24, Z+
    13a0:	1f 01       	movw	r2, r30
    13a2:	81 11       	cpse	r24, r1
    13a4:	b3 cf       	rjmp	.-154    	; 0x130c <vfprintf+0x62>
    13a6:	9b eb       	ldi	r25, 0xBB	; 187
    13a8:	98 0f       	add	r25, r24
    13aa:	93 30       	cpi	r25, 0x03	; 3
    13ac:	20 f4       	brcc	.+8      	; 0x13b6 <vfprintf+0x10c>
    13ae:	99 2d       	mov	r25, r9
    13b0:	90 61       	ori	r25, 0x10	; 16
    13b2:	80 5e       	subi	r24, 0xE0	; 224
    13b4:	07 c0       	rjmp	.+14     	; 0x13c4 <vfprintf+0x11a>
    13b6:	9b e9       	ldi	r25, 0x9B	; 155
    13b8:	98 0f       	add	r25, r24
    13ba:	93 30       	cpi	r25, 0x03	; 3
    13bc:	08 f0       	brcs	.+2      	; 0x13c0 <vfprintf+0x116>
    13be:	66 c1       	rjmp	.+716    	; 0x168c <vfprintf+0x3e2>
    13c0:	99 2d       	mov	r25, r9
    13c2:	9f 7e       	andi	r25, 0xEF	; 239
    13c4:	96 ff       	sbrs	r25, 6
    13c6:	16 e0       	ldi	r17, 0x06	; 6
    13c8:	9f 73       	andi	r25, 0x3F	; 63
    13ca:	99 2e       	mov	r9, r25
    13cc:	85 36       	cpi	r24, 0x65	; 101
    13ce:	19 f4       	brne	.+6      	; 0x13d6 <vfprintf+0x12c>
    13d0:	90 64       	ori	r25, 0x40	; 64
    13d2:	99 2e       	mov	r9, r25
    13d4:	08 c0       	rjmp	.+16     	; 0x13e6 <vfprintf+0x13c>
    13d6:	86 36       	cpi	r24, 0x66	; 102
    13d8:	21 f4       	brne	.+8      	; 0x13e2 <vfprintf+0x138>
    13da:	39 2f       	mov	r19, r25
    13dc:	30 68       	ori	r19, 0x80	; 128
    13de:	93 2e       	mov	r9, r19
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <vfprintf+0x13c>
    13e2:	11 11       	cpse	r17, r1
    13e4:	11 50       	subi	r17, 0x01	; 1
    13e6:	97 fe       	sbrs	r9, 7
    13e8:	07 c0       	rjmp	.+14     	; 0x13f8 <vfprintf+0x14e>
    13ea:	1c 33       	cpi	r17, 0x3C	; 60
    13ec:	50 f4       	brcc	.+20     	; 0x1402 <vfprintf+0x158>
    13ee:	44 24       	eor	r4, r4
    13f0:	43 94       	inc	r4
    13f2:	41 0e       	add	r4, r17
    13f4:	27 e0       	ldi	r18, 0x07	; 7
    13f6:	0b c0       	rjmp	.+22     	; 0x140e <vfprintf+0x164>
    13f8:	18 30       	cpi	r17, 0x08	; 8
    13fa:	38 f0       	brcs	.+14     	; 0x140a <vfprintf+0x160>
    13fc:	27 e0       	ldi	r18, 0x07	; 7
    13fe:	17 e0       	ldi	r17, 0x07	; 7
    1400:	05 c0       	rjmp	.+10     	; 0x140c <vfprintf+0x162>
    1402:	27 e0       	ldi	r18, 0x07	; 7
    1404:	9c e3       	ldi	r25, 0x3C	; 60
    1406:	49 2e       	mov	r4, r25
    1408:	02 c0       	rjmp	.+4      	; 0x140e <vfprintf+0x164>
    140a:	21 2f       	mov	r18, r17
    140c:	41 2c       	mov	r4, r1
    140e:	56 01       	movw	r10, r12
    1410:	84 e0       	ldi	r24, 0x04	; 4
    1412:	a8 0e       	add	r10, r24
    1414:	b1 1c       	adc	r11, r1
    1416:	f6 01       	movw	r30, r12
    1418:	60 81       	ld	r22, Z
    141a:	71 81       	ldd	r23, Z+1	; 0x01
    141c:	82 81       	ldd	r24, Z+2	; 0x02
    141e:	93 81       	ldd	r25, Z+3	; 0x03
    1420:	04 2d       	mov	r16, r4
    1422:	a3 01       	movw	r20, r6
    1424:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__ftoa_engine>
    1428:	6c 01       	movw	r12, r24
    142a:	f9 81       	ldd	r31, Y+1	; 0x01
    142c:	fc 87       	std	Y+12, r31	; 0x0c
    142e:	f0 ff       	sbrs	r31, 0
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <vfprintf+0x18c>
    1432:	f3 ff       	sbrs	r31, 3
    1434:	06 c0       	rjmp	.+12     	; 0x1442 <vfprintf+0x198>
    1436:	91 fc       	sbrc	r9, 1
    1438:	06 c0       	rjmp	.+12     	; 0x1446 <vfprintf+0x19c>
    143a:	92 fe       	sbrs	r9, 2
    143c:	06 c0       	rjmp	.+12     	; 0x144a <vfprintf+0x1a0>
    143e:	00 e2       	ldi	r16, 0x20	; 32
    1440:	05 c0       	rjmp	.+10     	; 0x144c <vfprintf+0x1a2>
    1442:	0d e2       	ldi	r16, 0x2D	; 45
    1444:	03 c0       	rjmp	.+6      	; 0x144c <vfprintf+0x1a2>
    1446:	0b e2       	ldi	r16, 0x2B	; 43
    1448:	01 c0       	rjmp	.+2      	; 0x144c <vfprintf+0x1a2>
    144a:	00 e0       	ldi	r16, 0x00	; 0
    144c:	8c 85       	ldd	r24, Y+12	; 0x0c
    144e:	8c 70       	andi	r24, 0x0C	; 12
    1450:	19 f0       	breq	.+6      	; 0x1458 <vfprintf+0x1ae>
    1452:	01 11       	cpse	r16, r1
    1454:	5a c2       	rjmp	.+1204   	; 0x190a <vfprintf+0x660>
    1456:	9b c2       	rjmp	.+1334   	; 0x198e <vfprintf+0x6e4>
    1458:	97 fe       	sbrs	r9, 7
    145a:	10 c0       	rjmp	.+32     	; 0x147c <vfprintf+0x1d2>
    145c:	4c 0c       	add	r4, r12
    145e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1460:	f4 ff       	sbrs	r31, 4
    1462:	04 c0       	rjmp	.+8      	; 0x146c <vfprintf+0x1c2>
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	81 33       	cpi	r24, 0x31	; 49
    1468:	09 f4       	brne	.+2      	; 0x146c <vfprintf+0x1c2>
    146a:	4a 94       	dec	r4
    146c:	14 14       	cp	r1, r4
    146e:	74 f5       	brge	.+92     	; 0x14cc <vfprintf+0x222>
    1470:	28 e0       	ldi	r18, 0x08	; 8
    1472:	24 15       	cp	r18, r4
    1474:	78 f5       	brcc	.+94     	; 0x14d4 <vfprintf+0x22a>
    1476:	88 e0       	ldi	r24, 0x08	; 8
    1478:	48 2e       	mov	r4, r24
    147a:	2c c0       	rjmp	.+88     	; 0x14d4 <vfprintf+0x22a>
    147c:	96 fc       	sbrc	r9, 6
    147e:	2a c0       	rjmp	.+84     	; 0x14d4 <vfprintf+0x22a>
    1480:	81 2f       	mov	r24, r17
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	8c 15       	cp	r24, r12
    1486:	9d 05       	cpc	r25, r13
    1488:	9c f0       	brlt	.+38     	; 0x14b0 <vfprintf+0x206>
    148a:	3c ef       	ldi	r19, 0xFC	; 252
    148c:	c3 16       	cp	r12, r19
    148e:	3f ef       	ldi	r19, 0xFF	; 255
    1490:	d3 06       	cpc	r13, r19
    1492:	74 f0       	brlt	.+28     	; 0x14b0 <vfprintf+0x206>
    1494:	89 2d       	mov	r24, r9
    1496:	80 68       	ori	r24, 0x80	; 128
    1498:	98 2e       	mov	r9, r24
    149a:	0a c0       	rjmp	.+20     	; 0x14b0 <vfprintf+0x206>
    149c:	e2 e0       	ldi	r30, 0x02	; 2
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	ec 0f       	add	r30, r28
    14a2:	fd 1f       	adc	r31, r29
    14a4:	e1 0f       	add	r30, r17
    14a6:	f1 1d       	adc	r31, r1
    14a8:	80 81       	ld	r24, Z
    14aa:	80 33       	cpi	r24, 0x30	; 48
    14ac:	19 f4       	brne	.+6      	; 0x14b4 <vfprintf+0x20a>
    14ae:	11 50       	subi	r17, 0x01	; 1
    14b0:	11 11       	cpse	r17, r1
    14b2:	f4 cf       	rjmp	.-24     	; 0x149c <vfprintf+0x1f2>
    14b4:	97 fe       	sbrs	r9, 7
    14b6:	0e c0       	rjmp	.+28     	; 0x14d4 <vfprintf+0x22a>
    14b8:	44 24       	eor	r4, r4
    14ba:	43 94       	inc	r4
    14bc:	41 0e       	add	r4, r17
    14be:	81 2f       	mov	r24, r17
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	c8 16       	cp	r12, r24
    14c4:	d9 06       	cpc	r13, r25
    14c6:	2c f4       	brge	.+10     	; 0x14d2 <vfprintf+0x228>
    14c8:	1c 19       	sub	r17, r12
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <vfprintf+0x22a>
    14cc:	44 24       	eor	r4, r4
    14ce:	43 94       	inc	r4
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <vfprintf+0x22a>
    14d2:	10 e0       	ldi	r17, 0x00	; 0
    14d4:	97 fe       	sbrs	r9, 7
    14d6:	06 c0       	rjmp	.+12     	; 0x14e4 <vfprintf+0x23a>
    14d8:	1c 14       	cp	r1, r12
    14da:	1d 04       	cpc	r1, r13
    14dc:	34 f4       	brge	.+12     	; 0x14ea <vfprintf+0x240>
    14de:	c6 01       	movw	r24, r12
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	05 c0       	rjmp	.+10     	; 0x14ee <vfprintf+0x244>
    14e4:	85 e0       	ldi	r24, 0x05	; 5
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <vfprintf+0x244>
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	01 11       	cpse	r16, r1
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	11 23       	and	r17, r17
    14f4:	31 f0       	breq	.+12     	; 0x1502 <vfprintf+0x258>
    14f6:	21 2f       	mov	r18, r17
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	2f 5f       	subi	r18, 0xFF	; 255
    14fc:	3f 4f       	sbci	r19, 0xFF	; 255
    14fe:	82 0f       	add	r24, r18
    1500:	93 1f       	adc	r25, r19
    1502:	25 2d       	mov	r18, r5
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	82 17       	cp	r24, r18
    1508:	93 07       	cpc	r25, r19
    150a:	14 f4       	brge	.+4      	; 0x1510 <vfprintf+0x266>
    150c:	58 1a       	sub	r5, r24
    150e:	01 c0       	rjmp	.+2      	; 0x1512 <vfprintf+0x268>
    1510:	51 2c       	mov	r5, r1
    1512:	89 2d       	mov	r24, r9
    1514:	89 70       	andi	r24, 0x09	; 9
    1516:	49 f4       	brne	.+18     	; 0x152a <vfprintf+0x280>
    1518:	55 20       	and	r5, r5
    151a:	39 f0       	breq	.+14     	; 0x152a <vfprintf+0x280>
    151c:	b7 01       	movw	r22, r14
    151e:	80 e2       	ldi	r24, 0x20	; 32
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    1526:	5a 94       	dec	r5
    1528:	f7 cf       	rjmp	.-18     	; 0x1518 <vfprintf+0x26e>
    152a:	00 23       	and	r16, r16
    152c:	29 f0       	breq	.+10     	; 0x1538 <vfprintf+0x28e>
    152e:	b7 01       	movw	r22, r14
    1530:	80 2f       	mov	r24, r16
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    1538:	93 fc       	sbrc	r9, 3
    153a:	09 c0       	rjmp	.+18     	; 0x154e <vfprintf+0x2a4>
    153c:	55 20       	and	r5, r5
    153e:	39 f0       	breq	.+14     	; 0x154e <vfprintf+0x2a4>
    1540:	b7 01       	movw	r22, r14
    1542:	80 e3       	ldi	r24, 0x30	; 48
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    154a:	5a 94       	dec	r5
    154c:	f7 cf       	rjmp	.-18     	; 0x153c <vfprintf+0x292>
    154e:	97 fe       	sbrs	r9, 7
    1550:	4c c0       	rjmp	.+152    	; 0x15ea <vfprintf+0x340>
    1552:	46 01       	movw	r8, r12
    1554:	d7 fe       	sbrs	r13, 7
    1556:	02 c0       	rjmp	.+4      	; 0x155c <vfprintf+0x2b2>
    1558:	81 2c       	mov	r8, r1
    155a:	91 2c       	mov	r9, r1
    155c:	c6 01       	movw	r24, r12
    155e:	88 19       	sub	r24, r8
    1560:	99 09       	sbc	r25, r9
    1562:	f3 01       	movw	r30, r6
    1564:	e8 0f       	add	r30, r24
    1566:	f9 1f       	adc	r31, r25
    1568:	fe 87       	std	Y+14, r31	; 0x0e
    156a:	ed 87       	std	Y+13, r30	; 0x0d
    156c:	96 01       	movw	r18, r12
    156e:	24 19       	sub	r18, r4
    1570:	31 09       	sbc	r19, r1
    1572:	38 8b       	std	Y+16, r19	; 0x10
    1574:	2f 87       	std	Y+15, r18	; 0x0f
    1576:	01 2f       	mov	r16, r17
    1578:	10 e0       	ldi	r17, 0x00	; 0
    157a:	11 95       	neg	r17
    157c:	01 95       	neg	r16
    157e:	11 09       	sbc	r17, r1
    1580:	3f ef       	ldi	r19, 0xFF	; 255
    1582:	83 16       	cp	r8, r19
    1584:	93 06       	cpc	r9, r19
    1586:	29 f4       	brne	.+10     	; 0x1592 <vfprintf+0x2e8>
    1588:	b7 01       	movw	r22, r14
    158a:	8e e2       	ldi	r24, 0x2E	; 46
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    1592:	c8 14       	cp	r12, r8
    1594:	d9 04       	cpc	r13, r9
    1596:	4c f0       	brlt	.+18     	; 0x15aa <vfprintf+0x300>
    1598:	8f 85       	ldd	r24, Y+15	; 0x0f
    159a:	98 89       	ldd	r25, Y+16	; 0x10
    159c:	88 15       	cp	r24, r8
    159e:	99 05       	cpc	r25, r9
    15a0:	24 f4       	brge	.+8      	; 0x15aa <vfprintf+0x300>
    15a2:	ed 85       	ldd	r30, Y+13	; 0x0d
    15a4:	fe 85       	ldd	r31, Y+14	; 0x0e
    15a6:	81 81       	ldd	r24, Z+1	; 0x01
    15a8:	01 c0       	rjmp	.+2      	; 0x15ac <vfprintf+0x302>
    15aa:	80 e3       	ldi	r24, 0x30	; 48
    15ac:	f1 e0       	ldi	r31, 0x01	; 1
    15ae:	8f 1a       	sub	r8, r31
    15b0:	91 08       	sbc	r9, r1
    15b2:	2d 85       	ldd	r18, Y+13	; 0x0d
    15b4:	3e 85       	ldd	r19, Y+14	; 0x0e
    15b6:	2f 5f       	subi	r18, 0xFF	; 255
    15b8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ba:	3e 87       	std	Y+14, r19	; 0x0e
    15bc:	2d 87       	std	Y+13, r18	; 0x0d
    15be:	80 16       	cp	r8, r16
    15c0:	91 06       	cpc	r9, r17
    15c2:	2c f0       	brlt	.+10     	; 0x15ce <vfprintf+0x324>
    15c4:	b7 01       	movw	r22, r14
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    15cc:	d9 cf       	rjmp	.-78     	; 0x1580 <vfprintf+0x2d6>
    15ce:	c8 14       	cp	r12, r8
    15d0:	d9 04       	cpc	r13, r9
    15d2:	41 f4       	brne	.+16     	; 0x15e4 <vfprintf+0x33a>
    15d4:	9a 81       	ldd	r25, Y+2	; 0x02
    15d6:	96 33       	cpi	r25, 0x36	; 54
    15d8:	20 f4       	brcc	.+8      	; 0x15e2 <vfprintf+0x338>
    15da:	95 33       	cpi	r25, 0x35	; 53
    15dc:	19 f4       	brne	.+6      	; 0x15e4 <vfprintf+0x33a>
    15de:	3c 85       	ldd	r19, Y+12	; 0x0c
    15e0:	34 ff       	sbrs	r19, 4
    15e2:	81 e3       	ldi	r24, 0x31	; 49
    15e4:	b7 01       	movw	r22, r14
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	4e c0       	rjmp	.+156    	; 0x1686 <vfprintf+0x3dc>
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	81 33       	cpi	r24, 0x31	; 49
    15ee:	19 f0       	breq	.+6      	; 0x15f6 <vfprintf+0x34c>
    15f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    15f2:	9f 7e       	andi	r25, 0xEF	; 239
    15f4:	9c 87       	std	Y+12, r25	; 0x0c
    15f6:	b7 01       	movw	r22, r14
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    15fe:	11 11       	cpse	r17, r1
    1600:	05 c0       	rjmp	.+10     	; 0x160c <vfprintf+0x362>
    1602:	94 fc       	sbrc	r9, 4
    1604:	18 c0       	rjmp	.+48     	; 0x1636 <vfprintf+0x38c>
    1606:	85 e6       	ldi	r24, 0x65	; 101
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	17 c0       	rjmp	.+46     	; 0x163a <vfprintf+0x390>
    160c:	b7 01       	movw	r22, r14
    160e:	8e e2       	ldi	r24, 0x2E	; 46
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    1616:	1e 5f       	subi	r17, 0xFE	; 254
    1618:	82 e0       	ldi	r24, 0x02	; 2
    161a:	01 e0       	ldi	r16, 0x01	; 1
    161c:	08 0f       	add	r16, r24
    161e:	f3 01       	movw	r30, r6
    1620:	e8 0f       	add	r30, r24
    1622:	f1 1d       	adc	r31, r1
    1624:	80 81       	ld	r24, Z
    1626:	b7 01       	movw	r22, r14
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    162e:	80 2f       	mov	r24, r16
    1630:	01 13       	cpse	r16, r17
    1632:	f3 cf       	rjmp	.-26     	; 0x161a <vfprintf+0x370>
    1634:	e6 cf       	rjmp	.-52     	; 0x1602 <vfprintf+0x358>
    1636:	85 e4       	ldi	r24, 0x45	; 69
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	b7 01       	movw	r22, r14
    163c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    1640:	d7 fc       	sbrc	r13, 7
    1642:	06 c0       	rjmp	.+12     	; 0x1650 <vfprintf+0x3a6>
    1644:	c1 14       	cp	r12, r1
    1646:	d1 04       	cpc	r13, r1
    1648:	41 f4       	brne	.+16     	; 0x165a <vfprintf+0x3b0>
    164a:	ec 85       	ldd	r30, Y+12	; 0x0c
    164c:	e4 ff       	sbrs	r30, 4
    164e:	05 c0       	rjmp	.+10     	; 0x165a <vfprintf+0x3b0>
    1650:	d1 94       	neg	r13
    1652:	c1 94       	neg	r12
    1654:	d1 08       	sbc	r13, r1
    1656:	8d e2       	ldi	r24, 0x2D	; 45
    1658:	01 c0       	rjmp	.+2      	; 0x165c <vfprintf+0x3b2>
    165a:	8b e2       	ldi	r24, 0x2B	; 43
    165c:	b7 01       	movw	r22, r14
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    1664:	80 e3       	ldi	r24, 0x30	; 48
    1666:	2a e0       	ldi	r18, 0x0A	; 10
    1668:	c2 16       	cp	r12, r18
    166a:	d1 04       	cpc	r13, r1
    166c:	2c f0       	brlt	.+10     	; 0x1678 <vfprintf+0x3ce>
    166e:	8f 5f       	subi	r24, 0xFF	; 255
    1670:	fa e0       	ldi	r31, 0x0A	; 10
    1672:	cf 1a       	sub	r12, r31
    1674:	d1 08       	sbc	r13, r1
    1676:	f7 cf       	rjmp	.-18     	; 0x1666 <vfprintf+0x3bc>
    1678:	b7 01       	movw	r22, r14
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    1680:	b7 01       	movw	r22, r14
    1682:	c6 01       	movw	r24, r12
    1684:	c0 96       	adiw	r24, 0x30	; 48
    1686:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    168a:	54 c1       	rjmp	.+680    	; 0x1934 <vfprintf+0x68a>
    168c:	83 36       	cpi	r24, 0x63	; 99
    168e:	31 f0       	breq	.+12     	; 0x169c <vfprintf+0x3f2>
    1690:	83 37       	cpi	r24, 0x73	; 115
    1692:	79 f0       	breq	.+30     	; 0x16b2 <vfprintf+0x408>
    1694:	83 35       	cpi	r24, 0x53	; 83
    1696:	09 f0       	breq	.+2      	; 0x169a <vfprintf+0x3f0>
    1698:	56 c0       	rjmp	.+172    	; 0x1746 <vfprintf+0x49c>
    169a:	20 c0       	rjmp	.+64     	; 0x16dc <vfprintf+0x432>
    169c:	56 01       	movw	r10, r12
    169e:	32 e0       	ldi	r19, 0x02	; 2
    16a0:	a3 0e       	add	r10, r19
    16a2:	b1 1c       	adc	r11, r1
    16a4:	f6 01       	movw	r30, r12
    16a6:	80 81       	ld	r24, Z
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	01 e0       	ldi	r16, 0x01	; 1
    16ac:	10 e0       	ldi	r17, 0x00	; 0
    16ae:	63 01       	movw	r12, r6
    16b0:	12 c0       	rjmp	.+36     	; 0x16d6 <vfprintf+0x42c>
    16b2:	56 01       	movw	r10, r12
    16b4:	f2 e0       	ldi	r31, 0x02	; 2
    16b6:	af 0e       	add	r10, r31
    16b8:	b1 1c       	adc	r11, r1
    16ba:	f6 01       	movw	r30, r12
    16bc:	c0 80       	ld	r12, Z
    16be:	d1 80       	ldd	r13, Z+1	; 0x01
    16c0:	96 fe       	sbrs	r9, 6
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <vfprintf+0x420>
    16c4:	61 2f       	mov	r22, r17
    16c6:	70 e0       	ldi	r23, 0x00	; 0
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <vfprintf+0x424>
    16ca:	6f ef       	ldi	r22, 0xFF	; 255
    16cc:	7f ef       	ldi	r23, 0xFF	; 255
    16ce:	c6 01       	movw	r24, r12
    16d0:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <strnlen>
    16d4:	8c 01       	movw	r16, r24
    16d6:	f9 2d       	mov	r31, r9
    16d8:	ff 77       	andi	r31, 0x7F	; 127
    16da:	14 c0       	rjmp	.+40     	; 0x1704 <vfprintf+0x45a>
    16dc:	56 01       	movw	r10, r12
    16de:	22 e0       	ldi	r18, 0x02	; 2
    16e0:	a2 0e       	add	r10, r18
    16e2:	b1 1c       	adc	r11, r1
    16e4:	f6 01       	movw	r30, r12
    16e6:	c0 80       	ld	r12, Z
    16e8:	d1 80       	ldd	r13, Z+1	; 0x01
    16ea:	96 fe       	sbrs	r9, 6
    16ec:	03 c0       	rjmp	.+6      	; 0x16f4 <vfprintf+0x44a>
    16ee:	61 2f       	mov	r22, r17
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <vfprintf+0x44e>
    16f4:	6f ef       	ldi	r22, 0xFF	; 255
    16f6:	7f ef       	ldi	r23, 0xFF	; 255
    16f8:	c6 01       	movw	r24, r12
    16fa:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <strnlen_P>
    16fe:	8c 01       	movw	r16, r24
    1700:	f9 2d       	mov	r31, r9
    1702:	f0 68       	ori	r31, 0x80	; 128
    1704:	9f 2e       	mov	r9, r31
    1706:	f3 fd       	sbrc	r31, 3
    1708:	1a c0       	rjmp	.+52     	; 0x173e <vfprintf+0x494>
    170a:	85 2d       	mov	r24, r5
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	08 17       	cp	r16, r24
    1710:	19 07       	cpc	r17, r25
    1712:	a8 f4       	brcc	.+42     	; 0x173e <vfprintf+0x494>
    1714:	b7 01       	movw	r22, r14
    1716:	80 e2       	ldi	r24, 0x20	; 32
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    171e:	5a 94       	dec	r5
    1720:	f4 cf       	rjmp	.-24     	; 0x170a <vfprintf+0x460>
    1722:	f6 01       	movw	r30, r12
    1724:	97 fc       	sbrc	r9, 7
    1726:	85 91       	lpm	r24, Z+
    1728:	97 fe       	sbrs	r9, 7
    172a:	81 91       	ld	r24, Z+
    172c:	6f 01       	movw	r12, r30
    172e:	b7 01       	movw	r22, r14
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    1736:	51 10       	cpse	r5, r1
    1738:	5a 94       	dec	r5
    173a:	01 50       	subi	r16, 0x01	; 1
    173c:	11 09       	sbc	r17, r1
    173e:	01 15       	cp	r16, r1
    1740:	11 05       	cpc	r17, r1
    1742:	79 f7       	brne	.-34     	; 0x1722 <vfprintf+0x478>
    1744:	f7 c0       	rjmp	.+494    	; 0x1934 <vfprintf+0x68a>
    1746:	84 36       	cpi	r24, 0x64	; 100
    1748:	11 f0       	breq	.+4      	; 0x174e <vfprintf+0x4a4>
    174a:	89 36       	cpi	r24, 0x69	; 105
    174c:	61 f5       	brne	.+88     	; 0x17a6 <vfprintf+0x4fc>
    174e:	56 01       	movw	r10, r12
    1750:	97 fe       	sbrs	r9, 7
    1752:	09 c0       	rjmp	.+18     	; 0x1766 <vfprintf+0x4bc>
    1754:	24 e0       	ldi	r18, 0x04	; 4
    1756:	a2 0e       	add	r10, r18
    1758:	b1 1c       	adc	r11, r1
    175a:	f6 01       	movw	r30, r12
    175c:	60 81       	ld	r22, Z
    175e:	71 81       	ldd	r23, Z+1	; 0x01
    1760:	82 81       	ldd	r24, Z+2	; 0x02
    1762:	93 81       	ldd	r25, Z+3	; 0x03
    1764:	0a c0       	rjmp	.+20     	; 0x177a <vfprintf+0x4d0>
    1766:	f2 e0       	ldi	r31, 0x02	; 2
    1768:	af 0e       	add	r10, r31
    176a:	b1 1c       	adc	r11, r1
    176c:	f6 01       	movw	r30, r12
    176e:	60 81       	ld	r22, Z
    1770:	71 81       	ldd	r23, Z+1	; 0x01
    1772:	07 2e       	mov	r0, r23
    1774:	00 0c       	add	r0, r0
    1776:	88 0b       	sbc	r24, r24
    1778:	99 0b       	sbc	r25, r25
    177a:	f9 2d       	mov	r31, r9
    177c:	ff 76       	andi	r31, 0x6F	; 111
    177e:	9f 2e       	mov	r9, r31
    1780:	97 ff       	sbrs	r25, 7
    1782:	09 c0       	rjmp	.+18     	; 0x1796 <vfprintf+0x4ec>
    1784:	90 95       	com	r25
    1786:	80 95       	com	r24
    1788:	70 95       	com	r23
    178a:	61 95       	neg	r22
    178c:	7f 4f       	sbci	r23, 0xFF	; 255
    178e:	8f 4f       	sbci	r24, 0xFF	; 255
    1790:	9f 4f       	sbci	r25, 0xFF	; 255
    1792:	f0 68       	ori	r31, 0x80	; 128
    1794:	9f 2e       	mov	r9, r31
    1796:	2a e0       	ldi	r18, 0x0A	; 10
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	a3 01       	movw	r20, r6
    179c:	0e 94 80 10 	call	0x2100	; 0x2100 <__ultoa_invert>
    17a0:	c8 2e       	mov	r12, r24
    17a2:	c6 18       	sub	r12, r6
    17a4:	3f c0       	rjmp	.+126    	; 0x1824 <vfprintf+0x57a>
    17a6:	09 2d       	mov	r16, r9
    17a8:	85 37       	cpi	r24, 0x75	; 117
    17aa:	21 f4       	brne	.+8      	; 0x17b4 <vfprintf+0x50a>
    17ac:	0f 7e       	andi	r16, 0xEF	; 239
    17ae:	2a e0       	ldi	r18, 0x0A	; 10
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	1d c0       	rjmp	.+58     	; 0x17ee <vfprintf+0x544>
    17b4:	09 7f       	andi	r16, 0xF9	; 249
    17b6:	8f 36       	cpi	r24, 0x6F	; 111
    17b8:	91 f0       	breq	.+36     	; 0x17de <vfprintf+0x534>
    17ba:	18 f4       	brcc	.+6      	; 0x17c2 <vfprintf+0x518>
    17bc:	88 35       	cpi	r24, 0x58	; 88
    17be:	59 f0       	breq	.+22     	; 0x17d6 <vfprintf+0x52c>
    17c0:	c3 c0       	rjmp	.+390    	; 0x1948 <vfprintf+0x69e>
    17c2:	80 37       	cpi	r24, 0x70	; 112
    17c4:	19 f0       	breq	.+6      	; 0x17cc <vfprintf+0x522>
    17c6:	88 37       	cpi	r24, 0x78	; 120
    17c8:	11 f0       	breq	.+4      	; 0x17ce <vfprintf+0x524>
    17ca:	be c0       	rjmp	.+380    	; 0x1948 <vfprintf+0x69e>
    17cc:	00 61       	ori	r16, 0x10	; 16
    17ce:	04 ff       	sbrs	r16, 4
    17d0:	09 c0       	rjmp	.+18     	; 0x17e4 <vfprintf+0x53a>
    17d2:	04 60       	ori	r16, 0x04	; 4
    17d4:	07 c0       	rjmp	.+14     	; 0x17e4 <vfprintf+0x53a>
    17d6:	94 fe       	sbrs	r9, 4
    17d8:	08 c0       	rjmp	.+16     	; 0x17ea <vfprintf+0x540>
    17da:	06 60       	ori	r16, 0x06	; 6
    17dc:	06 c0       	rjmp	.+12     	; 0x17ea <vfprintf+0x540>
    17de:	28 e0       	ldi	r18, 0x08	; 8
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	05 c0       	rjmp	.+10     	; 0x17ee <vfprintf+0x544>
    17e4:	20 e1       	ldi	r18, 0x10	; 16
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <vfprintf+0x544>
    17ea:	20 e1       	ldi	r18, 0x10	; 16
    17ec:	32 e0       	ldi	r19, 0x02	; 2
    17ee:	56 01       	movw	r10, r12
    17f0:	07 ff       	sbrs	r16, 7
    17f2:	09 c0       	rjmp	.+18     	; 0x1806 <vfprintf+0x55c>
    17f4:	84 e0       	ldi	r24, 0x04	; 4
    17f6:	a8 0e       	add	r10, r24
    17f8:	b1 1c       	adc	r11, r1
    17fa:	f6 01       	movw	r30, r12
    17fc:	60 81       	ld	r22, Z
    17fe:	71 81       	ldd	r23, Z+1	; 0x01
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	93 81       	ldd	r25, Z+3	; 0x03
    1804:	08 c0       	rjmp	.+16     	; 0x1816 <vfprintf+0x56c>
    1806:	f2 e0       	ldi	r31, 0x02	; 2
    1808:	af 0e       	add	r10, r31
    180a:	b1 1c       	adc	r11, r1
    180c:	f6 01       	movw	r30, r12
    180e:	60 81       	ld	r22, Z
    1810:	71 81       	ldd	r23, Z+1	; 0x01
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	a3 01       	movw	r20, r6
    1818:	0e 94 80 10 	call	0x2100	; 0x2100 <__ultoa_invert>
    181c:	c8 2e       	mov	r12, r24
    181e:	c6 18       	sub	r12, r6
    1820:	0f 77       	andi	r16, 0x7F	; 127
    1822:	90 2e       	mov	r9, r16
    1824:	96 fe       	sbrs	r9, 6
    1826:	0b c0       	rjmp	.+22     	; 0x183e <vfprintf+0x594>
    1828:	09 2d       	mov	r16, r9
    182a:	0e 7f       	andi	r16, 0xFE	; 254
    182c:	c1 16       	cp	r12, r17
    182e:	50 f4       	brcc	.+20     	; 0x1844 <vfprintf+0x59a>
    1830:	94 fe       	sbrs	r9, 4
    1832:	0a c0       	rjmp	.+20     	; 0x1848 <vfprintf+0x59e>
    1834:	92 fc       	sbrc	r9, 2
    1836:	08 c0       	rjmp	.+16     	; 0x1848 <vfprintf+0x59e>
    1838:	09 2d       	mov	r16, r9
    183a:	0e 7e       	andi	r16, 0xEE	; 238
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <vfprintf+0x59e>
    183e:	dc 2c       	mov	r13, r12
    1840:	09 2d       	mov	r16, r9
    1842:	03 c0       	rjmp	.+6      	; 0x184a <vfprintf+0x5a0>
    1844:	dc 2c       	mov	r13, r12
    1846:	01 c0       	rjmp	.+2      	; 0x184a <vfprintf+0x5a0>
    1848:	d1 2e       	mov	r13, r17
    184a:	04 ff       	sbrs	r16, 4
    184c:	0d c0       	rjmp	.+26     	; 0x1868 <vfprintf+0x5be>
    184e:	fe 01       	movw	r30, r28
    1850:	ec 0d       	add	r30, r12
    1852:	f1 1d       	adc	r31, r1
    1854:	80 81       	ld	r24, Z
    1856:	80 33       	cpi	r24, 0x30	; 48
    1858:	11 f4       	brne	.+4      	; 0x185e <vfprintf+0x5b4>
    185a:	09 7e       	andi	r16, 0xE9	; 233
    185c:	09 c0       	rjmp	.+18     	; 0x1870 <vfprintf+0x5c6>
    185e:	02 ff       	sbrs	r16, 2
    1860:	06 c0       	rjmp	.+12     	; 0x186e <vfprintf+0x5c4>
    1862:	d3 94       	inc	r13
    1864:	d3 94       	inc	r13
    1866:	04 c0       	rjmp	.+8      	; 0x1870 <vfprintf+0x5c6>
    1868:	80 2f       	mov	r24, r16
    186a:	86 78       	andi	r24, 0x86	; 134
    186c:	09 f0       	breq	.+2      	; 0x1870 <vfprintf+0x5c6>
    186e:	d3 94       	inc	r13
    1870:	03 fd       	sbrc	r16, 3
    1872:	11 c0       	rjmp	.+34     	; 0x1896 <vfprintf+0x5ec>
    1874:	00 ff       	sbrs	r16, 0
    1876:	06 c0       	rjmp	.+12     	; 0x1884 <vfprintf+0x5da>
    1878:	1c 2d       	mov	r17, r12
    187a:	d5 14       	cp	r13, r5
    187c:	80 f4       	brcc	.+32     	; 0x189e <vfprintf+0x5f4>
    187e:	15 0d       	add	r17, r5
    1880:	1d 19       	sub	r17, r13
    1882:	0d c0       	rjmp	.+26     	; 0x189e <vfprintf+0x5f4>
    1884:	d5 14       	cp	r13, r5
    1886:	58 f4       	brcc	.+22     	; 0x189e <vfprintf+0x5f4>
    1888:	b7 01       	movw	r22, r14
    188a:	80 e2       	ldi	r24, 0x20	; 32
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    1892:	d3 94       	inc	r13
    1894:	f7 cf       	rjmp	.-18     	; 0x1884 <vfprintf+0x5da>
    1896:	d5 14       	cp	r13, r5
    1898:	10 f4       	brcc	.+4      	; 0x189e <vfprintf+0x5f4>
    189a:	5d 18       	sub	r5, r13
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <vfprintf+0x5f6>
    189e:	51 2c       	mov	r5, r1
    18a0:	04 ff       	sbrs	r16, 4
    18a2:	10 c0       	rjmp	.+32     	; 0x18c4 <vfprintf+0x61a>
    18a4:	b7 01       	movw	r22, r14
    18a6:	80 e3       	ldi	r24, 0x30	; 48
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    18ae:	02 ff       	sbrs	r16, 2
    18b0:	17 c0       	rjmp	.+46     	; 0x18e0 <vfprintf+0x636>
    18b2:	01 fd       	sbrc	r16, 1
    18b4:	03 c0       	rjmp	.+6      	; 0x18bc <vfprintf+0x612>
    18b6:	88 e7       	ldi	r24, 0x78	; 120
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <vfprintf+0x616>
    18bc:	88 e5       	ldi	r24, 0x58	; 88
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	b7 01       	movw	r22, r14
    18c2:	0c c0       	rjmp	.+24     	; 0x18dc <vfprintf+0x632>
    18c4:	80 2f       	mov	r24, r16
    18c6:	86 78       	andi	r24, 0x86	; 134
    18c8:	59 f0       	breq	.+22     	; 0x18e0 <vfprintf+0x636>
    18ca:	01 ff       	sbrs	r16, 1
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <vfprintf+0x628>
    18ce:	8b e2       	ldi	r24, 0x2B	; 43
    18d0:	01 c0       	rjmp	.+2      	; 0x18d4 <vfprintf+0x62a>
    18d2:	80 e2       	ldi	r24, 0x20	; 32
    18d4:	07 fd       	sbrc	r16, 7
    18d6:	8d e2       	ldi	r24, 0x2D	; 45
    18d8:	b7 01       	movw	r22, r14
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    18e0:	c1 16       	cp	r12, r17
    18e2:	38 f4       	brcc	.+14     	; 0x18f2 <vfprintf+0x648>
    18e4:	b7 01       	movw	r22, r14
    18e6:	80 e3       	ldi	r24, 0x30	; 48
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    18ee:	11 50       	subi	r17, 0x01	; 1
    18f0:	f7 cf       	rjmp	.-18     	; 0x18e0 <vfprintf+0x636>
    18f2:	ca 94       	dec	r12
    18f4:	f3 01       	movw	r30, r6
    18f6:	ec 0d       	add	r30, r12
    18f8:	f1 1d       	adc	r31, r1
    18fa:	80 81       	ld	r24, Z
    18fc:	b7 01       	movw	r22, r14
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    1904:	c1 10       	cpse	r12, r1
    1906:	f5 cf       	rjmp	.-22     	; 0x18f2 <vfprintf+0x648>
    1908:	15 c0       	rjmp	.+42     	; 0x1934 <vfprintf+0x68a>
    190a:	f4 e0       	ldi	r31, 0x04	; 4
    190c:	f5 15       	cp	r31, r5
    190e:	60 f5       	brcc	.+88     	; 0x1968 <vfprintf+0x6be>
    1910:	84 e0       	ldi	r24, 0x04	; 4
    1912:	58 1a       	sub	r5, r24
    1914:	93 fe       	sbrs	r9, 3
    1916:	1f c0       	rjmp	.+62     	; 0x1956 <vfprintf+0x6ac>
    1918:	01 11       	cpse	r16, r1
    191a:	27 c0       	rjmp	.+78     	; 0x196a <vfprintf+0x6c0>
    191c:	2c 85       	ldd	r18, Y+12	; 0x0c
    191e:	23 ff       	sbrs	r18, 3
    1920:	2a c0       	rjmp	.+84     	; 0x1976 <vfprintf+0x6cc>
    1922:	0c ec       	ldi	r16, 0xCC	; 204
    1924:	10 e0       	ldi	r17, 0x00	; 0
    1926:	39 2d       	mov	r19, r9
    1928:	30 71       	andi	r19, 0x10	; 16
    192a:	93 2e       	mov	r9, r19
    192c:	f8 01       	movw	r30, r16
    192e:	84 91       	lpm	r24, Z
    1930:	81 11       	cpse	r24, r1
    1932:	24 c0       	rjmp	.+72     	; 0x197c <vfprintf+0x6d2>
    1934:	55 20       	and	r5, r5
    1936:	09 f4       	brne	.+2      	; 0x193a <vfprintf+0x690>
    1938:	e4 cc       	rjmp	.-1592   	; 0x1302 <vfprintf+0x58>
    193a:	b7 01       	movw	r22, r14
    193c:	80 e2       	ldi	r24, 0x20	; 32
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    1944:	5a 94       	dec	r5
    1946:	f6 cf       	rjmp	.-20     	; 0x1934 <vfprintf+0x68a>
    1948:	f7 01       	movw	r30, r14
    194a:	86 81       	ldd	r24, Z+6	; 0x06
    194c:	97 81       	ldd	r25, Z+7	; 0x07
    194e:	26 c0       	rjmp	.+76     	; 0x199c <vfprintf+0x6f2>
    1950:	8f ef       	ldi	r24, 0xFF	; 255
    1952:	9f ef       	ldi	r25, 0xFF	; 255
    1954:	23 c0       	rjmp	.+70     	; 0x199c <vfprintf+0x6f2>
    1956:	b7 01       	movw	r22, r14
    1958:	80 e2       	ldi	r24, 0x20	; 32
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    1960:	5a 94       	dec	r5
    1962:	51 10       	cpse	r5, r1
    1964:	f8 cf       	rjmp	.-16     	; 0x1956 <vfprintf+0x6ac>
    1966:	d8 cf       	rjmp	.-80     	; 0x1918 <vfprintf+0x66e>
    1968:	51 2c       	mov	r5, r1
    196a:	b7 01       	movw	r22, r14
    196c:	80 2f       	mov	r24, r16
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    1974:	d3 cf       	rjmp	.-90     	; 0x191c <vfprintf+0x672>
    1976:	00 ed       	ldi	r16, 0xD0	; 208
    1978:	10 e0       	ldi	r17, 0x00	; 0
    197a:	d5 cf       	rjmp	.-86     	; 0x1926 <vfprintf+0x67c>
    197c:	91 10       	cpse	r9, r1
    197e:	80 52       	subi	r24, 0x20	; 32
    1980:	b7 01       	movw	r22, r14
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <fputc>
    1988:	0f 5f       	subi	r16, 0xFF	; 255
    198a:	1f 4f       	sbci	r17, 0xFF	; 255
    198c:	cf cf       	rjmp	.-98     	; 0x192c <vfprintf+0x682>
    198e:	23 e0       	ldi	r18, 0x03	; 3
    1990:	25 15       	cp	r18, r5
    1992:	10 f4       	brcc	.+4      	; 0x1998 <vfprintf+0x6ee>
    1994:	83 e0       	ldi	r24, 0x03	; 3
    1996:	bd cf       	rjmp	.-134    	; 0x1912 <vfprintf+0x668>
    1998:	51 2c       	mov	r5, r1
    199a:	c0 cf       	rjmp	.-128    	; 0x191c <vfprintf+0x672>
    199c:	60 96       	adiw	r28, 0x10	; 16
    199e:	e2 e1       	ldi	r30, 0x12	; 18
    19a0:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <__epilogue_restores__>

000019a4 <__udivmodsi4>:
    19a4:	a1 e2       	ldi	r26, 0x21	; 33
    19a6:	1a 2e       	mov	r1, r26
    19a8:	aa 1b       	sub	r26, r26
    19aa:	bb 1b       	sub	r27, r27
    19ac:	fd 01       	movw	r30, r26
    19ae:	0d c0       	rjmp	.+26     	; 0x19ca <__udivmodsi4_ep>

000019b0 <__udivmodsi4_loop>:
    19b0:	aa 1f       	adc	r26, r26
    19b2:	bb 1f       	adc	r27, r27
    19b4:	ee 1f       	adc	r30, r30
    19b6:	ff 1f       	adc	r31, r31
    19b8:	a2 17       	cp	r26, r18
    19ba:	b3 07       	cpc	r27, r19
    19bc:	e4 07       	cpc	r30, r20
    19be:	f5 07       	cpc	r31, r21
    19c0:	20 f0       	brcs	.+8      	; 0x19ca <__udivmodsi4_ep>
    19c2:	a2 1b       	sub	r26, r18
    19c4:	b3 0b       	sbc	r27, r19
    19c6:	e4 0b       	sbc	r30, r20
    19c8:	f5 0b       	sbc	r31, r21

000019ca <__udivmodsi4_ep>:
    19ca:	66 1f       	adc	r22, r22
    19cc:	77 1f       	adc	r23, r23
    19ce:	88 1f       	adc	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	1a 94       	dec	r1
    19d4:	69 f7       	brne	.-38     	; 0x19b0 <__udivmodsi4_loop>
    19d6:	60 95       	com	r22
    19d8:	70 95       	com	r23
    19da:	80 95       	com	r24
    19dc:	90 95       	com	r25
    19de:	9b 01       	movw	r18, r22
    19e0:	ac 01       	movw	r20, r24
    19e2:	bd 01       	movw	r22, r26
    19e4:	cf 01       	movw	r24, r30
    19e6:	08 95       	ret

000019e8 <__prologue_saves__>:
    19e8:	2f 92       	push	r2
    19ea:	3f 92       	push	r3
    19ec:	4f 92       	push	r4
    19ee:	5f 92       	push	r5
    19f0:	6f 92       	push	r6
    19f2:	7f 92       	push	r7
    19f4:	8f 92       	push	r8
    19f6:	9f 92       	push	r9
    19f8:	af 92       	push	r10
    19fa:	bf 92       	push	r11
    19fc:	cf 92       	push	r12
    19fe:	df 92       	push	r13
    1a00:	ef 92       	push	r14
    1a02:	ff 92       	push	r15
    1a04:	0f 93       	push	r16
    1a06:	1f 93       	push	r17
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	ca 1b       	sub	r28, r26
    1a12:	db 0b       	sbc	r29, r27
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	09 94       	ijmp

00001a20 <__epilogue_restores__>:
    1a20:	2a 88       	ldd	r2, Y+18	; 0x12
    1a22:	39 88       	ldd	r3, Y+17	; 0x11
    1a24:	48 88       	ldd	r4, Y+16	; 0x10
    1a26:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a28:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a2a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a30:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a32:	b9 84       	ldd	r11, Y+9	; 0x09
    1a34:	c8 84       	ldd	r12, Y+8	; 0x08
    1a36:	df 80       	ldd	r13, Y+7	; 0x07
    1a38:	ee 80       	ldd	r14, Y+6	; 0x06
    1a3a:	fd 80       	ldd	r15, Y+5	; 0x05
    1a3c:	0c 81       	ldd	r16, Y+4	; 0x04
    1a3e:	1b 81       	ldd	r17, Y+3	; 0x03
    1a40:	aa 81       	ldd	r26, Y+2	; 0x02
    1a42:	b9 81       	ldd	r27, Y+1	; 0x01
    1a44:	ce 0f       	add	r28, r30
    1a46:	d1 1d       	adc	r29, r1
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	ed 01       	movw	r28, r26
    1a54:	08 95       	ret

00001a56 <__divsf3>:
    1a56:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__divsf3x>
    1a5a:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__fp_round>
    1a5e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__fp_pscB>
    1a62:	58 f0       	brcs	.+22     	; 0x1a7a <__divsf3+0x24>
    1a64:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__fp_pscA>
    1a68:	40 f0       	brcs	.+16     	; 0x1a7a <__divsf3+0x24>
    1a6a:	29 f4       	brne	.+10     	; 0x1a76 <__divsf3+0x20>
    1a6c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a6e:	29 f0       	breq	.+10     	; 0x1a7a <__divsf3+0x24>
    1a70:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <__fp_inf>
    1a74:	51 11       	cpse	r21, r1
    1a76:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__fp_szero>
    1a7a:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_nan>

00001a7e <__divsf3x>:
    1a7e:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__fp_split3>
    1a82:	68 f3       	brcs	.-38     	; 0x1a5e <__divsf3+0x8>

00001a84 <__divsf3_pse>:
    1a84:	99 23       	and	r25, r25
    1a86:	b1 f3       	breq	.-20     	; 0x1a74 <__divsf3+0x1e>
    1a88:	55 23       	and	r21, r21
    1a8a:	91 f3       	breq	.-28     	; 0x1a70 <__divsf3+0x1a>
    1a8c:	95 1b       	sub	r25, r21
    1a8e:	55 0b       	sbc	r21, r21
    1a90:	bb 27       	eor	r27, r27
    1a92:	aa 27       	eor	r26, r26
    1a94:	62 17       	cp	r22, r18
    1a96:	73 07       	cpc	r23, r19
    1a98:	84 07       	cpc	r24, r20
    1a9a:	38 f0       	brcs	.+14     	; 0x1aaa <__divsf3_pse+0x26>
    1a9c:	9f 5f       	subi	r25, 0xFF	; 255
    1a9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa0:	22 0f       	add	r18, r18
    1aa2:	33 1f       	adc	r19, r19
    1aa4:	44 1f       	adc	r20, r20
    1aa6:	aa 1f       	adc	r26, r26
    1aa8:	a9 f3       	breq	.-22     	; 0x1a94 <__divsf3_pse+0x10>
    1aaa:	35 d0       	rcall	.+106    	; 0x1b16 <__divsf3_pse+0x92>
    1aac:	0e 2e       	mov	r0, r30
    1aae:	3a f0       	brmi	.+14     	; 0x1abe <__divsf3_pse+0x3a>
    1ab0:	e0 e8       	ldi	r30, 0x80	; 128
    1ab2:	32 d0       	rcall	.+100    	; 0x1b18 <__divsf3_pse+0x94>
    1ab4:	91 50       	subi	r25, 0x01	; 1
    1ab6:	50 40       	sbci	r21, 0x00	; 0
    1ab8:	e6 95       	lsr	r30
    1aba:	00 1c       	adc	r0, r0
    1abc:	ca f7       	brpl	.-14     	; 0x1ab0 <__divsf3_pse+0x2c>
    1abe:	2b d0       	rcall	.+86     	; 0x1b16 <__divsf3_pse+0x92>
    1ac0:	fe 2f       	mov	r31, r30
    1ac2:	29 d0       	rcall	.+82     	; 0x1b16 <__divsf3_pse+0x92>
    1ac4:	66 0f       	add	r22, r22
    1ac6:	77 1f       	adc	r23, r23
    1ac8:	88 1f       	adc	r24, r24
    1aca:	bb 1f       	adc	r27, r27
    1acc:	26 17       	cp	r18, r22
    1ace:	37 07       	cpc	r19, r23
    1ad0:	48 07       	cpc	r20, r24
    1ad2:	ab 07       	cpc	r26, r27
    1ad4:	b0 e8       	ldi	r27, 0x80	; 128
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <__divsf3_pse+0x56>
    1ad8:	bb 0b       	sbc	r27, r27
    1ada:	80 2d       	mov	r24, r0
    1adc:	bf 01       	movw	r22, r30
    1ade:	ff 27       	eor	r31, r31
    1ae0:	93 58       	subi	r25, 0x83	; 131
    1ae2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae4:	3a f0       	brmi	.+14     	; 0x1af4 <__divsf3_pse+0x70>
    1ae6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ae8:	51 05       	cpc	r21, r1
    1aea:	78 f0       	brcs	.+30     	; 0x1b0a <__divsf3_pse+0x86>
    1aec:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <__fp_inf>
    1af0:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__fp_szero>
    1af4:	5f 3f       	cpi	r21, 0xFF	; 255
    1af6:	e4 f3       	brlt	.-8      	; 0x1af0 <__divsf3_pse+0x6c>
    1af8:	98 3e       	cpi	r25, 0xE8	; 232
    1afa:	d4 f3       	brlt	.-12     	; 0x1af0 <__divsf3_pse+0x6c>
    1afc:	86 95       	lsr	r24
    1afe:	77 95       	ror	r23
    1b00:	67 95       	ror	r22
    1b02:	b7 95       	ror	r27
    1b04:	f7 95       	ror	r31
    1b06:	9f 5f       	subi	r25, 0xFF	; 255
    1b08:	c9 f7       	brne	.-14     	; 0x1afc <__divsf3_pse+0x78>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	91 1d       	adc	r25, r1
    1b0e:	96 95       	lsr	r25
    1b10:	87 95       	ror	r24
    1b12:	97 f9       	bld	r25, 7
    1b14:	08 95       	ret
    1b16:	e1 e0       	ldi	r30, 0x01	; 1
    1b18:	66 0f       	add	r22, r22
    1b1a:	77 1f       	adc	r23, r23
    1b1c:	88 1f       	adc	r24, r24
    1b1e:	bb 1f       	adc	r27, r27
    1b20:	62 17       	cp	r22, r18
    1b22:	73 07       	cpc	r23, r19
    1b24:	84 07       	cpc	r24, r20
    1b26:	ba 07       	cpc	r27, r26
    1b28:	20 f0       	brcs	.+8      	; 0x1b32 <__divsf3_pse+0xae>
    1b2a:	62 1b       	sub	r22, r18
    1b2c:	73 0b       	sbc	r23, r19
    1b2e:	84 0b       	sbc	r24, r20
    1b30:	ba 0b       	sbc	r27, r26
    1b32:	ee 1f       	adc	r30, r30
    1b34:	88 f7       	brcc	.-30     	; 0x1b18 <__divsf3_pse+0x94>
    1b36:	e0 95       	com	r30
    1b38:	08 95       	ret

00001b3a <__fixsfsi>:
    1b3a:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
    1b3e:	68 94       	set
    1b40:	b1 11       	cpse	r27, r1
    1b42:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__fp_szero>
    1b46:	08 95       	ret

00001b48 <__fixunssfsi>:
    1b48:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__fp_splitA>
    1b4c:	88 f0       	brcs	.+34     	; 0x1b70 <__fixunssfsi+0x28>
    1b4e:	9f 57       	subi	r25, 0x7F	; 127
    1b50:	98 f0       	brcs	.+38     	; 0x1b78 <__fixunssfsi+0x30>
    1b52:	b9 2f       	mov	r27, r25
    1b54:	99 27       	eor	r25, r25
    1b56:	b7 51       	subi	r27, 0x17	; 23
    1b58:	b0 f0       	brcs	.+44     	; 0x1b86 <__fixunssfsi+0x3e>
    1b5a:	e1 f0       	breq	.+56     	; 0x1b94 <__fixunssfsi+0x4c>
    1b5c:	66 0f       	add	r22, r22
    1b5e:	77 1f       	adc	r23, r23
    1b60:	88 1f       	adc	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	1a f0       	brmi	.+6      	; 0x1b6c <__fixunssfsi+0x24>
    1b66:	ba 95       	dec	r27
    1b68:	c9 f7       	brne	.-14     	; 0x1b5c <__fixunssfsi+0x14>
    1b6a:	14 c0       	rjmp	.+40     	; 0x1b94 <__fixunssfsi+0x4c>
    1b6c:	b1 30       	cpi	r27, 0x01	; 1
    1b6e:	91 f0       	breq	.+36     	; 0x1b94 <__fixunssfsi+0x4c>
    1b70:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__fp_zero>
    1b74:	b1 e0       	ldi	r27, 0x01	; 1
    1b76:	08 95       	ret
    1b78:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <__fp_zero>
    1b7c:	67 2f       	mov	r22, r23
    1b7e:	78 2f       	mov	r23, r24
    1b80:	88 27       	eor	r24, r24
    1b82:	b8 5f       	subi	r27, 0xF8	; 248
    1b84:	39 f0       	breq	.+14     	; 0x1b94 <__fixunssfsi+0x4c>
    1b86:	b9 3f       	cpi	r27, 0xF9	; 249
    1b88:	cc f3       	brlt	.-14     	; 0x1b7c <__fixunssfsi+0x34>
    1b8a:	86 95       	lsr	r24
    1b8c:	77 95       	ror	r23
    1b8e:	67 95       	ror	r22
    1b90:	b3 95       	inc	r27
    1b92:	d9 f7       	brne	.-10     	; 0x1b8a <__fixunssfsi+0x42>
    1b94:	3e f4       	brtc	.+14     	; 0x1ba4 <__fixunssfsi+0x5c>
    1b96:	90 95       	com	r25
    1b98:	80 95       	com	r24
    1b9a:	70 95       	com	r23
    1b9c:	61 95       	neg	r22
    1b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba4:	08 95       	ret

00001ba6 <__floatunsisf>:
    1ba6:	e8 94       	clt
    1ba8:	09 c0       	rjmp	.+18     	; 0x1bbc <__floatsisf+0x12>

00001baa <__floatsisf>:
    1baa:	97 fb       	bst	r25, 7
    1bac:	3e f4       	brtc	.+14     	; 0x1bbc <__floatsisf+0x12>
    1bae:	90 95       	com	r25
    1bb0:	80 95       	com	r24
    1bb2:	70 95       	com	r23
    1bb4:	61 95       	neg	r22
    1bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bba:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbc:	99 23       	and	r25, r25
    1bbe:	a9 f0       	breq	.+42     	; 0x1bea <__floatsisf+0x40>
    1bc0:	f9 2f       	mov	r31, r25
    1bc2:	96 e9       	ldi	r25, 0x96	; 150
    1bc4:	bb 27       	eor	r27, r27
    1bc6:	93 95       	inc	r25
    1bc8:	f6 95       	lsr	r31
    1bca:	87 95       	ror	r24
    1bcc:	77 95       	ror	r23
    1bce:	67 95       	ror	r22
    1bd0:	b7 95       	ror	r27
    1bd2:	f1 11       	cpse	r31, r1
    1bd4:	f8 cf       	rjmp	.-16     	; 0x1bc6 <__floatsisf+0x1c>
    1bd6:	fa f4       	brpl	.+62     	; 0x1c16 <__floatsisf+0x6c>
    1bd8:	bb 0f       	add	r27, r27
    1bda:	11 f4       	brne	.+4      	; 0x1be0 <__floatsisf+0x36>
    1bdc:	60 ff       	sbrs	r22, 0
    1bde:	1b c0       	rjmp	.+54     	; 0x1c16 <__floatsisf+0x6c>
    1be0:	6f 5f       	subi	r22, 0xFF	; 255
    1be2:	7f 4f       	sbci	r23, 0xFF	; 255
    1be4:	8f 4f       	sbci	r24, 0xFF	; 255
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	16 c0       	rjmp	.+44     	; 0x1c16 <__floatsisf+0x6c>
    1bea:	88 23       	and	r24, r24
    1bec:	11 f0       	breq	.+4      	; 0x1bf2 <__floatsisf+0x48>
    1bee:	96 e9       	ldi	r25, 0x96	; 150
    1bf0:	11 c0       	rjmp	.+34     	; 0x1c14 <__floatsisf+0x6a>
    1bf2:	77 23       	and	r23, r23
    1bf4:	21 f0       	breq	.+8      	; 0x1bfe <__floatsisf+0x54>
    1bf6:	9e e8       	ldi	r25, 0x8E	; 142
    1bf8:	87 2f       	mov	r24, r23
    1bfa:	76 2f       	mov	r23, r22
    1bfc:	05 c0       	rjmp	.+10     	; 0x1c08 <__floatsisf+0x5e>
    1bfe:	66 23       	and	r22, r22
    1c00:	71 f0       	breq	.+28     	; 0x1c1e <__floatsisf+0x74>
    1c02:	96 e8       	ldi	r25, 0x86	; 134
    1c04:	86 2f       	mov	r24, r22
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	2a f0       	brmi	.+10     	; 0x1c16 <__floatsisf+0x6c>
    1c0c:	9a 95       	dec	r25
    1c0e:	66 0f       	add	r22, r22
    1c10:	77 1f       	adc	r23, r23
    1c12:	88 1f       	adc	r24, r24
    1c14:	da f7       	brpl	.-10     	; 0x1c0c <__floatsisf+0x62>
    1c16:	88 0f       	add	r24, r24
    1c18:	96 95       	lsr	r25
    1c1a:	87 95       	ror	r24
    1c1c:	97 f9       	bld	r25, 7
    1c1e:	08 95       	ret

00001c20 <__fp_inf>:
    1c20:	97 f9       	bld	r25, 7
    1c22:	9f 67       	ori	r25, 0x7F	; 127
    1c24:	80 e8       	ldi	r24, 0x80	; 128
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	08 95       	ret

00001c2c <__fp_nan>:
    1c2c:	9f ef       	ldi	r25, 0xFF	; 255
    1c2e:	80 ec       	ldi	r24, 0xC0	; 192
    1c30:	08 95       	ret

00001c32 <__fp_pscA>:
    1c32:	00 24       	eor	r0, r0
    1c34:	0a 94       	dec	r0
    1c36:	16 16       	cp	r1, r22
    1c38:	17 06       	cpc	r1, r23
    1c3a:	18 06       	cpc	r1, r24
    1c3c:	09 06       	cpc	r0, r25
    1c3e:	08 95       	ret

00001c40 <__fp_pscB>:
    1c40:	00 24       	eor	r0, r0
    1c42:	0a 94       	dec	r0
    1c44:	12 16       	cp	r1, r18
    1c46:	13 06       	cpc	r1, r19
    1c48:	14 06       	cpc	r1, r20
    1c4a:	05 06       	cpc	r0, r21
    1c4c:	08 95       	ret

00001c4e <__fp_round>:
    1c4e:	09 2e       	mov	r0, r25
    1c50:	03 94       	inc	r0
    1c52:	00 0c       	add	r0, r0
    1c54:	11 f4       	brne	.+4      	; 0x1c5a <__fp_round+0xc>
    1c56:	88 23       	and	r24, r24
    1c58:	52 f0       	brmi	.+20     	; 0x1c6e <__fp_round+0x20>
    1c5a:	bb 0f       	add	r27, r27
    1c5c:	40 f4       	brcc	.+16     	; 0x1c6e <__fp_round+0x20>
    1c5e:	bf 2b       	or	r27, r31
    1c60:	11 f4       	brne	.+4      	; 0x1c66 <__fp_round+0x18>
    1c62:	60 ff       	sbrs	r22, 0
    1c64:	04 c0       	rjmp	.+8      	; 0x1c6e <__fp_round+0x20>
    1c66:	6f 5f       	subi	r22, 0xFF	; 255
    1c68:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6e:	08 95       	ret

00001c70 <__fp_split3>:
    1c70:	57 fd       	sbrc	r21, 7
    1c72:	90 58       	subi	r25, 0x80	; 128
    1c74:	44 0f       	add	r20, r20
    1c76:	55 1f       	adc	r21, r21
    1c78:	59 f0       	breq	.+22     	; 0x1c90 <__fp_splitA+0x10>
    1c7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c7c:	71 f0       	breq	.+28     	; 0x1c9a <__fp_splitA+0x1a>
    1c7e:	47 95       	ror	r20

00001c80 <__fp_splitA>:
    1c80:	88 0f       	add	r24, r24
    1c82:	97 fb       	bst	r25, 7
    1c84:	99 1f       	adc	r25, r25
    1c86:	61 f0       	breq	.+24     	; 0x1ca0 <__fp_splitA+0x20>
    1c88:	9f 3f       	cpi	r25, 0xFF	; 255
    1c8a:	79 f0       	breq	.+30     	; 0x1caa <__fp_splitA+0x2a>
    1c8c:	87 95       	ror	r24
    1c8e:	08 95       	ret
    1c90:	12 16       	cp	r1, r18
    1c92:	13 06       	cpc	r1, r19
    1c94:	14 06       	cpc	r1, r20
    1c96:	55 1f       	adc	r21, r21
    1c98:	f2 cf       	rjmp	.-28     	; 0x1c7e <__fp_split3+0xe>
    1c9a:	46 95       	lsr	r20
    1c9c:	f1 df       	rcall	.-30     	; 0x1c80 <__fp_splitA>
    1c9e:	08 c0       	rjmp	.+16     	; 0x1cb0 <__fp_splitA+0x30>
    1ca0:	16 16       	cp	r1, r22
    1ca2:	17 06       	cpc	r1, r23
    1ca4:	18 06       	cpc	r1, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	f1 cf       	rjmp	.-30     	; 0x1c8c <__fp_splitA+0xc>
    1caa:	86 95       	lsr	r24
    1cac:	71 05       	cpc	r23, r1
    1cae:	61 05       	cpc	r22, r1
    1cb0:	08 94       	sec
    1cb2:	08 95       	ret

00001cb4 <__fp_zero>:
    1cb4:	e8 94       	clt

00001cb6 <__fp_szero>:
    1cb6:	bb 27       	eor	r27, r27
    1cb8:	66 27       	eor	r22, r22
    1cba:	77 27       	eor	r23, r23
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	97 f9       	bld	r25, 7
    1cc0:	08 95       	ret

00001cc2 <__mulsf3>:
    1cc2:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3x>
    1cc6:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__fp_round>
    1cca:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__fp_pscA>
    1cce:	38 f0       	brcs	.+14     	; 0x1cde <__mulsf3+0x1c>
    1cd0:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__fp_pscB>
    1cd4:	20 f0       	brcs	.+8      	; 0x1cde <__mulsf3+0x1c>
    1cd6:	95 23       	and	r25, r21
    1cd8:	11 f0       	breq	.+4      	; 0x1cde <__mulsf3+0x1c>
    1cda:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <__fp_inf>
    1cde:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_nan>
    1ce2:	11 24       	eor	r1, r1
    1ce4:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__fp_szero>

00001ce8 <__mulsf3x>:
    1ce8:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__fp_split3>
    1cec:	70 f3       	brcs	.-36     	; 0x1cca <__mulsf3+0x8>

00001cee <__mulsf3_pse>:
    1cee:	95 9f       	mul	r25, r21
    1cf0:	c1 f3       	breq	.-16     	; 0x1ce2 <__mulsf3+0x20>
    1cf2:	95 0f       	add	r25, r21
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	55 1f       	adc	r21, r21
    1cf8:	62 9f       	mul	r22, r18
    1cfa:	f0 01       	movw	r30, r0
    1cfc:	72 9f       	mul	r23, r18
    1cfe:	bb 27       	eor	r27, r27
    1d00:	f0 0d       	add	r31, r0
    1d02:	b1 1d       	adc	r27, r1
    1d04:	63 9f       	mul	r22, r19
    1d06:	aa 27       	eor	r26, r26
    1d08:	f0 0d       	add	r31, r0
    1d0a:	b1 1d       	adc	r27, r1
    1d0c:	aa 1f       	adc	r26, r26
    1d0e:	64 9f       	mul	r22, r20
    1d10:	66 27       	eor	r22, r22
    1d12:	b0 0d       	add	r27, r0
    1d14:	a1 1d       	adc	r26, r1
    1d16:	66 1f       	adc	r22, r22
    1d18:	82 9f       	mul	r24, r18
    1d1a:	22 27       	eor	r18, r18
    1d1c:	b0 0d       	add	r27, r0
    1d1e:	a1 1d       	adc	r26, r1
    1d20:	62 1f       	adc	r22, r18
    1d22:	73 9f       	mul	r23, r19
    1d24:	b0 0d       	add	r27, r0
    1d26:	a1 1d       	adc	r26, r1
    1d28:	62 1f       	adc	r22, r18
    1d2a:	83 9f       	mul	r24, r19
    1d2c:	a0 0d       	add	r26, r0
    1d2e:	61 1d       	adc	r22, r1
    1d30:	22 1f       	adc	r18, r18
    1d32:	74 9f       	mul	r23, r20
    1d34:	33 27       	eor	r19, r19
    1d36:	a0 0d       	add	r26, r0
    1d38:	61 1d       	adc	r22, r1
    1d3a:	23 1f       	adc	r18, r19
    1d3c:	84 9f       	mul	r24, r20
    1d3e:	60 0d       	add	r22, r0
    1d40:	21 1d       	adc	r18, r1
    1d42:	82 2f       	mov	r24, r18
    1d44:	76 2f       	mov	r23, r22
    1d46:	6a 2f       	mov	r22, r26
    1d48:	11 24       	eor	r1, r1
    1d4a:	9f 57       	subi	r25, 0x7F	; 127
    1d4c:	50 40       	sbci	r21, 0x00	; 0
    1d4e:	9a f0       	brmi	.+38     	; 0x1d76 <__mulsf3_pse+0x88>
    1d50:	f1 f0       	breq	.+60     	; 0x1d8e <__mulsf3_pse+0xa0>
    1d52:	88 23       	and	r24, r24
    1d54:	4a f0       	brmi	.+18     	; 0x1d68 <__mulsf3_pse+0x7a>
    1d56:	ee 0f       	add	r30, r30
    1d58:	ff 1f       	adc	r31, r31
    1d5a:	bb 1f       	adc	r27, r27
    1d5c:	66 1f       	adc	r22, r22
    1d5e:	77 1f       	adc	r23, r23
    1d60:	88 1f       	adc	r24, r24
    1d62:	91 50       	subi	r25, 0x01	; 1
    1d64:	50 40       	sbci	r21, 0x00	; 0
    1d66:	a9 f7       	brne	.-22     	; 0x1d52 <__mulsf3_pse+0x64>
    1d68:	9e 3f       	cpi	r25, 0xFE	; 254
    1d6a:	51 05       	cpc	r21, r1
    1d6c:	80 f0       	brcs	.+32     	; 0x1d8e <__mulsf3_pse+0xa0>
    1d6e:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <__fp_inf>
    1d72:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__fp_szero>
    1d76:	5f 3f       	cpi	r21, 0xFF	; 255
    1d78:	e4 f3       	brlt	.-8      	; 0x1d72 <__mulsf3_pse+0x84>
    1d7a:	98 3e       	cpi	r25, 0xE8	; 232
    1d7c:	d4 f3       	brlt	.-12     	; 0x1d72 <__mulsf3_pse+0x84>
    1d7e:	86 95       	lsr	r24
    1d80:	77 95       	ror	r23
    1d82:	67 95       	ror	r22
    1d84:	b7 95       	ror	r27
    1d86:	f7 95       	ror	r31
    1d88:	e7 95       	ror	r30
    1d8a:	9f 5f       	subi	r25, 0xFF	; 255
    1d8c:	c1 f7       	brne	.-16     	; 0x1d7e <__mulsf3_pse+0x90>
    1d8e:	fe 2b       	or	r31, r30
    1d90:	88 0f       	add	r24, r24
    1d92:	91 1d       	adc	r25, r1
    1d94:	96 95       	lsr	r25
    1d96:	87 95       	ror	r24
    1d98:	97 f9       	bld	r25, 7
    1d9a:	08 95       	ret

00001d9c <__ftoa_engine>:
    1d9c:	28 30       	cpi	r18, 0x08	; 8
    1d9e:	08 f0       	brcs	.+2      	; 0x1da2 <__ftoa_engine+0x6>
    1da0:	27 e0       	ldi	r18, 0x07	; 7
    1da2:	33 27       	eor	r19, r19
    1da4:	da 01       	movw	r26, r20
    1da6:	99 0f       	add	r25, r25
    1da8:	31 1d       	adc	r19, r1
    1daa:	87 fd       	sbrc	r24, 7
    1dac:	91 60       	ori	r25, 0x01	; 1
    1dae:	00 96       	adiw	r24, 0x00	; 0
    1db0:	61 05       	cpc	r22, r1
    1db2:	71 05       	cpc	r23, r1
    1db4:	39 f4       	brne	.+14     	; 0x1dc4 <__ftoa_engine+0x28>
    1db6:	32 60       	ori	r19, 0x02	; 2
    1db8:	2e 5f       	subi	r18, 0xFE	; 254
    1dba:	3d 93       	st	X+, r19
    1dbc:	30 e3       	ldi	r19, 0x30	; 48
    1dbe:	2a 95       	dec	r18
    1dc0:	e1 f7       	brne	.-8      	; 0x1dba <__ftoa_engine+0x1e>
    1dc2:	08 95       	ret
    1dc4:	9f 3f       	cpi	r25, 0xFF	; 255
    1dc6:	30 f0       	brcs	.+12     	; 0x1dd4 <__ftoa_engine+0x38>
    1dc8:	80 38       	cpi	r24, 0x80	; 128
    1dca:	71 05       	cpc	r23, r1
    1dcc:	61 05       	cpc	r22, r1
    1dce:	09 f0       	breq	.+2      	; 0x1dd2 <__ftoa_engine+0x36>
    1dd0:	3c 5f       	subi	r19, 0xFC	; 252
    1dd2:	3c 5f       	subi	r19, 0xFC	; 252
    1dd4:	3d 93       	st	X+, r19
    1dd6:	91 30       	cpi	r25, 0x01	; 1
    1dd8:	08 f0       	brcs	.+2      	; 0x1ddc <__ftoa_engine+0x40>
    1dda:	80 68       	ori	r24, 0x80	; 128
    1ddc:	91 1d       	adc	r25, r1
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	1f 93       	push	r17
    1de4:	0f 93       	push	r16
    1de6:	ff 92       	push	r15
    1de8:	ef 92       	push	r14
    1dea:	19 2f       	mov	r17, r25
    1dec:	98 7f       	andi	r25, 0xF8	; 248
    1dee:	96 95       	lsr	r25
    1df0:	e9 2f       	mov	r30, r25
    1df2:	96 95       	lsr	r25
    1df4:	96 95       	lsr	r25
    1df6:	e9 0f       	add	r30, r25
    1df8:	ff 27       	eor	r31, r31
    1dfa:	e2 5d       	subi	r30, 0xD2	; 210
    1dfc:	fe 4f       	sbci	r31, 0xFE	; 254
    1dfe:	99 27       	eor	r25, r25
    1e00:	33 27       	eor	r19, r19
    1e02:	ee 24       	eor	r14, r14
    1e04:	ff 24       	eor	r15, r15
    1e06:	a7 01       	movw	r20, r14
    1e08:	e7 01       	movw	r28, r14
    1e0a:	05 90       	lpm	r0, Z+
    1e0c:	08 94       	sec
    1e0e:	07 94       	ror	r0
    1e10:	28 f4       	brcc	.+10     	; 0x1e1c <__ftoa_engine+0x80>
    1e12:	36 0f       	add	r19, r22
    1e14:	e7 1e       	adc	r14, r23
    1e16:	f8 1e       	adc	r15, r24
    1e18:	49 1f       	adc	r20, r25
    1e1a:	51 1d       	adc	r21, r1
    1e1c:	66 0f       	add	r22, r22
    1e1e:	77 1f       	adc	r23, r23
    1e20:	88 1f       	adc	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	06 94       	lsr	r0
    1e26:	a1 f7       	brne	.-24     	; 0x1e10 <__ftoa_engine+0x74>
    1e28:	05 90       	lpm	r0, Z+
    1e2a:	07 94       	ror	r0
    1e2c:	28 f4       	brcc	.+10     	; 0x1e38 <__ftoa_engine+0x9c>
    1e2e:	e7 0e       	add	r14, r23
    1e30:	f8 1e       	adc	r15, r24
    1e32:	49 1f       	adc	r20, r25
    1e34:	56 1f       	adc	r21, r22
    1e36:	c1 1d       	adc	r28, r1
    1e38:	77 0f       	add	r23, r23
    1e3a:	88 1f       	adc	r24, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	66 1f       	adc	r22, r22
    1e40:	06 94       	lsr	r0
    1e42:	a1 f7       	brne	.-24     	; 0x1e2c <__ftoa_engine+0x90>
    1e44:	05 90       	lpm	r0, Z+
    1e46:	07 94       	ror	r0
    1e48:	28 f4       	brcc	.+10     	; 0x1e54 <__ftoa_engine+0xb8>
    1e4a:	f8 0e       	add	r15, r24
    1e4c:	49 1f       	adc	r20, r25
    1e4e:	56 1f       	adc	r21, r22
    1e50:	c7 1f       	adc	r28, r23
    1e52:	d1 1d       	adc	r29, r1
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	66 1f       	adc	r22, r22
    1e5a:	77 1f       	adc	r23, r23
    1e5c:	06 94       	lsr	r0
    1e5e:	a1 f7       	brne	.-24     	; 0x1e48 <__ftoa_engine+0xac>
    1e60:	05 90       	lpm	r0, Z+
    1e62:	07 94       	ror	r0
    1e64:	20 f4       	brcc	.+8      	; 0x1e6e <__ftoa_engine+0xd2>
    1e66:	49 0f       	add	r20, r25
    1e68:	56 1f       	adc	r21, r22
    1e6a:	c7 1f       	adc	r28, r23
    1e6c:	d8 1f       	adc	r29, r24
    1e6e:	99 0f       	add	r25, r25
    1e70:	66 1f       	adc	r22, r22
    1e72:	77 1f       	adc	r23, r23
    1e74:	88 1f       	adc	r24, r24
    1e76:	06 94       	lsr	r0
    1e78:	a9 f7       	brne	.-22     	; 0x1e64 <__ftoa_engine+0xc8>
    1e7a:	84 91       	lpm	r24, Z
    1e7c:	10 95       	com	r17
    1e7e:	17 70       	andi	r17, 0x07	; 7
    1e80:	41 f0       	breq	.+16     	; 0x1e92 <__ftoa_engine+0xf6>
    1e82:	d6 95       	lsr	r29
    1e84:	c7 95       	ror	r28
    1e86:	57 95       	ror	r21
    1e88:	47 95       	ror	r20
    1e8a:	f7 94       	ror	r15
    1e8c:	e7 94       	ror	r14
    1e8e:	1a 95       	dec	r17
    1e90:	c1 f7       	brne	.-16     	; 0x1e82 <__ftoa_engine+0xe6>
    1e92:	e4 ed       	ldi	r30, 0xD4	; 212
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	68 94       	set
    1e98:	15 90       	lpm	r1, Z+
    1e9a:	15 91       	lpm	r17, Z+
    1e9c:	35 91       	lpm	r19, Z+
    1e9e:	65 91       	lpm	r22, Z+
    1ea0:	95 91       	lpm	r25, Z+
    1ea2:	05 90       	lpm	r0, Z+
    1ea4:	7f e2       	ldi	r23, 0x2F	; 47
    1ea6:	73 95       	inc	r23
    1ea8:	e1 18       	sub	r14, r1
    1eaa:	f1 0a       	sbc	r15, r17
    1eac:	43 0b       	sbc	r20, r19
    1eae:	56 0b       	sbc	r21, r22
    1eb0:	c9 0b       	sbc	r28, r25
    1eb2:	d0 09       	sbc	r29, r0
    1eb4:	c0 f7       	brcc	.-16     	; 0x1ea6 <__ftoa_engine+0x10a>
    1eb6:	e1 0c       	add	r14, r1
    1eb8:	f1 1e       	adc	r15, r17
    1eba:	43 1f       	adc	r20, r19
    1ebc:	56 1f       	adc	r21, r22
    1ebe:	c9 1f       	adc	r28, r25
    1ec0:	d0 1d       	adc	r29, r0
    1ec2:	7e f4       	brtc	.+30     	; 0x1ee2 <__ftoa_engine+0x146>
    1ec4:	70 33       	cpi	r23, 0x30	; 48
    1ec6:	11 f4       	brne	.+4      	; 0x1ecc <__ftoa_engine+0x130>
    1ec8:	8a 95       	dec	r24
    1eca:	e6 cf       	rjmp	.-52     	; 0x1e98 <__ftoa_engine+0xfc>
    1ecc:	e8 94       	clt
    1ece:	01 50       	subi	r16, 0x01	; 1
    1ed0:	30 f0       	brcs	.+12     	; 0x1ede <__ftoa_engine+0x142>
    1ed2:	08 0f       	add	r16, r24
    1ed4:	0a f4       	brpl	.+2      	; 0x1ed8 <__ftoa_engine+0x13c>
    1ed6:	00 27       	eor	r16, r16
    1ed8:	02 17       	cp	r16, r18
    1eda:	08 f4       	brcc	.+2      	; 0x1ede <__ftoa_engine+0x142>
    1edc:	20 2f       	mov	r18, r16
    1ede:	23 95       	inc	r18
    1ee0:	02 2f       	mov	r16, r18
    1ee2:	7a 33       	cpi	r23, 0x3A	; 58
    1ee4:	28 f0       	brcs	.+10     	; 0x1ef0 <__ftoa_engine+0x154>
    1ee6:	79 e3       	ldi	r23, 0x39	; 57
    1ee8:	7d 93       	st	X+, r23
    1eea:	2a 95       	dec	r18
    1eec:	e9 f7       	brne	.-6      	; 0x1ee8 <__ftoa_engine+0x14c>
    1eee:	10 c0       	rjmp	.+32     	; 0x1f10 <__ftoa_engine+0x174>
    1ef0:	7d 93       	st	X+, r23
    1ef2:	2a 95       	dec	r18
    1ef4:	89 f6       	brne	.-94     	; 0x1e98 <__ftoa_engine+0xfc>
    1ef6:	06 94       	lsr	r0
    1ef8:	97 95       	ror	r25
    1efa:	67 95       	ror	r22
    1efc:	37 95       	ror	r19
    1efe:	17 95       	ror	r17
    1f00:	17 94       	ror	r1
    1f02:	e1 18       	sub	r14, r1
    1f04:	f1 0a       	sbc	r15, r17
    1f06:	43 0b       	sbc	r20, r19
    1f08:	56 0b       	sbc	r21, r22
    1f0a:	c9 0b       	sbc	r28, r25
    1f0c:	d0 09       	sbc	r29, r0
    1f0e:	98 f0       	brcs	.+38     	; 0x1f36 <__ftoa_engine+0x19a>
    1f10:	23 95       	inc	r18
    1f12:	7e 91       	ld	r23, -X
    1f14:	73 95       	inc	r23
    1f16:	7a 33       	cpi	r23, 0x3A	; 58
    1f18:	08 f0       	brcs	.+2      	; 0x1f1c <__ftoa_engine+0x180>
    1f1a:	70 e3       	ldi	r23, 0x30	; 48
    1f1c:	7c 93       	st	X, r23
    1f1e:	20 13       	cpse	r18, r16
    1f20:	b8 f7       	brcc	.-18     	; 0x1f10 <__ftoa_engine+0x174>
    1f22:	7e 91       	ld	r23, -X
    1f24:	70 61       	ori	r23, 0x10	; 16
    1f26:	7d 93       	st	X+, r23
    1f28:	30 f0       	brcs	.+12     	; 0x1f36 <__ftoa_engine+0x19a>
    1f2a:	83 95       	inc	r24
    1f2c:	71 e3       	ldi	r23, 0x31	; 49
    1f2e:	7d 93       	st	X+, r23
    1f30:	70 e3       	ldi	r23, 0x30	; 48
    1f32:	2a 95       	dec	r18
    1f34:	e1 f7       	brne	.-8      	; 0x1f2e <__ftoa_engine+0x192>
    1f36:	11 24       	eor	r1, r1
    1f38:	ef 90       	pop	r14
    1f3a:	ff 90       	pop	r15
    1f3c:	0f 91       	pop	r16
    1f3e:	1f 91       	pop	r17
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	99 27       	eor	r25, r25
    1f46:	87 fd       	sbrc	r24, 7
    1f48:	90 95       	com	r25
    1f4a:	08 95       	ret

00001f4c <strnlen_P>:
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	05 90       	lpm	r0, Z+
    1f50:	61 50       	subi	r22, 0x01	; 1
    1f52:	70 40       	sbci	r23, 0x00	; 0
    1f54:	01 10       	cpse	r0, r1
    1f56:	d8 f7       	brcc	.-10     	; 0x1f4e <strnlen_P+0x2>
    1f58:	80 95       	com	r24
    1f5a:	90 95       	com	r25
    1f5c:	8e 0f       	add	r24, r30
    1f5e:	9f 1f       	adc	r25, r31
    1f60:	08 95       	ret

00001f62 <strcat>:
    1f62:	fb 01       	movw	r30, r22
    1f64:	dc 01       	movw	r26, r24
    1f66:	0d 90       	ld	r0, X+
    1f68:	00 20       	and	r0, r0
    1f6a:	e9 f7       	brne	.-6      	; 0x1f66 <strcat+0x4>
    1f6c:	11 97       	sbiw	r26, 0x01	; 1
    1f6e:	01 90       	ld	r0, Z+
    1f70:	0d 92       	st	X+, r0
    1f72:	00 20       	and	r0, r0
    1f74:	e1 f7       	brne	.-8      	; 0x1f6e <strcat+0xc>
    1f76:	08 95       	ret

00001f78 <strcpy>:
    1f78:	fb 01       	movw	r30, r22
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	01 90       	ld	r0, Z+
    1f7e:	0d 92       	st	X+, r0
    1f80:	00 20       	and	r0, r0
    1f82:	e1 f7       	brne	.-8      	; 0x1f7c <strcpy+0x4>
    1f84:	08 95       	ret

00001f86 <strncmp>:
    1f86:	fb 01       	movw	r30, r22
    1f88:	dc 01       	movw	r26, r24
    1f8a:	41 50       	subi	r20, 0x01	; 1
    1f8c:	50 40       	sbci	r21, 0x00	; 0
    1f8e:	30 f0       	brcs	.+12     	; 0x1f9c <strncmp+0x16>
    1f90:	8d 91       	ld	r24, X+
    1f92:	01 90       	ld	r0, Z+
    1f94:	80 19       	sub	r24, r0
    1f96:	19 f4       	brne	.+6      	; 0x1f9e <strncmp+0x18>
    1f98:	00 20       	and	r0, r0
    1f9a:	b9 f7       	brne	.-18     	; 0x1f8a <strncmp+0x4>
    1f9c:	88 1b       	sub	r24, r24
    1f9e:	99 0b       	sbc	r25, r25
    1fa0:	08 95       	ret

00001fa2 <strnlen>:
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	61 50       	subi	r22, 0x01	; 1
    1fa6:	70 40       	sbci	r23, 0x00	; 0
    1fa8:	01 90       	ld	r0, Z+
    1faa:	01 10       	cpse	r0, r1
    1fac:	d8 f7       	brcc	.-10     	; 0x1fa4 <strnlen+0x2>
    1fae:	80 95       	com	r24
    1fb0:	90 95       	com	r25
    1fb2:	8e 0f       	add	r24, r30
    1fb4:	9f 1f       	adc	r25, r31
    1fb6:	08 95       	ret

00001fb8 <fputc>:
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
    1fc0:	fb 01       	movw	r30, r22
    1fc2:	23 81       	ldd	r18, Z+3	; 0x03
    1fc4:	21 fd       	sbrc	r18, 1
    1fc6:	03 c0       	rjmp	.+6      	; 0x1fce <fputc+0x16>
    1fc8:	8f ef       	ldi	r24, 0xFF	; 255
    1fca:	9f ef       	ldi	r25, 0xFF	; 255
    1fcc:	2c c0       	rjmp	.+88     	; 0x2026 <fputc+0x6e>
    1fce:	22 ff       	sbrs	r18, 2
    1fd0:	16 c0       	rjmp	.+44     	; 0x1ffe <fputc+0x46>
    1fd2:	46 81       	ldd	r20, Z+6	; 0x06
    1fd4:	57 81       	ldd	r21, Z+7	; 0x07
    1fd6:	24 81       	ldd	r18, Z+4	; 0x04
    1fd8:	35 81       	ldd	r19, Z+5	; 0x05
    1fda:	42 17       	cp	r20, r18
    1fdc:	53 07       	cpc	r21, r19
    1fde:	44 f4       	brge	.+16     	; 0x1ff0 <fputc+0x38>
    1fe0:	a0 81       	ld	r26, Z
    1fe2:	b1 81       	ldd	r27, Z+1	; 0x01
    1fe4:	9d 01       	movw	r18, r26
    1fe6:	2f 5f       	subi	r18, 0xFF	; 255
    1fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fea:	31 83       	std	Z+1, r19	; 0x01
    1fec:	20 83       	st	Z, r18
    1fee:	8c 93       	st	X, r24
    1ff0:	26 81       	ldd	r18, Z+6	; 0x06
    1ff2:	37 81       	ldd	r19, Z+7	; 0x07
    1ff4:	2f 5f       	subi	r18, 0xFF	; 255
    1ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff8:	37 83       	std	Z+7, r19	; 0x07
    1ffa:	26 83       	std	Z+6, r18	; 0x06
    1ffc:	14 c0       	rjmp	.+40     	; 0x2026 <fputc+0x6e>
    1ffe:	8b 01       	movw	r16, r22
    2000:	ec 01       	movw	r28, r24
    2002:	fb 01       	movw	r30, r22
    2004:	00 84       	ldd	r0, Z+8	; 0x08
    2006:	f1 85       	ldd	r31, Z+9	; 0x09
    2008:	e0 2d       	mov	r30, r0
    200a:	09 95       	icall
    200c:	89 2b       	or	r24, r25
    200e:	e1 f6       	brne	.-72     	; 0x1fc8 <fputc+0x10>
    2010:	d8 01       	movw	r26, r16
    2012:	16 96       	adiw	r26, 0x06	; 6
    2014:	8d 91       	ld	r24, X+
    2016:	9c 91       	ld	r25, X
    2018:	17 97       	sbiw	r26, 0x07	; 7
    201a:	01 96       	adiw	r24, 0x01	; 1
    201c:	17 96       	adiw	r26, 0x07	; 7
    201e:	9c 93       	st	X, r25
    2020:	8e 93       	st	-X, r24
    2022:	16 97       	sbiw	r26, 0x06	; 6
    2024:	ce 01       	movw	r24, r28
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	1f 91       	pop	r17
    202c:	0f 91       	pop	r16
    202e:	08 95       	ret

00002030 <printf>:
    2030:	a0 e0       	ldi	r26, 0x00	; 0
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	ee e1       	ldi	r30, 0x1E	; 30
    2036:	f0 e1       	ldi	r31, 0x10	; 16
    2038:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <__prologue_saves__+0x20>
    203c:	ae 01       	movw	r20, r28
    203e:	4b 5f       	subi	r20, 0xFB	; 251
    2040:	5f 4f       	sbci	r21, 0xFF	; 255
    2042:	fa 01       	movw	r30, r20
    2044:	61 91       	ld	r22, Z+
    2046:	71 91       	ld	r23, Z+
    2048:	af 01       	movw	r20, r30
    204a:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <__iob+0x2>
    204e:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <__iob+0x3>
    2052:	0e 94 55 09 	call	0x12aa	; 0x12aa <vfprintf>
    2056:	e2 e0       	ldi	r30, 0x02	; 2
    2058:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__epilogue_restores__+0x20>

0000205c <puts>:
    205c:	0f 93       	push	r16
    205e:	1f 93       	push	r17
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	e0 91 91 06 	lds	r30, 0x0691	; 0x800691 <__iob+0x2>
    2068:	f0 91 92 06 	lds	r31, 0x0692	; 0x800692 <__iob+0x3>
    206c:	23 81       	ldd	r18, Z+3	; 0x03
    206e:	21 ff       	sbrs	r18, 1
    2070:	1b c0       	rjmp	.+54     	; 0x20a8 <puts+0x4c>
    2072:	8c 01       	movw	r16, r24
    2074:	d0 e0       	ldi	r29, 0x00	; 0
    2076:	c0 e0       	ldi	r28, 0x00	; 0
    2078:	f8 01       	movw	r30, r16
    207a:	81 91       	ld	r24, Z+
    207c:	8f 01       	movw	r16, r30
    207e:	60 91 91 06 	lds	r22, 0x0691	; 0x800691 <__iob+0x2>
    2082:	70 91 92 06 	lds	r23, 0x0692	; 0x800692 <__iob+0x3>
    2086:	db 01       	movw	r26, r22
    2088:	18 96       	adiw	r26, 0x08	; 8
    208a:	ed 91       	ld	r30, X+
    208c:	fc 91       	ld	r31, X
    208e:	19 97       	sbiw	r26, 0x09	; 9
    2090:	88 23       	and	r24, r24
    2092:	31 f0       	breq	.+12     	; 0x20a0 <puts+0x44>
    2094:	09 95       	icall
    2096:	89 2b       	or	r24, r25
    2098:	79 f3       	breq	.-34     	; 0x2078 <puts+0x1c>
    209a:	df ef       	ldi	r29, 0xFF	; 255
    209c:	cf ef       	ldi	r28, 0xFF	; 255
    209e:	ec cf       	rjmp	.-40     	; 0x2078 <puts+0x1c>
    20a0:	8a e0       	ldi	r24, 0x0A	; 10
    20a2:	09 95       	icall
    20a4:	89 2b       	or	r24, r25
    20a6:	19 f0       	breq	.+6      	; 0x20ae <puts+0x52>
    20a8:	8f ef       	ldi	r24, 0xFF	; 255
    20aa:	9f ef       	ldi	r25, 0xFF	; 255
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <puts+0x56>
    20ae:	8d 2f       	mov	r24, r29
    20b0:	9c 2f       	mov	r25, r28
    20b2:	df 91       	pop	r29
    20b4:	cf 91       	pop	r28
    20b6:	1f 91       	pop	r17
    20b8:	0f 91       	pop	r16
    20ba:	08 95       	ret

000020bc <sprintf>:
    20bc:	ae e0       	ldi	r26, 0x0E	; 14
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e4 e6       	ldi	r30, 0x64	; 100
    20c2:	f0 e1       	ldi	r31, 0x10	; 16
    20c4:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__prologue_saves__+0x1c>
    20c8:	0d 89       	ldd	r16, Y+21	; 0x15
    20ca:	1e 89       	ldd	r17, Y+22	; 0x16
    20cc:	86 e0       	ldi	r24, 0x06	; 6
    20ce:	8c 83       	std	Y+4, r24	; 0x04
    20d0:	1a 83       	std	Y+2, r17	; 0x02
    20d2:	09 83       	std	Y+1, r16	; 0x01
    20d4:	8f ef       	ldi	r24, 0xFF	; 255
    20d6:	9f e7       	ldi	r25, 0x7F	; 127
    20d8:	9e 83       	std	Y+6, r25	; 0x06
    20da:	8d 83       	std	Y+5, r24	; 0x05
    20dc:	ae 01       	movw	r20, r28
    20de:	47 5e       	subi	r20, 0xE7	; 231
    20e0:	5f 4f       	sbci	r21, 0xFF	; 255
    20e2:	6f 89       	ldd	r22, Y+23	; 0x17
    20e4:	78 8d       	ldd	r23, Y+24	; 0x18
    20e6:	ce 01       	movw	r24, r28
    20e8:	01 96       	adiw	r24, 0x01	; 1
    20ea:	0e 94 55 09 	call	0x12aa	; 0x12aa <vfprintf>
    20ee:	ef 81       	ldd	r30, Y+7	; 0x07
    20f0:	f8 85       	ldd	r31, Y+8	; 0x08
    20f2:	e0 0f       	add	r30, r16
    20f4:	f1 1f       	adc	r31, r17
    20f6:	10 82       	st	Z, r1
    20f8:	2e 96       	adiw	r28, 0x0e	; 14
    20fa:	e4 e0       	ldi	r30, 0x04	; 4
    20fc:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__epilogue_restores__+0x1c>

00002100 <__ultoa_invert>:
    2100:	fa 01       	movw	r30, r20
    2102:	aa 27       	eor	r26, r26
    2104:	28 30       	cpi	r18, 0x08	; 8
    2106:	51 f1       	breq	.+84     	; 0x215c <__ultoa_invert+0x5c>
    2108:	20 31       	cpi	r18, 0x10	; 16
    210a:	81 f1       	breq	.+96     	; 0x216c <__ultoa_invert+0x6c>
    210c:	e8 94       	clt
    210e:	6f 93       	push	r22
    2110:	6e 7f       	andi	r22, 0xFE	; 254
    2112:	6e 5f       	subi	r22, 0xFE	; 254
    2114:	7f 4f       	sbci	r23, 0xFF	; 255
    2116:	8f 4f       	sbci	r24, 0xFF	; 255
    2118:	9f 4f       	sbci	r25, 0xFF	; 255
    211a:	af 4f       	sbci	r26, 0xFF	; 255
    211c:	b1 e0       	ldi	r27, 0x01	; 1
    211e:	3e d0       	rcall	.+124    	; 0x219c <__ultoa_invert+0x9c>
    2120:	b4 e0       	ldi	r27, 0x04	; 4
    2122:	3c d0       	rcall	.+120    	; 0x219c <__ultoa_invert+0x9c>
    2124:	67 0f       	add	r22, r23
    2126:	78 1f       	adc	r23, r24
    2128:	89 1f       	adc	r24, r25
    212a:	9a 1f       	adc	r25, r26
    212c:	a1 1d       	adc	r26, r1
    212e:	68 0f       	add	r22, r24
    2130:	79 1f       	adc	r23, r25
    2132:	8a 1f       	adc	r24, r26
    2134:	91 1d       	adc	r25, r1
    2136:	a1 1d       	adc	r26, r1
    2138:	6a 0f       	add	r22, r26
    213a:	71 1d       	adc	r23, r1
    213c:	81 1d       	adc	r24, r1
    213e:	91 1d       	adc	r25, r1
    2140:	a1 1d       	adc	r26, r1
    2142:	20 d0       	rcall	.+64     	; 0x2184 <__ultoa_invert+0x84>
    2144:	09 f4       	brne	.+2      	; 0x2148 <__ultoa_invert+0x48>
    2146:	68 94       	set
    2148:	3f 91       	pop	r19
    214a:	2a e0       	ldi	r18, 0x0A	; 10
    214c:	26 9f       	mul	r18, r22
    214e:	11 24       	eor	r1, r1
    2150:	30 19       	sub	r19, r0
    2152:	30 5d       	subi	r19, 0xD0	; 208
    2154:	31 93       	st	Z+, r19
    2156:	de f6       	brtc	.-74     	; 0x210e <__ultoa_invert+0xe>
    2158:	cf 01       	movw	r24, r30
    215a:	08 95       	ret
    215c:	46 2f       	mov	r20, r22
    215e:	47 70       	andi	r20, 0x07	; 7
    2160:	40 5d       	subi	r20, 0xD0	; 208
    2162:	41 93       	st	Z+, r20
    2164:	b3 e0       	ldi	r27, 0x03	; 3
    2166:	0f d0       	rcall	.+30     	; 0x2186 <__ultoa_invert+0x86>
    2168:	c9 f7       	brne	.-14     	; 0x215c <__ultoa_invert+0x5c>
    216a:	f6 cf       	rjmp	.-20     	; 0x2158 <__ultoa_invert+0x58>
    216c:	46 2f       	mov	r20, r22
    216e:	4f 70       	andi	r20, 0x0F	; 15
    2170:	40 5d       	subi	r20, 0xD0	; 208
    2172:	4a 33       	cpi	r20, 0x3A	; 58
    2174:	18 f0       	brcs	.+6      	; 0x217c <__ultoa_invert+0x7c>
    2176:	49 5d       	subi	r20, 0xD9	; 217
    2178:	31 fd       	sbrc	r19, 1
    217a:	40 52       	subi	r20, 0x20	; 32
    217c:	41 93       	st	Z+, r20
    217e:	02 d0       	rcall	.+4      	; 0x2184 <__ultoa_invert+0x84>
    2180:	a9 f7       	brne	.-22     	; 0x216c <__ultoa_invert+0x6c>
    2182:	ea cf       	rjmp	.-44     	; 0x2158 <__ultoa_invert+0x58>
    2184:	b4 e0       	ldi	r27, 0x04	; 4
    2186:	a6 95       	lsr	r26
    2188:	97 95       	ror	r25
    218a:	87 95       	ror	r24
    218c:	77 95       	ror	r23
    218e:	67 95       	ror	r22
    2190:	ba 95       	dec	r27
    2192:	c9 f7       	brne	.-14     	; 0x2186 <__ultoa_invert+0x86>
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	61 05       	cpc	r22, r1
    2198:	71 05       	cpc	r23, r1
    219a:	08 95       	ret
    219c:	9b 01       	movw	r18, r22
    219e:	ac 01       	movw	r20, r24
    21a0:	0a 2e       	mov	r0, r26
    21a2:	06 94       	lsr	r0
    21a4:	57 95       	ror	r21
    21a6:	47 95       	ror	r20
    21a8:	37 95       	ror	r19
    21aa:	27 95       	ror	r18
    21ac:	ba 95       	dec	r27
    21ae:	c9 f7       	brne	.-14     	; 0x21a2 <__ultoa_invert+0xa2>
    21b0:	62 0f       	add	r22, r18
    21b2:	73 1f       	adc	r23, r19
    21b4:	84 1f       	adc	r24, r20
    21b6:	95 1f       	adc	r25, r21
    21b8:	a0 1d       	adc	r26, r0
    21ba:	08 95       	ret

000021bc <_exit>:
    21bc:	f8 94       	cli

000021be <__stop_program>:
    21be:	ff cf       	rjmp	.-2      	; 0x21be <__stop_program>
