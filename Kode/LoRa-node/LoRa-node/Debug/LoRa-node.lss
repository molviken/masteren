
LoRa-node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000021e  00800100  00001d60  00001df4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d8  0080031e  0080031e  00002012  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002012  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002070  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  000020b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000347f  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000198c  00000000  00000000  000057df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b27  00000000  00000000  0000716b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000072c  00000000  00000000  00008c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000103f  00000000  00000000  000093c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000194f  00000000  00000000  0000a3ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  0000bd4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__ctors_end>
       4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
       8:	0c 94 34 03 	jmp	0x668	; 0x668 <__vector_2>
       c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      10:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      14:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      18:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      1c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      20:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      24:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      28:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      2c:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__vector_11>
      30:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      34:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      38:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      3c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      40:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      44:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      48:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      4c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      50:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      54:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      58:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      5c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      60:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      64:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      68:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      6c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      70:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      74:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      78:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      7c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      80:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      84:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      88:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      8c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      90:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      94:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      98:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      9c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      ac:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      bc:	0c 94 43 03 	jmp	0x686	; 0x686 <__vector_47>
      c0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      c4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      c8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>

000000cc <__trampolines_end>:
      cc:	6e 61       	ori	r22, 0x1E	; 30
      ce:	6e 00       	.word	0x006e	; ????

000000d0 <__c.2332>:
      d0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      e0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      f0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     100:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     110:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     120:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     130:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     140:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     150:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     160:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     170:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     180:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     190:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1a0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1b0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1c0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001ce <__ctors_end>:
     1ce:	11 24       	eor	r1, r1
     1d0:	1f be       	out	0x3f, r1	; 63
     1d2:	cf ef       	ldi	r28, 0xFF	; 255
     1d4:	d8 e0       	ldi	r29, 0x08	; 8
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	cd bf       	out	0x3d, r28	; 61

000001da <__do_copy_data>:
     1da:	13 e0       	ldi	r17, 0x03	; 3
     1dc:	a0 e0       	ldi	r26, 0x00	; 0
     1de:	b1 e0       	ldi	r27, 0x01	; 1
     1e0:	e0 e6       	ldi	r30, 0x60	; 96
     1e2:	fd e1       	ldi	r31, 0x1D	; 29
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <__do_copy_data+0x10>
     1e6:	05 90       	lpm	r0, Z+
     1e8:	0d 92       	st	X+, r0
     1ea:	ae 31       	cpi	r26, 0x1E	; 30
     1ec:	b1 07       	cpc	r27, r17
     1ee:	d9 f7       	brne	.-10     	; 0x1e6 <__do_copy_data+0xc>

000001f0 <__do_clear_bss>:
     1f0:	23 e0       	ldi	r18, 0x03	; 3
     1f2:	ae e1       	ldi	r26, 0x1E	; 30
     1f4:	b3 e0       	ldi	r27, 0x03	; 3
     1f6:	01 c0       	rjmp	.+2      	; 0x1fa <.do_clear_bss_start>

000001f8 <.do_clear_bss_loop>:
     1f8:	1d 92       	st	X+, r1

000001fa <.do_clear_bss_start>:
     1fa:	a6 3f       	cpi	r26, 0xF6	; 246
     1fc:	b2 07       	cpc	r27, r18
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <.do_clear_bss_loop>
     200:	0e 94 06 01 	call	0x20c	; 0x20c <main>
     204:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <_exit>

00000208 <__bad_interrupt>:
     208:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020c <main>:




int main(void){
	MCUSR &= ~(1 << WDRF);
     20c:	84 b7       	in	r24, 0x34	; 52
     20e:	87 7f       	andi	r24, 0xF7	; 247
     210:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	a8 95       	wdr
     218:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     21c:	88 61       	ori	r24, 0x18	; 24
     21e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     222:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     226:	0f be       	out	0x3f, r0	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     228:	2f ef       	ldi	r18, 0xFF	; 255
     22a:	83 ec       	ldi	r24, 0xC3	; 195
     22c:	99 e0       	ldi	r25, 0x09	; 9
     22e:	21 50       	subi	r18, 0x01	; 1
     230:	80 40       	sbci	r24, 0x00	; 0
     232:	90 40       	sbci	r25, 0x00	; 0
     234:	e1 f7       	brne	.-8      	; 0x22e <main+0x22>
     236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x2c>
     238:	00 00       	nop
	wdt_disable();
	_delay_ms(400); // Start-up time after pressing reset button
	
	FSM_run();
     23a:	0e 94 ef 01 	call	0x3de	; 0x3de <FSM_run>
	puts("Program ended");
     23e:	8e e0       	ldi	r24, 0x0E	; 14
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <puts>
	return 0;
}
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	08 95       	ret

0000024c <adc_init>:




void adc_init(){
	ADMUX = 0;
     24c:	ac e7       	ldi	r26, 0x7C	; 124
     24e:	b0 e0       	ldi	r27, 0x00	; 0
     250:	1c 92       	st	X, r1
	ADCSRA = 0;
     252:	ea e7       	ldi	r30, 0x7A	; 122
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	10 82       	st	Z, r1
	ADMUX |= ADC_VOLTAGE_REF_AVCC;											// Sets adc voltage reference
     258:	8c 91       	ld	r24, X
     25a:	80 64       	ori	r24, 0x40	; 64
     25c:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESCALAR_128;											// ADC prescaler = 128 ---> 8MHz goes to 62.5 kHz
     25e:	80 81       	ld	r24, Z
     260:	86 60       	ori	r24, 0x06	; 6
     262:	80 83       	st	Z, r24
	//ADCSRA |= (0 << ADIE);												// Enables ADC interrupt
	ADCSRA |= (1 << ADEN);													// Enabling the ADC
     264:	80 81       	ld	r24, Z
     266:	80 68       	ori	r24, 0x80	; 128
     268:	80 83       	st	Z, r24
     26a:	08 95       	ret

0000026c <adc_read>:
}


uint16_t adc_read(){
	uint16_t val;					
	ADCSRA |= (1 << ADSC);													// Starts single conversion
     26c:	ea e7       	ldi	r30, 0x7A	; 122
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	80 64       	ori	r24, 0x40	; 64
     274:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));
     276:	80 81       	ld	r24, Z
     278:	84 ff       	sbrs	r24, 4
     27a:	fd cf       	rjmp	.-6      	; 0x276 <adc_read+0xa>
	val = ADCW;
     27c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     280:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	if ((int)val > 1000){val = 1000;}
     284:	89 3e       	cpi	r24, 0xE9	; 233
     286:	23 e0       	ldi	r18, 0x03	; 3
     288:	92 07       	cpc	r25, r18
     28a:	14 f0       	brlt	.+4      	; 0x290 <adc_read+0x24>
     28c:	88 ee       	ldi	r24, 0xE8	; 232
     28e:	93 e0       	ldi	r25, 0x03	; 3
	return val;
}
     290:	08 95       	ret

00000292 <adc_change_channel>:

void adc_change_channel(uint8_t channel){
	ADMUX |= channel;														// Setting adc channel to be read
     292:	ec e7       	ldi	r30, 0x7C	; 124
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	90 81       	ld	r25, Z
     298:	89 2b       	or	r24, r25
     29a:	80 83       	st	Z, r24
	adc_read();																// Discard first measurement after channel change
     29c:	0e 94 36 01 	call	0x26c	; 0x26c <adc_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a0:	8a e1       	ldi	r24, 0x1A	; 26
     2a2:	8a 95       	dec	r24
     2a4:	f1 f7       	brne	.-4      	; 0x2a2 <adc_change_channel+0x10>
     2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <adc_change_channel+0x16>
     2a8:	08 95       	ret

000002aa <board_charge>:
	DDRD |= (1 << DDRD4);	  // Set PD4 as output
	
}

void board_charge(int off){
	if (off){
     2aa:	89 2b       	or	r24, r25
     2ac:	11 f0       	breq	.+4      	; 0x2b2 <board_charge+0x8>
		clear_bit(PORTD, PORTD4);
     2ae:	5c 98       	cbi	0x0b, 4	; 11
     2b0:	08 95       	ret
		//clear_bit(LEDS, LED1);
	}
	else {
		set_bit(PORTD, PORTD4);
     2b2:	5c 9a       	sbi	0x0b, 4	; 11
     2b4:	08 95       	ret

000002b6 <board_setup>:
		//set_bit(LEDS, LED1);
	}
}

void board_setup(uint8_t *joined_err){
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	ec 01       	movw	r28, r24
	#ifndef LORA_NODE
	USART_init();
     2bc:	0e 94 ee 05 	call	0xbdc	; 0xbdc <USART_init>
	#endif
	adc_init();
     2c0:	0e 94 26 01 	call	0x24c	; 0x24c <adc_init>

static void board_dmy_btn_init();
static void board_gpio_init();

void board_dmy_btn_init(void){
	DDRD &= ~(1 << DDD3);     // Clear the PD2 pin
     2c4:	53 98       	cbi	0x0a, 3	; 10
	EICRA |= (1 << ISC11);    // set INT1 to trigger on falling edge
     2c6:	e9 e6       	ldi	r30, 0x69	; 105
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 81       	ld	r24, Z
     2cc:	88 60       	ori	r24, 0x08	; 8
     2ce:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);     // Turns on INT1
     2d0:	e9 9a       	sbi	0x1d, 1	; 29
}

void board_gpio_init(void){
	DDRD |= (1 << DDRD4);	  // Set PD4 as output
     2d2:	54 9a       	sbi	0x0a, 4	; 10
	USART_init();
	#endif
	adc_init();
	board_dmy_btn_init();
	board_gpio_init();
	board_charge(0);
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 55 01 	call	0x2aa	; 0x2aa <board_charge>
	#ifdef LORA_NODE
		lora_init(joined_err);
	#else
		*joined_err = 0;
     2dc:	18 82       	st	Y, r1
	#endif

	i2c_init();
     2de:	0e 94 8f 03 	call	0x71e	; 0x71e <i2c_init>
	INA219_init();
     2e2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <INA219_init>
	timers_init();
     2e6:	0e 94 98 06 	call	0xd30	; 0xd30 <timers_init>
	sei();
     2ea:	78 94       	sei
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <board_get_battery_level>:
	
	r1 = 174;
	r2 = 255;
	battery_max = 4.2;
	
	adc_change_channel(VBAT);
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	0e 94 49 01 	call	0x292	; 0x292 <adc_change_channel>
	val = adc_read();
     2f8:	0e 94 36 01 	call	0x26c	; 0x26c <adc_read>
	
	v_div_tick = (((r2)/(r1+r2))*battery_max) / 1024;
	vbat = v_div_tick*val*(r1+r2)/r2;
	bat_percentage = vbat*100/battery_max;
	
	return bat_percentage;
     2fc:	bc 01       	movw	r22, r24
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 ae 0b 	call	0x175c	; 0x175c <__floatunsisf>
     306:	26 eb       	ldi	r18, 0xB6	; 182
     308:	36 ec       	ldi	r19, 0xC6	; 198
     30a:	4f e1       	ldi	r20, 0x1F	; 31
     30c:	5b e3       	ldi	r21, 0x3B	; 59
     30e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__mulsf3>
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e8       	ldi	r19, 0x80	; 128
     316:	46 ed       	ldi	r20, 0xD6	; 214
     318:	53 e4       	ldi	r21, 0x43	; 67
     31a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__mulsf3>
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	4f e7       	ldi	r20, 0x7F	; 127
     324:	53 e4       	ldi	r21, 0x43	; 67
     326:	0e 94 06 0b 	call	0x160c	; 0x160c <__divsf3>
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	48 ec       	ldi	r20, 0xC8	; 200
     330:	52 e4       	ldi	r21, 0x42	; 66
     332:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__mulsf3>
     336:	26 e6       	ldi	r18, 0x66	; 102
     338:	36 e6       	ldi	r19, 0x66	; 102
     33a:	46 e8       	ldi	r20, 0x86	; 134
     33c:	50 e4       	ldi	r21, 0x40	; 64
     33e:	0e 94 06 0b 	call	0x160c	; 0x160c <__divsf3>
     342:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__fixsfsi>
     346:	86 2f       	mov	r24, r22
     348:	08 95       	ret

0000034a <FSM_system_reset>:
	#ifdef DEBUG_M
	puts("Init complete, FSM running");
	#endif
}
void FSM_system_reset(){
	cli();	
     34a:	f8 94       	cli
	WDTCSR = 0x00;
     34c:	e0 e6       	ldi	r30, 0x60	; 96
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	10 82       	st	Z, r1
	WDTCSR = (1<<WDE);
     352:	88 e0       	ldi	r24, 0x08	; 8
     354:	80 83       	st	Z, r24
     356:	08 95       	ret

00000358 <FSM_assert_downlink>:
}
void FSM_assert_downlink(){
	uint32_t ts = 0;
	uint16_t sample_size_new;
	size_t str_len = strlen(downlink);
     358:	e1 e2       	ldi	r30, 0x21	; 33
     35a:	f3 e0       	ldi	r31, 0x03	; 3
     35c:	01 90       	ld	r0, Z+
     35e:	00 20       	and	r0, r0
     360:	e9 f7       	brne	.-6      	; 0x35c <FSM_assert_downlink+0x4>
     362:	31 97       	sbiw	r30, 0x01	; 1
     364:	bf 01       	movw	r22, r30
     366:	61 52       	subi	r22, 0x21	; 33
     368:	73 40       	sbci	r23, 0x03	; 3
	#ifdef LORA_NODE
		if (str_len > 28) ascii_hex_decode(downlink, str_len, downlink_pairs, LORA_RX_PAYLOAD_OFFSET);
		else hex_decode(downlink, str_len, downlink_pairs, LORA_RX_PAYLOAD_OFFSET);
	
	#else
		hex_decode(downlink, str_len, downlink_pairs, 0);
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	4b e8       	ldi	r20, 0x8B	; 139
     370:	53 e0       	ldi	r21, 0x03	; 3
     372:	81 e2       	ldi	r24, 0x21	; 33
     374:	93 e0       	ldi	r25, 0x03	; 3
     376:	0e 94 d2 06 	call	0xda4	; 0xda4 <hex_decode>
	#endif
	//printf("%02X %02X %02X\n", downlink_pairs[0], downlink_pairs[1], downlink_pairs[2]);
	switch (downlink_pairs[0]){
     37a:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <downlink_pairs>
     37e:	82 32       	cpi	r24, 0x22	; 34
     380:	e9 f0       	breq	.+58     	; 0x3bc <FSM_assert_downlink+0x64>
     382:	89 39       	cpi	r24, 0x99	; 153
     384:	49 f1       	breq	.+82     	; 0x3d8 <FSM_assert_downlink+0x80>
     386:	81 31       	cpi	r24, 0x11	; 17
     388:	49 f5       	brne	.+82     	; 0x3dc <FSM_assert_downlink+0x84>
		case 0x11:
			set_bit(LEDS,LED3);
     38a:	2a 9a       	sbi	0x05, 2	; 5
			ts = (uint32_t)downlink_pairs[4] | ((uint32_t)downlink_pairs[3] << 8) | ((uint32_t)downlink_pairs[2] << 16) | ((uint32_t)downlink_pairs[1] << 24);
     38c:	eb e8       	ldi	r30, 0x8B	; 139
     38e:	f3 e0       	ldi	r31, 0x03	; 3
     390:	23 81       	ldd	r18, Z+3	; 0x03
     392:	82 81       	ldd	r24, Z+2	; 0x02
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	a0 e0       	ldi	r26, 0x00	; 0
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	dc 01       	movw	r26, r24
     39c:	99 27       	eor	r25, r25
     39e:	88 27       	eor	r24, r24
     3a0:	92 2b       	or	r25, r18
     3a2:	24 81       	ldd	r18, Z+4	; 0x04
     3a4:	82 2b       	or	r24, r18
     3a6:	21 81       	ldd	r18, Z+1	; 0x01
     3a8:	b2 2b       	or	r27, r18
			current_time = ts;
     3aa:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <current_time>
     3ae:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <current_time+0x1>
     3b2:	a0 93 87 03 	sts	0x0387, r26	; 0x800387 <current_time+0x2>
     3b6:	b0 93 88 03 	sts	0x0388, r27	; 0x800388 <current_time+0x3>
			break;
     3ba:	08 95       	ret
		
		case 0x22:
			set_bit(LEDS,LED3);
     3bc:	2a 9a       	sbi	0x05, 2	; 5
			sample_size_new = (uint16_t)downlink_pairs[2] | ((uint16_t)downlink_pairs[1] << 8);
     3be:	eb e8       	ldi	r30, 0x8B	; 139
     3c0:	f3 e0       	ldi	r31, 0x03	; 3
			sample_size = sample_size_new;
     3c2:	81 81       	ldd	r24, Z+1	; 0x01
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	98 2f       	mov	r25, r24
     3c8:	88 27       	eor	r24, r24
     3ca:	22 81       	ldd	r18, Z+2	; 0x02
     3cc:	82 2b       	or	r24, r18
     3ce:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <sample_size+0x1>
     3d2:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <sample_size>
			break;
     3d6:	08 95       	ret
		
		case 0x99:
			//USART_putstring2("Resetting...");
			FSM_system_reset();
     3d8:	0e 94 a5 01 	call	0x34a	; 0x34a <FSM_system_reset>
     3dc:	08 95       	ret

000003de <FSM_run>:
			break;
	}
}

void FSM_run(void){
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
     3e6:	67 97       	sbiw	r28, 0x17	; 23
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	cd bf       	out	0x3d, r28	; 61
	data_receive_flag = 0;
     3f2:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <data_receive_flag>
	sample_size = BOARD_SAMPLE_SIZE;
     3f6:	8c e3       	ldi	r24, 0x3C	; 60
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <sample_size+0x1>
     3fe:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <sample_size>
	board_t board1 = {0, 0, 100, {0, 0, 0, 0}, 0, sample_size, ""};
     402:	19 82       	std	Y+1, r1	; 0x01
     404:	1a 82       	std	Y+2, r1	; 0x02
     406:	1b 82       	std	Y+3, r1	; 0x03
     408:	1c 82       	std	Y+4, r1	; 0x04
     40a:	1d 82       	std	Y+5, r1	; 0x05
     40c:	24 e6       	ldi	r18, 0x64	; 100
     40e:	2e 83       	std	Y+6, r18	; 0x06
     410:	18 86       	std	Y+8, r1	; 0x08
     412:	1f 82       	std	Y+7, r1	; 0x07
     414:	1a 86       	std	Y+10, r1	; 0x0a
     416:	19 86       	std	Y+9, r1	; 0x09
     418:	1b 86       	std	Y+11, r1	; 0x0b
     41a:	1c 86       	std	Y+12, r1	; 0x0c
     41c:	1d 86       	std	Y+13, r1	; 0x0d
     41e:	1e 86       	std	Y+14, r1	; 0x0e
     420:	1f 86       	std	Y+15, r1	; 0x0f
     422:	18 8a       	std	Y+16, r1	; 0x10
     424:	19 8a       	std	Y+17, r1	; 0x11
     426:	1a 8a       	std	Y+18, r1	; 0x12
     428:	1b 8a       	std	Y+19, r1	; 0x13
     42a:	9d 8b       	std	Y+21, r25	; 0x15
     42c:	8c 8b       	std	Y+20, r24	; 0x14
     42e:	84 e0       	ldi	r24, 0x04	; 4
     430:	92 e0       	ldi	r25, 0x02	; 2
     432:	9f 8b       	std	Y+23, r25	; 0x17
     434:	8e 8b       	std	Y+22, r24	; 0x16
		
	int rejoin_attempts = 0;
     436:	00 e0       	ldi	r16, 0x00	; 0
     438:	10 e0       	ldi	r17, 0x00	; 0
			
			case ST_DATA_RECEIVED:
				
			
			case ST_ACTIVE:
				PORTB ^= (1<<LED2);
     43a:	68 94       	set
     43c:	cc 24       	eor	r12, r12
     43e:	c1 f8       	bld	r12, 1
						lora_transmit(board1.msg);
					#endif
					board1.ina219.bus_voltage_avg = 0;
					board1.ina219.current_avg = 0;
				}
				nextState = ST_SLEEP;
     440:	dd 24       	eor	r13, r13
     442:	d3 94       	inc	r13
					board1.ina219.current		= board1.ina219.current_avg / board1.sample_size;
					board1.time_stamp = current_time;
					board1.msg = hex_encode(board1);
						
					#ifndef LORA_NODE
						printf("%s", board1.msg);
     444:	0f 2e       	mov	r0, r31
     446:	f1 e3       	ldi	r31, 0x31	; 49
     448:	ef 2e       	mov	r14, r31
     44a:	f1 e0       	ldi	r31, 0x01	; 1
     44c:	ff 2e       	mov	r15, r31
     44e:	f0 2d       	mov	r31, r0
		}
		switch (nextState){
			
			case ST_INIT:
				FSM_system_init(&board1.lora_joined_err);
				if (board1.lora_joined_err) nextState = ST_NOT_JOINED;
     450:	0f 2e       	mov	r0, r31
     452:	f3 e0       	ldi	r31, 0x03	; 3
     454:	bf 2e       	mov	r11, r31
     456:	f0 2d       	mov	r31, r0
		
	int rejoin_attempts = 0;
	uint8_t lora_wait_rejoin_minutes = 3;
	
	while (1){
		if (data_receive_flag){
     458:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <data_receive_flag>
     45c:	88 23       	and	r24, r24
     45e:	21 f0       	breq	.+8      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
			data_receive_flag = 0;
     460:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <data_receive_flag>
			FSM_assert_downlink();
     464:	0e 94 ac 01 	call	0x358	; 0x358 <FSM_assert_downlink>
			
		}
		if (tx_test_flag){
     468:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <__data_end>
     46c:	88 23       	and	r24, r24
     46e:	31 f0       	breq	.+12     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			tx_test_flag = 0;
     470:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <__data_end>
			#ifdef LORA_NODE
				lora_transmit("02025ebbe8d05403210876");
			#else
				USART_putstring2("025ebbe8d05403210876");
     474:	8c e1       	ldi	r24, 0x1C	; 28
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	0e 94 4b 06 	call	0xc96	; 0xc96 <USART_putstring2>
			#endif
		}
		switch (nextState){
     47c:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <nextState>
     480:	82 30       	cpi	r24, 0x02	; 2
     482:	51 f1       	breq	.+84     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     484:	30 f4       	brcc	.+12     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     486:	88 23       	and	r24, r24
     488:	49 f0       	breq	.+18     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	09 f4       	brne	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48e:	db c0       	rjmp	.+438    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     490:	e3 cf       	rjmp	.-58     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     492:	83 30       	cpi	r24, 0x03	; 3
     494:	81 f0       	breq	.+32     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     496:	84 30       	cpi	r24, 0x04	; 4
     498:	f9 f0       	breq	.+62     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     49a:	de cf       	rjmp	.-68     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
static volatile int rec_flag = 0;
static void FSM_system_init(uint8_t *joined_flag);
static uint8_t tx_test_flag;

void FSM_system_init(uint8_t *joined_flag){
	board_setup(joined_flag);
     49c:	ce 01       	movw	r24, r28
     49e:	43 96       	adiw	r24, 0x13	; 19
     4a0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <board_setup>
		}
		switch (nextState){
			
			case ST_INIT:
				FSM_system_init(&board1.lora_joined_err);
				if (board1.lora_joined_err) nextState = ST_NOT_JOINED;
     4a4:	8b 89       	ldd	r24, Y+19	; 0x13
     4a6:	88 23       	and	r24, r24
     4a8:	19 f0       	breq	.+6      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4aa:	b0 92 20 03 	sts	0x0320, r11	; 0x800320 <nextState>
     4ae:	d4 cf       	rjmp	.-88     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
				else nextState = ST_ACTIVE;
     4b0:	c0 92 20 03 	sts	0x0320, r12	; 0x800320 <nextState>
     4b4:	d1 cf       	rjmp	.-94     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			case ST_NOT_JOINED:
				#ifdef DEBUG_M
					puts("Not joined");
				#endif
				
				rejoin_attempts++;
     4b6:	0f 5f       	subi	r16, 0xFF	; 255
     4b8:	1f 4f       	sbci	r17, 0xFF	; 255
				if (rejoin_attempts < 3) board1.lora_joined_err = lora_join_OTAA();
     4ba:	03 30       	cpi	r16, 0x03	; 3
     4bc:	11 05       	cpc	r17, r1
     4be:	24 f4       	brge	.+8      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4c0:	0e 94 dd 05 	call	0xbba	; 0xbba <lora_join_OTAA>
     4c4:	8b 8b       	std	Y+19, r24	; 0x13
     4c6:	05 c0       	rjmp	.+10     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
				else if (rejoin_attempts >= lora_wait_rejoin_minutes*60) rejoin_attempts = 0;
     4c8:	04 3b       	cpi	r16, 0xB4	; 180
     4ca:	11 05       	cpc	r17, r1
     4cc:	14 f0       	brlt	.+4      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4ce:	00 e0       	ldi	r16, 0x00	; 0
     4d0:	10 e0       	ldi	r17, 0x00	; 0

				nextState = ST_SLEEP;
     4d2:	d0 92 20 03 	sts	0x0320, r13	; 0x800320 <nextState>
				break;
     4d6:	c0 cf       	rjmp	.-128    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			
			case ST_DATA_RECEIVED:
				
			
			case ST_ACTIVE:
				PORTB ^= (1<<LED2);
     4d8:	85 b1       	in	r24, 0x05	; 5
     4da:	8c 25       	eor	r24, r12
     4dc:	85 b9       	out	0x05, r24	; 5
				#ifdef DEBUG_M
					puts("Active");
				#endif
				board1.ina219.bus_voltage_avg	+= INA219_readBusVoltageReg();
     4de:	0e 94 8b 04 	call	0x916	; 0x916 <INA219_readBusVoltageReg>
     4e2:	09 2e       	mov	r0, r25
     4e4:	00 0c       	add	r0, r0
     4e6:	aa 0b       	sbc	r26, r26
     4e8:	bb 0b       	sbc	r27, r27
     4ea:	4b 85       	ldd	r20, Y+11	; 0x0b
     4ec:	5c 85       	ldd	r21, Y+12	; 0x0c
     4ee:	6d 85       	ldd	r22, Y+13	; 0x0d
     4f0:	7e 85       	ldd	r23, Y+14	; 0x0e
     4f2:	84 0f       	add	r24, r20
     4f4:	95 1f       	adc	r25, r21
     4f6:	a6 1f       	adc	r26, r22
     4f8:	b7 1f       	adc	r27, r23
     4fa:	8b 87       	std	Y+11, r24	; 0x0b
     4fc:	9c 87       	std	Y+12, r25	; 0x0c
     4fe:	ad 87       	std	Y+13, r26	; 0x0d
     500:	be 87       	std	Y+14, r27	; 0x0e
				board1.ina219.current_avg		+= INA219_readCurrentReg();
     502:	0e 94 b4 04 	call	0x968	; 0x968 <INA219_readCurrentReg>
     506:	4f 85       	ldd	r20, Y+15	; 0x0f
     508:	58 89       	ldd	r21, Y+16	; 0x10
     50a:	69 89       	ldd	r22, Y+17	; 0x11
     50c:	7a 89       	ldd	r23, Y+18	; 0x12
     50e:	48 0f       	add	r20, r24
     510:	59 1f       	adc	r21, r25
     512:	61 1d       	adc	r22, r1
     514:	71 1d       	adc	r23, r1
     516:	4f 87       	std	Y+15, r20	; 0x0f
     518:	58 8b       	std	Y+16, r21	; 0x10
     51a:	69 8b       	std	Y+17, r22	; 0x11
     51c:	7a 8b       	std	Y+18, r23	; 0x12
				board1.batteryLevel = board_get_battery_level();
     51e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <board_get_battery_level>
     522:	8e 83       	std	Y+6, r24	; 0x06
				board1.sample_size = sample_size;
     524:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <sample_size>
     528:	30 91 8a 03 	lds	r19, 0x038A	; 0x80038a <sample_size+0x1>
     52c:	3d 8b       	std	Y+21, r19	; 0x15
     52e:	2c 8b       	std	Y+20, r18	; 0x14
				if (board1.batteryLevel < 70) board_charge(BOARD_CHARGE_ON);
     530:	86 34       	cpi	r24, 0x46	; 70
     532:	28 f4       	brcc	.+10     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 55 01 	call	0x2aa	; 0x2aa <board_charge>
     53c:	06 c0       	rjmp	.+12     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
				else if (board1.batteryLevel > 95) board_charge(BOARD_CHARGE_OFF);
     53e:	80 36       	cpi	r24, 0x60	; 96
     540:	20 f0       	brcs	.+8      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 55 01 	call	0x2aa	; 0x2aa <board_charge>
				if(!(current_time%board1.sample_size) && (current_time != 0)){
     54a:	60 91 85 03 	lds	r22, 0x0385	; 0x800385 <current_time>
     54e:	70 91 86 03 	lds	r23, 0x0386	; 0x800386 <current_time+0x1>
     552:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <current_time+0x2>
     556:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <current_time+0x3>
     55a:	4c 88       	ldd	r4, Y+20	; 0x14
     55c:	5d 88       	ldd	r5, Y+21	; 0x15
     55e:	61 2c       	mov	r6, r1
     560:	71 2c       	mov	r7, r1
     562:	a3 01       	movw	r20, r6
     564:	92 01       	movw	r18, r4
     566:	0e 94 ad 0a 	call	0x155a	; 0x155a <__udivmodsi4>
     56a:	67 2b       	or	r22, r23
     56c:	68 2b       	or	r22, r24
     56e:	69 2b       	or	r22, r25
     570:	09 f0       	breq	.+2      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     572:	66 c0       	rjmp	.+204    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
     574:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <current_time>
     578:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <current_time+0x1>
     57c:	a0 91 87 03 	lds	r26, 0x0387	; 0x800387 <current_time+0x2>
     580:	b0 91 88 03 	lds	r27, 0x0388	; 0x800388 <current_time+0x3>
     584:	89 2b       	or	r24, r25
     586:	8a 2b       	or	r24, r26
     588:	8b 2b       	or	r24, r27
     58a:	09 f4       	brne	.+2      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
     58c:	59 c0       	rjmp	.+178    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
					#ifdef DEBUG_M
						puts("It's time");
					#endif
					if (frame_counter == 0xFF) frame_counter = 0;
     58e:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <frame_counter>
     592:	8f 3f       	cpi	r24, 0xFF	; 255
     594:	11 f4       	brne	.+4      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     596:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <frame_counter>
					board1.frame_counter = frame_counter++;
     59a:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <frame_counter>
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	98 0f       	add	r25, r24
     5a2:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <frame_counter>
     5a6:	89 83       	std	Y+1, r24	; 0x01
					board1.ina219.bus_voltage	= board1.ina219.bus_voltage_avg / board1.sample_size;
     5a8:	6b 85       	ldd	r22, Y+11	; 0x0b
     5aa:	7c 85       	ldd	r23, Y+12	; 0x0c
     5ac:	8d 85       	ldd	r24, Y+13	; 0x0d
     5ae:	9e 85       	ldd	r25, Y+14	; 0x0e
     5b0:	a3 01       	movw	r20, r6
     5b2:	92 01       	movw	r18, r4
     5b4:	0e 94 ad 0a 	call	0x155a	; 0x155a <__udivmodsi4>
     5b8:	38 87       	std	Y+8, r19	; 0x08
     5ba:	2f 83       	std	Y+7, r18	; 0x07
					board1.ina219.current		= board1.ina219.current_avg / board1.sample_size;
     5bc:	6f 85       	ldd	r22, Y+15	; 0x0f
     5be:	78 89       	ldd	r23, Y+16	; 0x10
     5c0:	89 89       	ldd	r24, Y+17	; 0x11
     5c2:	9a 89       	ldd	r25, Y+18	; 0x12
     5c4:	a3 01       	movw	r20, r6
     5c6:	92 01       	movw	r18, r4
     5c8:	0e 94 ad 0a 	call	0x155a	; 0x155a <__udivmodsi4>
     5cc:	3a 87       	std	Y+10, r19	; 0x0a
     5ce:	29 87       	std	Y+9, r18	; 0x09
					board1.time_stamp = current_time;
     5d0:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <current_time>
     5d4:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <current_time+0x1>
     5d8:	a0 91 87 03 	lds	r26, 0x0387	; 0x800387 <current_time+0x2>
     5dc:	b0 91 88 03 	lds	r27, 0x0388	; 0x800388 <current_time+0x3>
     5e0:	8a 83       	std	Y+2, r24	; 0x02
     5e2:	9b 83       	std	Y+3, r25	; 0x03
     5e4:	ac 83       	std	Y+4, r26	; 0x04
     5e6:	bd 83       	std	Y+5, r27	; 0x05
					board1.msg = hex_encode(board1);
     5e8:	8d b7       	in	r24, 0x3d	; 61
     5ea:	9e b7       	in	r25, 0x3e	; 62
     5ec:	47 97       	sbiw	r24, 0x17	; 23
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	9e bf       	out	0x3e, r25	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	8d bf       	out	0x3d, r24	; 61
     5f8:	ad b7       	in	r26, 0x3d	; 61
     5fa:	be b7       	in	r27, 0x3e	; 62
     5fc:	11 96       	adiw	r26, 0x01	; 1
     5fe:	87 e1       	ldi	r24, 0x17	; 23
     600:	fe 01       	movw	r30, r28
     602:	31 96       	adiw	r30, 0x01	; 1
     604:	01 90       	ld	r0, Z+
     606:	0d 92       	st	X+, r0
     608:	8a 95       	dec	r24
     60a:	e1 f7       	brne	.-8      	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     60c:	0e 94 02 07 	call	0xe04	; 0xe04 <hex_encode>
     610:	8e 8b       	std	Y+22, r24	; 0x16
     612:	9f 8b       	std	Y+23, r25	; 0x17
						
					#ifndef LORA_NODE
						printf("%s", board1.msg);
     614:	9f 93       	push	r25
     616:	8f 93       	push	r24
     618:	ff 92       	push	r15
     61a:	ef 92       	push	r14
     61c:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <printf>
						USART_transmit2(0x0A);
     620:	8a e0       	ldi	r24, 0x0A	; 10
     622:	0e 94 2d 06 	call	0xc5a	; 0xc5a <USART_transmit2>
					#else 
						//puts(board1.msg);
						lora_transmit(board1.msg);
					#endif
					board1.ina219.bus_voltage_avg = 0;
     626:	1b 86       	std	Y+11, r1	; 0x0b
     628:	1c 86       	std	Y+12, r1	; 0x0c
     62a:	1d 86       	std	Y+13, r1	; 0x0d
     62c:	1e 86       	std	Y+14, r1	; 0x0e
					board1.ina219.current_avg = 0;
     62e:	1f 86       	std	Y+15, r1	; 0x0f
     630:	18 8a       	std	Y+16, r1	; 0x10
     632:	19 8a       	std	Y+17, r1	; 0x11
     634:	1a 8a       	std	Y+18, r1	; 0x12
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
				}
				nextState = ST_SLEEP;
     640:	d0 92 20 03 	sts	0x0320, r13	; 0x800320 <nextState>
				break;
     644:	09 cf       	rjmp	.-494    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     646:	8f e9       	ldi	r24, 0x9F	; 159
     648:	9f e0       	ldi	r25, 0x0F	; 15
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	f1 f7       	brne	.-4      	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
     64e:	00 c0       	rjmp	.+0      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     650:	00 00       	nop
				_delay_ms(2); // Delay to allow a print to be written over serial before sleep
				
				#ifndef TIMER2
				_delay_ms(1000);
				#else
				enter_powerSave();
     652:	0e 94 b5 06 	call	0xd6a	; 0xd6a <enter_powerSave>
				#endif

				if(board1.lora_joined_err) nextState = ST_NOT_JOINED;
     656:	8b 89       	ldd	r24, Y+19	; 0x13
     658:	88 23       	and	r24, r24
     65a:	19 f0       	breq	.+6      	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
     65c:	b0 92 20 03 	sts	0x0320, r11	; 0x800320 <nextState>
     660:	fb ce       	rjmp	.-522    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
				else nextState = ST_ACTIVE;
     662:	c0 92 20 03 	sts	0x0320, r12	; 0x800320 <nextState>
     666:	f8 ce       	rjmp	.-528    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>

00000668 <__vector_2>:
		}
	}
}

ISR (INT1_vect)          //External interrupt_zero ISR
{	
     668:	1f 92       	push	r1
     66a:	0f 92       	push	r0
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	0f 92       	push	r0
     670:	11 24       	eor	r1, r1
     672:	8f 93       	push	r24
	tx_test_flag = 1;
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <__data_end>
}
     67a:	8f 91       	pop	r24
     67c:	0f 90       	pop	r0
     67e:	0f be       	out	0x3f, r0	; 63
     680:	0f 90       	pop	r0
     682:	1f 90       	pop	r1
     684:	18 95       	reti

00000686 <__vector_47>:

ISR (USART2_RX_vect){
     686:	1f 92       	push	r1
     688:	0f 92       	push	r0
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	0f 92       	push	r0
     68e:	11 24       	eor	r1, r1
     690:	2f 93       	push	r18
     692:	3f 93       	push	r19
     694:	4f 93       	push	r20
     696:	5f 93       	push	r21
     698:	6f 93       	push	r22
     69a:	7f 93       	push	r23
     69c:	8f 93       	push	r24
     69e:	9f 93       	push	r25
     6a0:	af 93       	push	r26
     6a2:	bf 93       	push	r27
     6a4:	ef 93       	push	r30
     6a6:	ff 93       	push	r31
	USART_receiveString2();
     6a8:	0e 94 5d 06 	call	0xcba	; 0xcba <USART_receiveString2>
	data_receive_flag = 1;
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <data_receive_flag>
}
     6b2:	ff 91       	pop	r31
     6b4:	ef 91       	pop	r30
     6b6:	bf 91       	pop	r27
     6b8:	af 91       	pop	r26
     6ba:	9f 91       	pop	r25
     6bc:	8f 91       	pop	r24
     6be:	7f 91       	pop	r23
     6c0:	6f 91       	pop	r22
     6c2:	5f 91       	pop	r21
     6c4:	4f 91       	pop	r20
     6c6:	3f 91       	pop	r19
     6c8:	2f 91       	pop	r18
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	1f 90       	pop	r1
     6d2:	18 95       	reti

000006d4 <__vector_11>:


ISR(TIMER2_OVF_vect){
     6d4:	1f 92       	push	r1
     6d6:	0f 92       	push	r0
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	0f 92       	push	r0
     6dc:	11 24       	eor	r1, r1
     6de:	8f 93       	push	r24
     6e0:	9f 93       	push	r25
     6e2:	af 93       	push	r26
     6e4:	bf 93       	push	r27
	current_time ++;
     6e6:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <current_time>
     6ea:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <current_time+0x1>
     6ee:	a0 91 87 03 	lds	r26, 0x0387	; 0x800387 <current_time+0x2>
     6f2:	b0 91 88 03 	lds	r27, 0x0388	; 0x800388 <current_time+0x3>
     6f6:	01 96       	adiw	r24, 0x01	; 1
     6f8:	a1 1d       	adc	r26, r1
     6fa:	b1 1d       	adc	r27, r1
     6fc:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <current_time>
     700:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <current_time+0x1>
     704:	a0 93 87 03 	sts	0x0387, r26	; 0x800387 <current_time+0x2>
     708:	b0 93 88 03 	sts	0x0388, r27	; 0x800388 <current_time+0x3>
     70c:	bf 91       	pop	r27
     70e:	af 91       	pop	r26
     710:	9f 91       	pop	r25
     712:	8f 91       	pop	r24
     714:	0f 90       	pop	r0
     716:	0f be       	out	0x3f, r0	; 63
     718:	0f 90       	pop	r0
     71a:	1f 90       	pop	r1
     71c:	18 95       	reti

0000071e <i2c_init>:
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address){
    return i2c_start( address );

}
     71e:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
     722:	80 e2       	ldi	r24, 0x20	; 32
     724:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
     728:	08 95       	ret

0000072a <i2c_sync>:
     72a:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
     72e:	88 23       	and	r24, r24
     730:	bc f0       	brlt	.+46     	; 0x760 <i2c_sync+0x36>
     732:	24 e6       	ldi	r18, 0x64	; 100
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	ec ed       	ldi	r30, 0xDC	; 220
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	8a 95       	dec	r24
     73e:	f1 f7       	brne	.-4      	; 0x73c <i2c_sync+0x12>
     740:	00 c0       	rjmp	.+0      	; 0x742 <i2c_sync+0x18>
     742:	21 50       	subi	r18, 0x01	; 1
     744:	31 09       	sbc	r19, r1
     746:	80 81       	ld	r24, Z
     748:	88 23       	and	r24, r24
     74a:	24 f0       	brlt	.+8      	; 0x754 <i2c_sync+0x2a>
     74c:	21 15       	cp	r18, r1
     74e:	31 05       	cpc	r19, r1
     750:	a1 f7       	brne	.-24     	; 0x73a <i2c_sync+0x10>
     752:	03 c0       	rjmp	.+6      	; 0x75a <i2c_sync+0x30>
     754:	21 15       	cp	r18, r1
     756:	31 05       	cpc	r19, r1
     758:	29 f4       	brne	.+10     	; 0x764 <i2c_sync+0x3a>
     75a:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
     75e:	02 c0       	rjmp	.+4      	; 0x764 <i2c_sync+0x3a>
     760:	24 e6       	ldi	r18, 0x64	; 100
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	23 2b       	or	r18, r19
     768:	09 f4       	brne	.+2      	; 0x76c <i2c_sync+0x42>
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	08 95       	ret

0000076e <i2c_waitStop>:
     76e:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
     772:	84 ff       	sbrs	r24, 4
     774:	17 c0       	rjmp	.+46     	; 0x7a4 <i2c_waitStop+0x36>
     776:	24 e6       	ldi	r18, 0x64	; 100
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	ec ed       	ldi	r30, 0xDC	; 220
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	8a 95       	dec	r24
     782:	f1 f7       	brne	.-4      	; 0x780 <i2c_waitStop+0x12>
     784:	00 c0       	rjmp	.+0      	; 0x786 <i2c_waitStop+0x18>
     786:	21 50       	subi	r18, 0x01	; 1
     788:	31 09       	sbc	r19, r1
     78a:	80 81       	ld	r24, Z
     78c:	84 ff       	sbrs	r24, 4
     78e:	04 c0       	rjmp	.+8      	; 0x798 <i2c_waitStop+0x2a>
     790:	21 15       	cp	r18, r1
     792:	31 05       	cpc	r19, r1
     794:	a1 f7       	brne	.-24     	; 0x77e <i2c_waitStop+0x10>
     796:	03 c0       	rjmp	.+6      	; 0x79e <i2c_waitStop+0x30>
     798:	21 15       	cp	r18, r1
     79a:	31 05       	cpc	r19, r1
     79c:	29 f4       	brne	.+10     	; 0x7a8 <i2c_waitStop+0x3a>
     79e:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <i2c_waitStop+0x3a>
     7a4:	24 e6       	ldi	r18, 0x64	; 100
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	23 2b       	or	r18, r19
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <i2c_waitStop+0x42>
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	08 95       	ret

000007b2 <i2c_start>:
     7b2:	cf 93       	push	r28
     7b4:	c8 2f       	mov	r28, r24
     7b6:	84 ea       	ldi	r24, 0xA4	; 164
     7b8:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
     7bc:	0e 94 95 03 	call	0x72a	; 0x72a <i2c_sync>
     7c0:	88 23       	and	r24, r24
     7c2:	e9 f0       	breq	.+58     	; 0x7fe <i2c_start+0x4c>
     7c4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
     7c8:	88 7f       	andi	r24, 0xF8	; 248
     7ca:	88 30       	cpi	r24, 0x08	; 8
     7cc:	11 f0       	breq	.+4      	; 0x7d2 <i2c_start+0x20>
     7ce:	80 31       	cpi	r24, 0x10	; 16
     7d0:	99 f4       	brne	.+38     	; 0x7f8 <i2c_start+0x46>
     7d2:	c0 93 db 00 	sts	0x00DB, r28	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
     7d6:	84 e8       	ldi	r24, 0x84	; 132
     7d8:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
     7dc:	0e 94 95 03 	call	0x72a	; 0x72a <i2c_sync>
     7e0:	88 23       	and	r24, r24
     7e2:	69 f0       	breq	.+26     	; 0x7fe <i2c_start+0x4c>
     7e4:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
     7e8:	98 7f       	andi	r25, 0xF8	; 248
     7ea:	98 31       	cpi	r25, 0x18	; 24
     7ec:	39 f0       	breq	.+14     	; 0x7fc <i2c_start+0x4a>
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 34       	cpi	r25, 0x40	; 64
     7f2:	29 f4       	brne	.+10     	; 0x7fe <i2c_start+0x4c>
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	03 c0       	rjmp	.+6      	; 0x7fe <i2c_start+0x4c>
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	01 c0       	rjmp	.+2      	; 0x7fe <i2c_start+0x4c>
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	cf 91       	pop	r28
     800:	08 95       	ret

00000802 <i2c_stop>:
/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void){
    /* send stop condition */
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     802:	84 e9       	ldi	r24, 0x94	; 148
     804:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	
	// wait until stop condition is executed and bus released
	i2c_waitStop(); 
     808:	0e 94 b7 03 	call	0x76e	; 0x76e <i2c_waitStop>
     80c:	08 95       	ret

0000080e <i2c_write>:
*************************************************************************/
unsigned char i2c_write( unsigned char data ){	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR1 = data;
     80e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
	TWCR1 = (1<<TWINT) | (1<<TWEN);
     812:	84 e8       	ldi	r24, 0x84	; 132
     814:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>

	// wait until transmission completed
	i2c_sync();
     818:	0e 94 95 03 	call	0x72a	; 0x72a <i2c_sync>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     81c:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
     820:	98 7f       	andi	r25, 0xF8	; 248
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	98 32       	cpi	r25, 0x28	; 40
     826:	09 f4       	brne	.+2      	; 0x82a <i2c_write+0x1c>
     828:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}
     82a:	08 95       	ret

0000082c <i2c_readAck>:
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void){
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     82c:	84 ec       	ldi	r24, 0xC4	; 196
     82e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	i2c_sync();    
     832:	0e 94 95 03 	call	0x72a	; 0x72a <i2c_sync>
	return TWDR1;
     836:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
}
     83a:	08 95       	ret

0000083c <i2c_readNak>:
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void){
	TWCR1 = (1<<TWINT) | (1<<TWEN);
     83c:	84 e8       	ldi	r24, 0x84	; 132
     83e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__DATA_REGION_ORIGIN__+0x7c>
	i2c_sync(); 
     842:	0e 94 95 03 	call	0x72a	; 0x72a <i2c_sync>
	return TWDR1;
     846:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__DATA_REGION_ORIGIN__+0x7b>
}
     84a:	08 95       	ret

0000084c <i2c_read2ByteRegister>:
  
  Input:    device address, register address, buffer for storage
  Return:   0 write successful 
            1 write failed
*************************************************************************/
uint8_t i2c_read2ByteRegister(uint8_t adr, uint8_t regAddr, uint8_t *data){
     84c:	ff 92       	push	r15
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	d8 2f       	mov	r29, r24
     858:	f6 2e       	mov	r15, r22
     85a:	8a 01       	movw	r16, r20
	uint8_t error = 0;
	error += i2c_start(adr | I2C_WRITE);
     85c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <i2c_start>
     860:	c8 2f       	mov	r28, r24
	error += i2c_write(regAddr);
     862:	8f 2d       	mov	r24, r15
     864:	0e 94 07 04 	call	0x80e	; 0x80e <i2c_write>
     868:	c8 0f       	add	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     86a:	8a e1       	ldi	r24, 0x1A	; 26
     86c:	8a 95       	dec	r24
     86e:	f1 f7       	brne	.-4      	; 0x86c <i2c_read2ByteRegister+0x20>
     870:	00 c0       	rjmp	.+0      	; 0x872 <i2c_read2ByteRegister+0x26>
	_delay_us(10);
	//read data
	error += i2c_start(adr | I2C_READ);
     872:	8d 2f       	mov	r24, r29
     874:	81 60       	ori	r24, 0x01	; 1
     876:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <i2c_start>
     87a:	c8 0f       	add	r28, r24
	data[1] = i2c_readAck();
     87c:	0e 94 16 04 	call	0x82c	; 0x82c <i2c_readAck>
     880:	f8 01       	movw	r30, r16
     882:	81 83       	std	Z+1, r24	; 0x01
	data[0] = i2c_readNak();
     884:	0e 94 1e 04 	call	0x83c	; 0x83c <i2c_readNak>
     888:	f8 01       	movw	r30, r16
     88a:	80 83       	st	Z, r24
	i2c_stop();
     88c:	0e 94 01 04 	call	0x802	; 0x802 <i2c_stop>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	c1 11       	cpse	r28, r1
     894:	01 c0       	rjmp	.+2      	; 0x898 <i2c_read2ByteRegister+0x4c>
     896:	80 e0       	ldi	r24, 0x00	; 0
	
	if (error) return 1;
	else return 0;
}
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	ff 90       	pop	r15
     8a2:	08 95       	ret

000008a4 <i2c_write2ByteRegister>:
  
  Input:    device address, register address, bytes to be transfered 
  Return:   0 write successful
			1 write failed
*************************************************************************/
uint8_t i2c_write2ByteRegister(uint8_t adr, uint8_t regAddr, uint16_t data){
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	06 2f       	mov	r16, r22
     8ae:	d4 2f       	mov	r29, r20
     8b0:	15 2f       	mov	r17, r21
	uint8_t error = 0;
	error += i2c_start(adr | I2C_WRITE);
     8b2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <i2c_start>
     8b6:	c8 2f       	mov	r28, r24
	error += i2c_write(regAddr);
     8b8:	80 2f       	mov	r24, r16
     8ba:	0e 94 07 04 	call	0x80e	; 0x80e <i2c_write>
     8be:	c8 0f       	add	r28, r24
     8c0:	8a e1       	ldi	r24, 0x1A	; 26
     8c2:	8a 95       	dec	r24
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <i2c_write2ByteRegister+0x1e>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <i2c_write2ByteRegister+0x24>
	_delay_us(10);
	error += i2c_write((uint8_t)(data >> 8));
     8c8:	81 2f       	mov	r24, r17
     8ca:	0e 94 07 04 	call	0x80e	; 0x80e <i2c_write>
     8ce:	c8 0f       	add	r28, r24
	error += i2c_write((uint8_t)(data & 0xFF));
     8d0:	8d 2f       	mov	r24, r29
     8d2:	0e 94 07 04 	call	0x80e	; 0x80e <i2c_write>
     8d6:	c8 0f       	add	r28, r24
	i2c_stop();
     8d8:	0e 94 01 04 	call	0x802	; 0x802 <i2c_stop>
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	c1 11       	cpse	r28, r1
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <i2c_write2ByteRegister+0x40>
     8e2:	80 e0       	ldi	r24, 0x00	; 0
	if (error) return 1;
	else return 0;
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	0f 91       	pop	r16
     8ec:	08 95       	ret

000008ee <INA219_setCalibration_16V_400mA>:

uint16_t INA219_readShuntVoltageReg(){ // Not operational
	uint8_t value[2];
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_SHUNTVOLTAGE, value)) return 1;
	return ((value[1] << 8) | value[0]);
}
     8ee:	cf 93       	push	r28
     8f0:	40 e8       	ldi	r20, 0x80	; 128
     8f2:	5a e6       	ldi	r21, 0x6A	; 106
     8f4:	65 e0       	ldi	r22, 0x05	; 5
     8f6:	80 e8       	ldi	r24, 0x80	; 128
     8f8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <i2c_write2ByteRegister>
     8fc:	c8 2f       	mov	r28, r24
     8fe:	4f e9       	ldi	r20, 0x9F	; 159
     900:	51 e0       	ldi	r21, 0x01	; 1
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	80 e8       	ldi	r24, 0x80	; 128
     906:	0e 94 52 04 	call	0x8a4	; 0x8a4 <i2c_write2ByteRegister>
     90a:	c8 0f       	add	r28, r24
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	09 f4       	brne	.+2      	; 0x912 <__stack+0x13>
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	cf 91       	pop	r28
     914:	08 95       	ret

00000916 <INA219_readBusVoltageReg>:
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	00 d0       	rcall	.+0      	; 0x91c <INA219_readBusVoltageReg+0x6>
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	ae 01       	movw	r20, r28
     922:	4f 5f       	subi	r20, 0xFF	; 255
     924:	5f 4f       	sbci	r21, 0xFF	; 255
     926:	62 e0       	ldi	r22, 0x02	; 2
     928:	80 e8       	ldi	r24, 0x80	; 128
     92a:	0e 94 26 04 	call	0x84c	; 0x84c <i2c_read2ByteRegister>
     92e:	81 11       	cpse	r24, r1
     930:	11 c0       	rjmp	.+34     	; 0x954 <INA219_readBusVoltageReg+0x3e>
     932:	8a 81       	ldd	r24, Y+2	; 0x02
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	98 2f       	mov	r25, r24
     938:	88 27       	eor	r24, r24
     93a:	29 81       	ldd	r18, Y+1	; 0x01
     93c:	82 2b       	or	r24, r18
     93e:	95 95       	asr	r25
     940:	87 95       	ror	r24
     942:	95 95       	asr	r25
     944:	87 95       	ror	r24
     946:	95 95       	asr	r25
     948:	87 95       	ror	r24
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	20 e1       	ldi	r18, 0x10	; 16
     94e:	92 07       	cpc	r25, r18
     950:	30 f0       	brcs	.+12     	; 0x95e <INA219_readBusVoltageReg+0x48>
     952:	03 c0       	rjmp	.+6      	; 0x95a <INA219_readBusVoltageReg+0x44>
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	02 c0       	rjmp	.+4      	; 0x95e <INA219_readBusVoltageReg+0x48>
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <INA219_readCurrentReg>:
uint16_t INA219_readCurrentReg(){
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	00 d0       	rcall	.+0      	; 0x96e <INA219_readCurrentReg+0x6>
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
	uint8_t value[2];
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_CURRENT, value)) return 0;
     972:	ae 01       	movw	r20, r28
     974:	4f 5f       	subi	r20, 0xFF	; 255
     976:	5f 4f       	sbci	r21, 0xFF	; 255
     978:	64 e0       	ldi	r22, 0x04	; 4
     97a:	80 e8       	ldi	r24, 0x80	; 128
     97c:	0e 94 26 04 	call	0x84c	; 0x84c <i2c_read2ByteRegister>
     980:	81 11       	cpse	r24, r1
     982:	0d c0       	rjmp	.+26     	; 0x99e <INA219_readCurrentReg+0x36>
	uint16_t total = (value[1] << 8) | value[0];
     984:	2a 81       	ldd	r18, Y+2	; 0x02
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	32 2f       	mov	r19, r18
     98a:	22 27       	eor	r18, r18
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	28 2b       	or	r18, r24
	if(total>0x8000) return 0x00;  // Remove possibility of corruption with a bug where total is above 0xFFAE with no connected source.
     990:	21 30       	cpi	r18, 0x01	; 1
     992:	80 e8       	ldi	r24, 0x80	; 128
     994:	38 07       	cpc	r19, r24
     996:	30 f4       	brcc	.+12     	; 0x9a4 <INA219_readCurrentReg+0x3c>
	return total;
     998:	82 2f       	mov	r24, r18
     99a:	93 2f       	mov	r25, r19
     99c:	05 c0       	rjmp	.+10     	; 0x9a8 <INA219_readCurrentReg+0x40>
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_SHUNTVOLTAGE, value)) return 1;
	return ((value[1] << 8) | value[0]);
}
uint16_t INA219_readCurrentReg(){
	uint8_t value[2];
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_CURRENT, value)) return 0;
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <INA219_readCurrentReg+0x40>
	uint16_t total = (value[1] << 8) | value[0];
	if(total>0x8000) return 0x00;  // Remove possibility of corruption with a bug where total is above 0xFFAE with no connected source.
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	90 e0       	ldi	r25, 0x00	; 0
	return total;
}
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <INA219_init>:


uint8_t INA219_init(){
	if (INA219_setCalibration_16V_400mA()) {
     9b2:	0e 94 77 04 	call	0x8ee	; 0x8ee <INA219_setCalibration_16V_400mA>
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	81 11       	cpse	r24, r1
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <INA219_init+0xc>
     9bc:	90 e0       	ldi	r25, 0x00	; 0
		INA219_readCalibrationReg();
		INA219_readConfigReg();
		#endif
		return 0;
	}
     9be:	89 2f       	mov	r24, r25
     9c0:	08 95       	ret

000009c2 <lora_send_command>:
	
}
uint8_t lora_reset(){
	lora_send_command("sys reset");
	return lora_receive_response();
}
     9c2:	0e 94 1e 06 	call	0xc3c	; 0xc3c <USART_putstring0>
     9c6:	8d e0       	ldi	r24, 0x0D	; 13
     9c8:	0e 94 16 06 	call	0xc2c	; 0xc2c <USART_transmit0>
     9cc:	8a e0       	ldi	r24, 0x0A	; 10
     9ce:	0e 94 16 06 	call	0xc2c	; 0xc2c <USART_transmit0>
     9d2:	08 95       	ret

000009d4 <lora_assert_response>:
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	ec 01       	movw	r28, r24
     9da:	42 e0       	ldi	r20, 0x02	; 2
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	64 e4       	ldi	r22, 0x44	; 68
     9e0:	71 e0       	ldi	r23, 0x01	; 1
     9e2:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <strncmp>
     9e6:	89 2b       	or	r24, r25
     9e8:	09 f4       	brne	.+2      	; 0x9ec <lora_assert_response+0x18>
     9ea:	8f c0       	rjmp	.+286    	; 0xb0a <lora_assert_response+0x136>
     9ec:	48 e0       	ldi	r20, 0x08	; 8
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	64 e3       	ldi	r22, 0x34	; 52
     9f2:	71 e0       	ldi	r23, 0x01	; 1
     9f4:	ce 01       	movw	r24, r28
     9f6:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <strncmp>
     9fa:	89 2b       	or	r24, r25
     9fc:	09 f4       	brne	.+2      	; 0xa00 <lora_assert_response+0x2c>
     9fe:	87 c0       	rjmp	.+270    	; 0xb0e <lora_assert_response+0x13a>
     a00:	49 e0       	ldi	r20, 0x09	; 9
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	6d e3       	ldi	r22, 0x3D	; 61
     a06:	71 e0       	ldi	r23, 0x01	; 1
     a08:	ce 01       	movw	r24, r28
     a0a:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <strncmp>
     a0e:	89 2b       	or	r24, r25
     a10:	09 f4       	brne	.+2      	; 0xa14 <lora_assert_response+0x40>
     a12:	7f c0       	rjmp	.+254    	; 0xb12 <lora_assert_response+0x13e>
     a14:	47 e0       	ldi	r20, 0x07	; 7
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	67 e4       	ldi	r22, 0x47	; 71
     a1a:	71 e0       	ldi	r23, 0x01	; 1
     a1c:	ce 01       	movw	r24, r28
     a1e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <strncmp>
     a22:	89 2b       	or	r24, r25
     a24:	39 f4       	brne	.+14     	; 0xa34 <lora_assert_response+0x60>
     a26:	be 01       	movw	r22, r28
     a28:	81 e2       	ldi	r24, 0x21	; 33
     a2a:	93 e0       	ldi	r25, 0x03	; 3
     a2c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <strcpy>
     a30:	81 e1       	ldi	r24, 0x11	; 17
     a32:	86 c0       	rjmp	.+268    	; 0xb40 <lora_assert_response+0x16c>
     a34:	46 e0       	ldi	r20, 0x06	; 6
     a36:	50 e0       	ldi	r21, 0x00	; 0
     a38:	6f e4       	ldi	r22, 0x4F	; 79
     a3a:	71 e0       	ldi	r23, 0x01	; 1
     a3c:	ce 01       	movw	r24, r28
     a3e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <strncmp>
     a42:	89 2b       	or	r24, r25
     a44:	09 f4       	brne	.+2      	; 0xa48 <lora_assert_response+0x74>
     a46:	67 c0       	rjmp	.+206    	; 0xb16 <lora_assert_response+0x142>
     a48:	4d e0       	ldi	r20, 0x0D	; 13
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	66 e5       	ldi	r22, 0x56	; 86
     a4e:	71 e0       	ldi	r23, 0x01	; 1
     a50:	ce 01       	movw	r24, r28
     a52:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <strncmp>
     a56:	89 2b       	or	r24, r25
     a58:	09 f4       	brne	.+2      	; 0xa5c <lora_assert_response+0x88>
     a5a:	5f c0       	rjmp	.+190    	; 0xb1a <lora_assert_response+0x146>
     a5c:	4c e0       	ldi	r20, 0x0C	; 12
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	64 e6       	ldi	r22, 0x64	; 100
     a62:	71 e0       	ldi	r23, 0x01	; 1
     a64:	ce 01       	movw	r24, r28
     a66:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <strncmp>
     a6a:	89 2b       	or	r24, r25
     a6c:	09 f4       	brne	.+2      	; 0xa70 <lora_assert_response+0x9c>
     a6e:	57 c0       	rjmp	.+174    	; 0xb1e <lora_assert_response+0x14a>
     a70:	46 e0       	ldi	r20, 0x06	; 6
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	61 e7       	ldi	r22, 0x71	; 113
     a76:	71 e0       	ldi	r23, 0x01	; 1
     a78:	ce 01       	movw	r24, r28
     a7a:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <strncmp>
     a7e:	89 2b       	or	r24, r25
     a80:	09 f4       	brne	.+2      	; 0xa84 <lora_assert_response+0xb0>
     a82:	4f c0       	rjmp	.+158    	; 0xb22 <lora_assert_response+0x14e>
     a84:	44 e0       	ldi	r20, 0x04	; 4
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	68 e7       	ldi	r22, 0x78	; 120
     a8a:	71 e0       	ldi	r23, 0x01	; 1
     a8c:	ce 01       	movw	r24, r28
     a8e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <strncmp>
     a92:	89 2b       	or	r24, r25
     a94:	09 f4       	brne	.+2      	; 0xa98 <lora_assert_response+0xc4>
     a96:	47 c0       	rjmp	.+142    	; 0xb26 <lora_assert_response+0x152>
     a98:	4a e0       	ldi	r20, 0x0A	; 10
     a9a:	50 e0       	ldi	r21, 0x00	; 0
     a9c:	6d e7       	ldi	r22, 0x7D	; 125
     a9e:	71 e0       	ldi	r23, 0x01	; 1
     aa0:	ce 01       	movw	r24, r28
     aa2:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <strncmp>
     aa6:	89 2b       	or	r24, r25
     aa8:	09 f4       	brne	.+2      	; 0xaac <lora_assert_response+0xd8>
     aaa:	3f c0       	rjmp	.+126    	; 0xb2a <lora_assert_response+0x156>
     aac:	4d e0       	ldi	r20, 0x0D	; 13
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	68 e8       	ldi	r22, 0x88	; 136
     ab2:	71 e0       	ldi	r23, 0x01	; 1
     ab4:	ce 01       	movw	r24, r28
     ab6:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <strncmp>
     aba:	89 2b       	or	r24, r25
     abc:	c1 f1       	breq	.+112    	; 0xb2e <lora_assert_response+0x15a>
     abe:	4a e0       	ldi	r20, 0x0A	; 10
     ac0:	50 e0       	ldi	r21, 0x00	; 0
     ac2:	66 e9       	ldi	r22, 0x96	; 150
     ac4:	71 e0       	ldi	r23, 0x01	; 1
     ac6:	ce 01       	movw	r24, r28
     ac8:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <strncmp>
     acc:	89 2b       	or	r24, r25
     ace:	89 f1       	breq	.+98     	; 0xb32 <lora_assert_response+0x15e>
     ad0:	4f e1       	ldi	r20, 0x1F	; 31
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	61 ea       	ldi	r22, 0xA1	; 161
     ad6:	71 e0       	ldi	r23, 0x01	; 1
     ad8:	ce 01       	movw	r24, r28
     ada:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <strncmp>
     ade:	89 2b       	or	r24, r25
     ae0:	51 f1       	breq	.+84     	; 0xb36 <lora_assert_response+0x162>
     ae2:	40 e1       	ldi	r20, 0x10	; 16
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	61 ec       	ldi	r22, 0xC1	; 193
     ae8:	71 e0       	ldi	r23, 0x01	; 1
     aea:	ce 01       	movw	r24, r28
     aec:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <strncmp>
     af0:	89 2b       	or	r24, r25
     af2:	19 f1       	breq	.+70     	; 0xb3a <lora_assert_response+0x166>
     af4:	47 e0       	ldi	r20, 0x07	; 7
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	62 ed       	ldi	r22, 0xD2	; 210
     afa:	71 e0       	ldi	r23, 0x01	; 1
     afc:	ce 01       	movw	r24, r28
     afe:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <strncmp>
     b02:	89 2b       	or	r24, r25
     b04:	e1 f0       	breq	.+56     	; 0xb3e <lora_assert_response+0x16a>
     b06:	8a ea       	ldi	r24, 0xAA	; 170
     b08:	1b c0       	rjmp	.+54     	; 0xb40 <lora_assert_response+0x16c>
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	19 c0       	rjmp	.+50     	; 0xb40 <lora_assert_response+0x16c>
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	17 c0       	rjmp	.+46     	; 0xb40 <lora_assert_response+0x16c>
     b12:	80 e1       	ldi	r24, 0x10	; 16
     b14:	15 c0       	rjmp	.+42     	; 0xb40 <lora_assert_response+0x16c>
     b16:	8a e0       	ldi	r24, 0x0A	; 10
     b18:	13 c0       	rjmp	.+38     	; 0xb40 <lora_assert_response+0x16c>
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	11 c0       	rjmp	.+34     	; 0xb40 <lora_assert_response+0x16c>
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0f c0       	rjmp	.+30     	; 0xb40 <lora_assert_response+0x16c>
     b22:	83 e0       	ldi	r24, 0x03	; 3
     b24:	0d c0       	rjmp	.+26     	; 0xb40 <lora_assert_response+0x16c>
     b26:	84 e0       	ldi	r24, 0x04	; 4
     b28:	0b c0       	rjmp	.+22     	; 0xb40 <lora_assert_response+0x16c>
     b2a:	85 e0       	ldi	r24, 0x05	; 5
     b2c:	09 c0       	rjmp	.+18     	; 0xb40 <lora_assert_response+0x16c>
     b2e:	86 e0       	ldi	r24, 0x06	; 6
     b30:	07 c0       	rjmp	.+14     	; 0xb40 <lora_assert_response+0x16c>
     b32:	87 e0       	ldi	r24, 0x07	; 7
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <lora_assert_response+0x16c>
     b36:	88 e0       	ldi	r24, 0x08	; 8
     b38:	03 c0       	rjmp	.+6      	; 0xb40 <lora_assert_response+0x16c>
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	01 c0       	rjmp	.+2      	; 0xb40 <lora_assert_response+0x16c>
     b3e:	8d e0       	ldi	r24, 0x0D	; 13
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	08 95       	ret

00000b46 <lora_receive_response>:
     b46:	ef 92       	push	r14
     b48:	ff 92       	push	r15
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	ca 5f       	subi	r28, 0xFA	; 250
     b58:	d1 09       	sbc	r29, r1
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	f8 94       	cli
     b5e:	de bf       	out	0x3e, r29	; 62
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	cd bf       	out	0x3d, r28	; 61
     b64:	ce 01       	movw	r24, r28
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	7c 01       	movw	r14, r24
     b6a:	00 e0       	ldi	r16, 0x00	; 0
     b6c:	10 e0       	ldi	r17, 0x00	; 0
     b6e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <USART_receive0>
     b72:	8d 30       	cpi	r24, 0x0D	; 13
     b74:	71 f4       	brne	.+28     	; 0xb92 <lora_receive_response+0x4c>
     b76:	0e 94 0e 06 	call	0xc1c	; 0xc1c <USART_receive0>
     b7a:	e1 e0       	ldi	r30, 0x01	; 1
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	ec 0f       	add	r30, r28
     b80:	fd 1f       	adc	r31, r29
     b82:	e0 0f       	add	r30, r16
     b84:	f1 1f       	adc	r31, r17
     b86:	10 82       	st	Z, r1
     b88:	ce 01       	movw	r24, r28
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <lora_assert_response>
     b90:	06 c0       	rjmp	.+12     	; 0xb9e <lora_receive_response+0x58>
     b92:	f7 01       	movw	r30, r14
     b94:	81 93       	st	Z+, r24
     b96:	7f 01       	movw	r14, r30
     b98:	0f 5f       	subi	r16, 0xFF	; 255
     b9a:	1f 4f       	sbci	r17, 0xFF	; 255
     b9c:	e8 cf       	rjmp	.-48     	; 0xb6e <lora_receive_response+0x28>
     b9e:	c6 50       	subi	r28, 0x06	; 6
     ba0:	df 4f       	sbci	r29, 0xFF	; 255
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	08 95       	ret

00000bba <lora_join_OTAA>:
	#endif
	
	#ifdef DEBUG_M
	printf("Mac join command: ");
	#endif
	lora_send_command("mac join otaa");
     bba:	84 ee       	ldi	r24, 0xE4	; 228
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lora_send_command>
	err = lora_receive_response();
     bc2:	0e 94 a3 05 	call	0xb46	; 0xb46 <lora_receive_response>
	if (err) return 0x22;
     bc6:	81 11       	cpse	r24, r1
     bc8:	05 c0       	rjmp	.+10     	; 0xbd4 <lora_join_OTAA+0x1a>
	
	#ifdef DEBUG_M
	printf("Join result: ");
	#endif
	err = lora_receive_response();
     bca:	0e 94 a3 05 	call	0xb46	; 0xb46 <lora_receive_response>
	if (err) return DEV_NOT_JOINED;
     bce:	81 11       	cpse	r24, r1
     bd0:	03 c0       	rjmp	.+6      	; 0xbd8 <lora_join_OTAA+0x1e>
     bd2:	08 95       	ret
	#ifdef DEBUG_M
	printf("Mac join command: ");
	#endif
	lora_send_command("mac join otaa");
	err = lora_receive_response();
	if (err) return 0x22;
     bd4:	82 e2       	ldi	r24, 0x22	; 34
     bd6:	08 95       	ret
	
	#ifdef DEBUG_M
	printf("Join result: ");
	#endif
	err = lora_receive_response();
	if (err) return DEV_NOT_JOINED;
     bd8:	83 e2       	ldi	r24, 0x23	; 35
	
	
	return 0;
}
     bda:	08 95       	ret

00000bdc <USART_init>:
void USART_init(){
	unsigned int ubrr =(F_CPU / (16*DEBUG_BAUD))-1U;	// Calculate ubbr:
	
	#ifdef UART0
		/* Set baud rate UART0 */
		UBRR0H = (unsigned char)(ubrr>>8);
     bdc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
		UBRR0L = (unsigned char)ubrr;		
     be0:	93 e3       	ldi	r25, 0x33	; 51
     be2:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
		UCSR0B = (1<<RXEN)|(1<<TXEN);						// Enable receiver and transmitter 
     be6:	88 e1       	ldi	r24, 0x18	; 24
     be8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
		UCSR0C |= (3<<UCSZ0);								// Set frame format:  1stop bit, 8data
     bec:	e2 ec       	ldi	r30, 0xC2	; 194
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	86 60       	ori	r24, 0x06	; 6
     bf4:	80 83       	st	Z, r24
	#endif
	
	#ifdef UART2
		/* Set baud rate UART2 */
		UBRR2H = (unsigned char)(ubrr>>8);
     bf6:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__DATA_REGION_ORIGIN__+0x75>
		UBRR2L = (unsigned char)ubrr;
     bfa:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <__DATA_REGION_ORIGIN__+0x74>
		UCSR2B = (1<<RXEN)|(1<<TXEN) | (1 << RXCIE);		// Enable receiver and transmitter 
     bfe:	88 e9       	ldi	r24, 0x98	; 152
     c00:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__DATA_REGION_ORIGIN__+0x71>
		UCSR2C |= (3<<UCSZ0);								// Set frame format:  1stop bit, 8data
     c04:	e2 ed       	ldi	r30, 0xD2	; 210
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	86 60       	ori	r24, 0x06	; 6
     c0c:	80 83       	st	Z, r24
		stdout = &mystdout;
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <__iob+0x3>
     c16:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <__iob+0x2>
     c1a:	08 95       	ret

00000c1c <USART_receive0>:
	#endif
}

unsigned char USART_receive0(void){
	/* Wait for data to be received:*/
	while ( !(UCSR0A & (1<<RXC)) );
     c1c:	e0 ec       	ldi	r30, 0xC0	; 192
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	88 23       	and	r24, r24
     c24:	ec f7       	brge	.-6      	; 0xc20 <USART_receive0+0x4>
	/*Return data from buffer:*/
	return UDR0;
     c26:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
     c2a:	08 95       	ret

00000c2c <USART_transmit0>:

void  USART_transmit0( uint8_t data ){
	/* Wait for empty transmit buffer:*/
	while ( !( UCSR0A & (1<<UDRE)));
     c2c:	e0 ec       	ldi	r30, 0xC0	; 192
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	90 81       	ld	r25, Z
     c32:	95 ff       	sbrs	r25, 5
     c34:	fd cf       	rjmp	.-6      	; 0xc30 <USART_transmit0+0x4>
	/* Put data into buffer:*/
	UDR0 = data;
     c36:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     c3a:	08 95       	ret

00000c3c <USART_putstring0>:
}



void  USART_putstring0(char *string){
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	ec 01       	movw	r28, r24
	for(; *string; ++string){
     c42:	88 81       	ld	r24, Y
     c44:	88 23       	and	r24, r24
     c46:	31 f0       	breq	.+12     	; 0xc54 <USART_putstring0+0x18>
     c48:	21 96       	adiw	r28, 0x01	; 1
		USART_transmit0(*string);
     c4a:	0e 94 16 06 	call	0xc2c	; 0xc2c <USART_transmit0>
}



void  USART_putstring0(char *string){
	for(; *string; ++string){
     c4e:	89 91       	ld	r24, Y+
     c50:	81 11       	cpse	r24, r1
     c52:	fb cf       	rjmp	.-10     	; 0xc4a <USART_putstring0+0xe>
		USART_transmit0(*string);
	}
}
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <USART_transmit2>:

void USART_transmit2( uint8_t data ){
	/* Wait for empty transmit buffer:*/
	while ( !( UCSR2A & (1<<UDRE)));
     c5a:	e0 ed       	ldi	r30, 0xD0	; 208
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	90 81       	ld	r25, Z
     c60:	95 ff       	sbrs	r25, 5
     c62:	fd cf       	rjmp	.-6      	; 0xc5e <USART_transmit2+0x4>
	/* Put data into buffer:*/
	UDR2 = data;
     c64:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__DATA_REGION_ORIGIN__+0x76>
     c68:	08 95       	ret

00000c6a <USART_TRANSMIT_printf>:
#include <string.h>




int USART_TRANSMIT_printf(char var, FILE *stream) {
     c6a:	cf 93       	push	r28
     c6c:	c8 2f       	mov	r28, r24
	// translate \n to \r for br@y++ terminal
	if (var == '\n') USART_transmit2('\r');
     c6e:	8a 30       	cpi	r24, 0x0A	; 10
     c70:	19 f4       	brne	.+6      	; 0xc78 <USART_TRANSMIT_printf+0xe>
     c72:	8d e0       	ldi	r24, 0x0D	; 13
     c74:	0e 94 2d 06 	call	0xc5a	; 0xc5a <USART_transmit2>
	USART_transmit2(var);
     c78:	8c 2f       	mov	r24, r28
     c7a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <USART_transmit2>
	return 0;
}
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	cf 91       	pop	r28
     c84:	08 95       	ret

00000c86 <USART_receive2>:
	/* Put data into buffer:*/
	UDR2 = data;
}
unsigned char USART_receive2(void){
	/* Wait for data to be received:*/
	while ( !(UCSR2A & (1<<RXC)) );
     c86:	e0 ed       	ldi	r30, 0xD0	; 208
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	88 23       	and	r24, r24
     c8e:	ec f7       	brge	.-6      	; 0xc8a <USART_receive2+0x4>
	/*Return data from buffer:*/
	return UDR2;
     c90:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__DATA_REGION_ORIGIN__+0x76>
}
     c94:	08 95       	ret

00000c96 <USART_putstring2>:

void  USART_putstring2(char *string){
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	ec 01       	movw	r28, r24
	for(; *string; ++string){
     c9c:	88 81       	ld	r24, Y
     c9e:	88 23       	and	r24, r24
     ca0:	31 f0       	breq	.+12     	; 0xcae <USART_putstring2+0x18>
     ca2:	21 96       	adiw	r28, 0x01	; 1
		USART_transmit2(*string);
     ca4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <USART_transmit2>
	/*Return data from buffer:*/
	return UDR2;
}

void  USART_putstring2(char *string){
	for(; *string; ++string){
     ca8:	89 91       	ld	r24, Y+
     caa:	81 11       	cpse	r24, r1
     cac:	fb cf       	rjmp	.-10     	; 0xca4 <USART_putstring2+0xe>
		USART_transmit2(*string);
	}
	//USART_transmit2(0x0D);
	USART_transmit2(0x0A);
     cae:	8a e0       	ldi	r24, 0x0A	; 10
     cb0:	0e 94 2d 06 	call	0xc5a	; 0xc5a <USART_transmit2>
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <USART_receiveString2>:

void USART_receiveString2(void){
     cba:	ef 92       	push	r14
     cbc:	ff 92       	push	r15
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	ca 5f       	subi	r28, 0xFA	; 250
     ccc:	d1 09       	sbc	r29, r1
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
     cd8:	ce 01       	movw	r24, r28
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	7c 01       	movw	r14, r24
	char rx_buf[250];
	unsigned char rec = 0;
	int i = 0;
     cde:	00 e0       	ldi	r16, 0x00	; 0
     ce0:	10 e0       	ldi	r17, 0x00	; 0
	while (1){
		rec = USART_receive2();
     ce2:	0e 94 43 06 	call	0xc86	; 0xc86 <USART_receive2>
		if (rec == 0x0A){
     ce6:	8a 30       	cpi	r24, 0x0A	; 10
     ce8:	79 f4       	brne	.+30     	; 0xd08 <USART_receiveString2+0x4e>
			rx_buf[i] = '\0';
     cea:	e1 e0       	ldi	r30, 0x01	; 1
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	ec 0f       	add	r30, r28
     cf0:	fd 1f       	adc	r31, r29
     cf2:	e0 0f       	add	r30, r16
     cf4:	f1 1f       	adc	r31, r17
     cf6:	10 82       	st	Z, r1
		i++;
	}
	#ifdef DEBUG_M
	printf("rx int: %s\n", rx_buf);
	#endif
	strcpy(downlink, rx_buf);
     cf8:	be 01       	movw	r22, r28
     cfa:	6f 5f       	subi	r22, 0xFF	; 255
     cfc:	7f 4f       	sbci	r23, 0xFF	; 255
     cfe:	81 e2       	ldi	r24, 0x21	; 33
     d00:	93 e0       	ldi	r25, 0x03	; 3
     d02:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <strcpy>
}
     d06:	06 c0       	rjmp	.+12     	; 0xd14 <USART_receiveString2+0x5a>
		rec = USART_receive2();
		if (rec == 0x0A){
			rx_buf[i] = '\0';
			break;
		}
		rx_buf[i] = rec;
     d08:	f7 01       	movw	r30, r14
     d0a:	81 93       	st	Z+, r24
     d0c:	7f 01       	movw	r14, r30
		i++;
     d0e:	0f 5f       	subi	r16, 0xFF	; 255
     d10:	1f 4f       	sbci	r17, 0xFF	; 255
	}
     d12:	e7 cf       	rjmp	.-50     	; 0xce2 <USART_receiveString2+0x28>
	#ifdef DEBUG_M
	printf("rx int: %s\n", rx_buf);
	#endif
	strcpy(downlink, rx_buf);
}
     d14:	c6 50       	subi	r28, 0x06	; 6
     d16:	df 4f       	sbci	r29, 0xFF	; 255
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	ff 90       	pop	r15
     d2c:	ef 90       	pop	r14
     d2e:	08 95       	ret

00000d30 <timers_init>:
		OCR1A = 31250;
		TIMSK1 |= (1 << OCIE1A);
	#endif

	#ifdef TIMER2
		TIMSK2 = 0;
     d30:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
		ASSR = 0b00100000;
     d34:	80 e2       	ldi	r24, 0x20	; 32
     d36:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__DATA_REGION_ORIGIN__+0x56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d3a:	2f ef       	ldi	r18, 0xFF	; 255
     d3c:	89 e6       	ldi	r24, 0x69	; 105
     d3e:	98 e1       	ldi	r25, 0x18	; 24
     d40:	21 50       	subi	r18, 0x01	; 1
     d42:	80 40       	sbci	r24, 0x00	; 0
     d44:	90 40       	sbci	r25, 0x00	; 0
     d46:	e1 f7       	brne	.-8      	; 0xd40 <timers_init+0x10>
     d48:	00 c0       	rjmp	.+0      	; 0xd4a <timers_init+0x1a>
     d4a:	00 00       	nop
		_delay_ms(1000);
		TCCR2A = 0b00000000;
     d4c:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
		TCCR2B = 0b00000101;
     d50:	85 e0       	ldi	r24, 0x05	; 5
     d52:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		//Synchronize registers
		while (ASSR & ( (1 << TCN2UB) | (1 << TCR2AUB) | (1 << TCR2BUB) )) ;
     d56:	e6 eb       	ldi	r30, 0xB6	; 182
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	83 71       	andi	r24, 0x13	; 19
     d5e:	e9 f7       	brne	.-6      	; 0xd5a <timers_init+0x2a>
		TIFR2 = 0; //Clear interrupt flags
     d60:	17 ba       	out	0x17, r1	; 23
		TIMSK2 = (1 << TOIE2); //Enable overflow interrupt
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
     d68:	08 95       	ret

00000d6a <enter_powerSave>:
}


void enter_powerSave(){
	#ifdef USART2_START_COND_INTERRUPT
	UCSR2D |= (1<<SFDE) | (0<<RXSIE);			// Enable start condition detection with interrupt on RXCIE
     d6a:	e3 ed       	ldi	r30, 0xD3	; 211
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	80 62       	ori	r24, 0x20	; 32
     d72:	80 83       	st	Z, r24
	#endif
	
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     d74:	83 b7       	in	r24, 0x33	; 51
     d76:	81 7f       	andi	r24, 0xF1	; 241
     d78:	86 60       	ori	r24, 0x06	; 6
     d7a:	83 bf       	out	0x33, r24	; 51
	sleep_mode();
     d7c:	83 b7       	in	r24, 0x33	; 51
     d7e:	81 60       	ori	r24, 0x01	; 1
     d80:	83 bf       	out	0x33, r24	; 51
     d82:	88 95       	sleep
     d84:	83 b7       	in	r24, 0x33	; 51
     d86:	8e 7f       	andi	r24, 0xFE	; 254
     d88:	83 bf       	out	0x33, r24	; 51
     d8a:	2f e7       	ldi	r18, 0x7F	; 127
     d8c:	85 eb       	ldi	r24, 0xB5	; 181
     d8e:	91 e0       	ldi	r25, 0x01	; 1
     d90:	21 50       	subi	r18, 0x01	; 1
     d92:	80 40       	sbci	r24, 0x00	; 0
     d94:	90 40       	sbci	r25, 0x00	; 0
     d96:	e1 f7       	brne	.-8      	; 0xd90 <enter_powerSave+0x26>
     d98:	00 c0       	rjmp	.+0      	; 0xd9a <enter_powerSave+0x30>
     d9a:	00 00       	nop
	_delay_ms(70);
	
	#ifdef USART2_START_COND_INTERRUPT
	UCSR2D &= ~(1<<SFDE);						// Disable start condition detection while awake.
     d9c:	80 81       	ld	r24, Z
     d9e:	8f 7d       	andi	r24, 0xDF	; 223
     da0:	80 83       	st	Z, r24
     da2:	08 95       	ret

00000da4 <hex_decode>:
		out[h] = (hn << 4) | ln;
	}
	//puts("");
}

uint8_t* hex_decode(const char *in, size_t len,uint8_t *out, int start){
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	ec 01       	movw	r28, r24
     dae:	95 2f       	mov	r25, r21
	unsigned int i, t, hn, ln;
	for (t = 0,i = start; i < len; i+=2,++t) {
     db0:	26 17       	cp	r18, r22
     db2:	37 07       	cpc	r19, r23
     db4:	08 f5       	brcc	.+66     	; 0xdf8 <hex_decode+0x54>
     db6:	c2 0f       	add	r28, r18
     db8:	d3 1f       	adc	r29, r19
     dba:	04 2f       	mov	r16, r20
     dbc:	15 2f       	mov	r17, r21
     dbe:	fe 01       	movw	r30, r28
		hn = in[i] > '9' ? in[i] - 'A' + 10 : in[i] - '0';
     dc0:	a8 81       	ld	r26, Y
     dc2:	aa 33       	cpi	r26, 0x3A	; 58
     dc4:	18 f0       	brcs	.+6      	; 0xdcc <hex_decode+0x28>
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	d7 97       	sbiw	r26, 0x37	; 55
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <hex_decode+0x2c>
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	d0 97       	sbiw	r26, 0x30	; 48
		ln = in[i+1] > '9' ? in[i+1] - 'A' + 10 : in[i+1] - '0';
     dd0:	e1 81       	ldd	r30, Z+1	; 0x01
     dd2:	ea 33       	cpi	r30, 0x3A	; 58
     dd4:	18 f0       	brcs	.+6      	; 0xddc <hex_decode+0x38>
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	f7 97       	sbiw	r30, 0x37	; 55
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <hex_decode+0x3c>
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	f0 97       	sbiw	r30, 0x30	; 48
		out[t] = (hn << 4 ) | ln;
     de0:	a2 95       	swap	r26
     de2:	a0 7f       	andi	r26, 0xF0	; 240
     de4:	ea 2b       	or	r30, r26
     de6:	d8 01       	movw	r26, r16
     de8:	ed 93       	st	X+, r30
     dea:	8d 01       	movw	r16, r26
	//puts("");
}

uint8_t* hex_decode(const char *in, size_t len,uint8_t *out, int start){
	unsigned int i, t, hn, ln;
	for (t = 0,i = start; i < len; i+=2,++t) {
     dec:	2e 5f       	subi	r18, 0xFE	; 254
     dee:	3f 4f       	sbci	r19, 0xFF	; 255
     df0:	22 96       	adiw	r28, 0x02	; 2
     df2:	26 17       	cp	r18, r22
     df4:	37 07       	cpc	r19, r23
     df6:	18 f3       	brcs	.-58     	; 0xdbe <hex_decode+0x1a>
		hn = in[i] > '9' ? in[i] - 'A' + 10 : in[i] - '0';
		ln = in[i+1] > '9' ? in[i+1] - 'A' + 10 : in[i+1] - '0';
		out[t] = (hn << 4 ) | ln;
	}
	return out;
}
     df8:	84 2f       	mov	r24, r20
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	08 95       	ret

00000e04 <hex_encode>:

//				1  2  3  4  5  6  7  8  9 10 11 byte pair
//  MSG STYLE: xx xx xx xx xx xx xx xx xx xx xx
//  1: frame, 2-5: timestamp, 6: battery, 7+8: bus voltage, 9+10: current

char* hex_encode(board_t board){
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
	char *msg = "";
	sprintf(msg, "%02X%08lX%02X%04X%04X", board.frame_counter, board.time_stamp, board.batteryLevel, board.ina219.bus_voltage, board.ina219.current);
     e0c:	8e 85       	ldd	r24, Y+14	; 0x0e
     e0e:	8f 93       	push	r24
     e10:	8d 85       	ldd	r24, Y+13	; 0x0d
     e12:	8f 93       	push	r24
     e14:	8c 85       	ldd	r24, Y+12	; 0x0c
     e16:	8f 93       	push	r24
     e18:	8b 85       	ldd	r24, Y+11	; 0x0b
     e1a:	8f 93       	push	r24
     e1c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e1e:	1f 92       	push	r1
     e20:	8f 93       	push	r24
     e22:	89 85       	ldd	r24, Y+9	; 0x09
     e24:	8f 93       	push	r24
     e26:	88 85       	ldd	r24, Y+8	; 0x08
     e28:	8f 93       	push	r24
     e2a:	8f 81       	ldd	r24, Y+7	; 0x07
     e2c:	8f 93       	push	r24
     e2e:	8e 81       	ldd	r24, Y+6	; 0x06
     e30:	8f 93       	push	r24
     e32:	8d 81       	ldd	r24, Y+5	; 0x05
     e34:	1f 92       	push	r1
     e36:	8f 93       	push	r24
     e38:	88 e0       	ldi	r24, 0x08	; 8
     e3a:	93 e0       	ldi	r25, 0x03	; 3
     e3c:	9f 93       	push	r25
     e3e:	8f 93       	push	r24
     e40:	84 e0       	ldi	r24, 0x04	; 4
     e42:	92 e0       	ldi	r25, 0x02	; 2
     e44:	9f 93       	push	r25
     e46:	8f 93       	push	r24
     e48:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <sprintf>
	return msg;
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
}
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	92 e0       	ldi	r25, 0x02	; 2
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	08 95       	ret

00000e60 <vfprintf>:
     e60:	a0 e1       	ldi	r26, 0x10	; 16
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e3       	ldi	r30, 0x36	; 54
     e66:	f7 e0       	ldi	r31, 0x07	; 7
     e68:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__prologue_saves__>
     e6c:	7c 01       	movw	r14, r24
     e6e:	1b 01       	movw	r2, r22
     e70:	6a 01       	movw	r12, r20
     e72:	fc 01       	movw	r30, r24
     e74:	17 82       	std	Z+7, r1	; 0x07
     e76:	16 82       	std	Z+6, r1	; 0x06
     e78:	83 81       	ldd	r24, Z+3	; 0x03
     e7a:	81 ff       	sbrs	r24, 1
     e7c:	44 c3       	rjmp	.+1672   	; 0x1506 <vfprintf+0x6a6>
     e7e:	9e 01       	movw	r18, r28
     e80:	2f 5f       	subi	r18, 0xFF	; 255
     e82:	3f 4f       	sbci	r19, 0xFF	; 255
     e84:	39 01       	movw	r6, r18
     e86:	f7 01       	movw	r30, r14
     e88:	93 81       	ldd	r25, Z+3	; 0x03
     e8a:	f1 01       	movw	r30, r2
     e8c:	93 fd       	sbrc	r25, 3
     e8e:	85 91       	lpm	r24, Z+
     e90:	93 ff       	sbrs	r25, 3
     e92:	81 91       	ld	r24, Z+
     e94:	1f 01       	movw	r2, r30
     e96:	88 23       	and	r24, r24
     e98:	09 f4       	brne	.+2      	; 0xe9c <vfprintf+0x3c>
     e9a:	31 c3       	rjmp	.+1634   	; 0x14fe <vfprintf+0x69e>
     e9c:	85 32       	cpi	r24, 0x25	; 37
     e9e:	39 f4       	brne	.+14     	; 0xeae <vfprintf+0x4e>
     ea0:	93 fd       	sbrc	r25, 3
     ea2:	85 91       	lpm	r24, Z+
     ea4:	93 ff       	sbrs	r25, 3
     ea6:	81 91       	ld	r24, Z+
     ea8:	1f 01       	movw	r2, r30
     eaa:	85 32       	cpi	r24, 0x25	; 37
     eac:	39 f4       	brne	.+14     	; 0xebc <vfprintf+0x5c>
     eae:	b7 01       	movw	r22, r14
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
     eb6:	56 01       	movw	r10, r12
     eb8:	65 01       	movw	r12, r10
     eba:	e5 cf       	rjmp	.-54     	; 0xe86 <vfprintf+0x26>
     ebc:	10 e0       	ldi	r17, 0x00	; 0
     ebe:	51 2c       	mov	r5, r1
     ec0:	91 2c       	mov	r9, r1
     ec2:	ff e1       	ldi	r31, 0x1F	; 31
     ec4:	f9 15       	cp	r31, r9
     ec6:	d8 f0       	brcs	.+54     	; 0xefe <vfprintf+0x9e>
     ec8:	8b 32       	cpi	r24, 0x2B	; 43
     eca:	79 f0       	breq	.+30     	; 0xeea <vfprintf+0x8a>
     ecc:	38 f4       	brcc	.+14     	; 0xedc <vfprintf+0x7c>
     ece:	80 32       	cpi	r24, 0x20	; 32
     ed0:	79 f0       	breq	.+30     	; 0xef0 <vfprintf+0x90>
     ed2:	83 32       	cpi	r24, 0x23	; 35
     ed4:	a1 f4       	brne	.+40     	; 0xefe <vfprintf+0x9e>
     ed6:	f9 2d       	mov	r31, r9
     ed8:	f0 61       	ori	r31, 0x10	; 16
     eda:	2e c0       	rjmp	.+92     	; 0xf38 <vfprintf+0xd8>
     edc:	8d 32       	cpi	r24, 0x2D	; 45
     ede:	61 f0       	breq	.+24     	; 0xef8 <vfprintf+0x98>
     ee0:	80 33       	cpi	r24, 0x30	; 48
     ee2:	69 f4       	brne	.+26     	; 0xefe <vfprintf+0x9e>
     ee4:	29 2d       	mov	r18, r9
     ee6:	21 60       	ori	r18, 0x01	; 1
     ee8:	2d c0       	rjmp	.+90     	; 0xf44 <vfprintf+0xe4>
     eea:	39 2d       	mov	r19, r9
     eec:	32 60       	ori	r19, 0x02	; 2
     eee:	93 2e       	mov	r9, r19
     ef0:	89 2d       	mov	r24, r9
     ef2:	84 60       	ori	r24, 0x04	; 4
     ef4:	98 2e       	mov	r9, r24
     ef6:	2a c0       	rjmp	.+84     	; 0xf4c <vfprintf+0xec>
     ef8:	e9 2d       	mov	r30, r9
     efa:	e8 60       	ori	r30, 0x08	; 8
     efc:	15 c0       	rjmp	.+42     	; 0xf28 <vfprintf+0xc8>
     efe:	97 fc       	sbrc	r9, 7
     f00:	2d c0       	rjmp	.+90     	; 0xf5c <vfprintf+0xfc>
     f02:	20 ed       	ldi	r18, 0xD0	; 208
     f04:	28 0f       	add	r18, r24
     f06:	2a 30       	cpi	r18, 0x0A	; 10
     f08:	88 f4       	brcc	.+34     	; 0xf2c <vfprintf+0xcc>
     f0a:	96 fe       	sbrs	r9, 6
     f0c:	06 c0       	rjmp	.+12     	; 0xf1a <vfprintf+0xba>
     f0e:	3a e0       	ldi	r19, 0x0A	; 10
     f10:	13 9f       	mul	r17, r19
     f12:	20 0d       	add	r18, r0
     f14:	11 24       	eor	r1, r1
     f16:	12 2f       	mov	r17, r18
     f18:	19 c0       	rjmp	.+50     	; 0xf4c <vfprintf+0xec>
     f1a:	8a e0       	ldi	r24, 0x0A	; 10
     f1c:	58 9e       	mul	r5, r24
     f1e:	20 0d       	add	r18, r0
     f20:	11 24       	eor	r1, r1
     f22:	52 2e       	mov	r5, r18
     f24:	e9 2d       	mov	r30, r9
     f26:	e0 62       	ori	r30, 0x20	; 32
     f28:	9e 2e       	mov	r9, r30
     f2a:	10 c0       	rjmp	.+32     	; 0xf4c <vfprintf+0xec>
     f2c:	8e 32       	cpi	r24, 0x2E	; 46
     f2e:	31 f4       	brne	.+12     	; 0xf3c <vfprintf+0xdc>
     f30:	96 fc       	sbrc	r9, 6
     f32:	e5 c2       	rjmp	.+1482   	; 0x14fe <vfprintf+0x69e>
     f34:	f9 2d       	mov	r31, r9
     f36:	f0 64       	ori	r31, 0x40	; 64
     f38:	9f 2e       	mov	r9, r31
     f3a:	08 c0       	rjmp	.+16     	; 0xf4c <vfprintf+0xec>
     f3c:	8c 36       	cpi	r24, 0x6C	; 108
     f3e:	21 f4       	brne	.+8      	; 0xf48 <vfprintf+0xe8>
     f40:	29 2d       	mov	r18, r9
     f42:	20 68       	ori	r18, 0x80	; 128
     f44:	92 2e       	mov	r9, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <vfprintf+0xec>
     f48:	88 36       	cpi	r24, 0x68	; 104
     f4a:	41 f4       	brne	.+16     	; 0xf5c <vfprintf+0xfc>
     f4c:	f1 01       	movw	r30, r2
     f4e:	93 fd       	sbrc	r25, 3
     f50:	85 91       	lpm	r24, Z+
     f52:	93 ff       	sbrs	r25, 3
     f54:	81 91       	ld	r24, Z+
     f56:	1f 01       	movw	r2, r30
     f58:	81 11       	cpse	r24, r1
     f5a:	b3 cf       	rjmp	.-154    	; 0xec2 <vfprintf+0x62>
     f5c:	9b eb       	ldi	r25, 0xBB	; 187
     f5e:	98 0f       	add	r25, r24
     f60:	93 30       	cpi	r25, 0x03	; 3
     f62:	20 f4       	brcc	.+8      	; 0xf6c <vfprintf+0x10c>
     f64:	99 2d       	mov	r25, r9
     f66:	90 61       	ori	r25, 0x10	; 16
     f68:	80 5e       	subi	r24, 0xE0	; 224
     f6a:	07 c0       	rjmp	.+14     	; 0xf7a <vfprintf+0x11a>
     f6c:	9b e9       	ldi	r25, 0x9B	; 155
     f6e:	98 0f       	add	r25, r24
     f70:	93 30       	cpi	r25, 0x03	; 3
     f72:	08 f0       	brcs	.+2      	; 0xf76 <vfprintf+0x116>
     f74:	66 c1       	rjmp	.+716    	; 0x1242 <vfprintf+0x3e2>
     f76:	99 2d       	mov	r25, r9
     f78:	9f 7e       	andi	r25, 0xEF	; 239
     f7a:	96 ff       	sbrs	r25, 6
     f7c:	16 e0       	ldi	r17, 0x06	; 6
     f7e:	9f 73       	andi	r25, 0x3F	; 63
     f80:	99 2e       	mov	r9, r25
     f82:	85 36       	cpi	r24, 0x65	; 101
     f84:	19 f4       	brne	.+6      	; 0xf8c <vfprintf+0x12c>
     f86:	90 64       	ori	r25, 0x40	; 64
     f88:	99 2e       	mov	r9, r25
     f8a:	08 c0       	rjmp	.+16     	; 0xf9c <vfprintf+0x13c>
     f8c:	86 36       	cpi	r24, 0x66	; 102
     f8e:	21 f4       	brne	.+8      	; 0xf98 <vfprintf+0x138>
     f90:	39 2f       	mov	r19, r25
     f92:	30 68       	ori	r19, 0x80	; 128
     f94:	93 2e       	mov	r9, r19
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <vfprintf+0x13c>
     f98:	11 11       	cpse	r17, r1
     f9a:	11 50       	subi	r17, 0x01	; 1
     f9c:	97 fe       	sbrs	r9, 7
     f9e:	07 c0       	rjmp	.+14     	; 0xfae <vfprintf+0x14e>
     fa0:	1c 33       	cpi	r17, 0x3C	; 60
     fa2:	50 f4       	brcc	.+20     	; 0xfb8 <vfprintf+0x158>
     fa4:	44 24       	eor	r4, r4
     fa6:	43 94       	inc	r4
     fa8:	41 0e       	add	r4, r17
     faa:	27 e0       	ldi	r18, 0x07	; 7
     fac:	0b c0       	rjmp	.+22     	; 0xfc4 <vfprintf+0x164>
     fae:	18 30       	cpi	r17, 0x08	; 8
     fb0:	38 f0       	brcs	.+14     	; 0xfc0 <vfprintf+0x160>
     fb2:	27 e0       	ldi	r18, 0x07	; 7
     fb4:	17 e0       	ldi	r17, 0x07	; 7
     fb6:	05 c0       	rjmp	.+10     	; 0xfc2 <vfprintf+0x162>
     fb8:	27 e0       	ldi	r18, 0x07	; 7
     fba:	9c e3       	ldi	r25, 0x3C	; 60
     fbc:	49 2e       	mov	r4, r25
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <vfprintf+0x164>
     fc0:	21 2f       	mov	r18, r17
     fc2:	41 2c       	mov	r4, r1
     fc4:	56 01       	movw	r10, r12
     fc6:	84 e0       	ldi	r24, 0x04	; 4
     fc8:	a8 0e       	add	r10, r24
     fca:	b1 1c       	adc	r11, r1
     fcc:	f6 01       	movw	r30, r12
     fce:	60 81       	ld	r22, Z
     fd0:	71 81       	ldd	r23, Z+1	; 0x01
     fd2:	82 81       	ldd	r24, Z+2	; 0x02
     fd4:	93 81       	ldd	r25, Z+3	; 0x03
     fd6:	04 2d       	mov	r16, r4
     fd8:	a3 01       	movw	r20, r6
     fda:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__ftoa_engine>
     fde:	6c 01       	movw	r12, r24
     fe0:	f9 81       	ldd	r31, Y+1	; 0x01
     fe2:	fc 87       	std	Y+12, r31	; 0x0c
     fe4:	f0 ff       	sbrs	r31, 0
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <vfprintf+0x18c>
     fe8:	f3 ff       	sbrs	r31, 3
     fea:	06 c0       	rjmp	.+12     	; 0xff8 <vfprintf+0x198>
     fec:	91 fc       	sbrc	r9, 1
     fee:	06 c0       	rjmp	.+12     	; 0xffc <vfprintf+0x19c>
     ff0:	92 fe       	sbrs	r9, 2
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <vfprintf+0x1a0>
     ff4:	00 e2       	ldi	r16, 0x20	; 32
     ff6:	05 c0       	rjmp	.+10     	; 0x1002 <vfprintf+0x1a2>
     ff8:	0d e2       	ldi	r16, 0x2D	; 45
     ffa:	03 c0       	rjmp	.+6      	; 0x1002 <vfprintf+0x1a2>
     ffc:	0b e2       	ldi	r16, 0x2B	; 43
     ffe:	01 c0       	rjmp	.+2      	; 0x1002 <vfprintf+0x1a2>
    1000:	00 e0       	ldi	r16, 0x00	; 0
    1002:	8c 85       	ldd	r24, Y+12	; 0x0c
    1004:	8c 70       	andi	r24, 0x0C	; 12
    1006:	19 f0       	breq	.+6      	; 0x100e <vfprintf+0x1ae>
    1008:	01 11       	cpse	r16, r1
    100a:	5a c2       	rjmp	.+1204   	; 0x14c0 <vfprintf+0x660>
    100c:	9b c2       	rjmp	.+1334   	; 0x1544 <vfprintf+0x6e4>
    100e:	97 fe       	sbrs	r9, 7
    1010:	10 c0       	rjmp	.+32     	; 0x1032 <vfprintf+0x1d2>
    1012:	4c 0c       	add	r4, r12
    1014:	fc 85       	ldd	r31, Y+12	; 0x0c
    1016:	f4 ff       	sbrs	r31, 4
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <vfprintf+0x1c2>
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	81 33       	cpi	r24, 0x31	; 49
    101e:	09 f4       	brne	.+2      	; 0x1022 <vfprintf+0x1c2>
    1020:	4a 94       	dec	r4
    1022:	14 14       	cp	r1, r4
    1024:	74 f5       	brge	.+92     	; 0x1082 <vfprintf+0x222>
    1026:	28 e0       	ldi	r18, 0x08	; 8
    1028:	24 15       	cp	r18, r4
    102a:	78 f5       	brcc	.+94     	; 0x108a <vfprintf+0x22a>
    102c:	88 e0       	ldi	r24, 0x08	; 8
    102e:	48 2e       	mov	r4, r24
    1030:	2c c0       	rjmp	.+88     	; 0x108a <vfprintf+0x22a>
    1032:	96 fc       	sbrc	r9, 6
    1034:	2a c0       	rjmp	.+84     	; 0x108a <vfprintf+0x22a>
    1036:	81 2f       	mov	r24, r17
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	8c 15       	cp	r24, r12
    103c:	9d 05       	cpc	r25, r13
    103e:	9c f0       	brlt	.+38     	; 0x1066 <vfprintf+0x206>
    1040:	3c ef       	ldi	r19, 0xFC	; 252
    1042:	c3 16       	cp	r12, r19
    1044:	3f ef       	ldi	r19, 0xFF	; 255
    1046:	d3 06       	cpc	r13, r19
    1048:	74 f0       	brlt	.+28     	; 0x1066 <vfprintf+0x206>
    104a:	89 2d       	mov	r24, r9
    104c:	80 68       	ori	r24, 0x80	; 128
    104e:	98 2e       	mov	r9, r24
    1050:	0a c0       	rjmp	.+20     	; 0x1066 <vfprintf+0x206>
    1052:	e2 e0       	ldi	r30, 0x02	; 2
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	ec 0f       	add	r30, r28
    1058:	fd 1f       	adc	r31, r29
    105a:	e1 0f       	add	r30, r17
    105c:	f1 1d       	adc	r31, r1
    105e:	80 81       	ld	r24, Z
    1060:	80 33       	cpi	r24, 0x30	; 48
    1062:	19 f4       	brne	.+6      	; 0x106a <vfprintf+0x20a>
    1064:	11 50       	subi	r17, 0x01	; 1
    1066:	11 11       	cpse	r17, r1
    1068:	f4 cf       	rjmp	.-24     	; 0x1052 <vfprintf+0x1f2>
    106a:	97 fe       	sbrs	r9, 7
    106c:	0e c0       	rjmp	.+28     	; 0x108a <vfprintf+0x22a>
    106e:	44 24       	eor	r4, r4
    1070:	43 94       	inc	r4
    1072:	41 0e       	add	r4, r17
    1074:	81 2f       	mov	r24, r17
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	c8 16       	cp	r12, r24
    107a:	d9 06       	cpc	r13, r25
    107c:	2c f4       	brge	.+10     	; 0x1088 <vfprintf+0x228>
    107e:	1c 19       	sub	r17, r12
    1080:	04 c0       	rjmp	.+8      	; 0x108a <vfprintf+0x22a>
    1082:	44 24       	eor	r4, r4
    1084:	43 94       	inc	r4
    1086:	01 c0       	rjmp	.+2      	; 0x108a <vfprintf+0x22a>
    1088:	10 e0       	ldi	r17, 0x00	; 0
    108a:	97 fe       	sbrs	r9, 7
    108c:	06 c0       	rjmp	.+12     	; 0x109a <vfprintf+0x23a>
    108e:	1c 14       	cp	r1, r12
    1090:	1d 04       	cpc	r1, r13
    1092:	34 f4       	brge	.+12     	; 0x10a0 <vfprintf+0x240>
    1094:	c6 01       	movw	r24, r12
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	05 c0       	rjmp	.+10     	; 0x10a4 <vfprintf+0x244>
    109a:	85 e0       	ldi	r24, 0x05	; 5
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <vfprintf+0x244>
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	01 11       	cpse	r16, r1
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	11 23       	and	r17, r17
    10aa:	31 f0       	breq	.+12     	; 0x10b8 <vfprintf+0x258>
    10ac:	21 2f       	mov	r18, r17
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	2f 5f       	subi	r18, 0xFF	; 255
    10b2:	3f 4f       	sbci	r19, 0xFF	; 255
    10b4:	82 0f       	add	r24, r18
    10b6:	93 1f       	adc	r25, r19
    10b8:	25 2d       	mov	r18, r5
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	82 17       	cp	r24, r18
    10be:	93 07       	cpc	r25, r19
    10c0:	14 f4       	brge	.+4      	; 0x10c6 <vfprintf+0x266>
    10c2:	58 1a       	sub	r5, r24
    10c4:	01 c0       	rjmp	.+2      	; 0x10c8 <vfprintf+0x268>
    10c6:	51 2c       	mov	r5, r1
    10c8:	89 2d       	mov	r24, r9
    10ca:	89 70       	andi	r24, 0x09	; 9
    10cc:	49 f4       	brne	.+18     	; 0x10e0 <vfprintf+0x280>
    10ce:	55 20       	and	r5, r5
    10d0:	39 f0       	breq	.+14     	; 0x10e0 <vfprintf+0x280>
    10d2:	b7 01       	movw	r22, r14
    10d4:	80 e2       	ldi	r24, 0x20	; 32
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    10dc:	5a 94       	dec	r5
    10de:	f7 cf       	rjmp	.-18     	; 0x10ce <vfprintf+0x26e>
    10e0:	00 23       	and	r16, r16
    10e2:	29 f0       	breq	.+10     	; 0x10ee <vfprintf+0x28e>
    10e4:	b7 01       	movw	r22, r14
    10e6:	80 2f       	mov	r24, r16
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    10ee:	93 fc       	sbrc	r9, 3
    10f0:	09 c0       	rjmp	.+18     	; 0x1104 <vfprintf+0x2a4>
    10f2:	55 20       	and	r5, r5
    10f4:	39 f0       	breq	.+14     	; 0x1104 <vfprintf+0x2a4>
    10f6:	b7 01       	movw	r22, r14
    10f8:	80 e3       	ldi	r24, 0x30	; 48
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    1100:	5a 94       	dec	r5
    1102:	f7 cf       	rjmp	.-18     	; 0x10f2 <vfprintf+0x292>
    1104:	97 fe       	sbrs	r9, 7
    1106:	4c c0       	rjmp	.+152    	; 0x11a0 <vfprintf+0x340>
    1108:	46 01       	movw	r8, r12
    110a:	d7 fe       	sbrs	r13, 7
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <vfprintf+0x2b2>
    110e:	81 2c       	mov	r8, r1
    1110:	91 2c       	mov	r9, r1
    1112:	c6 01       	movw	r24, r12
    1114:	88 19       	sub	r24, r8
    1116:	99 09       	sbc	r25, r9
    1118:	f3 01       	movw	r30, r6
    111a:	e8 0f       	add	r30, r24
    111c:	f9 1f       	adc	r31, r25
    111e:	fe 87       	std	Y+14, r31	; 0x0e
    1120:	ed 87       	std	Y+13, r30	; 0x0d
    1122:	96 01       	movw	r18, r12
    1124:	24 19       	sub	r18, r4
    1126:	31 09       	sbc	r19, r1
    1128:	38 8b       	std	Y+16, r19	; 0x10
    112a:	2f 87       	std	Y+15, r18	; 0x0f
    112c:	01 2f       	mov	r16, r17
    112e:	10 e0       	ldi	r17, 0x00	; 0
    1130:	11 95       	neg	r17
    1132:	01 95       	neg	r16
    1134:	11 09       	sbc	r17, r1
    1136:	3f ef       	ldi	r19, 0xFF	; 255
    1138:	83 16       	cp	r8, r19
    113a:	93 06       	cpc	r9, r19
    113c:	29 f4       	brne	.+10     	; 0x1148 <vfprintf+0x2e8>
    113e:	b7 01       	movw	r22, r14
    1140:	8e e2       	ldi	r24, 0x2E	; 46
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    1148:	c8 14       	cp	r12, r8
    114a:	d9 04       	cpc	r13, r9
    114c:	4c f0       	brlt	.+18     	; 0x1160 <vfprintf+0x300>
    114e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1150:	98 89       	ldd	r25, Y+16	; 0x10
    1152:	88 15       	cp	r24, r8
    1154:	99 05       	cpc	r25, r9
    1156:	24 f4       	brge	.+8      	; 0x1160 <vfprintf+0x300>
    1158:	ed 85       	ldd	r30, Y+13	; 0x0d
    115a:	fe 85       	ldd	r31, Y+14	; 0x0e
    115c:	81 81       	ldd	r24, Z+1	; 0x01
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <vfprintf+0x302>
    1160:	80 e3       	ldi	r24, 0x30	; 48
    1162:	f1 e0       	ldi	r31, 0x01	; 1
    1164:	8f 1a       	sub	r8, r31
    1166:	91 08       	sbc	r9, r1
    1168:	2d 85       	ldd	r18, Y+13	; 0x0d
    116a:	3e 85       	ldd	r19, Y+14	; 0x0e
    116c:	2f 5f       	subi	r18, 0xFF	; 255
    116e:	3f 4f       	sbci	r19, 0xFF	; 255
    1170:	3e 87       	std	Y+14, r19	; 0x0e
    1172:	2d 87       	std	Y+13, r18	; 0x0d
    1174:	80 16       	cp	r8, r16
    1176:	91 06       	cpc	r9, r17
    1178:	2c f0       	brlt	.+10     	; 0x1184 <vfprintf+0x324>
    117a:	b7 01       	movw	r22, r14
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    1182:	d9 cf       	rjmp	.-78     	; 0x1136 <vfprintf+0x2d6>
    1184:	c8 14       	cp	r12, r8
    1186:	d9 04       	cpc	r13, r9
    1188:	41 f4       	brne	.+16     	; 0x119a <vfprintf+0x33a>
    118a:	9a 81       	ldd	r25, Y+2	; 0x02
    118c:	96 33       	cpi	r25, 0x36	; 54
    118e:	20 f4       	brcc	.+8      	; 0x1198 <vfprintf+0x338>
    1190:	95 33       	cpi	r25, 0x35	; 53
    1192:	19 f4       	brne	.+6      	; 0x119a <vfprintf+0x33a>
    1194:	3c 85       	ldd	r19, Y+12	; 0x0c
    1196:	34 ff       	sbrs	r19, 4
    1198:	81 e3       	ldi	r24, 0x31	; 49
    119a:	b7 01       	movw	r22, r14
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	4e c0       	rjmp	.+156    	; 0x123c <vfprintf+0x3dc>
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	81 33       	cpi	r24, 0x31	; 49
    11a4:	19 f0       	breq	.+6      	; 0x11ac <vfprintf+0x34c>
    11a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    11a8:	9f 7e       	andi	r25, 0xEF	; 239
    11aa:	9c 87       	std	Y+12, r25	; 0x0c
    11ac:	b7 01       	movw	r22, r14
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    11b4:	11 11       	cpse	r17, r1
    11b6:	05 c0       	rjmp	.+10     	; 0x11c2 <vfprintf+0x362>
    11b8:	94 fc       	sbrc	r9, 4
    11ba:	18 c0       	rjmp	.+48     	; 0x11ec <vfprintf+0x38c>
    11bc:	85 e6       	ldi	r24, 0x65	; 101
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	17 c0       	rjmp	.+46     	; 0x11f0 <vfprintf+0x390>
    11c2:	b7 01       	movw	r22, r14
    11c4:	8e e2       	ldi	r24, 0x2E	; 46
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    11cc:	1e 5f       	subi	r17, 0xFE	; 254
    11ce:	82 e0       	ldi	r24, 0x02	; 2
    11d0:	01 e0       	ldi	r16, 0x01	; 1
    11d2:	08 0f       	add	r16, r24
    11d4:	f3 01       	movw	r30, r6
    11d6:	e8 0f       	add	r30, r24
    11d8:	f1 1d       	adc	r31, r1
    11da:	80 81       	ld	r24, Z
    11dc:	b7 01       	movw	r22, r14
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    11e4:	80 2f       	mov	r24, r16
    11e6:	01 13       	cpse	r16, r17
    11e8:	f3 cf       	rjmp	.-26     	; 0x11d0 <vfprintf+0x370>
    11ea:	e6 cf       	rjmp	.-52     	; 0x11b8 <vfprintf+0x358>
    11ec:	85 e4       	ldi	r24, 0x45	; 69
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	b7 01       	movw	r22, r14
    11f2:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    11f6:	d7 fc       	sbrc	r13, 7
    11f8:	06 c0       	rjmp	.+12     	; 0x1206 <vfprintf+0x3a6>
    11fa:	c1 14       	cp	r12, r1
    11fc:	d1 04       	cpc	r13, r1
    11fe:	41 f4       	brne	.+16     	; 0x1210 <vfprintf+0x3b0>
    1200:	ec 85       	ldd	r30, Y+12	; 0x0c
    1202:	e4 ff       	sbrs	r30, 4
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <vfprintf+0x3b0>
    1206:	d1 94       	neg	r13
    1208:	c1 94       	neg	r12
    120a:	d1 08       	sbc	r13, r1
    120c:	8d e2       	ldi	r24, 0x2D	; 45
    120e:	01 c0       	rjmp	.+2      	; 0x1212 <vfprintf+0x3b2>
    1210:	8b e2       	ldi	r24, 0x2B	; 43
    1212:	b7 01       	movw	r22, r14
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    121a:	80 e3       	ldi	r24, 0x30	; 48
    121c:	2a e0       	ldi	r18, 0x0A	; 10
    121e:	c2 16       	cp	r12, r18
    1220:	d1 04       	cpc	r13, r1
    1222:	2c f0       	brlt	.+10     	; 0x122e <vfprintf+0x3ce>
    1224:	8f 5f       	subi	r24, 0xFF	; 255
    1226:	fa e0       	ldi	r31, 0x0A	; 10
    1228:	cf 1a       	sub	r12, r31
    122a:	d1 08       	sbc	r13, r1
    122c:	f7 cf       	rjmp	.-18     	; 0x121c <vfprintf+0x3bc>
    122e:	b7 01       	movw	r22, r14
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    1236:	b7 01       	movw	r22, r14
    1238:	c6 01       	movw	r24, r12
    123a:	c0 96       	adiw	r24, 0x30	; 48
    123c:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    1240:	54 c1       	rjmp	.+680    	; 0x14ea <vfprintf+0x68a>
    1242:	83 36       	cpi	r24, 0x63	; 99
    1244:	31 f0       	breq	.+12     	; 0x1252 <vfprintf+0x3f2>
    1246:	83 37       	cpi	r24, 0x73	; 115
    1248:	79 f0       	breq	.+30     	; 0x1268 <vfprintf+0x408>
    124a:	83 35       	cpi	r24, 0x53	; 83
    124c:	09 f0       	breq	.+2      	; 0x1250 <vfprintf+0x3f0>
    124e:	56 c0       	rjmp	.+172    	; 0x12fc <vfprintf+0x49c>
    1250:	20 c0       	rjmp	.+64     	; 0x1292 <vfprintf+0x432>
    1252:	56 01       	movw	r10, r12
    1254:	32 e0       	ldi	r19, 0x02	; 2
    1256:	a3 0e       	add	r10, r19
    1258:	b1 1c       	adc	r11, r1
    125a:	f6 01       	movw	r30, r12
    125c:	80 81       	ld	r24, Z
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	01 e0       	ldi	r16, 0x01	; 1
    1262:	10 e0       	ldi	r17, 0x00	; 0
    1264:	63 01       	movw	r12, r6
    1266:	12 c0       	rjmp	.+36     	; 0x128c <vfprintf+0x42c>
    1268:	56 01       	movw	r10, r12
    126a:	f2 e0       	ldi	r31, 0x02	; 2
    126c:	af 0e       	add	r10, r31
    126e:	b1 1c       	adc	r11, r1
    1270:	f6 01       	movw	r30, r12
    1272:	c0 80       	ld	r12, Z
    1274:	d1 80       	ldd	r13, Z+1	; 0x01
    1276:	96 fe       	sbrs	r9, 6
    1278:	03 c0       	rjmp	.+6      	; 0x1280 <vfprintf+0x420>
    127a:	61 2f       	mov	r22, r17
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <vfprintf+0x424>
    1280:	6f ef       	ldi	r22, 0xFF	; 255
    1282:	7f ef       	ldi	r23, 0xFF	; 255
    1284:	c6 01       	movw	r24, r12
    1286:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strnlen>
    128a:	8c 01       	movw	r16, r24
    128c:	f9 2d       	mov	r31, r9
    128e:	ff 77       	andi	r31, 0x7F	; 127
    1290:	14 c0       	rjmp	.+40     	; 0x12ba <vfprintf+0x45a>
    1292:	56 01       	movw	r10, r12
    1294:	22 e0       	ldi	r18, 0x02	; 2
    1296:	a2 0e       	add	r10, r18
    1298:	b1 1c       	adc	r11, r1
    129a:	f6 01       	movw	r30, r12
    129c:	c0 80       	ld	r12, Z
    129e:	d1 80       	ldd	r13, Z+1	; 0x01
    12a0:	96 fe       	sbrs	r9, 6
    12a2:	03 c0       	rjmp	.+6      	; 0x12aa <vfprintf+0x44a>
    12a4:	61 2f       	mov	r22, r17
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <vfprintf+0x44e>
    12aa:	6f ef       	ldi	r22, 0xFF	; 255
    12ac:	7f ef       	ldi	r23, 0xFF	; 255
    12ae:	c6 01       	movw	r24, r12
    12b0:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <strnlen_P>
    12b4:	8c 01       	movw	r16, r24
    12b6:	f9 2d       	mov	r31, r9
    12b8:	f0 68       	ori	r31, 0x80	; 128
    12ba:	9f 2e       	mov	r9, r31
    12bc:	f3 fd       	sbrc	r31, 3
    12be:	1a c0       	rjmp	.+52     	; 0x12f4 <vfprintf+0x494>
    12c0:	85 2d       	mov	r24, r5
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	08 17       	cp	r16, r24
    12c6:	19 07       	cpc	r17, r25
    12c8:	a8 f4       	brcc	.+42     	; 0x12f4 <vfprintf+0x494>
    12ca:	b7 01       	movw	r22, r14
    12cc:	80 e2       	ldi	r24, 0x20	; 32
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    12d4:	5a 94       	dec	r5
    12d6:	f4 cf       	rjmp	.-24     	; 0x12c0 <vfprintf+0x460>
    12d8:	f6 01       	movw	r30, r12
    12da:	97 fc       	sbrc	r9, 7
    12dc:	85 91       	lpm	r24, Z+
    12de:	97 fe       	sbrs	r9, 7
    12e0:	81 91       	ld	r24, Z+
    12e2:	6f 01       	movw	r12, r30
    12e4:	b7 01       	movw	r22, r14
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    12ec:	51 10       	cpse	r5, r1
    12ee:	5a 94       	dec	r5
    12f0:	01 50       	subi	r16, 0x01	; 1
    12f2:	11 09       	sbc	r17, r1
    12f4:	01 15       	cp	r16, r1
    12f6:	11 05       	cpc	r17, r1
    12f8:	79 f7       	brne	.-34     	; 0x12d8 <vfprintf+0x478>
    12fa:	f7 c0       	rjmp	.+494    	; 0x14ea <vfprintf+0x68a>
    12fc:	84 36       	cpi	r24, 0x64	; 100
    12fe:	11 f0       	breq	.+4      	; 0x1304 <vfprintf+0x4a4>
    1300:	89 36       	cpi	r24, 0x69	; 105
    1302:	61 f5       	brne	.+88     	; 0x135c <vfprintf+0x4fc>
    1304:	56 01       	movw	r10, r12
    1306:	97 fe       	sbrs	r9, 7
    1308:	09 c0       	rjmp	.+18     	; 0x131c <vfprintf+0x4bc>
    130a:	24 e0       	ldi	r18, 0x04	; 4
    130c:	a2 0e       	add	r10, r18
    130e:	b1 1c       	adc	r11, r1
    1310:	f6 01       	movw	r30, r12
    1312:	60 81       	ld	r22, Z
    1314:	71 81       	ldd	r23, Z+1	; 0x01
    1316:	82 81       	ldd	r24, Z+2	; 0x02
    1318:	93 81       	ldd	r25, Z+3	; 0x03
    131a:	0a c0       	rjmp	.+20     	; 0x1330 <vfprintf+0x4d0>
    131c:	f2 e0       	ldi	r31, 0x02	; 2
    131e:	af 0e       	add	r10, r31
    1320:	b1 1c       	adc	r11, r1
    1322:	f6 01       	movw	r30, r12
    1324:	60 81       	ld	r22, Z
    1326:	71 81       	ldd	r23, Z+1	; 0x01
    1328:	07 2e       	mov	r0, r23
    132a:	00 0c       	add	r0, r0
    132c:	88 0b       	sbc	r24, r24
    132e:	99 0b       	sbc	r25, r25
    1330:	f9 2d       	mov	r31, r9
    1332:	ff 76       	andi	r31, 0x6F	; 111
    1334:	9f 2e       	mov	r9, r31
    1336:	97 ff       	sbrs	r25, 7
    1338:	09 c0       	rjmp	.+18     	; 0x134c <vfprintf+0x4ec>
    133a:	90 95       	com	r25
    133c:	80 95       	com	r24
    133e:	70 95       	com	r23
    1340:	61 95       	neg	r22
    1342:	7f 4f       	sbci	r23, 0xFF	; 255
    1344:	8f 4f       	sbci	r24, 0xFF	; 255
    1346:	9f 4f       	sbci	r25, 0xFF	; 255
    1348:	f0 68       	ori	r31, 0x80	; 128
    134a:	9f 2e       	mov	r9, r31
    134c:	2a e0       	ldi	r18, 0x0A	; 10
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	a3 01       	movw	r20, r6
    1352:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__ultoa_invert>
    1356:	c8 2e       	mov	r12, r24
    1358:	c6 18       	sub	r12, r6
    135a:	3f c0       	rjmp	.+126    	; 0x13da <vfprintf+0x57a>
    135c:	09 2d       	mov	r16, r9
    135e:	85 37       	cpi	r24, 0x75	; 117
    1360:	21 f4       	brne	.+8      	; 0x136a <vfprintf+0x50a>
    1362:	0f 7e       	andi	r16, 0xEF	; 239
    1364:	2a e0       	ldi	r18, 0x0A	; 10
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	1d c0       	rjmp	.+58     	; 0x13a4 <vfprintf+0x544>
    136a:	09 7f       	andi	r16, 0xF9	; 249
    136c:	8f 36       	cpi	r24, 0x6F	; 111
    136e:	91 f0       	breq	.+36     	; 0x1394 <vfprintf+0x534>
    1370:	18 f4       	brcc	.+6      	; 0x1378 <vfprintf+0x518>
    1372:	88 35       	cpi	r24, 0x58	; 88
    1374:	59 f0       	breq	.+22     	; 0x138c <vfprintf+0x52c>
    1376:	c3 c0       	rjmp	.+390    	; 0x14fe <vfprintf+0x69e>
    1378:	80 37       	cpi	r24, 0x70	; 112
    137a:	19 f0       	breq	.+6      	; 0x1382 <vfprintf+0x522>
    137c:	88 37       	cpi	r24, 0x78	; 120
    137e:	11 f0       	breq	.+4      	; 0x1384 <vfprintf+0x524>
    1380:	be c0       	rjmp	.+380    	; 0x14fe <vfprintf+0x69e>
    1382:	00 61       	ori	r16, 0x10	; 16
    1384:	04 ff       	sbrs	r16, 4
    1386:	09 c0       	rjmp	.+18     	; 0x139a <vfprintf+0x53a>
    1388:	04 60       	ori	r16, 0x04	; 4
    138a:	07 c0       	rjmp	.+14     	; 0x139a <vfprintf+0x53a>
    138c:	94 fe       	sbrs	r9, 4
    138e:	08 c0       	rjmp	.+16     	; 0x13a0 <vfprintf+0x540>
    1390:	06 60       	ori	r16, 0x06	; 6
    1392:	06 c0       	rjmp	.+12     	; 0x13a0 <vfprintf+0x540>
    1394:	28 e0       	ldi	r18, 0x08	; 8
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	05 c0       	rjmp	.+10     	; 0x13a4 <vfprintf+0x544>
    139a:	20 e1       	ldi	r18, 0x10	; 16
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <vfprintf+0x544>
    13a0:	20 e1       	ldi	r18, 0x10	; 16
    13a2:	32 e0       	ldi	r19, 0x02	; 2
    13a4:	56 01       	movw	r10, r12
    13a6:	07 ff       	sbrs	r16, 7
    13a8:	09 c0       	rjmp	.+18     	; 0x13bc <vfprintf+0x55c>
    13aa:	84 e0       	ldi	r24, 0x04	; 4
    13ac:	a8 0e       	add	r10, r24
    13ae:	b1 1c       	adc	r11, r1
    13b0:	f6 01       	movw	r30, r12
    13b2:	60 81       	ld	r22, Z
    13b4:	71 81       	ldd	r23, Z+1	; 0x01
    13b6:	82 81       	ldd	r24, Z+2	; 0x02
    13b8:	93 81       	ldd	r25, Z+3	; 0x03
    13ba:	08 c0       	rjmp	.+16     	; 0x13cc <vfprintf+0x56c>
    13bc:	f2 e0       	ldi	r31, 0x02	; 2
    13be:	af 0e       	add	r10, r31
    13c0:	b1 1c       	adc	r11, r1
    13c2:	f6 01       	movw	r30, r12
    13c4:	60 81       	ld	r22, Z
    13c6:	71 81       	ldd	r23, Z+1	; 0x01
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	a3 01       	movw	r20, r6
    13ce:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__ultoa_invert>
    13d2:	c8 2e       	mov	r12, r24
    13d4:	c6 18       	sub	r12, r6
    13d6:	0f 77       	andi	r16, 0x7F	; 127
    13d8:	90 2e       	mov	r9, r16
    13da:	96 fe       	sbrs	r9, 6
    13dc:	0b c0       	rjmp	.+22     	; 0x13f4 <vfprintf+0x594>
    13de:	09 2d       	mov	r16, r9
    13e0:	0e 7f       	andi	r16, 0xFE	; 254
    13e2:	c1 16       	cp	r12, r17
    13e4:	50 f4       	brcc	.+20     	; 0x13fa <vfprintf+0x59a>
    13e6:	94 fe       	sbrs	r9, 4
    13e8:	0a c0       	rjmp	.+20     	; 0x13fe <vfprintf+0x59e>
    13ea:	92 fc       	sbrc	r9, 2
    13ec:	08 c0       	rjmp	.+16     	; 0x13fe <vfprintf+0x59e>
    13ee:	09 2d       	mov	r16, r9
    13f0:	0e 7e       	andi	r16, 0xEE	; 238
    13f2:	05 c0       	rjmp	.+10     	; 0x13fe <vfprintf+0x59e>
    13f4:	dc 2c       	mov	r13, r12
    13f6:	09 2d       	mov	r16, r9
    13f8:	03 c0       	rjmp	.+6      	; 0x1400 <vfprintf+0x5a0>
    13fa:	dc 2c       	mov	r13, r12
    13fc:	01 c0       	rjmp	.+2      	; 0x1400 <vfprintf+0x5a0>
    13fe:	d1 2e       	mov	r13, r17
    1400:	04 ff       	sbrs	r16, 4
    1402:	0d c0       	rjmp	.+26     	; 0x141e <vfprintf+0x5be>
    1404:	fe 01       	movw	r30, r28
    1406:	ec 0d       	add	r30, r12
    1408:	f1 1d       	adc	r31, r1
    140a:	80 81       	ld	r24, Z
    140c:	80 33       	cpi	r24, 0x30	; 48
    140e:	11 f4       	brne	.+4      	; 0x1414 <vfprintf+0x5b4>
    1410:	09 7e       	andi	r16, 0xE9	; 233
    1412:	09 c0       	rjmp	.+18     	; 0x1426 <vfprintf+0x5c6>
    1414:	02 ff       	sbrs	r16, 2
    1416:	06 c0       	rjmp	.+12     	; 0x1424 <vfprintf+0x5c4>
    1418:	d3 94       	inc	r13
    141a:	d3 94       	inc	r13
    141c:	04 c0       	rjmp	.+8      	; 0x1426 <vfprintf+0x5c6>
    141e:	80 2f       	mov	r24, r16
    1420:	86 78       	andi	r24, 0x86	; 134
    1422:	09 f0       	breq	.+2      	; 0x1426 <vfprintf+0x5c6>
    1424:	d3 94       	inc	r13
    1426:	03 fd       	sbrc	r16, 3
    1428:	11 c0       	rjmp	.+34     	; 0x144c <vfprintf+0x5ec>
    142a:	00 ff       	sbrs	r16, 0
    142c:	06 c0       	rjmp	.+12     	; 0x143a <vfprintf+0x5da>
    142e:	1c 2d       	mov	r17, r12
    1430:	d5 14       	cp	r13, r5
    1432:	80 f4       	brcc	.+32     	; 0x1454 <vfprintf+0x5f4>
    1434:	15 0d       	add	r17, r5
    1436:	1d 19       	sub	r17, r13
    1438:	0d c0       	rjmp	.+26     	; 0x1454 <vfprintf+0x5f4>
    143a:	d5 14       	cp	r13, r5
    143c:	58 f4       	brcc	.+22     	; 0x1454 <vfprintf+0x5f4>
    143e:	b7 01       	movw	r22, r14
    1440:	80 e2       	ldi	r24, 0x20	; 32
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    1448:	d3 94       	inc	r13
    144a:	f7 cf       	rjmp	.-18     	; 0x143a <vfprintf+0x5da>
    144c:	d5 14       	cp	r13, r5
    144e:	10 f4       	brcc	.+4      	; 0x1454 <vfprintf+0x5f4>
    1450:	5d 18       	sub	r5, r13
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <vfprintf+0x5f6>
    1454:	51 2c       	mov	r5, r1
    1456:	04 ff       	sbrs	r16, 4
    1458:	10 c0       	rjmp	.+32     	; 0x147a <vfprintf+0x61a>
    145a:	b7 01       	movw	r22, r14
    145c:	80 e3       	ldi	r24, 0x30	; 48
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    1464:	02 ff       	sbrs	r16, 2
    1466:	17 c0       	rjmp	.+46     	; 0x1496 <vfprintf+0x636>
    1468:	01 fd       	sbrc	r16, 1
    146a:	03 c0       	rjmp	.+6      	; 0x1472 <vfprintf+0x612>
    146c:	88 e7       	ldi	r24, 0x78	; 120
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <vfprintf+0x616>
    1472:	88 e5       	ldi	r24, 0x58	; 88
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	b7 01       	movw	r22, r14
    1478:	0c c0       	rjmp	.+24     	; 0x1492 <vfprintf+0x632>
    147a:	80 2f       	mov	r24, r16
    147c:	86 78       	andi	r24, 0x86	; 134
    147e:	59 f0       	breq	.+22     	; 0x1496 <vfprintf+0x636>
    1480:	01 ff       	sbrs	r16, 1
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <vfprintf+0x628>
    1484:	8b e2       	ldi	r24, 0x2B	; 43
    1486:	01 c0       	rjmp	.+2      	; 0x148a <vfprintf+0x62a>
    1488:	80 e2       	ldi	r24, 0x20	; 32
    148a:	07 fd       	sbrc	r16, 7
    148c:	8d e2       	ldi	r24, 0x2D	; 45
    148e:	b7 01       	movw	r22, r14
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    1496:	c1 16       	cp	r12, r17
    1498:	38 f4       	brcc	.+14     	; 0x14a8 <vfprintf+0x648>
    149a:	b7 01       	movw	r22, r14
    149c:	80 e3       	ldi	r24, 0x30	; 48
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    14a4:	11 50       	subi	r17, 0x01	; 1
    14a6:	f7 cf       	rjmp	.-18     	; 0x1496 <vfprintf+0x636>
    14a8:	ca 94       	dec	r12
    14aa:	f3 01       	movw	r30, r6
    14ac:	ec 0d       	add	r30, r12
    14ae:	f1 1d       	adc	r31, r1
    14b0:	80 81       	ld	r24, Z
    14b2:	b7 01       	movw	r22, r14
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    14ba:	c1 10       	cpse	r12, r1
    14bc:	f5 cf       	rjmp	.-22     	; 0x14a8 <vfprintf+0x648>
    14be:	15 c0       	rjmp	.+42     	; 0x14ea <vfprintf+0x68a>
    14c0:	f4 e0       	ldi	r31, 0x04	; 4
    14c2:	f5 15       	cp	r31, r5
    14c4:	60 f5       	brcc	.+88     	; 0x151e <vfprintf+0x6be>
    14c6:	84 e0       	ldi	r24, 0x04	; 4
    14c8:	58 1a       	sub	r5, r24
    14ca:	93 fe       	sbrs	r9, 3
    14cc:	1f c0       	rjmp	.+62     	; 0x150c <vfprintf+0x6ac>
    14ce:	01 11       	cpse	r16, r1
    14d0:	27 c0       	rjmp	.+78     	; 0x1520 <vfprintf+0x6c0>
    14d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    14d4:	23 ff       	sbrs	r18, 3
    14d6:	2a c0       	rjmp	.+84     	; 0x152c <vfprintf+0x6cc>
    14d8:	0c ec       	ldi	r16, 0xCC	; 204
    14da:	10 e0       	ldi	r17, 0x00	; 0
    14dc:	39 2d       	mov	r19, r9
    14de:	30 71       	andi	r19, 0x10	; 16
    14e0:	93 2e       	mov	r9, r19
    14e2:	f8 01       	movw	r30, r16
    14e4:	84 91       	lpm	r24, Z
    14e6:	81 11       	cpse	r24, r1
    14e8:	24 c0       	rjmp	.+72     	; 0x1532 <vfprintf+0x6d2>
    14ea:	55 20       	and	r5, r5
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <vfprintf+0x690>
    14ee:	e4 cc       	rjmp	.-1592   	; 0xeb8 <vfprintf+0x58>
    14f0:	b7 01       	movw	r22, r14
    14f2:	80 e2       	ldi	r24, 0x20	; 32
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    14fa:	5a 94       	dec	r5
    14fc:	f6 cf       	rjmp	.-20     	; 0x14ea <vfprintf+0x68a>
    14fe:	f7 01       	movw	r30, r14
    1500:	86 81       	ldd	r24, Z+6	; 0x06
    1502:	97 81       	ldd	r25, Z+7	; 0x07
    1504:	26 c0       	rjmp	.+76     	; 0x1552 <vfprintf+0x6f2>
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	9f ef       	ldi	r25, 0xFF	; 255
    150a:	23 c0       	rjmp	.+70     	; 0x1552 <vfprintf+0x6f2>
    150c:	b7 01       	movw	r22, r14
    150e:	80 e2       	ldi	r24, 0x20	; 32
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    1516:	5a 94       	dec	r5
    1518:	51 10       	cpse	r5, r1
    151a:	f8 cf       	rjmp	.-16     	; 0x150c <vfprintf+0x6ac>
    151c:	d8 cf       	rjmp	.-80     	; 0x14ce <vfprintf+0x66e>
    151e:	51 2c       	mov	r5, r1
    1520:	b7 01       	movw	r22, r14
    1522:	80 2f       	mov	r24, r16
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    152a:	d3 cf       	rjmp	.-90     	; 0x14d2 <vfprintf+0x672>
    152c:	00 ed       	ldi	r16, 0xD0	; 208
    152e:	10 e0       	ldi	r17, 0x00	; 0
    1530:	d5 cf       	rjmp	.-86     	; 0x14dc <vfprintf+0x67c>
    1532:	91 10       	cpse	r9, r1
    1534:	80 52       	subi	r24, 0x20	; 32
    1536:	b7 01       	movw	r22, r14
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <fputc>
    153e:	0f 5f       	subi	r16, 0xFF	; 255
    1540:	1f 4f       	sbci	r17, 0xFF	; 255
    1542:	cf cf       	rjmp	.-98     	; 0x14e2 <vfprintf+0x682>
    1544:	23 e0       	ldi	r18, 0x03	; 3
    1546:	25 15       	cp	r18, r5
    1548:	10 f4       	brcc	.+4      	; 0x154e <vfprintf+0x6ee>
    154a:	83 e0       	ldi	r24, 0x03	; 3
    154c:	bd cf       	rjmp	.-134    	; 0x14c8 <vfprintf+0x668>
    154e:	51 2c       	mov	r5, r1
    1550:	c0 cf       	rjmp	.-128    	; 0x14d2 <vfprintf+0x672>
    1552:	60 96       	adiw	r28, 0x10	; 16
    1554:	e2 e1       	ldi	r30, 0x12	; 18
    1556:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__epilogue_restores__>

0000155a <__udivmodsi4>:
    155a:	a1 e2       	ldi	r26, 0x21	; 33
    155c:	1a 2e       	mov	r1, r26
    155e:	aa 1b       	sub	r26, r26
    1560:	bb 1b       	sub	r27, r27
    1562:	fd 01       	movw	r30, r26
    1564:	0d c0       	rjmp	.+26     	; 0x1580 <__udivmodsi4_ep>

00001566 <__udivmodsi4_loop>:
    1566:	aa 1f       	adc	r26, r26
    1568:	bb 1f       	adc	r27, r27
    156a:	ee 1f       	adc	r30, r30
    156c:	ff 1f       	adc	r31, r31
    156e:	a2 17       	cp	r26, r18
    1570:	b3 07       	cpc	r27, r19
    1572:	e4 07       	cpc	r30, r20
    1574:	f5 07       	cpc	r31, r21
    1576:	20 f0       	brcs	.+8      	; 0x1580 <__udivmodsi4_ep>
    1578:	a2 1b       	sub	r26, r18
    157a:	b3 0b       	sbc	r27, r19
    157c:	e4 0b       	sbc	r30, r20
    157e:	f5 0b       	sbc	r31, r21

00001580 <__udivmodsi4_ep>:
    1580:	66 1f       	adc	r22, r22
    1582:	77 1f       	adc	r23, r23
    1584:	88 1f       	adc	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	1a 94       	dec	r1
    158a:	69 f7       	brne	.-38     	; 0x1566 <__udivmodsi4_loop>
    158c:	60 95       	com	r22
    158e:	70 95       	com	r23
    1590:	80 95       	com	r24
    1592:	90 95       	com	r25
    1594:	9b 01       	movw	r18, r22
    1596:	ac 01       	movw	r20, r24
    1598:	bd 01       	movw	r22, r26
    159a:	cf 01       	movw	r24, r30
    159c:	08 95       	ret

0000159e <__prologue_saves__>:
    159e:	2f 92       	push	r2
    15a0:	3f 92       	push	r3
    15a2:	4f 92       	push	r4
    15a4:	5f 92       	push	r5
    15a6:	6f 92       	push	r6
    15a8:	7f 92       	push	r7
    15aa:	8f 92       	push	r8
    15ac:	9f 92       	push	r9
    15ae:	af 92       	push	r10
    15b0:	bf 92       	push	r11
    15b2:	cf 92       	push	r12
    15b4:	df 92       	push	r13
    15b6:	ef 92       	push	r14
    15b8:	ff 92       	push	r15
    15ba:	0f 93       	push	r16
    15bc:	1f 93       	push	r17
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	ca 1b       	sub	r28, r26
    15c8:	db 0b       	sbc	r29, r27
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	09 94       	ijmp

000015d6 <__epilogue_restores__>:
    15d6:	2a 88       	ldd	r2, Y+18	; 0x12
    15d8:	39 88       	ldd	r3, Y+17	; 0x11
    15da:	48 88       	ldd	r4, Y+16	; 0x10
    15dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    15de:	6e 84       	ldd	r6, Y+14	; 0x0e
    15e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    15e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    15e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    15e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    15e8:	b9 84       	ldd	r11, Y+9	; 0x09
    15ea:	c8 84       	ldd	r12, Y+8	; 0x08
    15ec:	df 80       	ldd	r13, Y+7	; 0x07
    15ee:	ee 80       	ldd	r14, Y+6	; 0x06
    15f0:	fd 80       	ldd	r15, Y+5	; 0x05
    15f2:	0c 81       	ldd	r16, Y+4	; 0x04
    15f4:	1b 81       	ldd	r17, Y+3	; 0x03
    15f6:	aa 81       	ldd	r26, Y+2	; 0x02
    15f8:	b9 81       	ldd	r27, Y+1	; 0x01
    15fa:	ce 0f       	add	r28, r30
    15fc:	d1 1d       	adc	r29, r1
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	ed 01       	movw	r28, r26
    160a:	08 95       	ret

0000160c <__divsf3>:
    160c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__divsf3x>
    1610:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__fp_round>
    1614:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__fp_pscB>
    1618:	58 f0       	brcs	.+22     	; 0x1630 <__divsf3+0x24>
    161a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__fp_pscA>
    161e:	40 f0       	brcs	.+16     	; 0x1630 <__divsf3+0x24>
    1620:	29 f4       	brne	.+10     	; 0x162c <__divsf3+0x20>
    1622:	5f 3f       	cpi	r21, 0xFF	; 255
    1624:	29 f0       	breq	.+10     	; 0x1630 <__divsf3+0x24>
    1626:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__fp_inf>
    162a:	51 11       	cpse	r21, r1
    162c:	0c 94 36 0c 	jmp	0x186c	; 0x186c <__fp_szero>
    1630:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__fp_nan>

00001634 <__divsf3x>:
    1634:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fp_split3>
    1638:	68 f3       	brcs	.-38     	; 0x1614 <__divsf3+0x8>

0000163a <__divsf3_pse>:
    163a:	99 23       	and	r25, r25
    163c:	b1 f3       	breq	.-20     	; 0x162a <__divsf3+0x1e>
    163e:	55 23       	and	r21, r21
    1640:	91 f3       	breq	.-28     	; 0x1626 <__divsf3+0x1a>
    1642:	95 1b       	sub	r25, r21
    1644:	55 0b       	sbc	r21, r21
    1646:	bb 27       	eor	r27, r27
    1648:	aa 27       	eor	r26, r26
    164a:	62 17       	cp	r22, r18
    164c:	73 07       	cpc	r23, r19
    164e:	84 07       	cpc	r24, r20
    1650:	38 f0       	brcs	.+14     	; 0x1660 <__divsf3_pse+0x26>
    1652:	9f 5f       	subi	r25, 0xFF	; 255
    1654:	5f 4f       	sbci	r21, 0xFF	; 255
    1656:	22 0f       	add	r18, r18
    1658:	33 1f       	adc	r19, r19
    165a:	44 1f       	adc	r20, r20
    165c:	aa 1f       	adc	r26, r26
    165e:	a9 f3       	breq	.-22     	; 0x164a <__divsf3_pse+0x10>
    1660:	35 d0       	rcall	.+106    	; 0x16cc <__divsf3_pse+0x92>
    1662:	0e 2e       	mov	r0, r30
    1664:	3a f0       	brmi	.+14     	; 0x1674 <__divsf3_pse+0x3a>
    1666:	e0 e8       	ldi	r30, 0x80	; 128
    1668:	32 d0       	rcall	.+100    	; 0x16ce <__divsf3_pse+0x94>
    166a:	91 50       	subi	r25, 0x01	; 1
    166c:	50 40       	sbci	r21, 0x00	; 0
    166e:	e6 95       	lsr	r30
    1670:	00 1c       	adc	r0, r0
    1672:	ca f7       	brpl	.-14     	; 0x1666 <__divsf3_pse+0x2c>
    1674:	2b d0       	rcall	.+86     	; 0x16cc <__divsf3_pse+0x92>
    1676:	fe 2f       	mov	r31, r30
    1678:	29 d0       	rcall	.+82     	; 0x16cc <__divsf3_pse+0x92>
    167a:	66 0f       	add	r22, r22
    167c:	77 1f       	adc	r23, r23
    167e:	88 1f       	adc	r24, r24
    1680:	bb 1f       	adc	r27, r27
    1682:	26 17       	cp	r18, r22
    1684:	37 07       	cpc	r19, r23
    1686:	48 07       	cpc	r20, r24
    1688:	ab 07       	cpc	r26, r27
    168a:	b0 e8       	ldi	r27, 0x80	; 128
    168c:	09 f0       	breq	.+2      	; 0x1690 <__divsf3_pse+0x56>
    168e:	bb 0b       	sbc	r27, r27
    1690:	80 2d       	mov	r24, r0
    1692:	bf 01       	movw	r22, r30
    1694:	ff 27       	eor	r31, r31
    1696:	93 58       	subi	r25, 0x83	; 131
    1698:	5f 4f       	sbci	r21, 0xFF	; 255
    169a:	3a f0       	brmi	.+14     	; 0x16aa <__divsf3_pse+0x70>
    169c:	9e 3f       	cpi	r25, 0xFE	; 254
    169e:	51 05       	cpc	r21, r1
    16a0:	78 f0       	brcs	.+30     	; 0x16c0 <__divsf3_pse+0x86>
    16a2:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__fp_inf>
    16a6:	0c 94 36 0c 	jmp	0x186c	; 0x186c <__fp_szero>
    16aa:	5f 3f       	cpi	r21, 0xFF	; 255
    16ac:	e4 f3       	brlt	.-8      	; 0x16a6 <__divsf3_pse+0x6c>
    16ae:	98 3e       	cpi	r25, 0xE8	; 232
    16b0:	d4 f3       	brlt	.-12     	; 0x16a6 <__divsf3_pse+0x6c>
    16b2:	86 95       	lsr	r24
    16b4:	77 95       	ror	r23
    16b6:	67 95       	ror	r22
    16b8:	b7 95       	ror	r27
    16ba:	f7 95       	ror	r31
    16bc:	9f 5f       	subi	r25, 0xFF	; 255
    16be:	c9 f7       	brne	.-14     	; 0x16b2 <__divsf3_pse+0x78>
    16c0:	88 0f       	add	r24, r24
    16c2:	91 1d       	adc	r25, r1
    16c4:	96 95       	lsr	r25
    16c6:	87 95       	ror	r24
    16c8:	97 f9       	bld	r25, 7
    16ca:	08 95       	ret
    16cc:	e1 e0       	ldi	r30, 0x01	; 1
    16ce:	66 0f       	add	r22, r22
    16d0:	77 1f       	adc	r23, r23
    16d2:	88 1f       	adc	r24, r24
    16d4:	bb 1f       	adc	r27, r27
    16d6:	62 17       	cp	r22, r18
    16d8:	73 07       	cpc	r23, r19
    16da:	84 07       	cpc	r24, r20
    16dc:	ba 07       	cpc	r27, r26
    16de:	20 f0       	brcs	.+8      	; 0x16e8 <__divsf3_pse+0xae>
    16e0:	62 1b       	sub	r22, r18
    16e2:	73 0b       	sbc	r23, r19
    16e4:	84 0b       	sbc	r24, r20
    16e6:	ba 0b       	sbc	r27, r26
    16e8:	ee 1f       	adc	r30, r30
    16ea:	88 f7       	brcc	.-30     	; 0x16ce <__divsf3_pse+0x94>
    16ec:	e0 95       	com	r30
    16ee:	08 95       	ret

000016f0 <__fixsfsi>:
    16f0:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__fixunssfsi>
    16f4:	68 94       	set
    16f6:	b1 11       	cpse	r27, r1
    16f8:	0c 94 36 0c 	jmp	0x186c	; 0x186c <__fp_szero>
    16fc:	08 95       	ret

000016fe <__fixunssfsi>:
    16fe:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__fp_splitA>
    1702:	88 f0       	brcs	.+34     	; 0x1726 <__fixunssfsi+0x28>
    1704:	9f 57       	subi	r25, 0x7F	; 127
    1706:	98 f0       	brcs	.+38     	; 0x172e <__fixunssfsi+0x30>
    1708:	b9 2f       	mov	r27, r25
    170a:	99 27       	eor	r25, r25
    170c:	b7 51       	subi	r27, 0x17	; 23
    170e:	b0 f0       	brcs	.+44     	; 0x173c <__fixunssfsi+0x3e>
    1710:	e1 f0       	breq	.+56     	; 0x174a <__fixunssfsi+0x4c>
    1712:	66 0f       	add	r22, r22
    1714:	77 1f       	adc	r23, r23
    1716:	88 1f       	adc	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	1a f0       	brmi	.+6      	; 0x1722 <__fixunssfsi+0x24>
    171c:	ba 95       	dec	r27
    171e:	c9 f7       	brne	.-14     	; 0x1712 <__fixunssfsi+0x14>
    1720:	14 c0       	rjmp	.+40     	; 0x174a <__fixunssfsi+0x4c>
    1722:	b1 30       	cpi	r27, 0x01	; 1
    1724:	91 f0       	breq	.+36     	; 0x174a <__fixunssfsi+0x4c>
    1726:	0e 94 35 0c 	call	0x186a	; 0x186a <__fp_zero>
    172a:	b1 e0       	ldi	r27, 0x01	; 1
    172c:	08 95       	ret
    172e:	0c 94 35 0c 	jmp	0x186a	; 0x186a <__fp_zero>
    1732:	67 2f       	mov	r22, r23
    1734:	78 2f       	mov	r23, r24
    1736:	88 27       	eor	r24, r24
    1738:	b8 5f       	subi	r27, 0xF8	; 248
    173a:	39 f0       	breq	.+14     	; 0x174a <__fixunssfsi+0x4c>
    173c:	b9 3f       	cpi	r27, 0xF9	; 249
    173e:	cc f3       	brlt	.-14     	; 0x1732 <__fixunssfsi+0x34>
    1740:	86 95       	lsr	r24
    1742:	77 95       	ror	r23
    1744:	67 95       	ror	r22
    1746:	b3 95       	inc	r27
    1748:	d9 f7       	brne	.-10     	; 0x1740 <__fixunssfsi+0x42>
    174a:	3e f4       	brtc	.+14     	; 0x175a <__fixunssfsi+0x5c>
    174c:	90 95       	com	r25
    174e:	80 95       	com	r24
    1750:	70 95       	com	r23
    1752:	61 95       	neg	r22
    1754:	7f 4f       	sbci	r23, 0xFF	; 255
    1756:	8f 4f       	sbci	r24, 0xFF	; 255
    1758:	9f 4f       	sbci	r25, 0xFF	; 255
    175a:	08 95       	ret

0000175c <__floatunsisf>:
    175c:	e8 94       	clt
    175e:	09 c0       	rjmp	.+18     	; 0x1772 <__floatsisf+0x12>

00001760 <__floatsisf>:
    1760:	97 fb       	bst	r25, 7
    1762:	3e f4       	brtc	.+14     	; 0x1772 <__floatsisf+0x12>
    1764:	90 95       	com	r25
    1766:	80 95       	com	r24
    1768:	70 95       	com	r23
    176a:	61 95       	neg	r22
    176c:	7f 4f       	sbci	r23, 0xFF	; 255
    176e:	8f 4f       	sbci	r24, 0xFF	; 255
    1770:	9f 4f       	sbci	r25, 0xFF	; 255
    1772:	99 23       	and	r25, r25
    1774:	a9 f0       	breq	.+42     	; 0x17a0 <__floatsisf+0x40>
    1776:	f9 2f       	mov	r31, r25
    1778:	96 e9       	ldi	r25, 0x96	; 150
    177a:	bb 27       	eor	r27, r27
    177c:	93 95       	inc	r25
    177e:	f6 95       	lsr	r31
    1780:	87 95       	ror	r24
    1782:	77 95       	ror	r23
    1784:	67 95       	ror	r22
    1786:	b7 95       	ror	r27
    1788:	f1 11       	cpse	r31, r1
    178a:	f8 cf       	rjmp	.-16     	; 0x177c <__floatsisf+0x1c>
    178c:	fa f4       	brpl	.+62     	; 0x17cc <__floatsisf+0x6c>
    178e:	bb 0f       	add	r27, r27
    1790:	11 f4       	brne	.+4      	; 0x1796 <__floatsisf+0x36>
    1792:	60 ff       	sbrs	r22, 0
    1794:	1b c0       	rjmp	.+54     	; 0x17cc <__floatsisf+0x6c>
    1796:	6f 5f       	subi	r22, 0xFF	; 255
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	8f 4f       	sbci	r24, 0xFF	; 255
    179c:	9f 4f       	sbci	r25, 0xFF	; 255
    179e:	16 c0       	rjmp	.+44     	; 0x17cc <__floatsisf+0x6c>
    17a0:	88 23       	and	r24, r24
    17a2:	11 f0       	breq	.+4      	; 0x17a8 <__floatsisf+0x48>
    17a4:	96 e9       	ldi	r25, 0x96	; 150
    17a6:	11 c0       	rjmp	.+34     	; 0x17ca <__floatsisf+0x6a>
    17a8:	77 23       	and	r23, r23
    17aa:	21 f0       	breq	.+8      	; 0x17b4 <__floatsisf+0x54>
    17ac:	9e e8       	ldi	r25, 0x8E	; 142
    17ae:	87 2f       	mov	r24, r23
    17b0:	76 2f       	mov	r23, r22
    17b2:	05 c0       	rjmp	.+10     	; 0x17be <__floatsisf+0x5e>
    17b4:	66 23       	and	r22, r22
    17b6:	71 f0       	breq	.+28     	; 0x17d4 <__floatsisf+0x74>
    17b8:	96 e8       	ldi	r25, 0x86	; 134
    17ba:	86 2f       	mov	r24, r22
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	2a f0       	brmi	.+10     	; 0x17cc <__floatsisf+0x6c>
    17c2:	9a 95       	dec	r25
    17c4:	66 0f       	add	r22, r22
    17c6:	77 1f       	adc	r23, r23
    17c8:	88 1f       	adc	r24, r24
    17ca:	da f7       	brpl	.-10     	; 0x17c2 <__floatsisf+0x62>
    17cc:	88 0f       	add	r24, r24
    17ce:	96 95       	lsr	r25
    17d0:	87 95       	ror	r24
    17d2:	97 f9       	bld	r25, 7
    17d4:	08 95       	ret

000017d6 <__fp_inf>:
    17d6:	97 f9       	bld	r25, 7
    17d8:	9f 67       	ori	r25, 0x7F	; 127
    17da:	80 e8       	ldi	r24, 0x80	; 128
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	60 e0       	ldi	r22, 0x00	; 0
    17e0:	08 95       	ret

000017e2 <__fp_nan>:
    17e2:	9f ef       	ldi	r25, 0xFF	; 255
    17e4:	80 ec       	ldi	r24, 0xC0	; 192
    17e6:	08 95       	ret

000017e8 <__fp_pscA>:
    17e8:	00 24       	eor	r0, r0
    17ea:	0a 94       	dec	r0
    17ec:	16 16       	cp	r1, r22
    17ee:	17 06       	cpc	r1, r23
    17f0:	18 06       	cpc	r1, r24
    17f2:	09 06       	cpc	r0, r25
    17f4:	08 95       	ret

000017f6 <__fp_pscB>:
    17f6:	00 24       	eor	r0, r0
    17f8:	0a 94       	dec	r0
    17fa:	12 16       	cp	r1, r18
    17fc:	13 06       	cpc	r1, r19
    17fe:	14 06       	cpc	r1, r20
    1800:	05 06       	cpc	r0, r21
    1802:	08 95       	ret

00001804 <__fp_round>:
    1804:	09 2e       	mov	r0, r25
    1806:	03 94       	inc	r0
    1808:	00 0c       	add	r0, r0
    180a:	11 f4       	brne	.+4      	; 0x1810 <__fp_round+0xc>
    180c:	88 23       	and	r24, r24
    180e:	52 f0       	brmi	.+20     	; 0x1824 <__fp_round+0x20>
    1810:	bb 0f       	add	r27, r27
    1812:	40 f4       	brcc	.+16     	; 0x1824 <__fp_round+0x20>
    1814:	bf 2b       	or	r27, r31
    1816:	11 f4       	brne	.+4      	; 0x181c <__fp_round+0x18>
    1818:	60 ff       	sbrs	r22, 0
    181a:	04 c0       	rjmp	.+8      	; 0x1824 <__fp_round+0x20>
    181c:	6f 5f       	subi	r22, 0xFF	; 255
    181e:	7f 4f       	sbci	r23, 0xFF	; 255
    1820:	8f 4f       	sbci	r24, 0xFF	; 255
    1822:	9f 4f       	sbci	r25, 0xFF	; 255
    1824:	08 95       	ret

00001826 <__fp_split3>:
    1826:	57 fd       	sbrc	r21, 7
    1828:	90 58       	subi	r25, 0x80	; 128
    182a:	44 0f       	add	r20, r20
    182c:	55 1f       	adc	r21, r21
    182e:	59 f0       	breq	.+22     	; 0x1846 <__fp_splitA+0x10>
    1830:	5f 3f       	cpi	r21, 0xFF	; 255
    1832:	71 f0       	breq	.+28     	; 0x1850 <__fp_splitA+0x1a>
    1834:	47 95       	ror	r20

00001836 <__fp_splitA>:
    1836:	88 0f       	add	r24, r24
    1838:	97 fb       	bst	r25, 7
    183a:	99 1f       	adc	r25, r25
    183c:	61 f0       	breq	.+24     	; 0x1856 <__fp_splitA+0x20>
    183e:	9f 3f       	cpi	r25, 0xFF	; 255
    1840:	79 f0       	breq	.+30     	; 0x1860 <__fp_splitA+0x2a>
    1842:	87 95       	ror	r24
    1844:	08 95       	ret
    1846:	12 16       	cp	r1, r18
    1848:	13 06       	cpc	r1, r19
    184a:	14 06       	cpc	r1, r20
    184c:	55 1f       	adc	r21, r21
    184e:	f2 cf       	rjmp	.-28     	; 0x1834 <__fp_split3+0xe>
    1850:	46 95       	lsr	r20
    1852:	f1 df       	rcall	.-30     	; 0x1836 <__fp_splitA>
    1854:	08 c0       	rjmp	.+16     	; 0x1866 <__fp_splitA+0x30>
    1856:	16 16       	cp	r1, r22
    1858:	17 06       	cpc	r1, r23
    185a:	18 06       	cpc	r1, r24
    185c:	99 1f       	adc	r25, r25
    185e:	f1 cf       	rjmp	.-30     	; 0x1842 <__fp_splitA+0xc>
    1860:	86 95       	lsr	r24
    1862:	71 05       	cpc	r23, r1
    1864:	61 05       	cpc	r22, r1
    1866:	08 94       	sec
    1868:	08 95       	ret

0000186a <__fp_zero>:
    186a:	e8 94       	clt

0000186c <__fp_szero>:
    186c:	bb 27       	eor	r27, r27
    186e:	66 27       	eor	r22, r22
    1870:	77 27       	eor	r23, r23
    1872:	cb 01       	movw	r24, r22
    1874:	97 f9       	bld	r25, 7
    1876:	08 95       	ret

00001878 <__mulsf3>:
    1878:	0e 94 4f 0c 	call	0x189e	; 0x189e <__mulsf3x>
    187c:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__fp_round>
    1880:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__fp_pscA>
    1884:	38 f0       	brcs	.+14     	; 0x1894 <__mulsf3+0x1c>
    1886:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__fp_pscB>
    188a:	20 f0       	brcs	.+8      	; 0x1894 <__mulsf3+0x1c>
    188c:	95 23       	and	r25, r21
    188e:	11 f0       	breq	.+4      	; 0x1894 <__mulsf3+0x1c>
    1890:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__fp_inf>
    1894:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__fp_nan>
    1898:	11 24       	eor	r1, r1
    189a:	0c 94 36 0c 	jmp	0x186c	; 0x186c <__fp_szero>

0000189e <__mulsf3x>:
    189e:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fp_split3>
    18a2:	70 f3       	brcs	.-36     	; 0x1880 <__mulsf3+0x8>

000018a4 <__mulsf3_pse>:
    18a4:	95 9f       	mul	r25, r21
    18a6:	c1 f3       	breq	.-16     	; 0x1898 <__mulsf3+0x20>
    18a8:	95 0f       	add	r25, r21
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	55 1f       	adc	r21, r21
    18ae:	62 9f       	mul	r22, r18
    18b0:	f0 01       	movw	r30, r0
    18b2:	72 9f       	mul	r23, r18
    18b4:	bb 27       	eor	r27, r27
    18b6:	f0 0d       	add	r31, r0
    18b8:	b1 1d       	adc	r27, r1
    18ba:	63 9f       	mul	r22, r19
    18bc:	aa 27       	eor	r26, r26
    18be:	f0 0d       	add	r31, r0
    18c0:	b1 1d       	adc	r27, r1
    18c2:	aa 1f       	adc	r26, r26
    18c4:	64 9f       	mul	r22, r20
    18c6:	66 27       	eor	r22, r22
    18c8:	b0 0d       	add	r27, r0
    18ca:	a1 1d       	adc	r26, r1
    18cc:	66 1f       	adc	r22, r22
    18ce:	82 9f       	mul	r24, r18
    18d0:	22 27       	eor	r18, r18
    18d2:	b0 0d       	add	r27, r0
    18d4:	a1 1d       	adc	r26, r1
    18d6:	62 1f       	adc	r22, r18
    18d8:	73 9f       	mul	r23, r19
    18da:	b0 0d       	add	r27, r0
    18dc:	a1 1d       	adc	r26, r1
    18de:	62 1f       	adc	r22, r18
    18e0:	83 9f       	mul	r24, r19
    18e2:	a0 0d       	add	r26, r0
    18e4:	61 1d       	adc	r22, r1
    18e6:	22 1f       	adc	r18, r18
    18e8:	74 9f       	mul	r23, r20
    18ea:	33 27       	eor	r19, r19
    18ec:	a0 0d       	add	r26, r0
    18ee:	61 1d       	adc	r22, r1
    18f0:	23 1f       	adc	r18, r19
    18f2:	84 9f       	mul	r24, r20
    18f4:	60 0d       	add	r22, r0
    18f6:	21 1d       	adc	r18, r1
    18f8:	82 2f       	mov	r24, r18
    18fa:	76 2f       	mov	r23, r22
    18fc:	6a 2f       	mov	r22, r26
    18fe:	11 24       	eor	r1, r1
    1900:	9f 57       	subi	r25, 0x7F	; 127
    1902:	50 40       	sbci	r21, 0x00	; 0
    1904:	9a f0       	brmi	.+38     	; 0x192c <__mulsf3_pse+0x88>
    1906:	f1 f0       	breq	.+60     	; 0x1944 <__mulsf3_pse+0xa0>
    1908:	88 23       	and	r24, r24
    190a:	4a f0       	brmi	.+18     	; 0x191e <__mulsf3_pse+0x7a>
    190c:	ee 0f       	add	r30, r30
    190e:	ff 1f       	adc	r31, r31
    1910:	bb 1f       	adc	r27, r27
    1912:	66 1f       	adc	r22, r22
    1914:	77 1f       	adc	r23, r23
    1916:	88 1f       	adc	r24, r24
    1918:	91 50       	subi	r25, 0x01	; 1
    191a:	50 40       	sbci	r21, 0x00	; 0
    191c:	a9 f7       	brne	.-22     	; 0x1908 <__mulsf3_pse+0x64>
    191e:	9e 3f       	cpi	r25, 0xFE	; 254
    1920:	51 05       	cpc	r21, r1
    1922:	80 f0       	brcs	.+32     	; 0x1944 <__mulsf3_pse+0xa0>
    1924:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__fp_inf>
    1928:	0c 94 36 0c 	jmp	0x186c	; 0x186c <__fp_szero>
    192c:	5f 3f       	cpi	r21, 0xFF	; 255
    192e:	e4 f3       	brlt	.-8      	; 0x1928 <__mulsf3_pse+0x84>
    1930:	98 3e       	cpi	r25, 0xE8	; 232
    1932:	d4 f3       	brlt	.-12     	; 0x1928 <__mulsf3_pse+0x84>
    1934:	86 95       	lsr	r24
    1936:	77 95       	ror	r23
    1938:	67 95       	ror	r22
    193a:	b7 95       	ror	r27
    193c:	f7 95       	ror	r31
    193e:	e7 95       	ror	r30
    1940:	9f 5f       	subi	r25, 0xFF	; 255
    1942:	c1 f7       	brne	.-16     	; 0x1934 <__mulsf3_pse+0x90>
    1944:	fe 2b       	or	r31, r30
    1946:	88 0f       	add	r24, r24
    1948:	91 1d       	adc	r25, r1
    194a:	96 95       	lsr	r25
    194c:	87 95       	ror	r24
    194e:	97 f9       	bld	r25, 7
    1950:	08 95       	ret

00001952 <__ftoa_engine>:
    1952:	28 30       	cpi	r18, 0x08	; 8
    1954:	08 f0       	brcs	.+2      	; 0x1958 <__ftoa_engine+0x6>
    1956:	27 e0       	ldi	r18, 0x07	; 7
    1958:	33 27       	eor	r19, r19
    195a:	da 01       	movw	r26, r20
    195c:	99 0f       	add	r25, r25
    195e:	31 1d       	adc	r19, r1
    1960:	87 fd       	sbrc	r24, 7
    1962:	91 60       	ori	r25, 0x01	; 1
    1964:	00 96       	adiw	r24, 0x00	; 0
    1966:	61 05       	cpc	r22, r1
    1968:	71 05       	cpc	r23, r1
    196a:	39 f4       	brne	.+14     	; 0x197a <__ftoa_engine+0x28>
    196c:	32 60       	ori	r19, 0x02	; 2
    196e:	2e 5f       	subi	r18, 0xFE	; 254
    1970:	3d 93       	st	X+, r19
    1972:	30 e3       	ldi	r19, 0x30	; 48
    1974:	2a 95       	dec	r18
    1976:	e1 f7       	brne	.-8      	; 0x1970 <__ftoa_engine+0x1e>
    1978:	08 95       	ret
    197a:	9f 3f       	cpi	r25, 0xFF	; 255
    197c:	30 f0       	brcs	.+12     	; 0x198a <__ftoa_engine+0x38>
    197e:	80 38       	cpi	r24, 0x80	; 128
    1980:	71 05       	cpc	r23, r1
    1982:	61 05       	cpc	r22, r1
    1984:	09 f0       	breq	.+2      	; 0x1988 <__ftoa_engine+0x36>
    1986:	3c 5f       	subi	r19, 0xFC	; 252
    1988:	3c 5f       	subi	r19, 0xFC	; 252
    198a:	3d 93       	st	X+, r19
    198c:	91 30       	cpi	r25, 0x01	; 1
    198e:	08 f0       	brcs	.+2      	; 0x1992 <__ftoa_engine+0x40>
    1990:	80 68       	ori	r24, 0x80	; 128
    1992:	91 1d       	adc	r25, r1
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	1f 93       	push	r17
    199a:	0f 93       	push	r16
    199c:	ff 92       	push	r15
    199e:	ef 92       	push	r14
    19a0:	19 2f       	mov	r17, r25
    19a2:	98 7f       	andi	r25, 0xF8	; 248
    19a4:	96 95       	lsr	r25
    19a6:	e9 2f       	mov	r30, r25
    19a8:	96 95       	lsr	r25
    19aa:	96 95       	lsr	r25
    19ac:	e9 0f       	add	r30, r25
    19ae:	ff 27       	eor	r31, r31
    19b0:	e2 5d       	subi	r30, 0xD2	; 210
    19b2:	fe 4f       	sbci	r31, 0xFE	; 254
    19b4:	99 27       	eor	r25, r25
    19b6:	33 27       	eor	r19, r19
    19b8:	ee 24       	eor	r14, r14
    19ba:	ff 24       	eor	r15, r15
    19bc:	a7 01       	movw	r20, r14
    19be:	e7 01       	movw	r28, r14
    19c0:	05 90       	lpm	r0, Z+
    19c2:	08 94       	sec
    19c4:	07 94       	ror	r0
    19c6:	28 f4       	brcc	.+10     	; 0x19d2 <__ftoa_engine+0x80>
    19c8:	36 0f       	add	r19, r22
    19ca:	e7 1e       	adc	r14, r23
    19cc:	f8 1e       	adc	r15, r24
    19ce:	49 1f       	adc	r20, r25
    19d0:	51 1d       	adc	r21, r1
    19d2:	66 0f       	add	r22, r22
    19d4:	77 1f       	adc	r23, r23
    19d6:	88 1f       	adc	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	06 94       	lsr	r0
    19dc:	a1 f7       	brne	.-24     	; 0x19c6 <__ftoa_engine+0x74>
    19de:	05 90       	lpm	r0, Z+
    19e0:	07 94       	ror	r0
    19e2:	28 f4       	brcc	.+10     	; 0x19ee <__ftoa_engine+0x9c>
    19e4:	e7 0e       	add	r14, r23
    19e6:	f8 1e       	adc	r15, r24
    19e8:	49 1f       	adc	r20, r25
    19ea:	56 1f       	adc	r21, r22
    19ec:	c1 1d       	adc	r28, r1
    19ee:	77 0f       	add	r23, r23
    19f0:	88 1f       	adc	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	66 1f       	adc	r22, r22
    19f6:	06 94       	lsr	r0
    19f8:	a1 f7       	brne	.-24     	; 0x19e2 <__ftoa_engine+0x90>
    19fa:	05 90       	lpm	r0, Z+
    19fc:	07 94       	ror	r0
    19fe:	28 f4       	brcc	.+10     	; 0x1a0a <__ftoa_engine+0xb8>
    1a00:	f8 0e       	add	r15, r24
    1a02:	49 1f       	adc	r20, r25
    1a04:	56 1f       	adc	r21, r22
    1a06:	c7 1f       	adc	r28, r23
    1a08:	d1 1d       	adc	r29, r1
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	66 1f       	adc	r22, r22
    1a10:	77 1f       	adc	r23, r23
    1a12:	06 94       	lsr	r0
    1a14:	a1 f7       	brne	.-24     	; 0x19fe <__ftoa_engine+0xac>
    1a16:	05 90       	lpm	r0, Z+
    1a18:	07 94       	ror	r0
    1a1a:	20 f4       	brcc	.+8      	; 0x1a24 <__ftoa_engine+0xd2>
    1a1c:	49 0f       	add	r20, r25
    1a1e:	56 1f       	adc	r21, r22
    1a20:	c7 1f       	adc	r28, r23
    1a22:	d8 1f       	adc	r29, r24
    1a24:	99 0f       	add	r25, r25
    1a26:	66 1f       	adc	r22, r22
    1a28:	77 1f       	adc	r23, r23
    1a2a:	88 1f       	adc	r24, r24
    1a2c:	06 94       	lsr	r0
    1a2e:	a9 f7       	brne	.-22     	; 0x1a1a <__ftoa_engine+0xc8>
    1a30:	84 91       	lpm	r24, Z
    1a32:	10 95       	com	r17
    1a34:	17 70       	andi	r17, 0x07	; 7
    1a36:	41 f0       	breq	.+16     	; 0x1a48 <__ftoa_engine+0xf6>
    1a38:	d6 95       	lsr	r29
    1a3a:	c7 95       	ror	r28
    1a3c:	57 95       	ror	r21
    1a3e:	47 95       	ror	r20
    1a40:	f7 94       	ror	r15
    1a42:	e7 94       	ror	r14
    1a44:	1a 95       	dec	r17
    1a46:	c1 f7       	brne	.-16     	; 0x1a38 <__ftoa_engine+0xe6>
    1a48:	e4 ed       	ldi	r30, 0xD4	; 212
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	68 94       	set
    1a4e:	15 90       	lpm	r1, Z+
    1a50:	15 91       	lpm	r17, Z+
    1a52:	35 91       	lpm	r19, Z+
    1a54:	65 91       	lpm	r22, Z+
    1a56:	95 91       	lpm	r25, Z+
    1a58:	05 90       	lpm	r0, Z+
    1a5a:	7f e2       	ldi	r23, 0x2F	; 47
    1a5c:	73 95       	inc	r23
    1a5e:	e1 18       	sub	r14, r1
    1a60:	f1 0a       	sbc	r15, r17
    1a62:	43 0b       	sbc	r20, r19
    1a64:	56 0b       	sbc	r21, r22
    1a66:	c9 0b       	sbc	r28, r25
    1a68:	d0 09       	sbc	r29, r0
    1a6a:	c0 f7       	brcc	.-16     	; 0x1a5c <__ftoa_engine+0x10a>
    1a6c:	e1 0c       	add	r14, r1
    1a6e:	f1 1e       	adc	r15, r17
    1a70:	43 1f       	adc	r20, r19
    1a72:	56 1f       	adc	r21, r22
    1a74:	c9 1f       	adc	r28, r25
    1a76:	d0 1d       	adc	r29, r0
    1a78:	7e f4       	brtc	.+30     	; 0x1a98 <__ftoa_engine+0x146>
    1a7a:	70 33       	cpi	r23, 0x30	; 48
    1a7c:	11 f4       	brne	.+4      	; 0x1a82 <__ftoa_engine+0x130>
    1a7e:	8a 95       	dec	r24
    1a80:	e6 cf       	rjmp	.-52     	; 0x1a4e <__ftoa_engine+0xfc>
    1a82:	e8 94       	clt
    1a84:	01 50       	subi	r16, 0x01	; 1
    1a86:	30 f0       	brcs	.+12     	; 0x1a94 <__ftoa_engine+0x142>
    1a88:	08 0f       	add	r16, r24
    1a8a:	0a f4       	brpl	.+2      	; 0x1a8e <__ftoa_engine+0x13c>
    1a8c:	00 27       	eor	r16, r16
    1a8e:	02 17       	cp	r16, r18
    1a90:	08 f4       	brcc	.+2      	; 0x1a94 <__ftoa_engine+0x142>
    1a92:	20 2f       	mov	r18, r16
    1a94:	23 95       	inc	r18
    1a96:	02 2f       	mov	r16, r18
    1a98:	7a 33       	cpi	r23, 0x3A	; 58
    1a9a:	28 f0       	brcs	.+10     	; 0x1aa6 <__ftoa_engine+0x154>
    1a9c:	79 e3       	ldi	r23, 0x39	; 57
    1a9e:	7d 93       	st	X+, r23
    1aa0:	2a 95       	dec	r18
    1aa2:	e9 f7       	brne	.-6      	; 0x1a9e <__ftoa_engine+0x14c>
    1aa4:	10 c0       	rjmp	.+32     	; 0x1ac6 <__ftoa_engine+0x174>
    1aa6:	7d 93       	st	X+, r23
    1aa8:	2a 95       	dec	r18
    1aaa:	89 f6       	brne	.-94     	; 0x1a4e <__ftoa_engine+0xfc>
    1aac:	06 94       	lsr	r0
    1aae:	97 95       	ror	r25
    1ab0:	67 95       	ror	r22
    1ab2:	37 95       	ror	r19
    1ab4:	17 95       	ror	r17
    1ab6:	17 94       	ror	r1
    1ab8:	e1 18       	sub	r14, r1
    1aba:	f1 0a       	sbc	r15, r17
    1abc:	43 0b       	sbc	r20, r19
    1abe:	56 0b       	sbc	r21, r22
    1ac0:	c9 0b       	sbc	r28, r25
    1ac2:	d0 09       	sbc	r29, r0
    1ac4:	98 f0       	brcs	.+38     	; 0x1aec <__ftoa_engine+0x19a>
    1ac6:	23 95       	inc	r18
    1ac8:	7e 91       	ld	r23, -X
    1aca:	73 95       	inc	r23
    1acc:	7a 33       	cpi	r23, 0x3A	; 58
    1ace:	08 f0       	brcs	.+2      	; 0x1ad2 <__ftoa_engine+0x180>
    1ad0:	70 e3       	ldi	r23, 0x30	; 48
    1ad2:	7c 93       	st	X, r23
    1ad4:	20 13       	cpse	r18, r16
    1ad6:	b8 f7       	brcc	.-18     	; 0x1ac6 <__ftoa_engine+0x174>
    1ad8:	7e 91       	ld	r23, -X
    1ada:	70 61       	ori	r23, 0x10	; 16
    1adc:	7d 93       	st	X+, r23
    1ade:	30 f0       	brcs	.+12     	; 0x1aec <__ftoa_engine+0x19a>
    1ae0:	83 95       	inc	r24
    1ae2:	71 e3       	ldi	r23, 0x31	; 49
    1ae4:	7d 93       	st	X+, r23
    1ae6:	70 e3       	ldi	r23, 0x30	; 48
    1ae8:	2a 95       	dec	r18
    1aea:	e1 f7       	brne	.-8      	; 0x1ae4 <__ftoa_engine+0x192>
    1aec:	11 24       	eor	r1, r1
    1aee:	ef 90       	pop	r14
    1af0:	ff 90       	pop	r15
    1af2:	0f 91       	pop	r16
    1af4:	1f 91       	pop	r17
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	99 27       	eor	r25, r25
    1afc:	87 fd       	sbrc	r24, 7
    1afe:	90 95       	com	r25
    1b00:	08 95       	ret

00001b02 <strnlen_P>:
    1b02:	fc 01       	movw	r30, r24
    1b04:	05 90       	lpm	r0, Z+
    1b06:	61 50       	subi	r22, 0x01	; 1
    1b08:	70 40       	sbci	r23, 0x00	; 0
    1b0a:	01 10       	cpse	r0, r1
    1b0c:	d8 f7       	brcc	.-10     	; 0x1b04 <strnlen_P+0x2>
    1b0e:	80 95       	com	r24
    1b10:	90 95       	com	r25
    1b12:	8e 0f       	add	r24, r30
    1b14:	9f 1f       	adc	r25, r31
    1b16:	08 95       	ret

00001b18 <strcpy>:
    1b18:	fb 01       	movw	r30, r22
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	01 90       	ld	r0, Z+
    1b1e:	0d 92       	st	X+, r0
    1b20:	00 20       	and	r0, r0
    1b22:	e1 f7       	brne	.-8      	; 0x1b1c <strcpy+0x4>
    1b24:	08 95       	ret

00001b26 <strncmp>:
    1b26:	fb 01       	movw	r30, r22
    1b28:	dc 01       	movw	r26, r24
    1b2a:	41 50       	subi	r20, 0x01	; 1
    1b2c:	50 40       	sbci	r21, 0x00	; 0
    1b2e:	30 f0       	brcs	.+12     	; 0x1b3c <strncmp+0x16>
    1b30:	8d 91       	ld	r24, X+
    1b32:	01 90       	ld	r0, Z+
    1b34:	80 19       	sub	r24, r0
    1b36:	19 f4       	brne	.+6      	; 0x1b3e <strncmp+0x18>
    1b38:	00 20       	and	r0, r0
    1b3a:	b9 f7       	brne	.-18     	; 0x1b2a <strncmp+0x4>
    1b3c:	88 1b       	sub	r24, r24
    1b3e:	99 0b       	sbc	r25, r25
    1b40:	08 95       	ret

00001b42 <strnlen>:
    1b42:	fc 01       	movw	r30, r24
    1b44:	61 50       	subi	r22, 0x01	; 1
    1b46:	70 40       	sbci	r23, 0x00	; 0
    1b48:	01 90       	ld	r0, Z+
    1b4a:	01 10       	cpse	r0, r1
    1b4c:	d8 f7       	brcc	.-10     	; 0x1b44 <strnlen+0x2>
    1b4e:	80 95       	com	r24
    1b50:	90 95       	com	r25
    1b52:	8e 0f       	add	r24, r30
    1b54:	9f 1f       	adc	r25, r31
    1b56:	08 95       	ret

00001b58 <fputc>:
    1b58:	0f 93       	push	r16
    1b5a:	1f 93       	push	r17
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	fb 01       	movw	r30, r22
    1b62:	23 81       	ldd	r18, Z+3	; 0x03
    1b64:	21 fd       	sbrc	r18, 1
    1b66:	03 c0       	rjmp	.+6      	; 0x1b6e <fputc+0x16>
    1b68:	8f ef       	ldi	r24, 0xFF	; 255
    1b6a:	9f ef       	ldi	r25, 0xFF	; 255
    1b6c:	2c c0       	rjmp	.+88     	; 0x1bc6 <fputc+0x6e>
    1b6e:	22 ff       	sbrs	r18, 2
    1b70:	16 c0       	rjmp	.+44     	; 0x1b9e <fputc+0x46>
    1b72:	46 81       	ldd	r20, Z+6	; 0x06
    1b74:	57 81       	ldd	r21, Z+7	; 0x07
    1b76:	24 81       	ldd	r18, Z+4	; 0x04
    1b78:	35 81       	ldd	r19, Z+5	; 0x05
    1b7a:	42 17       	cp	r20, r18
    1b7c:	53 07       	cpc	r21, r19
    1b7e:	44 f4       	brge	.+16     	; 0x1b90 <fputc+0x38>
    1b80:	a0 81       	ld	r26, Z
    1b82:	b1 81       	ldd	r27, Z+1	; 0x01
    1b84:	9d 01       	movw	r18, r26
    1b86:	2f 5f       	subi	r18, 0xFF	; 255
    1b88:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8a:	31 83       	std	Z+1, r19	; 0x01
    1b8c:	20 83       	st	Z, r18
    1b8e:	8c 93       	st	X, r24
    1b90:	26 81       	ldd	r18, Z+6	; 0x06
    1b92:	37 81       	ldd	r19, Z+7	; 0x07
    1b94:	2f 5f       	subi	r18, 0xFF	; 255
    1b96:	3f 4f       	sbci	r19, 0xFF	; 255
    1b98:	37 83       	std	Z+7, r19	; 0x07
    1b9a:	26 83       	std	Z+6, r18	; 0x06
    1b9c:	14 c0       	rjmp	.+40     	; 0x1bc6 <fputc+0x6e>
    1b9e:	8b 01       	movw	r16, r22
    1ba0:	ec 01       	movw	r28, r24
    1ba2:	fb 01       	movw	r30, r22
    1ba4:	00 84       	ldd	r0, Z+8	; 0x08
    1ba6:	f1 85       	ldd	r31, Z+9	; 0x09
    1ba8:	e0 2d       	mov	r30, r0
    1baa:	09 95       	icall
    1bac:	89 2b       	or	r24, r25
    1bae:	e1 f6       	brne	.-72     	; 0x1b68 <fputc+0x10>
    1bb0:	d8 01       	movw	r26, r16
    1bb2:	16 96       	adiw	r26, 0x06	; 6
    1bb4:	8d 91       	ld	r24, X+
    1bb6:	9c 91       	ld	r25, X
    1bb8:	17 97       	sbiw	r26, 0x07	; 7
    1bba:	01 96       	adiw	r24, 0x01	; 1
    1bbc:	17 96       	adiw	r26, 0x07	; 7
    1bbe:	9c 93       	st	X, r25
    1bc0:	8e 93       	st	-X, r24
    1bc2:	16 97       	sbiw	r26, 0x06	; 6
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	08 95       	ret

00001bd0 <printf>:
    1bd0:	a0 e0       	ldi	r26, 0x00	; 0
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	ee ee       	ldi	r30, 0xEE	; 238
    1bd6:	fd e0       	ldi	r31, 0x0D	; 13
    1bd8:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__prologue_saves__+0x20>
    1bdc:	ae 01       	movw	r20, r28
    1bde:	4b 5f       	subi	r20, 0xFB	; 251
    1be0:	5f 4f       	sbci	r21, 0xFF	; 255
    1be2:	fa 01       	movw	r30, r20
    1be4:	61 91       	ld	r22, Z+
    1be6:	71 91       	ld	r23, Z+
    1be8:	af 01       	movw	r20, r30
    1bea:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <__iob+0x2>
    1bee:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <__iob+0x3>
    1bf2:	0e 94 30 07 	call	0xe60	; 0xe60 <vfprintf>
    1bf6:	e2 e0       	ldi	r30, 0x02	; 2
    1bf8:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__epilogue_restores__+0x20>

00001bfc <puts>:
    1bfc:	0f 93       	push	r16
    1bfe:	1f 93       	push	r17
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	e0 91 f2 03 	lds	r30, 0x03F2	; 0x8003f2 <__iob+0x2>
    1c08:	f0 91 f3 03 	lds	r31, 0x03F3	; 0x8003f3 <__iob+0x3>
    1c0c:	23 81       	ldd	r18, Z+3	; 0x03
    1c0e:	21 ff       	sbrs	r18, 1
    1c10:	1b c0       	rjmp	.+54     	; 0x1c48 <puts+0x4c>
    1c12:	8c 01       	movw	r16, r24
    1c14:	d0 e0       	ldi	r29, 0x00	; 0
    1c16:	c0 e0       	ldi	r28, 0x00	; 0
    1c18:	f8 01       	movw	r30, r16
    1c1a:	81 91       	ld	r24, Z+
    1c1c:	8f 01       	movw	r16, r30
    1c1e:	60 91 f2 03 	lds	r22, 0x03F2	; 0x8003f2 <__iob+0x2>
    1c22:	70 91 f3 03 	lds	r23, 0x03F3	; 0x8003f3 <__iob+0x3>
    1c26:	db 01       	movw	r26, r22
    1c28:	18 96       	adiw	r26, 0x08	; 8
    1c2a:	ed 91       	ld	r30, X+
    1c2c:	fc 91       	ld	r31, X
    1c2e:	19 97       	sbiw	r26, 0x09	; 9
    1c30:	88 23       	and	r24, r24
    1c32:	31 f0       	breq	.+12     	; 0x1c40 <puts+0x44>
    1c34:	09 95       	icall
    1c36:	89 2b       	or	r24, r25
    1c38:	79 f3       	breq	.-34     	; 0x1c18 <puts+0x1c>
    1c3a:	df ef       	ldi	r29, 0xFF	; 255
    1c3c:	cf ef       	ldi	r28, 0xFF	; 255
    1c3e:	ec cf       	rjmp	.-40     	; 0x1c18 <puts+0x1c>
    1c40:	8a e0       	ldi	r24, 0x0A	; 10
    1c42:	09 95       	icall
    1c44:	89 2b       	or	r24, r25
    1c46:	19 f0       	breq	.+6      	; 0x1c4e <puts+0x52>
    1c48:	8f ef       	ldi	r24, 0xFF	; 255
    1c4a:	9f ef       	ldi	r25, 0xFF	; 255
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <puts+0x56>
    1c4e:	8d 2f       	mov	r24, r29
    1c50:	9c 2f       	mov	r25, r28
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	08 95       	ret

00001c5c <sprintf>:
    1c5c:	ae e0       	ldi	r26, 0x0E	; 14
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e4 e3       	ldi	r30, 0x34	; 52
    1c62:	fe e0       	ldi	r31, 0x0E	; 14
    1c64:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__prologue_saves__+0x1c>
    1c68:	0d 89       	ldd	r16, Y+21	; 0x15
    1c6a:	1e 89       	ldd	r17, Y+22	; 0x16
    1c6c:	86 e0       	ldi	r24, 0x06	; 6
    1c6e:	8c 83       	std	Y+4, r24	; 0x04
    1c70:	1a 83       	std	Y+2, r17	; 0x02
    1c72:	09 83       	std	Y+1, r16	; 0x01
    1c74:	8f ef       	ldi	r24, 0xFF	; 255
    1c76:	9f e7       	ldi	r25, 0x7F	; 127
    1c78:	9e 83       	std	Y+6, r25	; 0x06
    1c7a:	8d 83       	std	Y+5, r24	; 0x05
    1c7c:	ae 01       	movw	r20, r28
    1c7e:	47 5e       	subi	r20, 0xE7	; 231
    1c80:	5f 4f       	sbci	r21, 0xFF	; 255
    1c82:	6f 89       	ldd	r22, Y+23	; 0x17
    1c84:	78 8d       	ldd	r23, Y+24	; 0x18
    1c86:	ce 01       	movw	r24, r28
    1c88:	01 96       	adiw	r24, 0x01	; 1
    1c8a:	0e 94 30 07 	call	0xe60	; 0xe60 <vfprintf>
    1c8e:	ef 81       	ldd	r30, Y+7	; 0x07
    1c90:	f8 85       	ldd	r31, Y+8	; 0x08
    1c92:	e0 0f       	add	r30, r16
    1c94:	f1 1f       	adc	r31, r17
    1c96:	10 82       	st	Z, r1
    1c98:	2e 96       	adiw	r28, 0x0e	; 14
    1c9a:	e4 e0       	ldi	r30, 0x04	; 4
    1c9c:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__epilogue_restores__+0x1c>

00001ca0 <__ultoa_invert>:
    1ca0:	fa 01       	movw	r30, r20
    1ca2:	aa 27       	eor	r26, r26
    1ca4:	28 30       	cpi	r18, 0x08	; 8
    1ca6:	51 f1       	breq	.+84     	; 0x1cfc <__ultoa_invert+0x5c>
    1ca8:	20 31       	cpi	r18, 0x10	; 16
    1caa:	81 f1       	breq	.+96     	; 0x1d0c <__ultoa_invert+0x6c>
    1cac:	e8 94       	clt
    1cae:	6f 93       	push	r22
    1cb0:	6e 7f       	andi	r22, 0xFE	; 254
    1cb2:	6e 5f       	subi	r22, 0xFE	; 254
    1cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cba:	af 4f       	sbci	r26, 0xFF	; 255
    1cbc:	b1 e0       	ldi	r27, 0x01	; 1
    1cbe:	3e d0       	rcall	.+124    	; 0x1d3c <__ultoa_invert+0x9c>
    1cc0:	b4 e0       	ldi	r27, 0x04	; 4
    1cc2:	3c d0       	rcall	.+120    	; 0x1d3c <__ultoa_invert+0x9c>
    1cc4:	67 0f       	add	r22, r23
    1cc6:	78 1f       	adc	r23, r24
    1cc8:	89 1f       	adc	r24, r25
    1cca:	9a 1f       	adc	r25, r26
    1ccc:	a1 1d       	adc	r26, r1
    1cce:	68 0f       	add	r22, r24
    1cd0:	79 1f       	adc	r23, r25
    1cd2:	8a 1f       	adc	r24, r26
    1cd4:	91 1d       	adc	r25, r1
    1cd6:	a1 1d       	adc	r26, r1
    1cd8:	6a 0f       	add	r22, r26
    1cda:	71 1d       	adc	r23, r1
    1cdc:	81 1d       	adc	r24, r1
    1cde:	91 1d       	adc	r25, r1
    1ce0:	a1 1d       	adc	r26, r1
    1ce2:	20 d0       	rcall	.+64     	; 0x1d24 <__ultoa_invert+0x84>
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <__ultoa_invert+0x48>
    1ce6:	68 94       	set
    1ce8:	3f 91       	pop	r19
    1cea:	2a e0       	ldi	r18, 0x0A	; 10
    1cec:	26 9f       	mul	r18, r22
    1cee:	11 24       	eor	r1, r1
    1cf0:	30 19       	sub	r19, r0
    1cf2:	30 5d       	subi	r19, 0xD0	; 208
    1cf4:	31 93       	st	Z+, r19
    1cf6:	de f6       	brtc	.-74     	; 0x1cae <__ultoa_invert+0xe>
    1cf8:	cf 01       	movw	r24, r30
    1cfa:	08 95       	ret
    1cfc:	46 2f       	mov	r20, r22
    1cfe:	47 70       	andi	r20, 0x07	; 7
    1d00:	40 5d       	subi	r20, 0xD0	; 208
    1d02:	41 93       	st	Z+, r20
    1d04:	b3 e0       	ldi	r27, 0x03	; 3
    1d06:	0f d0       	rcall	.+30     	; 0x1d26 <__ultoa_invert+0x86>
    1d08:	c9 f7       	brne	.-14     	; 0x1cfc <__ultoa_invert+0x5c>
    1d0a:	f6 cf       	rjmp	.-20     	; 0x1cf8 <__ultoa_invert+0x58>
    1d0c:	46 2f       	mov	r20, r22
    1d0e:	4f 70       	andi	r20, 0x0F	; 15
    1d10:	40 5d       	subi	r20, 0xD0	; 208
    1d12:	4a 33       	cpi	r20, 0x3A	; 58
    1d14:	18 f0       	brcs	.+6      	; 0x1d1c <__ultoa_invert+0x7c>
    1d16:	49 5d       	subi	r20, 0xD9	; 217
    1d18:	31 fd       	sbrc	r19, 1
    1d1a:	40 52       	subi	r20, 0x20	; 32
    1d1c:	41 93       	st	Z+, r20
    1d1e:	02 d0       	rcall	.+4      	; 0x1d24 <__ultoa_invert+0x84>
    1d20:	a9 f7       	brne	.-22     	; 0x1d0c <__ultoa_invert+0x6c>
    1d22:	ea cf       	rjmp	.-44     	; 0x1cf8 <__ultoa_invert+0x58>
    1d24:	b4 e0       	ldi	r27, 0x04	; 4
    1d26:	a6 95       	lsr	r26
    1d28:	97 95       	ror	r25
    1d2a:	87 95       	ror	r24
    1d2c:	77 95       	ror	r23
    1d2e:	67 95       	ror	r22
    1d30:	ba 95       	dec	r27
    1d32:	c9 f7       	brne	.-14     	; 0x1d26 <__ultoa_invert+0x86>
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	61 05       	cpc	r22, r1
    1d38:	71 05       	cpc	r23, r1
    1d3a:	08 95       	ret
    1d3c:	9b 01       	movw	r18, r22
    1d3e:	ac 01       	movw	r20, r24
    1d40:	0a 2e       	mov	r0, r26
    1d42:	06 94       	lsr	r0
    1d44:	57 95       	ror	r21
    1d46:	47 95       	ror	r20
    1d48:	37 95       	ror	r19
    1d4a:	27 95       	ror	r18
    1d4c:	ba 95       	dec	r27
    1d4e:	c9 f7       	brne	.-14     	; 0x1d42 <__ultoa_invert+0xa2>
    1d50:	62 0f       	add	r22, r18
    1d52:	73 1f       	adc	r23, r19
    1d54:	84 1f       	adc	r24, r20
    1d56:	95 1f       	adc	r25, r21
    1d58:	a0 1d       	adc	r26, r0
    1d5a:	08 95       	ret

00001d5c <_exit>:
    1d5c:	f8 94       	cli

00001d5e <__stop_program>:
    1d5e:	ff cf       	rjmp	.-2      	; 0x1d5e <__stop_program>
