
LoRa-node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000035e  00800100  00002070  00002104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002070  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010b  0080045e  0080045e  00002462  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002462  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00002500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003665  00000000  00000000  000027a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019c6  00000000  00000000  00005e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cb4  00000000  00000000  000077d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e0  00000000  00000000  00009488  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000108a  00000000  00000000  00009b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018b1  00000000  00000000  0000abf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000c4a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__ctors_end>
       4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
       8:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_2>
       c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      10:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      14:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      18:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      1c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      20:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      24:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      28:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      2c:	0c 94 13 03 	jmp	0x626	; 0x626 <__vector_11>
      30:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      34:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      38:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      3c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      40:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      44:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      48:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      4c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      50:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      54:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      58:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      5c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      60:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      64:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      68:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      6c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      70:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      74:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      78:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      7c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      80:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      84:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      88:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      8c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      90:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      94:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      98:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      9c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      ac:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      bc:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__vector_47>
      c0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      c4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      c8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>

000000cc <__trampolines_end>:
      cc:	6e 61       	ori	r22, 0x1E	; 30
      ce:	6e 00       	.word	0x006e	; ????

000000d0 <__c.2332>:
      d0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      e0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      f0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     100:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     110:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     120:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     130:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     140:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     150:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     160:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     170:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     180:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     190:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1a0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1b0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1c0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001ce <__ctors_end>:
     1ce:	11 24       	eor	r1, r1
     1d0:	1f be       	out	0x3f, r1	; 63
     1d2:	cf ef       	ldi	r28, 0xFF	; 255
     1d4:	d8 e0       	ldi	r29, 0x08	; 8
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	cd bf       	out	0x3d, r28	; 61

000001da <__do_copy_data>:
     1da:	14 e0       	ldi	r17, 0x04	; 4
     1dc:	a0 e0       	ldi	r26, 0x00	; 0
     1de:	b1 e0       	ldi	r27, 0x01	; 1
     1e0:	e0 e7       	ldi	r30, 0x70	; 112
     1e2:	f0 e2       	ldi	r31, 0x20	; 32
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <__do_copy_data+0x10>
     1e6:	05 90       	lpm	r0, Z+
     1e8:	0d 92       	st	X+, r0
     1ea:	ae 35       	cpi	r26, 0x5E	; 94
     1ec:	b1 07       	cpc	r27, r17
     1ee:	d9 f7       	brne	.-10     	; 0x1e6 <__do_copy_data+0xc>

000001f0 <__do_clear_bss>:
     1f0:	25 e0       	ldi	r18, 0x05	; 5
     1f2:	ae e5       	ldi	r26, 0x5E	; 94
     1f4:	b4 e0       	ldi	r27, 0x04	; 4
     1f6:	01 c0       	rjmp	.+2      	; 0x1fa <.do_clear_bss_start>

000001f8 <.do_clear_bss_loop>:
     1f8:	1d 92       	st	X+, r1

000001fa <.do_clear_bss_start>:
     1fa:	a9 36       	cpi	r26, 0x69	; 105
     1fc:	b2 07       	cpc	r27, r18
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <.do_clear_bss_loop>
     200:	0e 94 06 01 	call	0x20c	; 0x20c <main>
     204:	0c 94 36 10 	jmp	0x206c	; 0x206c <_exit>

00000208 <__bad_interrupt>:
     208:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020c <main>:




int main(void){
	MCUSR &= ~(1 << WDRF);
     20c:	84 b7       	in	r24, 0x34	; 52
     20e:	87 7f       	andi	r24, 0xF7	; 247
     210:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	a8 95       	wdr
     218:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     21c:	88 61       	ori	r24, 0x18	; 24
     21e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     222:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     226:	0f be       	out	0x3f, r0	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     228:	2f ef       	ldi	r18, 0xFF	; 255
     22a:	83 ec       	ldi	r24, 0xC3	; 195
     22c:	99 e0       	ldi	r25, 0x09	; 9
     22e:	21 50       	subi	r18, 0x01	; 1
     230:	80 40       	sbci	r24, 0x00	; 0
     232:	90 40       	sbci	r25, 0x00	; 0
     234:	e1 f7       	brne	.-8      	; 0x22e <main+0x22>
     236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x2c>
     238:	00 00       	nop
	wdt_disable();
	_delay_ms(400); // Start-up time after pressing reset button
	
	FSM_run();
     23a:	0e 94 ba 01 	call	0x374	; 0x374 <FSM_run>
	puts("Program ended");
     23e:	8e e0       	ldi	r24, 0x0E	; 14
     240:	92 e0       	ldi	r25, 0x02	; 2
     242:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <puts>
	return 0;
}
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	08 95       	ret

0000024c <adc_init>:




void adc_init(){
	ADMUX = 0;
     24c:	ac e7       	ldi	r26, 0x7C	; 124
     24e:	b0 e0       	ldi	r27, 0x00	; 0
     250:	1c 92       	st	X, r1
	ADCSRA = 0;
     252:	ea e7       	ldi	r30, 0x7A	; 122
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	10 82       	st	Z, r1
	ADMUX |= ADC_VOLTAGE_REF_AVCC;											// Sets adc voltage reference
     258:	8c 91       	ld	r24, X
     25a:	80 64       	ori	r24, 0x40	; 64
     25c:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESCALAR_128;											// ADC prescaler = 128 ---> 8MHz goes to 62.5 kHz
     25e:	80 81       	ld	r24, Z
     260:	86 60       	ori	r24, 0x06	; 6
     262:	80 83       	st	Z, r24
	//ADCSRA |= (0 << ADIE);												// Enables ADC interrupt
	ADCSRA |= (1 << ADEN);													// Enabling the ADC
     264:	80 81       	ld	r24, Z
     266:	80 68       	ori	r24, 0x80	; 128
     268:	80 83       	st	Z, r24
     26a:	08 95       	ret

0000026c <adc_read>:
}


uint16_t adc_read(){
	uint16_t val;					
	ADCSRA |= (1 << ADSC);													// Starts single conversion
     26c:	ea e7       	ldi	r30, 0x7A	; 122
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	80 64       	ori	r24, 0x40	; 64
     274:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));
     276:	80 81       	ld	r24, Z
     278:	84 ff       	sbrs	r24, 4
     27a:	fd cf       	rjmp	.-6      	; 0x276 <adc_read+0xa>
	val = ADCW;
     27c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     280:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	if ((int)val > 1000){val = 1000;}
     284:	89 3e       	cpi	r24, 0xE9	; 233
     286:	23 e0       	ldi	r18, 0x03	; 3
     288:	92 07       	cpc	r25, r18
     28a:	14 f0       	brlt	.+4      	; 0x290 <adc_read+0x24>
     28c:	88 ee       	ldi	r24, 0xE8	; 232
     28e:	93 e0       	ldi	r25, 0x03	; 3
	return val;
}
     290:	08 95       	ret

00000292 <adc_change_channel>:

void adc_change_channel(uint8_t channel){
	ADMUX |= channel;														// Setting adc channel to be read
     292:	ec e7       	ldi	r30, 0x7C	; 124
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	90 81       	ld	r25, Z
     298:	89 2b       	or	r24, r25
     29a:	80 83       	st	Z, r24
	adc_read();																// Discard first measurement after channel change
     29c:	0e 94 36 01 	call	0x26c	; 0x26c <adc_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a0:	8a e1       	ldi	r24, 0x1A	; 26
     2a2:	8a 95       	dec	r24
     2a4:	f1 f7       	brne	.-4      	; 0x2a2 <adc_change_channel+0x10>
     2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <adc_change_channel+0x16>
     2a8:	08 95       	ret

000002aa <board_charge>:
	DDRD |= (1 << DDRD4);	  // Set PD4 as output
	
}

void board_charge(int off){
	if (off){
     2aa:	89 2b       	or	r24, r25
     2ac:	19 f0       	breq	.+6      	; 0x2b4 <board_charge+0xa>
		clear_bit(PORTD, PORTD4);
     2ae:	5c 98       	cbi	0x0b, 4	; 11
		clear_bit(LEDS, LED1);
     2b0:	28 98       	cbi	0x05, 0	; 5
     2b2:	08 95       	ret
	}
	else {
		set_bit(PORTD, PORTD4);
     2b4:	5c 9a       	sbi	0x0b, 4	; 11
		set_bit(LEDS, LED1);
     2b6:	28 9a       	sbi	0x05, 0	; 5
     2b8:	08 95       	ret

000002ba <board_setup>:
	}
}

void board_setup(uint8_t *joined_err){
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	ec 01       	movw	r28, r24
	puts("test1");
     2c0:	8c e1       	ldi	r24, 0x1C	; 28
     2c2:	92 e0       	ldi	r25, 0x02	; 2
     2c4:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <puts>
	#ifndef LORA_NODE
	USART_init();
	#endif
	adc_init();
     2c8:	0e 94 26 01 	call	0x24c	; 0x24c <adc_init>

static void board_dmy_btn_init();
static void board_gpio_init();

void board_dmy_btn_init(void){
	DDRD &= ~(1 << DDD3);     // Clear the PD2 pin
     2cc:	53 98       	cbi	0x0a, 3	; 10
	EICRA |= (1 << ISC11);    // set INT1 to trigger on falling edge
     2ce:	e9 e6       	ldi	r30, 0x69	; 105
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	80 81       	ld	r24, Z
     2d4:	88 60       	ori	r24, 0x08	; 8
     2d6:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);     // Turns on INT1
     2d8:	e9 9a       	sbi	0x1d, 1	; 29
}

void board_gpio_init(void){
	DDRD |= (1 << DDRD4);	  // Set PD4 as output
     2da:	54 9a       	sbi	0x0a, 4	; 10
	USART_init();
	#endif
	adc_init();
	board_dmy_btn_init();
	board_gpio_init();
	board_charge(0);
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 55 01 	call	0x2aa	; 0x2aa <board_charge>
	puts("test2");
     2e4:	82 e2       	ldi	r24, 0x22	; 34
     2e6:	92 e0       	ldi	r25, 0x02	; 2
     2e8:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <puts>
	#ifdef LORA_NODE
		lora_init(joined_err);
     2ec:	ce 01       	movw	r24, r28
     2ee:	0e 94 97 05 	call	0xb2e	; 0xb2e <lora_init>
		
	#else
		*joined_err = 0;
	#endif

	i2c_init();
     2f2:	0e 94 38 03 	call	0x670	; 0x670 <i2c_init>
	INA219_init();
     2f6:	0e 94 82 04 	call	0x904	; 0x904 <INA219_init>
	timers_init();
     2fa:	0e 94 b4 07 	call	0xf68	; 0xf68 <timers_init>
	sei();
     2fe:	78 94       	sei
}
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	08 95       	ret

00000306 <board_get_battery_level>:
	
	r1 = 174;
	r2 = 255;
	battery_max = 4.2;
	
	adc_change_channel(VBAT);
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	0e 94 49 01 	call	0x292	; 0x292 <adc_change_channel>
	val = adc_read();
     30c:	0e 94 36 01 	call	0x26c	; 0x26c <adc_read>
	
	v_div_tick = (((r2)/(r1+r2))*battery_max) / 1024;
	vbat = v_div_tick*val*(r1+r2)/r2;
	bat_percentage = vbat*100/battery_max;
	
	return bat_percentage;
     310:	bc 01       	movw	r22, r24
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__floatunsisf>
     31a:	26 eb       	ldi	r18, 0xB6	; 182
     31c:	36 ec       	ldi	r19, 0xC6	; 198
     31e:	4f e1       	ldi	r20, 0x1F	; 31
     320:	5b e3       	ldi	r21, 0x3B	; 59
     322:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__mulsf3>
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e8       	ldi	r19, 0x80	; 128
     32a:	46 ed       	ldi	r20, 0xD6	; 214
     32c:	53 e4       	ldi	r21, 0x43	; 67
     32e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__mulsf3>
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	4f e7       	ldi	r20, 0x7F	; 127
     338:	53 e4       	ldi	r21, 0x43	; 67
     33a:	0e 94 99 0c 	call	0x1932	; 0x1932 <__divsf3>
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	48 ec       	ldi	r20, 0xC8	; 200
     344:	52 e4       	ldi	r21, 0x42	; 66
     346:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__mulsf3>
     34a:	26 e6       	ldi	r18, 0x66	; 102
     34c:	36 e6       	ldi	r19, 0x66	; 102
     34e:	46 e8       	ldi	r20, 0x86	; 134
     350:	50 e4       	ldi	r21, 0x40	; 64
     352:	0e 94 99 0c 	call	0x1932	; 0x1932 <__divsf3>
     356:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__fixsfsi>
     35a:	86 2f       	mov	r24, r22
     35c:	08 95       	ret

0000035e <FSM_system_reset>:
	puts("Init complete, FSM running");
	#endif
}

void FSM_system_reset(){
	puts("reset");
     35e:	89 ee       	ldi	r24, 0xE9	; 233
     360:	92 e0       	ldi	r25, 0x02	; 2
     362:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <puts>
	cli();
     366:	f8 94       	cli
	WDTCSR = 0x00;
     368:	e0 e6       	ldi	r30, 0x60	; 96
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	10 82       	st	Z, r1
	WDTCSR = (1<<WDE);
     36e:	88 e0       	ldi	r24, 0x08	; 8
     370:	80 83       	st	Z, r24
     372:	08 95       	ret

00000374 <FSM_run>:

//const char* test = "3565623838383532";
//const char* test2 = "mac_rx 2 63633131353562626666"; 
char test3[50] = "mac_rx 2 63633131353562626666";
uint8_t out[100];
void FSM_run(void){
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	67 97       	sbiw	r28, 0x17	; 23
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
	sample_size = BOARD_SAMPLE_SIZE;
     388:	8c e3       	ldi	r24, 0x3C	; 60
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <sample_size+0x1>
     390:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <sample_size>
	board_t board1 = {0, 0, 100, {0, 0, 0, 0}, 0, sample_size, ""};
     394:	19 82       	std	Y+1, r1	; 0x01
     396:	1a 82       	std	Y+2, r1	; 0x02
     398:	1b 82       	std	Y+3, r1	; 0x03
     39a:	1c 82       	std	Y+4, r1	; 0x04
     39c:	1d 82       	std	Y+5, r1	; 0x05
     39e:	24 e6       	ldi	r18, 0x64	; 100
     3a0:	2e 83       	std	Y+6, r18	; 0x06
     3a2:	18 86       	std	Y+8, r1	; 0x08
     3a4:	1f 82       	std	Y+7, r1	; 0x07
     3a6:	1a 86       	std	Y+10, r1	; 0x0a
     3a8:	19 86       	std	Y+9, r1	; 0x09
     3aa:	1b 86       	std	Y+11, r1	; 0x0b
     3ac:	1c 86       	std	Y+12, r1	; 0x0c
     3ae:	1d 86       	std	Y+13, r1	; 0x0d
     3b0:	1e 86       	std	Y+14, r1	; 0x0e
     3b2:	1f 86       	std	Y+15, r1	; 0x0f
     3b4:	18 8a       	std	Y+16, r1	; 0x10
     3b6:	19 8a       	std	Y+17, r1	; 0x11
     3b8:	1a 8a       	std	Y+18, r1	; 0x12
     3ba:	1b 8a       	std	Y+19, r1	; 0x13
     3bc:	9d 8b       	std	Y+21, r25	; 0x15
     3be:	8c 8b       	std	Y+20, r24	; 0x14
     3c0:	8f e0       	ldi	r24, 0x0F	; 15
     3c2:	93 e0       	ldi	r25, 0x03	; 3
     3c4:	9f 8b       	std	Y+23, r25	; 0x17
     3c6:	8e 8b       	std	Y+22, r24	; 0x16
	int rejoin_attempts = 0;
     3c8:	00 e0       	ldi	r16, 0x00	; 0
     3ca:	10 e0       	ldi	r17, 0x00	; 0
				#ifndef TIMER2
				_delay_ms(1000);
				#endif

				if(board1.lora_joined_err) nextState = ST_NOT_JOINED;
				else nextState = ST_ACTIVE;
     3cc:	68 94       	set
     3ce:	dd 24       	eor	r13, r13
     3d0:	d1 f8       	bld	r13, 1
				enter_powerSave();
				#ifndef TIMER2
				_delay_ms(1000);
				#endif

				if(board1.lora_joined_err) nextState = ST_NOT_JOINED;
     3d2:	0f 2e       	mov	r0, r31
     3d4:	f3 e0       	ldi	r31, 0x03	; 3
     3d6:	ef 2e       	mov	r14, r31
     3d8:	f0 2d       	mov	r31, r0
						lora_transmit(board1.msg);
					#endif
					board1.ina219.bus_voltage_avg = 0;
					board1.ina219.current_avg = 0;
				}
				nextState = ST_SLEEP;
     3da:	ff 24       	eor	r15, r15
     3dc:	f3 94       	inc	r15
	sample_size = BOARD_SAMPLE_SIZE;
	board_t board1 = {0, 0, 100, {0, 0, 0, 0}, 0, sample_size, ""};
	int rejoin_attempts = 0;
	uint8_t lora_wait_rejoin_minutes = 3;
	while (1){
		if (lora_tx_flag){
     3de:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <__data_end>
     3e2:	88 23       	and	r24, r24
     3e4:	31 f0       	breq	.+12     	; 0x3f2 <FSM_run+0x7e>
			lora_tx_flag = 0;
     3e6:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <__data_end>
			lora_transmit("02025ebbe8d05403210876");
     3ea:	88 e2       	ldi	r24, 0x28	; 40
     3ec:	92 e0       	ldi	r25, 0x02	; 2
     3ee:	0e 94 fd 06 	call	0xdfa	; 0xdfa <lora_transmit>
		}
		switch (nextState){
     3f2:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <nextState>
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	09 f4       	brne	.+2      	; 0x3fc <FSM_run+0x88>
     3fa:	d1 c0       	rjmp	.+418    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
     3fc:	28 f0       	brcs	.+10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3fe:	82 30       	cpi	r24, 0x02	; 2
     400:	09 f1       	breq	.+66     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     402:	83 30       	cpi	r24, 0x03	; 3
     404:	71 f0       	breq	.+28     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     406:	eb cf       	rjmp	.-42     	; 0x3de <FSM_run+0x6a>
static volatile int rec_flag = 0;
static void FSM_system_init(uint8_t *joined_flag);
static uint8_t lora_tx_flag;

void FSM_system_init(uint8_t *joined_flag){
	board_setup(joined_flag);
     408:	ce 01       	movw	r24, r28
     40a:	43 96       	adiw	r24, 0x13	; 19
     40c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <board_setup>
		}
		switch (nextState){
			
			case ST_INIT:
				FSM_system_init(&board1.lora_joined_err);
				if (board1.lora_joined_err) nextState = ST_NOT_JOINED;
     410:	8b 89       	ldd	r24, Y+19	; 0x13
     412:	88 23       	and	r24, r24
     414:	19 f0       	breq	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     416:	e0 92 60 04 	sts	0x0460, r14	; 0x800460 <nextState>
     41a:	e1 cf       	rjmp	.-62     	; 0x3de <FSM_run+0x6a>
				else nextState = ST_ACTIVE;
     41c:	d0 92 60 04 	sts	0x0460, r13	; 0x800460 <nextState>
     420:	de cf       	rjmp	.-68     	; 0x3de <FSM_run+0x6a>
			case ST_NOT_JOINED:
				#ifdef DEBUG_M
					puts("Not joined");
				#endif
				
				rejoin_attempts++;
     422:	0f 5f       	subi	r16, 0xFF	; 255
     424:	1f 4f       	sbci	r17, 0xFF	; 255
				if (rejoin_attempts < 3) board1.lora_joined_err = lora_join_OTAA();
     426:	03 30       	cpi	r16, 0x03	; 3
     428:	11 05       	cpc	r17, r1
     42a:	24 f4       	brge	.+8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     42c:	0e 94 86 05 	call	0xb0c	; 0xb0c <lora_join_OTAA>
     430:	8b 8b       	std	Y+19, r24	; 0x13
     432:	05 c0       	rjmp	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
				else if (rejoin_attempts >= lora_wait_rejoin_minutes*60) rejoin_attempts = 0;
     434:	04 3b       	cpi	r16, 0xB4	; 180
     436:	11 05       	cpc	r17, r1
     438:	14 f0       	brlt	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43a:	00 e0       	ldi	r16, 0x00	; 0
     43c:	10 e0       	ldi	r17, 0x00	; 0

				nextState = ST_SLEEP;
     43e:	f0 92 60 04 	sts	0x0460, r15	; 0x800460 <nextState>
				break;
     442:	cd cf       	rjmp	.-102    	; 0x3de <FSM_run+0x6a>
			
			case ST_ACTIVE:
				#ifdef DEBUG_M
					//puts("Active");
				#endif
				board1.ina219.bus_voltage_avg	+= INA219_readBusVoltageReg();
     444:	0e 94 34 04 	call	0x868	; 0x868 <INA219_readBusVoltageReg>
     448:	09 2e       	mov	r0, r25
     44a:	00 0c       	add	r0, r0
     44c:	aa 0b       	sbc	r26, r26
     44e:	bb 0b       	sbc	r27, r27
     450:	4b 85       	ldd	r20, Y+11	; 0x0b
     452:	5c 85       	ldd	r21, Y+12	; 0x0c
     454:	6d 85       	ldd	r22, Y+13	; 0x0d
     456:	7e 85       	ldd	r23, Y+14	; 0x0e
     458:	84 0f       	add	r24, r20
     45a:	95 1f       	adc	r25, r21
     45c:	a6 1f       	adc	r26, r22
     45e:	b7 1f       	adc	r27, r23
     460:	8b 87       	std	Y+11, r24	; 0x0b
     462:	9c 87       	std	Y+12, r25	; 0x0c
     464:	ad 87       	std	Y+13, r26	; 0x0d
     466:	be 87       	std	Y+14, r27	; 0x0e
				board1.ina219.current_avg		+= INA219_readCurrentReg();
     468:	0e 94 5d 04 	call	0x8ba	; 0x8ba <INA219_readCurrentReg>
     46c:	4f 85       	ldd	r20, Y+15	; 0x0f
     46e:	58 89       	ldd	r21, Y+16	; 0x10
     470:	69 89       	ldd	r22, Y+17	; 0x11
     472:	7a 89       	ldd	r23, Y+18	; 0x12
     474:	48 0f       	add	r20, r24
     476:	59 1f       	adc	r21, r25
     478:	61 1d       	adc	r22, r1
     47a:	71 1d       	adc	r23, r1
     47c:	4f 87       	std	Y+15, r20	; 0x0f
     47e:	58 8b       	std	Y+16, r21	; 0x10
     480:	69 8b       	std	Y+17, r22	; 0x11
     482:	7a 8b       	std	Y+18, r23	; 0x12
				board1.batteryLevel = board_get_battery_level();
     484:	0e 94 83 01 	call	0x306	; 0x306 <board_get_battery_level>
     488:	8e 83       	std	Y+6, r24	; 0x06
				board1.sample_size = sample_size;
     48a:	20 91 97 04 	lds	r18, 0x0497	; 0x800497 <sample_size>
     48e:	30 91 98 04 	lds	r19, 0x0498	; 0x800498 <sample_size+0x1>
     492:	3d 8b       	std	Y+21, r19	; 0x15
     494:	2c 8b       	std	Y+20, r18	; 0x14
				if (board1.batteryLevel < 70) board_charge(BOARD_CHARGE_ON);
     496:	86 34       	cpi	r24, 0x46	; 70
     498:	28 f4       	brcc	.+10     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 55 01 	call	0x2aa	; 0x2aa <board_charge>
     4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
				else if (board1.batteryLevel > 95) board_charge(BOARD_CHARGE_OFF);
     4a4:	80 36       	cpi	r24, 0x60	; 96
     4a6:	20 f0       	brcs	.+8      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 55 01 	call	0x2aa	; 0x2aa <board_charge>
				if(!(current_time%board1.sample_size) && (current_time != 0)){
     4b0:	60 91 93 04 	lds	r22, 0x0493	; 0x800493 <current_time>
     4b4:	70 91 94 04 	lds	r23, 0x0494	; 0x800494 <current_time+0x1>
     4b8:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <current_time+0x2>
     4bc:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <current_time+0x3>
     4c0:	8c 88       	ldd	r8, Y+20	; 0x14
     4c2:	9d 88       	ldd	r9, Y+21	; 0x15
     4c4:	a1 2c       	mov	r10, r1
     4c6:	b1 2c       	mov	r11, r1
     4c8:	a5 01       	movw	r20, r10
     4ca:	94 01       	movw	r18, r8
     4cc:	0e 94 40 0c 	call	0x1880	; 0x1880 <__udivmodsi4>
     4d0:	67 2b       	or	r22, r23
     4d2:	68 2b       	or	r22, r24
     4d4:	69 2b       	or	r22, r25
     4d6:	09 f0       	breq	.+2      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d8:	5f c0       	rjmp	.+190    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     4da:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <current_time>
     4de:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <current_time+0x1>
     4e2:	a0 91 95 04 	lds	r26, 0x0495	; 0x800495 <current_time+0x2>
     4e6:	b0 91 96 04 	lds	r27, 0x0496	; 0x800496 <current_time+0x3>
     4ea:	89 2b       	or	r24, r25
     4ec:	8a 2b       	or	r24, r26
     4ee:	8b 2b       	or	r24, r27
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f2:	52 c0       	rjmp	.+164    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
					#ifdef DEBUG_M
					puts("It's time");
					#endif
					if (frame_counter == 0xFF) frame_counter = 0;
     4f4:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <frame_counter>
     4f8:	8f 3f       	cpi	r24, 0xFF	; 255
     4fa:	11 f4       	brne	.+4      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4fc:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <frame_counter>
					board1.frame_counter = frame_counter++;
     500:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <frame_counter>
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	98 0f       	add	r25, r24
     508:	90 93 5f 04 	sts	0x045F, r25	; 0x80045f <frame_counter>
     50c:	89 83       	std	Y+1, r24	; 0x01
					board1.ina219.bus_voltage	= board1.ina219.bus_voltage_avg / board1.sample_size;
     50e:	6b 85       	ldd	r22, Y+11	; 0x0b
     510:	7c 85       	ldd	r23, Y+12	; 0x0c
     512:	8d 85       	ldd	r24, Y+13	; 0x0d
     514:	9e 85       	ldd	r25, Y+14	; 0x0e
     516:	a5 01       	movw	r20, r10
     518:	94 01       	movw	r18, r8
     51a:	0e 94 40 0c 	call	0x1880	; 0x1880 <__udivmodsi4>
     51e:	38 87       	std	Y+8, r19	; 0x08
     520:	2f 83       	std	Y+7, r18	; 0x07
					board1.ina219.current		= board1.ina219.current_avg / board1.sample_size;
     522:	6f 85       	ldd	r22, Y+15	; 0x0f
     524:	78 89       	ldd	r23, Y+16	; 0x10
     526:	89 89       	ldd	r24, Y+17	; 0x11
     528:	9a 89       	ldd	r25, Y+18	; 0x12
     52a:	a5 01       	movw	r20, r10
     52c:	94 01       	movw	r18, r8
     52e:	0e 94 40 0c 	call	0x1880	; 0x1880 <__udivmodsi4>
     532:	3a 87       	std	Y+10, r19	; 0x0a
     534:	29 87       	std	Y+9, r18	; 0x09
					board1.time_stamp = current_time;
     536:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <current_time>
     53a:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <current_time+0x1>
     53e:	a0 91 95 04 	lds	r26, 0x0495	; 0x800495 <current_time+0x2>
     542:	b0 91 96 04 	lds	r27, 0x0496	; 0x800496 <current_time+0x3>
     546:	8a 83       	std	Y+2, r24	; 0x02
     548:	9b 83       	std	Y+3, r25	; 0x03
     54a:	ac 83       	std	Y+4, r26	; 0x04
     54c:	bd 83       	std	Y+5, r27	; 0x05
					board1.msg = hex_encode(board1);
     54e:	8d b7       	in	r24, 0x3d	; 61
     550:	9e b7       	in	r25, 0x3e	; 62
     552:	47 97       	sbiw	r24, 0x17	; 23
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	9e bf       	out	0x3e, r25	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	8d bf       	out	0x3d, r24	; 61
     55e:	ad b7       	in	r26, 0x3d	; 61
     560:	be b7       	in	r27, 0x3e	; 62
     562:	11 96       	adiw	r26, 0x01	; 1
     564:	87 e1       	ldi	r24, 0x17	; 23
     566:	fe 01       	movw	r30, r28
     568:	31 96       	adiw	r30, 0x01	; 1
     56a:	01 90       	ld	r0, Z+
     56c:	0d 92       	st	X+, r0
     56e:	8a 95       	dec	r24
     570:	e1 f7       	brne	.-8      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     572:	0e 94 95 08 	call	0x112a	; 0x112a <hex_encode>
     576:	9f 8b       	std	Y+23, r25	; 0x17
     578:	8e 8b       	std	Y+22, r24	; 0x16
						
					#ifndef LORA_NODE
						puts(board1.msg);
					#else 
						//puts(board1.msg);
						lora_transmit(board1.msg);
     57a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <lora_transmit>
					#endif
					board1.ina219.bus_voltage_avg = 0;
     57e:	1b 86       	std	Y+11, r1	; 0x0b
     580:	1c 86       	std	Y+12, r1	; 0x0c
     582:	1d 86       	std	Y+13, r1	; 0x0d
     584:	1e 86       	std	Y+14, r1	; 0x0e
					board1.ina219.current_avg = 0;
     586:	1f 86       	std	Y+15, r1	; 0x0f
     588:	18 8a       	std	Y+16, r1	; 0x10
     58a:	19 8a       	std	Y+17, r1	; 0x11
     58c:	1a 8a       	std	Y+18, r1	; 0x12
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
				}
				nextState = ST_SLEEP;
     598:	f0 92 60 04 	sts	0x0460, r15	; 0x800460 <nextState>
				break;
     59c:	20 cf       	rjmp	.-448    	; 0x3de <FSM_run+0x6a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     59e:	8f e9       	ldi	r24, 0x9F	; 159
     5a0:	9f e0       	ldi	r25, 0x0F	; 15
     5a2:	01 97       	sbiw	r24, 0x01	; 1
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
     5a8:	00 00       	nop
			
			case ST_SLEEP:
				_delay_ms(2); // Delay to allow a print to be written over serial before sleep
				enter_powerSave();
     5aa:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <enter_powerSave>
				#ifndef TIMER2
				_delay_ms(1000);
				#endif

				if(board1.lora_joined_err) nextState = ST_NOT_JOINED;
     5ae:	8b 89       	ldd	r24, Y+19	; 0x13
     5b0:	88 23       	and	r24, r24
     5b2:	19 f0       	breq	.+6      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
     5b4:	e0 92 60 04 	sts	0x0460, r14	; 0x800460 <nextState>
     5b8:	12 cf       	rjmp	.-476    	; 0x3de <FSM_run+0x6a>
				else nextState = ST_ACTIVE;
     5ba:	d0 92 60 04 	sts	0x0460, r13	; 0x800460 <nextState>
     5be:	0f cf       	rjmp	.-482    	; 0x3de <FSM_run+0x6a>

000005c0 <__vector_2>:
		}
	}
}

ISR (INT1_vect)          //External interrupt_zero ISR
{
     5c0:	1f 92       	push	r1
     5c2:	0f 92       	push	r0
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	0f 92       	push	r0
     5c8:	11 24       	eor	r1, r1
     5ca:	8f 93       	push	r24
	lora_tx_flag = 1;
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <__data_end>
	//lora_transmit("02025eb9a7165403210876");
}
     5d2:	8f 91       	pop	r24
     5d4:	0f 90       	pop	r0
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	0f 90       	pop	r0
     5da:	1f 90       	pop	r1
     5dc:	18 95       	reti

000005de <__vector_47>:

ISR (USART2_RX_vect){
     5de:	1f 92       	push	r1
     5e0:	0f 92       	push	r0
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	0f 92       	push	r0
     5e6:	11 24       	eor	r1, r1
     5e8:	2f 93       	push	r18
     5ea:	3f 93       	push	r19
     5ec:	4f 93       	push	r20
     5ee:	5f 93       	push	r21
     5f0:	6f 93       	push	r22
     5f2:	7f 93       	push	r23
     5f4:	8f 93       	push	r24
     5f6:	9f 93       	push	r25
     5f8:	af 93       	push	r26
     5fa:	bf 93       	push	r27
     5fc:	ef 93       	push	r30
     5fe:	ff 93       	push	r31
	USART_receiveString2();
     600:	0e 94 95 07 	call	0xf2a	; 0xf2a <USART_receiveString2>
}
     604:	ff 91       	pop	r31
     606:	ef 91       	pop	r30
     608:	bf 91       	pop	r27
     60a:	af 91       	pop	r26
     60c:	9f 91       	pop	r25
     60e:	8f 91       	pop	r24
     610:	7f 91       	pop	r23
     612:	6f 91       	pop	r22
     614:	5f 91       	pop	r21
     616:	4f 91       	pop	r20
     618:	3f 91       	pop	r19
     61a:	2f 91       	pop	r18
     61c:	0f 90       	pop	r0
     61e:	0f be       	out	0x3f, r0	; 63
     620:	0f 90       	pop	r0
     622:	1f 90       	pop	r1
     624:	18 95       	reti

00000626 <__vector_11>:

ISR(TIMER2_OVF_vect){
     626:	1f 92       	push	r1
     628:	0f 92       	push	r0
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	0f 92       	push	r0
     62e:	11 24       	eor	r1, r1
     630:	8f 93       	push	r24
     632:	9f 93       	push	r25
     634:	af 93       	push	r26
     636:	bf 93       	push	r27
	current_time ++;
     638:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <current_time>
     63c:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <current_time+0x1>
     640:	a0 91 95 04 	lds	r26, 0x0495	; 0x800495 <current_time+0x2>
     644:	b0 91 96 04 	lds	r27, 0x0496	; 0x800496 <current_time+0x3>
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	a1 1d       	adc	r26, r1
     64c:	b1 1d       	adc	r27, r1
     64e:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <current_time>
     652:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <current_time+0x1>
     656:	a0 93 95 04 	sts	0x0495, r26	; 0x800495 <current_time+0x2>
     65a:	b0 93 96 04 	sts	0x0496, r27	; 0x800496 <current_time+0x3>
	
	//wake_up_flag = 1;
     65e:	bf 91       	pop	r27
     660:	af 91       	pop	r26
     662:	9f 91       	pop	r25
     664:	8f 91       	pop	r24
     666:	0f 90       	pop	r0
     668:	0f be       	out	0x3f, r0	; 63
     66a:	0f 90       	pop	r0
     66c:	1f 90       	pop	r1
     66e:	18 95       	reti

00000670 <i2c_init>:
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address){
    return i2c_start( address );

}
     670:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     674:	80 e2       	ldi	r24, 0x20	; 32
     676:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     67a:	08 95       	ret

0000067c <i2c_sync>:
     67c:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     680:	88 23       	and	r24, r24
     682:	bc f0       	brlt	.+46     	; 0x6b2 <i2c_sync+0x36>
     684:	24 e6       	ldi	r18, 0x64	; 100
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	ec ed       	ldi	r30, 0xDC	; 220
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	82 e0       	ldi	r24, 0x02	; 2
     68e:	8a 95       	dec	r24
     690:	f1 f7       	brne	.-4      	; 0x68e <i2c_sync+0x12>
     692:	00 c0       	rjmp	.+0      	; 0x694 <i2c_sync+0x18>
     694:	21 50       	subi	r18, 0x01	; 1
     696:	31 09       	sbc	r19, r1
     698:	80 81       	ld	r24, Z
     69a:	88 23       	and	r24, r24
     69c:	24 f0       	brlt	.+8      	; 0x6a6 <i2c_sync+0x2a>
     69e:	21 15       	cp	r18, r1
     6a0:	31 05       	cpc	r19, r1
     6a2:	a1 f7       	brne	.-24     	; 0x68c <i2c_sync+0x10>
     6a4:	03 c0       	rjmp	.+6      	; 0x6ac <i2c_sync+0x30>
     6a6:	21 15       	cp	r18, r1
     6a8:	31 05       	cpc	r19, r1
     6aa:	29 f4       	brne	.+10     	; 0x6b6 <i2c_sync+0x3a>
     6ac:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <i2c_sync+0x3a>
     6b2:	24 e6       	ldi	r18, 0x64	; 100
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	23 2b       	or	r18, r19
     6ba:	09 f4       	brne	.+2      	; 0x6be <i2c_sync+0x42>
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	08 95       	ret

000006c0 <i2c_waitStop>:
     6c0:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     6c4:	84 ff       	sbrs	r24, 4
     6c6:	17 c0       	rjmp	.+46     	; 0x6f6 <i2c_waitStop+0x36>
     6c8:	24 e6       	ldi	r18, 0x64	; 100
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	ec ed       	ldi	r30, 0xDC	; 220
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	8a 95       	dec	r24
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <i2c_waitStop+0x12>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <i2c_waitStop+0x18>
     6d8:	21 50       	subi	r18, 0x01	; 1
     6da:	31 09       	sbc	r19, r1
     6dc:	80 81       	ld	r24, Z
     6de:	84 ff       	sbrs	r24, 4
     6e0:	04 c0       	rjmp	.+8      	; 0x6ea <i2c_waitStop+0x2a>
     6e2:	21 15       	cp	r18, r1
     6e4:	31 05       	cpc	r19, r1
     6e6:	a1 f7       	brne	.-24     	; 0x6d0 <i2c_waitStop+0x10>
     6e8:	03 c0       	rjmp	.+6      	; 0x6f0 <i2c_waitStop+0x30>
     6ea:	21 15       	cp	r18, r1
     6ec:	31 05       	cpc	r19, r1
     6ee:	29 f4       	brne	.+10     	; 0x6fa <i2c_waitStop+0x3a>
     6f0:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <i2c_waitStop+0x3a>
     6f6:	24 e6       	ldi	r18, 0x64	; 100
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	23 2b       	or	r18, r19
     6fe:	09 f4       	brne	.+2      	; 0x702 <i2c_waitStop+0x42>
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	08 95       	ret

00000704 <i2c_start>:
     704:	cf 93       	push	r28
     706:	c8 2f       	mov	r28, r24
     708:	84 ea       	ldi	r24, 0xA4	; 164
     70a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     70e:	0e 94 3e 03 	call	0x67c	; 0x67c <i2c_sync>
     712:	88 23       	and	r24, r24
     714:	e9 f0       	breq	.+58     	; 0x750 <i2c_start+0x4c>
     716:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     71a:	88 7f       	andi	r24, 0xF8	; 248
     71c:	88 30       	cpi	r24, 0x08	; 8
     71e:	11 f0       	breq	.+4      	; 0x724 <i2c_start+0x20>
     720:	80 31       	cpi	r24, 0x10	; 16
     722:	99 f4       	brne	.+38     	; 0x74a <i2c_start+0x46>
     724:	c0 93 db 00 	sts	0x00DB, r28	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
     728:	84 e8       	ldi	r24, 0x84	; 132
     72a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     72e:	0e 94 3e 03 	call	0x67c	; 0x67c <i2c_sync>
     732:	88 23       	and	r24, r24
     734:	69 f0       	breq	.+26     	; 0x750 <i2c_start+0x4c>
     736:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     73a:	98 7f       	andi	r25, 0xF8	; 248
     73c:	98 31       	cpi	r25, 0x18	; 24
     73e:	39 f0       	breq	.+14     	; 0x74e <i2c_start+0x4a>
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 34       	cpi	r25, 0x40	; 64
     744:	29 f4       	brne	.+10     	; 0x750 <i2c_start+0x4c>
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	03 c0       	rjmp	.+6      	; 0x750 <i2c_start+0x4c>
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	01 c0       	rjmp	.+2      	; 0x750 <i2c_start+0x4c>
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <i2c_stop>:
/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void){
    /* send stop condition */
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     754:	84 e9       	ldi	r24, 0x94	; 148
     756:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	
	// wait until stop condition is executed and bus released
	i2c_waitStop(); 
     75a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <i2c_waitStop>
     75e:	08 95       	ret

00000760 <i2c_write>:
*************************************************************************/
unsigned char i2c_write( unsigned char data ){	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR1 = data;
     760:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	TWCR1 = (1<<TWINT) | (1<<TWEN);
     764:	84 e8       	ldi	r24, 0x84	; 132
     766:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

	// wait until transmission completed
	i2c_sync();
     76a:	0e 94 3e 03 	call	0x67c	; 0x67c <i2c_sync>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     76e:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     772:	98 7f       	andi	r25, 0xF8	; 248
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	98 32       	cpi	r25, 0x28	; 40
     778:	09 f4       	brne	.+2      	; 0x77c <i2c_write+0x1c>
     77a:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}
     77c:	08 95       	ret

0000077e <i2c_readAck>:
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void){
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     77e:	84 ec       	ldi	r24, 0xC4	; 196
     780:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	i2c_sync();    
     784:	0e 94 3e 03 	call	0x67c	; 0x67c <i2c_sync>
	return TWDR1;
     788:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
}
     78c:	08 95       	ret

0000078e <i2c_readNak>:
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void){
	TWCR1 = (1<<TWINT) | (1<<TWEN);
     78e:	84 e8       	ldi	r24, 0x84	; 132
     790:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	i2c_sync(); 
     794:	0e 94 3e 03 	call	0x67c	; 0x67c <i2c_sync>
	return TWDR1;
     798:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
}
     79c:	08 95       	ret

0000079e <i2c_read2ByteRegister>:
  
  Input:    device address, register address, buffer for storage
  Return:   0 write successful 
            1 write failed
*************************************************************************/
uint8_t i2c_read2ByteRegister(uint8_t adr, uint8_t regAddr, uint8_t *data){
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	d8 2f       	mov	r29, r24
     7aa:	f6 2e       	mov	r15, r22
     7ac:	8a 01       	movw	r16, r20
	uint8_t error = 0;
	error += i2c_start(adr | I2C_WRITE);
     7ae:	0e 94 82 03 	call	0x704	; 0x704 <i2c_start>
     7b2:	c8 2f       	mov	r28, r24
	error += i2c_write(regAddr);
     7b4:	8f 2d       	mov	r24, r15
     7b6:	0e 94 b0 03 	call	0x760	; 0x760 <i2c_write>
     7ba:	c8 0f       	add	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7bc:	8a e1       	ldi	r24, 0x1A	; 26
     7be:	8a 95       	dec	r24
     7c0:	f1 f7       	brne	.-4      	; 0x7be <i2c_read2ByteRegister+0x20>
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <i2c_read2ByteRegister+0x26>
	_delay_us(10);
	//read data
	error += i2c_start(adr | I2C_READ);
     7c4:	8d 2f       	mov	r24, r29
     7c6:	81 60       	ori	r24, 0x01	; 1
     7c8:	0e 94 82 03 	call	0x704	; 0x704 <i2c_start>
     7cc:	c8 0f       	add	r28, r24
	data[1] = i2c_readAck();
     7ce:	0e 94 bf 03 	call	0x77e	; 0x77e <i2c_readAck>
     7d2:	f8 01       	movw	r30, r16
     7d4:	81 83       	std	Z+1, r24	; 0x01
	data[0] = i2c_readNak();
     7d6:	0e 94 c7 03 	call	0x78e	; 0x78e <i2c_readNak>
     7da:	f8 01       	movw	r30, r16
     7dc:	80 83       	st	Z, r24
	i2c_stop();
     7de:	0e 94 aa 03 	call	0x754	; 0x754 <i2c_stop>
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	c1 11       	cpse	r28, r1
     7e6:	01 c0       	rjmp	.+2      	; 0x7ea <i2c_read2ByteRegister+0x4c>
     7e8:	80 e0       	ldi	r24, 0x00	; 0
	
	if (error) return 1;
	else return 0;
}
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	ff 90       	pop	r15
     7f4:	08 95       	ret

000007f6 <i2c_write2ByteRegister>:
  
  Input:    device address, register address, bytes to be transfered 
  Return:   0 write successful
			1 write failed
*************************************************************************/
uint8_t i2c_write2ByteRegister(uint8_t adr, uint8_t regAddr, uint16_t data){
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	06 2f       	mov	r16, r22
     800:	d4 2f       	mov	r29, r20
     802:	15 2f       	mov	r17, r21
	uint8_t error = 0;
	error += i2c_start(adr | I2C_WRITE);
     804:	0e 94 82 03 	call	0x704	; 0x704 <i2c_start>
     808:	c8 2f       	mov	r28, r24
	error += i2c_write(regAddr);
     80a:	80 2f       	mov	r24, r16
     80c:	0e 94 b0 03 	call	0x760	; 0x760 <i2c_write>
     810:	c8 0f       	add	r28, r24
     812:	8a e1       	ldi	r24, 0x1A	; 26
     814:	8a 95       	dec	r24
     816:	f1 f7       	brne	.-4      	; 0x814 <i2c_write2ByteRegister+0x1e>
     818:	00 c0       	rjmp	.+0      	; 0x81a <i2c_write2ByteRegister+0x24>
	_delay_us(10);
	error += i2c_write((uint8_t)(data >> 8));
     81a:	81 2f       	mov	r24, r17
     81c:	0e 94 b0 03 	call	0x760	; 0x760 <i2c_write>
     820:	c8 0f       	add	r28, r24
	error += i2c_write((uint8_t)(data & 0xFF));
     822:	8d 2f       	mov	r24, r29
     824:	0e 94 b0 03 	call	0x760	; 0x760 <i2c_write>
     828:	c8 0f       	add	r28, r24
	i2c_stop();
     82a:	0e 94 aa 03 	call	0x754	; 0x754 <i2c_stop>
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	c1 11       	cpse	r28, r1
     832:	01 c0       	rjmp	.+2      	; 0x836 <i2c_write2ByteRegister+0x40>
     834:	80 e0       	ldi	r24, 0x00	; 0
	if (error) return 1;
	else return 0;
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	08 95       	ret

00000840 <INA219_setCalibration_16V_400mA>:

uint16_t INA219_readShuntVoltageReg(){ // Not operational
	uint8_t value[2];
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_SHUNTVOLTAGE, value)) return 1;
	return ((value[1] << 8) | value[0]);
}
     840:	cf 93       	push	r28
     842:	40 e8       	ldi	r20, 0x80	; 128
     844:	5a e6       	ldi	r21, 0x6A	; 106
     846:	65 e0       	ldi	r22, 0x05	; 5
     848:	80 e8       	ldi	r24, 0x80	; 128
     84a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <i2c_write2ByteRegister>
     84e:	c8 2f       	mov	r28, r24
     850:	4f e9       	ldi	r20, 0x9F	; 159
     852:	51 e0       	ldi	r21, 0x01	; 1
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	80 e8       	ldi	r24, 0x80	; 128
     858:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <i2c_write2ByteRegister>
     85c:	c8 0f       	add	r28, r24
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	09 f4       	brne	.+2      	; 0x864 <INA219_setCalibration_16V_400mA+0x24>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <INA219_readBusVoltageReg>:
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	00 d0       	rcall	.+0      	; 0x86e <INA219_readBusVoltageReg+0x6>
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
     872:	ae 01       	movw	r20, r28
     874:	4f 5f       	subi	r20, 0xFF	; 255
     876:	5f 4f       	sbci	r21, 0xFF	; 255
     878:	62 e0       	ldi	r22, 0x02	; 2
     87a:	80 e8       	ldi	r24, 0x80	; 128
     87c:	0e 94 cf 03 	call	0x79e	; 0x79e <i2c_read2ByteRegister>
     880:	81 11       	cpse	r24, r1
     882:	11 c0       	rjmp	.+34     	; 0x8a6 <INA219_readBusVoltageReg+0x3e>
     884:	8a 81       	ldd	r24, Y+2	; 0x02
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	98 2f       	mov	r25, r24
     88a:	88 27       	eor	r24, r24
     88c:	29 81       	ldd	r18, Y+1	; 0x01
     88e:	82 2b       	or	r24, r18
     890:	95 95       	asr	r25
     892:	87 95       	ror	r24
     894:	95 95       	asr	r25
     896:	87 95       	ror	r24
     898:	95 95       	asr	r25
     89a:	87 95       	ror	r24
     89c:	81 30       	cpi	r24, 0x01	; 1
     89e:	20 e1       	ldi	r18, 0x10	; 16
     8a0:	92 07       	cpc	r25, r18
     8a2:	30 f0       	brcs	.+12     	; 0x8b0 <INA219_readBusVoltageReg+0x48>
     8a4:	03 c0       	rjmp	.+6      	; 0x8ac <INA219_readBusVoltageReg+0x44>
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <INA219_readBusVoltageReg+0x48>
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	08 95       	ret

000008ba <INA219_readCurrentReg>:
uint16_t INA219_readCurrentReg(){
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <INA219_readCurrentReg+0x6>
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
	uint8_t value[2];
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_CURRENT, value)) return 0;
     8c4:	ae 01       	movw	r20, r28
     8c6:	4f 5f       	subi	r20, 0xFF	; 255
     8c8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ca:	64 e0       	ldi	r22, 0x04	; 4
     8cc:	80 e8       	ldi	r24, 0x80	; 128
     8ce:	0e 94 cf 03 	call	0x79e	; 0x79e <i2c_read2ByteRegister>
     8d2:	81 11       	cpse	r24, r1
     8d4:	0d c0       	rjmp	.+26     	; 0x8f0 <INA219_readCurrentReg+0x36>
	uint16_t total = (value[1] << 8) | value[0];
     8d6:	2a 81       	ldd	r18, Y+2	; 0x02
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	32 2f       	mov	r19, r18
     8dc:	22 27       	eor	r18, r18
     8de:	89 81       	ldd	r24, Y+1	; 0x01
     8e0:	28 2b       	or	r18, r24
	if(total>0x8000) return 0x00;  // Remove possibility of corruption with a bug where total is above 0xFFAE with no connected source.
     8e2:	21 30       	cpi	r18, 0x01	; 1
     8e4:	80 e8       	ldi	r24, 0x80	; 128
     8e6:	38 07       	cpc	r19, r24
     8e8:	30 f4       	brcc	.+12     	; 0x8f6 <INA219_readCurrentReg+0x3c>
	return total;
     8ea:	82 2f       	mov	r24, r18
     8ec:	93 2f       	mov	r25, r19
     8ee:	05 c0       	rjmp	.+10     	; 0x8fa <INA219_readCurrentReg+0x40>
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_SHUNTVOLTAGE, value)) return 1;
	return ((value[1] << 8) | value[0]);
}
uint16_t INA219_readCurrentReg(){
	uint8_t value[2];
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_CURRENT, value)) return 0;
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <INA219_readCurrentReg+0x40>
	uint16_t total = (value[1] << 8) | value[0];
	if(total>0x8000) return 0x00;  // Remove possibility of corruption with a bug where total is above 0xFFAE with no connected source.
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
	return total;
}
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	08 95       	ret

00000904 <INA219_init>:


uint8_t INA219_init(){
	if (INA219_setCalibration_16V_400mA()) {
     904:	0e 94 20 04 	call	0x840	; 0x840 <INA219_setCalibration_16V_400mA>
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	81 11       	cpse	r24, r1
     90c:	01 c0       	rjmp	.+2      	; 0x910 <INA219_init+0xc>
     90e:	90 e0       	ldi	r25, 0x00	; 0
		INA219_readCalibrationReg();
		INA219_readConfigReg();
		#endif
		return 0;
	}
     910:	89 2f       	mov	r24, r25
     912:	08 95       	ret

00000914 <lora_send_command>:
		//printf("Join result: ");
		//err = lora_receive_response();
	//}
	//else printf("Failed sendint join cmd: %02x\n", err);
	////lora_transmit("deadbeef");
}
     914:	0e 94 7e 07 	call	0xefc	; 0xefc <USART_putstring0>
     918:	8d e0       	ldi	r24, 0x0D	; 13
     91a:	0e 94 76 07 	call	0xeec	; 0xeec <USART_transmit0>
     91e:	8a e0       	ldi	r24, 0x0A	; 10
     920:	0e 94 76 07 	call	0xeec	; 0xeec <USART_transmit0>
     924:	08 95       	ret

00000926 <lora_assert_response>:
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	ec 01       	movw	r28, r24
     92c:	42 e0       	ldi	r20, 0x02	; 2
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	6f e4       	ldi	r22, 0x4F	; 79
     932:	72 e0       	ldi	r23, 0x02	; 2
     934:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <strncmp>
     938:	89 2b       	or	r24, r25
     93a:	09 f4       	brne	.+2      	; 0x93e <lora_assert_response+0x18>
     93c:	8f c0       	rjmp	.+286    	; 0xa5c <lora_assert_response+0x136>
     93e:	48 e0       	ldi	r20, 0x08	; 8
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	6f e3       	ldi	r22, 0x3F	; 63
     944:	72 e0       	ldi	r23, 0x02	; 2
     946:	ce 01       	movw	r24, r28
     948:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <strncmp>
     94c:	89 2b       	or	r24, r25
     94e:	09 f4       	brne	.+2      	; 0x952 <lora_assert_response+0x2c>
     950:	87 c0       	rjmp	.+270    	; 0xa60 <lora_assert_response+0x13a>
     952:	49 e0       	ldi	r20, 0x09	; 9
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	68 e4       	ldi	r22, 0x48	; 72
     958:	72 e0       	ldi	r23, 0x02	; 2
     95a:	ce 01       	movw	r24, r28
     95c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <strncmp>
     960:	89 2b       	or	r24, r25
     962:	09 f4       	brne	.+2      	; 0x966 <lora_assert_response+0x40>
     964:	7f c0       	rjmp	.+254    	; 0xa64 <lora_assert_response+0x13e>
     966:	47 e0       	ldi	r20, 0x07	; 7
     968:	50 e0       	ldi	r21, 0x00	; 0
     96a:	62 e5       	ldi	r22, 0x52	; 82
     96c:	72 e0       	ldi	r23, 0x02	; 2
     96e:	ce 01       	movw	r24, r28
     970:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <strncmp>
     974:	89 2b       	or	r24, r25
     976:	39 f4       	brne	.+14     	; 0x986 <lora_assert_response+0x60>
     978:	be 01       	movw	r22, r28
     97a:	89 e9       	ldi	r24, 0x99	; 153
     97c:	94 e0       	ldi	r25, 0x04	; 4
     97e:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <strcpy>
     982:	81 e1       	ldi	r24, 0x11	; 17
     984:	86 c0       	rjmp	.+268    	; 0xa92 <lora_assert_response+0x16c>
     986:	46 e0       	ldi	r20, 0x06	; 6
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	6a e5       	ldi	r22, 0x5A	; 90
     98c:	72 e0       	ldi	r23, 0x02	; 2
     98e:	ce 01       	movw	r24, r28
     990:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <strncmp>
     994:	89 2b       	or	r24, r25
     996:	09 f4       	brne	.+2      	; 0x99a <lora_assert_response+0x74>
     998:	67 c0       	rjmp	.+206    	; 0xa68 <lora_assert_response+0x142>
     99a:	4d e0       	ldi	r20, 0x0D	; 13
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	61 e6       	ldi	r22, 0x61	; 97
     9a0:	72 e0       	ldi	r23, 0x02	; 2
     9a2:	ce 01       	movw	r24, r28
     9a4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <strncmp>
     9a8:	89 2b       	or	r24, r25
     9aa:	09 f4       	brne	.+2      	; 0x9ae <lora_assert_response+0x88>
     9ac:	5f c0       	rjmp	.+190    	; 0xa6c <lora_assert_response+0x146>
     9ae:	4c e0       	ldi	r20, 0x0C	; 12
     9b0:	50 e0       	ldi	r21, 0x00	; 0
     9b2:	6f e6       	ldi	r22, 0x6F	; 111
     9b4:	72 e0       	ldi	r23, 0x02	; 2
     9b6:	ce 01       	movw	r24, r28
     9b8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <strncmp>
     9bc:	89 2b       	or	r24, r25
     9be:	09 f4       	brne	.+2      	; 0x9c2 <lora_assert_response+0x9c>
     9c0:	57 c0       	rjmp	.+174    	; 0xa70 <lora_assert_response+0x14a>
     9c2:	46 e0       	ldi	r20, 0x06	; 6
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	6c e7       	ldi	r22, 0x7C	; 124
     9c8:	72 e0       	ldi	r23, 0x02	; 2
     9ca:	ce 01       	movw	r24, r28
     9cc:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <strncmp>
     9d0:	89 2b       	or	r24, r25
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <lora_assert_response+0xb0>
     9d4:	4f c0       	rjmp	.+158    	; 0xa74 <lora_assert_response+0x14e>
     9d6:	44 e0       	ldi	r20, 0x04	; 4
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	63 e8       	ldi	r22, 0x83	; 131
     9dc:	72 e0       	ldi	r23, 0x02	; 2
     9de:	ce 01       	movw	r24, r28
     9e0:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <strncmp>
     9e4:	89 2b       	or	r24, r25
     9e6:	09 f4       	brne	.+2      	; 0x9ea <lora_assert_response+0xc4>
     9e8:	47 c0       	rjmp	.+142    	; 0xa78 <lora_assert_response+0x152>
     9ea:	4a e0       	ldi	r20, 0x0A	; 10
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	68 e8       	ldi	r22, 0x88	; 136
     9f0:	72 e0       	ldi	r23, 0x02	; 2
     9f2:	ce 01       	movw	r24, r28
     9f4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <strncmp>
     9f8:	89 2b       	or	r24, r25
     9fa:	09 f4       	brne	.+2      	; 0x9fe <lora_assert_response+0xd8>
     9fc:	3f c0       	rjmp	.+126    	; 0xa7c <lora_assert_response+0x156>
     9fe:	4d e0       	ldi	r20, 0x0D	; 13
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	63 e9       	ldi	r22, 0x93	; 147
     a04:	72 e0       	ldi	r23, 0x02	; 2
     a06:	ce 01       	movw	r24, r28
     a08:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <strncmp>
     a0c:	89 2b       	or	r24, r25
     a0e:	c1 f1       	breq	.+112    	; 0xa80 <lora_assert_response+0x15a>
     a10:	4a e0       	ldi	r20, 0x0A	; 10
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	61 ea       	ldi	r22, 0xA1	; 161
     a16:	72 e0       	ldi	r23, 0x02	; 2
     a18:	ce 01       	movw	r24, r28
     a1a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <strncmp>
     a1e:	89 2b       	or	r24, r25
     a20:	89 f1       	breq	.+98     	; 0xa84 <lora_assert_response+0x15e>
     a22:	4f e1       	ldi	r20, 0x1F	; 31
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	6c ea       	ldi	r22, 0xAC	; 172
     a28:	72 e0       	ldi	r23, 0x02	; 2
     a2a:	ce 01       	movw	r24, r28
     a2c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <strncmp>
     a30:	89 2b       	or	r24, r25
     a32:	51 f1       	breq	.+84     	; 0xa88 <lora_assert_response+0x162>
     a34:	40 e1       	ldi	r20, 0x10	; 16
     a36:	50 e0       	ldi	r21, 0x00	; 0
     a38:	6c ec       	ldi	r22, 0xCC	; 204
     a3a:	72 e0       	ldi	r23, 0x02	; 2
     a3c:	ce 01       	movw	r24, r28
     a3e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <strncmp>
     a42:	89 2b       	or	r24, r25
     a44:	19 f1       	breq	.+70     	; 0xa8c <lora_assert_response+0x166>
     a46:	47 e0       	ldi	r20, 0x07	; 7
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	6d ed       	ldi	r22, 0xDD	; 221
     a4c:	72 e0       	ldi	r23, 0x02	; 2
     a4e:	ce 01       	movw	r24, r28
     a50:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <strncmp>
     a54:	89 2b       	or	r24, r25
     a56:	e1 f0       	breq	.+56     	; 0xa90 <lora_assert_response+0x16a>
     a58:	8a ea       	ldi	r24, 0xAA	; 170
     a5a:	1b c0       	rjmp	.+54     	; 0xa92 <lora_assert_response+0x16c>
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	19 c0       	rjmp	.+50     	; 0xa92 <lora_assert_response+0x16c>
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	17 c0       	rjmp	.+46     	; 0xa92 <lora_assert_response+0x16c>
     a64:	80 e1       	ldi	r24, 0x10	; 16
     a66:	15 c0       	rjmp	.+42     	; 0xa92 <lora_assert_response+0x16c>
     a68:	8a e0       	ldi	r24, 0x0A	; 10
     a6a:	13 c0       	rjmp	.+38     	; 0xa92 <lora_assert_response+0x16c>
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	11 c0       	rjmp	.+34     	; 0xa92 <lora_assert_response+0x16c>
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	0f c0       	rjmp	.+30     	; 0xa92 <lora_assert_response+0x16c>
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	0d c0       	rjmp	.+26     	; 0xa92 <lora_assert_response+0x16c>
     a78:	84 e0       	ldi	r24, 0x04	; 4
     a7a:	0b c0       	rjmp	.+22     	; 0xa92 <lora_assert_response+0x16c>
     a7c:	85 e0       	ldi	r24, 0x05	; 5
     a7e:	09 c0       	rjmp	.+18     	; 0xa92 <lora_assert_response+0x16c>
     a80:	86 e0       	ldi	r24, 0x06	; 6
     a82:	07 c0       	rjmp	.+14     	; 0xa92 <lora_assert_response+0x16c>
     a84:	87 e0       	ldi	r24, 0x07	; 7
     a86:	05 c0       	rjmp	.+10     	; 0xa92 <lora_assert_response+0x16c>
     a88:	88 e0       	ldi	r24, 0x08	; 8
     a8a:	03 c0       	rjmp	.+6      	; 0xa92 <lora_assert_response+0x16c>
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <lora_assert_response+0x16c>
     a90:	8d e0       	ldi	r24, 0x0D	; 13
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <lora_receive_response>:
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
     aa8:	ca 5f       	subi	r28, 0xFA	; 250
     aaa:	d1 09       	sbc	r29, r1
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	ce 01       	movw	r24, r28
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	7c 01       	movw	r14, r24
     abc:	00 e0       	ldi	r16, 0x00	; 0
     abe:	10 e0       	ldi	r17, 0x00	; 0
     ac0:	0e 94 6e 07 	call	0xedc	; 0xedc <USART_receive0>
     ac4:	8d 30       	cpi	r24, 0x0D	; 13
     ac6:	71 f4       	brne	.+28     	; 0xae4 <lora_receive_response+0x4c>
     ac8:	0e 94 6e 07 	call	0xedc	; 0xedc <USART_receive0>
     acc:	e1 e0       	ldi	r30, 0x01	; 1
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	ec 0f       	add	r30, r28
     ad2:	fd 1f       	adc	r31, r29
     ad4:	e0 0f       	add	r30, r16
     ad6:	f1 1f       	adc	r31, r17
     ad8:	10 82       	st	Z, r1
     ada:	ce 01       	movw	r24, r28
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	0e 94 93 04 	call	0x926	; 0x926 <lora_assert_response>
     ae2:	06 c0       	rjmp	.+12     	; 0xaf0 <lora_receive_response+0x58>
     ae4:	f7 01       	movw	r30, r14
     ae6:	81 93       	st	Z+, r24
     ae8:	7f 01       	movw	r14, r30
     aea:	0f 5f       	subi	r16, 0xFF	; 255
     aec:	1f 4f       	sbci	r17, 0xFF	; 255
     aee:	e8 cf       	rjmp	.-48     	; 0xac0 <lora_receive_response+0x28>
     af0:	c6 50       	subi	r28, 0x06	; 6
     af2:	df 4f       	sbci	r29, 0xFF	; 255
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	cd bf       	out	0x3d, r28	; 61
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	08 95       	ret

00000b0c <lora_join_OTAA>:
     b0c:	8f ee       	ldi	r24, 0xEF	; 239
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	0e 94 8a 04 	call	0x914	; 0x914 <lora_send_command>
     b14:	0e 94 4c 05 	call	0xa98	; 0xa98 <lora_receive_response>
     b18:	81 11       	cpse	r24, r1
     b1a:	05 c0       	rjmp	.+10     	; 0xb26 <lora_join_OTAA+0x1a>
     b1c:	0e 94 4c 05 	call	0xa98	; 0xa98 <lora_receive_response>
     b20:	81 11       	cpse	r24, r1
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <lora_join_OTAA+0x1e>
     b24:	08 95       	ret
     b26:	82 e2       	ldi	r24, 0x22	; 34
     b28:	08 95       	ret
     b2a:	83 e2       	ldi	r24, 0x23	; 35
     b2c:	08 95       	ret

00000b2e <lora_init>:



uint8_t lora_init(uint8_t *joined_err){
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	e2 97       	sbiw	r28, 0x32	; 50
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	7c 01       	movw	r14, r24

static uint8_t lora_set_dcycle(void);
static uint8_t lora_save_settings(void);

void lora_auto_baud_detect(void){
	DDRD |= (1<<PORTD1);
     b4c:	51 9a       	sbi	0x0a, 1	; 10
	PORTD &= ~(1<<PORTD1);
     b4e:	59 98       	cbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b50:	8f e1       	ldi	r24, 0x1F	; 31
     b52:	9e e4       	ldi	r25, 0x4E	; 78
     b54:	01 97       	sbiw	r24, 0x01	; 1
     b56:	f1 f7       	brne	.-4      	; 0xb54 <lora_init+0x26>
     b58:	00 c0       	rjmp	.+0      	; 0xb5a <lora_init+0x2c>
     b5a:	00 00       	nop
	_delay_ms(10);
	DDRD = 0x00;
     b5c:	1a b8       	out	0x0a, r1	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b5e:	9a e1       	ldi	r25, 0x1A	; 26
     b60:	9a 95       	dec	r25
     b62:	f1 f7       	brne	.-4      	; 0xb60 <lora_init+0x32>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <lora_init+0x38>
	_delay_us(10);
	USART_init();
     b66:	0e 94 4e 07 	call	0xe9c	; 0xe9c <USART_init>
	USART_transmit0(0x55);
     b6a:	85 e5       	ldi	r24, 0x55	; 85
     b6c:	0e 94 76 07 	call	0xeec	; 0xeec <USART_transmit0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b70:	af ef       	ldi	r26, 0xFF	; 255
     b72:	b0 e7       	ldi	r27, 0x70	; 112
     b74:	e2 e0       	ldi	r30, 0x02	; 2
     b76:	a1 50       	subi	r26, 0x01	; 1
     b78:	b0 40       	sbci	r27, 0x00	; 0
     b7a:	e0 40       	sbci	r30, 0x00	; 0
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <lora_init+0x48>
     b7e:	00 c0       	rjmp	.+0      	; 0xb80 <lora_init+0x52>
     b80:	00 00       	nop

uint8_t lora_reset_to_band(){

	char cmd[20];
	#ifdef LORA_BAND
		sprintf(cmd, "mac reset %d", LORA_BAND);
     b82:	83 e0       	ldi	r24, 0x03	; 3
     b84:	8f 93       	push	r24
     b86:	84 e6       	ldi	r24, 0x64	; 100
     b88:	8f 93       	push	r24
     b8a:	83 e3       	ldi	r24, 0x33	; 51
     b8c:	93 e0       	ldi	r25, 0x03	; 3
     b8e:	9f 93       	push	r25
     b90:	8f 93       	push	r24
     b92:	8e 01       	movw	r16, r28
     b94:	0f 5f       	subi	r16, 0xFF	; 255
     b96:	1f 4f       	sbci	r17, 0xFF	; 255
     b98:	1f 93       	push	r17
     b9a:	0f 93       	push	r16
     b9c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <sprintf>
	#endif
	
	#ifdef DEBUG_M
		printf("%s: ",cmd);
	#endif
	lora_send_command(cmd);
     ba0:	c8 01       	movw	r24, r16
     ba2:	0e 94 8a 04 	call	0x914	; 0x914 <lora_send_command>
	return lora_receive_response();
     ba6:	0e 94 4c 05 	call	0xa98	; 0xa98 <lora_receive_response>
	#endif	
	


	err = lora_reset_to_band();
	if (err) return 1;
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	81 11       	cpse	r24, r1
     bb8:	bc c0       	rjmp	.+376    	; 0xd32 <lora_init+0x204>
	#ifdef DEBUG_M
		printf("Set ADR: ");
	#endif
	
	#ifdef LORA_ADR
		lora_send_command("mac set adr on");
     bba:	80 e4       	ldi	r24, 0x40	; 64
     bbc:	93 e0       	ldi	r25, 0x03	; 3
     bbe:	0e 94 8a 04 	call	0x914	; 0x914 <lora_send_command>
	#else
		lora_send_command("mac set adr off");
	#endif
	return lora_receive_response();
     bc2:	0e 94 4c 05 	call	0xa98	; 0xa98 <lora_receive_response>
	err = lora_reset_to_band();
	if (err) return 1;
	
		
	err = lora_set_adr() ;
	if (err) return 2;
     bc6:	81 11       	cpse	r24, r1
     bc8:	b6 c0       	rjmp	.+364    	; 0xd36 <lora_init+0x208>
	return lora_receive_response();
}
uint8_t lora_set_dr(){

	char cmd[20];
	sprintf(cmd, "mac set dr %d",LORA_DR);
     bca:	1f 92       	push	r1
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	8f 93       	push	r24
     bd0:	8f e4       	ldi	r24, 0x4F	; 79
     bd2:	93 e0       	ldi	r25, 0x03	; 3
     bd4:	9f 93       	push	r25
     bd6:	8f 93       	push	r24
     bd8:	1f 93       	push	r17
     bda:	0f 93       	push	r16
     bdc:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <sprintf>
	
	#ifdef DEBUG_M
		printf("%s: ",cmd);
	#endif
	lora_send_command(cmd);
     be0:	c8 01       	movw	r24, r16
     be2:	0e 94 8a 04 	call	0x914	; 0x914 <lora_send_command>
	return lora_receive_response();
     be6:	0e 94 4c 05 	call	0xa98	; 0xa98 <lora_receive_response>
	err = lora_set_adr() ;
	if (err) return 2;
	
		
	err = lora_set_dr();
	if (err) return 3;
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	81 11       	cpse	r24, r1
     bf8:	a0 c0       	rjmp	.+320    	; 0xd3a <lora_init+0x20c>
}
uint8_t lora_set_pwridx(){
	
	char cmd[20];
	#ifdef LORA_PWRIDX
	sprintf(cmd, "mac set pwridx %d",LORA_PWRIDX);
     bfa:	1f 92       	push	r1
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	8f 93       	push	r24
     c00:	8d e5       	ldi	r24, 0x5D	; 93
     c02:	93 e0       	ldi	r25, 0x03	; 3
     c04:	9f 93       	push	r25
     c06:	8f 93       	push	r24
     c08:	1f 93       	push	r17
     c0a:	0f 93       	push	r16
     c0c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <sprintf>
	#endif
	#ifdef DEBUG_M
		printf("%s: ",cmd);
	#endif
	lora_send_command(cmd);
     c10:	c8 01       	movw	r24, r16
     c12:	0e 94 8a 04 	call	0x914	; 0x914 <lora_send_command>
	return lora_receive_response();
     c16:	0e 94 4c 05 	call	0xa98	; 0xa98 <lora_receive_response>
	err = lora_set_dr();
	if (err) return 3;
	
	
	err = lora_set_pwridx();
	if (err) return 4;
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	81 11       	cpse	r24, r1
     c28:	8a c0       	rjmp	.+276    	; 0xd3e <lora_init+0x210>
uint8_t lora_set_dcycle(void){
	uint8_t err;
	#ifdef DEBUG_M
		printf("Setting dcycle for ch 0: ");
	#endif
	lora_send_command("mac set ch dcycle 0 9");
     c2a:	8f e6       	ldi	r24, 0x6F	; 111
     c2c:	93 e0       	ldi	r25, 0x03	; 3
     c2e:	0e 94 8a 04 	call	0x914	; 0x914 <lora_send_command>
	err = lora_receive_response();
     c32:	0e 94 4c 05 	call	0xa98	; 0xa98 <lora_receive_response>
	if (err) return 0xB1;
     c36:	81 11       	cpse	r24, r1
     c38:	0e c0       	rjmp	.+28     	; 0xc56 <lora_init+0x128>
	
	#ifdef DEBUG_M
	printf("Setting dcycle for ch 1: ");
	#endif
	lora_send_command("mac set ch dcycle 1 9");
     c3a:	85 e8       	ldi	r24, 0x85	; 133
     c3c:	93 e0       	ldi	r25, 0x03	; 3
     c3e:	0e 94 8a 04 	call	0x914	; 0x914 <lora_send_command>
	err = lora_receive_response();
     c42:	0e 94 4c 05 	call	0xa98	; 0xa98 <lora_receive_response>
	if (err) return 0xB2;
     c46:	81 11       	cpse	r24, r1
     c48:	06 c0       	rjmp	.+12     	; 0xc56 <lora_init+0x128>
	
	#ifdef DEBUG_M
	printf("Setting dcycle for ch 2: ");
	#endif
	lora_send_command("mac set ch dcycle 2 9");
     c4a:	8b e9       	ldi	r24, 0x9B	; 155
     c4c:	93 e0       	ldi	r25, 0x03	; 3
     c4e:	0e 94 8a 04 	call	0x914	; 0x914 <lora_send_command>
	err = lora_receive_response();
     c52:	0e 94 4c 05 	call	0xa98	; 0xa98 <lora_receive_response>
#endif

uint8_t lora_set_deveui(){

	
	char cmd[50] = "mac set deveui ";
     c56:	80 e1       	ldi	r24, 0x10	; 16
     c58:	e4 e1       	ldi	r30, 0x14	; 20
     c5a:	f1 e0       	ldi	r31, 0x01	; 1
     c5c:	de 01       	movw	r26, r28
     c5e:	11 96       	adiw	r26, 0x01	; 1
     c60:	01 90       	ld	r0, Z+
     c62:	0d 92       	st	X+, r0
     c64:	8a 95       	dec	r24
     c66:	e1 f7       	brne	.-8      	; 0xc60 <lora_init+0x132>
     c68:	fe 01       	movw	r30, r28
     c6a:	71 96       	adiw	r30, 0x11	; 17
     c6c:	82 e2       	ldi	r24, 0x22	; 34
     c6e:	df 01       	movw	r26, r30
     c70:	1d 92       	st	X+, r1
     c72:	8a 95       	dec	r24
     c74:	e9 f7       	brne	.-6      	; 0xc70 <lora_init+0x142>
	strcat(cmd, devEui);
     c76:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <devEui>
     c7a:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <devEui+0x1>
     c7e:	ce 01       	movw	r24, r28
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <strcat>
	
	#ifdef DEBUG_M
		printf("%s:  ", cmd);
	#endif
	lora_send_command(cmd);
     c86:	ce 01       	movw	r24, r28
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	0e 94 8a 04 	call	0x914	; 0x914 <lora_send_command>
	return lora_receive_response();
     c8e:	0e 94 4c 05 	call	0xa98	; 0xa98 <lora_receive_response>
		puts("Loading OTAA settings...");
	#endif
	uint8_t err = 0;
	
	err = lora_set_deveui();
	if (err) return 7;
     c92:	81 11       	cpse	r24, r1
     c94:	56 c0       	rjmp	.+172    	; 0xd42 <lora_init+0x214>
uint8_t lora_set_appeui(){
	#ifdef DEBUG_M
		printf("Set appeui: ");
	#endif	
	
	char cmd[50] = "mac set appeui ";
     c96:	80 e1       	ldi	r24, 0x10	; 16
     c98:	e6 e4       	ldi	r30, 0x46	; 70
     c9a:	f1 e0       	ldi	r31, 0x01	; 1
     c9c:	de 01       	movw	r26, r28
     c9e:	11 96       	adiw	r26, 0x01	; 1
     ca0:	01 90       	ld	r0, Z+
     ca2:	0d 92       	st	X+, r0
     ca4:	8a 95       	dec	r24
     ca6:	e1 f7       	brne	.-8      	; 0xca0 <lora_init+0x172>
     ca8:	fe 01       	movw	r30, r28
     caa:	71 96       	adiw	r30, 0x11	; 17
     cac:	82 e2       	ldi	r24, 0x22	; 34
     cae:	df 01       	movw	r26, r30
     cb0:	1d 92       	st	X+, r1
     cb2:	8a 95       	dec	r24
     cb4:	e9 f7       	brne	.-6      	; 0xcb0 <lora_init+0x182>
 	strcat(cmd, appEui);
     cb6:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <appEui>
     cba:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <appEui+0x1>
     cbe:	ce 01       	movw	r24, r28
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <strcat>
 	lora_send_command(cmd);
     cc6:	ce 01       	movw	r24, r28
     cc8:	01 96       	adiw	r24, 0x01	; 1
     cca:	0e 94 8a 04 	call	0x914	; 0x914 <lora_send_command>
	return lora_receive_response();
     cce:	0e 94 4c 05 	call	0xa98	; 0xa98 <lora_receive_response>
	
	err = lora_set_deveui();
	if (err) return 7;
		
	err = lora_set_appeui();
	if (err) return 8;
     cd2:	81 11       	cpse	r24, r1
     cd4:	36 c0       	rjmp	.+108    	; 0xd42 <lora_init+0x214>
 	strcat(cmd, appEui);
 	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_set_appkey(){
	char cmd[50] = "mac set appkey ";
     cd6:	80 e1       	ldi	r24, 0x10	; 16
     cd8:	e8 e7       	ldi	r30, 0x78	; 120
     cda:	f1 e0       	ldi	r31, 0x01	; 1
     cdc:	de 01       	movw	r26, r28
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	01 90       	ld	r0, Z+
     ce2:	0d 92       	st	X+, r0
     ce4:	8a 95       	dec	r24
     ce6:	e1 f7       	brne	.-8      	; 0xce0 <lora_init+0x1b2>
     ce8:	fe 01       	movw	r30, r28
     cea:	71 96       	adiw	r30, 0x11	; 17
     cec:	82 e2       	ldi	r24, 0x22	; 34
     cee:	df 01       	movw	r26, r30
     cf0:	1d 92       	st	X+, r1
     cf2:	8a 95       	dec	r24
     cf4:	e9 f7       	brne	.-6      	; 0xcf0 <lora_init+0x1c2>
	strcat(cmd, appKey);
     cf6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     cfa:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     cfe:	ce 01       	movw	r24, r28
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <strcat>
	#ifdef DEBUG_M
		printf("mac set appkey ****: ");
	#endif
	lora_send_command(cmd);
     d06:	ce 01       	movw	r24, r28
     d08:	01 96       	adiw	r24, 0x01	; 1
     d0a:	0e 94 8a 04 	call	0x914	; 0x914 <lora_send_command>
	return lora_receive_response();
     d0e:	0e 94 4c 05 	call	0xa98	; 0xa98 <lora_receive_response>
		
	err = lora_set_appeui();
	if (err) return 8;
			
	err = lora_set_appkey();
	if (err) return 9;
     d12:	81 11       	cpse	r24, r1
     d14:	16 c0       	rjmp	.+44     	; 0xd42 <lora_init+0x214>
uint8_t lora_save_settings(){
	#ifdef DEBUG_M
		printf("Save settings: ");
	#endif
	
	lora_send_command("mac save");
     d16:	81 eb       	ldi	r24, 0xB1	; 177
     d18:	93 e0       	ldi	r25, 0x03	; 3
     d1a:	0e 94 8a 04 	call	0x914	; 0x914 <lora_send_command>
	return lora_receive_response();
     d1e:	0e 94 4c 05 	call	0xa98	; 0xa98 <lora_receive_response>
     d22:	18 2f       	mov	r17, r24
			
	err = lora_set_appkey();
	if (err) return 9;

	err = lora_save_settings();
	if (err) return 10;
     d24:	81 11       	cpse	r24, r1
     d26:	0d c0       	rjmp	.+26     	; 0xd42 <lora_init+0x214>
	
	*joined_err = lora_join_OTAA();
     d28:	0e 94 86 05 	call	0xb0c	; 0xb0c <lora_join_OTAA>
     d2c:	f7 01       	movw	r30, r14
     d2e:	80 83       	st	Z, r24
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <lora_init+0x216>
	#endif	
	


	err = lora_reset_to_band();
	if (err) return 1;
     d32:	11 e0       	ldi	r17, 0x01	; 1
     d34:	07 c0       	rjmp	.+14     	; 0xd44 <lora_init+0x216>
	
		
	err = lora_set_adr() ;
	if (err) return 2;
     d36:	12 e0       	ldi	r17, 0x02	; 2
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <lora_init+0x216>
	
		
	err = lora_set_dr();
	if (err) return 3;
     d3a:	13 e0       	ldi	r17, 0x03	; 3
     d3c:	03 c0       	rjmp	.+6      	; 0xd44 <lora_init+0x216>
	
	
	err = lora_set_pwridx();
	if (err) return 4;
     d3e:	14 e0       	ldi	r17, 0x04	; 4
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <lora_init+0x216>
	lora_set_dcycle();
// 	lora_send_command("mac set ch dcycle 0 9");
// 	lora_receive_response();
	#ifdef OTAA
		err = lora_set_OTAA_settings(joined_err);
		if (err) return 5;	
     d42:	15 e0       	ldi	r17, 0x05	; 5
	puts("Init success");
	#endif
	
	return 0;

}
     d44:	81 2f       	mov	r24, r17
     d46:	e2 96       	adiw	r28, 0x32	; 50
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	ff 90       	pop	r15
     d5c:	ef 90       	pop	r14
     d5e:	08 95       	ret

00000d60 <lora_assert_downlink>:


void lora_assert_downlink(){
	uint32_t ts = 0;
	uint16_t sample_size_new;
	size_t str_len = strlen(downlink);
     d60:	e9 e9       	ldi	r30, 0x99	; 153
     d62:	f4 e0       	ldi	r31, 0x04	; 4
     d64:	01 90       	ld	r0, Z+
     d66:	00 20       	and	r0, r0
     d68:	e9 f7       	brne	.-6      	; 0xd64 <lora_assert_downlink+0x4>
     d6a:	31 97       	sbiw	r30, 0x01	; 1
     d6c:	bf 01       	movw	r22, r30
     d6e:	69 59       	subi	r22, 0x99	; 153
     d70:	74 40       	sbci	r23, 0x04	; 4
	//printf("len %d\n", str_len);
	if (str_len > 28) ascii_hex_decode(downlink, str_len, downlink_pairs, LORA_RX_PAYLOAD_OFFSET);
     d72:	6d 31       	cpi	r22, 0x1D	; 29
     d74:	71 05       	cpc	r23, r1
     d76:	48 f0       	brcs	.+18     	; 0xd8a <lora_assert_downlink+0x2a>
     d78:	29 e0       	ldi	r18, 0x09	; 9
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	4d ef       	ldi	r20, 0xFD	; 253
     d7e:	54 e0       	ldi	r21, 0x04	; 4
     d80:	89 e9       	ldi	r24, 0x99	; 153
     d82:	94 e0       	ldi	r25, 0x04	; 4
     d84:	0e 94 ee 07 	call	0xfdc	; 0xfdc <ascii_hex_decode>
     d88:	08 c0       	rjmp	.+16     	; 0xd9a <lora_assert_downlink+0x3a>
	else hex_decode(downlink, str_len, downlink_pairs, LORA_RX_PAYLOAD_OFFSET);
     d8a:	29 e0       	ldi	r18, 0x09	; 9
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	4d ef       	ldi	r20, 0xFD	; 253
     d90:	54 e0       	ldi	r21, 0x04	; 4
     d92:	89 e9       	ldi	r24, 0x99	; 153
     d94:	94 e0       	ldi	r25, 0x04	; 4
     d96:	0e 94 65 08 	call	0x10ca	; 0x10ca <hex_decode>
	//printf("pairs: %02x %02x %02x %02x %02x\n", downlink_pairs[0], downlink_pairs[1], downlink_pairs[2], downlink_pairs[3], downlink_pairs[4]);
	switch (downlink_pairs[0]){
     d9a:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <downlink_pairs>
     d9e:	80 3b       	cpi	r24, 0xB0	; 176
     da0:	e1 f0       	breq	.+56     	; 0xdda <lora_assert_downlink+0x7a>
     da2:	80 3c       	cpi	r24, 0xC0	; 192
     da4:	39 f1       	breq	.+78     	; 0xdf4 <lora_assert_downlink+0x94>
     da6:	8a 30       	cpi	r24, 0x0A	; 10
     da8:	39 f5       	brne	.+78     	; 0xdf8 <lora_assert_downlink+0x98>
		case 0x0a:
			ts = (uint32_t)downlink_pairs[4] | ((uint32_t)downlink_pairs[3] << 8) | ((uint32_t)downlink_pairs[2] << 16) | ((uint32_t)downlink_pairs[1] << 24);
     daa:	ed ef       	ldi	r30, 0xFD	; 253
     dac:	f4 e0       	ldi	r31, 0x04	; 4
     dae:	23 81       	ldd	r18, Z+3	; 0x03
     db0:	82 81       	ldd	r24, Z+2	; 0x02
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	a0 e0       	ldi	r26, 0x00	; 0
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	dc 01       	movw	r26, r24
     dba:	99 27       	eor	r25, r25
     dbc:	88 27       	eor	r24, r24
     dbe:	92 2b       	or	r25, r18
     dc0:	24 81       	ldd	r18, Z+4	; 0x04
     dc2:	82 2b       	or	r24, r18
     dc4:	21 81       	ldd	r18, Z+1	; 0x01
     dc6:	b2 2b       	or	r27, r18
			current_time = ts;
     dc8:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <current_time>
     dcc:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <current_time+0x1>
     dd0:	a0 93 95 04 	sts	0x0495, r26	; 0x800495 <current_time+0x2>
     dd4:	b0 93 96 04 	sts	0x0496, r27	; 0x800496 <current_time+0x3>
			break;
     dd8:	08 95       	ret
		case 0xb0:
			
			sample_size_new = (uint16_t)downlink_pairs[2] | ((uint16_t)downlink_pairs[1] << 8);
     dda:	ed ef       	ldi	r30, 0xFD	; 253
     ddc:	f4 e0       	ldi	r31, 0x04	; 4
			sample_size = sample_size_new;
     dde:	81 81       	ldd	r24, Z+1	; 0x01
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	98 2f       	mov	r25, r24
     de4:	88 27       	eor	r24, r24
     de6:	22 81       	ldd	r18, Z+2	; 0x02
     de8:	82 2b       	or	r24, r18
     dea:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <sample_size+0x1>
     dee:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <sample_size>
			//printf("Transfer rate change with new: %u\n", sample_size);
			break;
     df2:	08 95       	ret
			
		case 0xc0:
			FSM_system_reset();
     df4:	0e 94 af 01 	call	0x35e	; 0x35e <FSM_system_reset>
     df8:	08 95       	ret

00000dfa <lora_transmit>:
	#endif
	
	return 0;

}
void lora_transmit(const char *payload){
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	c4 56       	subi	r28, 0x64	; 100
     e04:	d1 09       	sbc	r29, r1
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	bc 01       	movw	r22, r24
	uint8_t err;
	char buf[100] = "mac tx uncnf 3 ";
     e12:	90 e1       	ldi	r25, 0x10	; 16
     e14:	ea ea       	ldi	r30, 0xAA	; 170
     e16:	f1 e0       	ldi	r31, 0x01	; 1
     e18:	de 01       	movw	r26, r28
     e1a:	11 96       	adiw	r26, 0x01	; 1
     e1c:	01 90       	ld	r0, Z+
     e1e:	0d 92       	st	X+, r0
     e20:	9a 95       	dec	r25
     e22:	e1 f7       	brne	.-8      	; 0xe1c <lora_transmit+0x22>
     e24:	fe 01       	movw	r30, r28
     e26:	71 96       	adiw	r30, 0x11	; 17
     e28:	84 e5       	ldi	r24, 0x54	; 84
     e2a:	df 01       	movw	r26, r30
     e2c:	1d 92       	st	X+, r1
     e2e:	8a 95       	dec	r24
     e30:	e9 f7       	brne	.-6      	; 0xe2c <lora_transmit+0x32>
	strcat(buf, payload);
     e32:	ce 01       	movw	r24, r28
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <strcat>

	lora_send_command(buf);
     e3a:	ce 01       	movw	r24, r28
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	0e 94 8a 04 	call	0x914	; 0x914 <lora_send_command>
	err = lora_receive_response();
     e42:	0e 94 4c 05 	call	0xa98	; 0xa98 <lora_receive_response>
	if (!err){
     e46:	81 11       	cpse	r24, r1
     e48:	08 c0       	rjmp	.+16     	; 0xe5a <lora_transmit+0x60>
		clear_bit(LEDS,LED3);
     e4a:	2a 98       	cbi	0x05, 2	; 5
		err = lora_receive_response();
     e4c:	0e 94 4c 05 	call	0xa98	; 0xa98 <lora_receive_response>
		if(err == RESP_MAC_RX_INC){
     e50:	81 31       	cpi	r24, 0x11	; 17
     e52:	21 f4       	brne	.+8      	; 0xe5c <lora_transmit+0x62>
			lora_assert_downlink();
     e54:	0e 94 b0 06 	call	0xd60	; 0xd60 <lora_assert_downlink>
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <lora_transmit+0x62>
		}
	}
	else set_bit(LEDS,LED3);
     e5a:	2a 9a       	sbi	0x05, 2	; 5
}
     e5c:	cc 59       	subi	r28, 0x9C	; 156
     e5e:	df 4f       	sbci	r29, 0xFF	; 255
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	08 95       	ret

00000e70 <USART_transmit2>:
	for(; *string; ++string){
		USART_transmit2(*string);
	}
	//USART_transmit2(0x0D);
	USART_transmit2(0x0A);
}
     e70:	e0 ed       	ldi	r30, 0xD0	; 208
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	90 81       	ld	r25, Z
     e76:	95 ff       	sbrs	r25, 5
     e78:	fd cf       	rjmp	.-6      	; 0xe74 <USART_transmit2+0x4>
     e7a:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
     e7e:	08 95       	ret

00000e80 <USART_TRANSMIT_printf>:
     e80:	cf 93       	push	r28
     e82:	c8 2f       	mov	r28, r24
     e84:	8a 30       	cpi	r24, 0x0A	; 10
     e86:	19 f4       	brne	.+6      	; 0xe8e <USART_TRANSMIT_printf+0xe>
     e88:	8d e0       	ldi	r24, 0x0D	; 13
     e8a:	0e 94 38 07 	call	0xe70	; 0xe70 <USART_transmit2>
     e8e:	8c 2f       	mov	r24, r28
     e90:	0e 94 38 07 	call	0xe70	; 0xe70 <USART_transmit2>
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	cf 91       	pop	r28
     e9a:	08 95       	ret

00000e9c <USART_init>:
     e9c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     ea0:	93 e3       	ldi	r25, 0x33	; 51
     ea2:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     ea6:	88 e1       	ldi	r24, 0x18	; 24
     ea8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     eac:	e2 ec       	ldi	r30, 0xC2	; 194
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	86 60       	ori	r24, 0x06	; 6
     eb4:	80 83       	st	Z, r24
     eb6:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7e00d5>
     eba:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7e00d4>
     ebe:	88 e9       	ldi	r24, 0x98	; 152
     ec0:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
     ec4:	e2 ed       	ldi	r30, 0xD2	; 210
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	86 60       	ori	r24, 0x06	; 6
     ecc:	80 83       	st	Z, r24
     ece:	86 e0       	ldi	r24, 0x06	; 6
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	90 93 66 05 	sts	0x0566, r25	; 0x800566 <__iob+0x3>
     ed6:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <__iob+0x2>
     eda:	08 95       	ret

00000edc <USART_receive0>:
     edc:	e0 ec       	ldi	r30, 0xC0	; 192
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	88 23       	and	r24, r24
     ee4:	ec f7       	brge	.-6      	; 0xee0 <USART_receive0+0x4>
     ee6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     eea:	08 95       	ret

00000eec <USART_transmit0>:
     eec:	e0 ec       	ldi	r30, 0xC0	; 192
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	90 81       	ld	r25, Z
     ef2:	95 ff       	sbrs	r25, 5
     ef4:	fd cf       	rjmp	.-6      	; 0xef0 <USART_transmit0+0x4>
     ef6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     efa:	08 95       	ret

00000efc <USART_putstring0>:
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	ec 01       	movw	r28, r24
     f02:	88 81       	ld	r24, Y
     f04:	88 23       	and	r24, r24
     f06:	31 f0       	breq	.+12     	; 0xf14 <USART_putstring0+0x18>
     f08:	21 96       	adiw	r28, 0x01	; 1
     f0a:	0e 94 76 07 	call	0xeec	; 0xeec <USART_transmit0>
     f0e:	89 91       	ld	r24, Y+
     f10:	81 11       	cpse	r24, r1
     f12:	fb cf       	rjmp	.-10     	; 0xf0a <USART_putstring0+0xe>
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	08 95       	ret

00000f1a <USART_receive2>:
     f1a:	e0 ed       	ldi	r30, 0xD0	; 208
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	88 23       	and	r24, r24
     f22:	ec f7       	brge	.-6      	; 0xf1e <USART_receive2+0x4>
     f24:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
     f28:	08 95       	ret

00000f2a <USART_receiveString2>:

char * USART_receiveString2(void){
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	01 e6       	ldi	r16, 0x61	; 97
     f34:	14 e0       	ldi	r17, 0x04	; 4
	//char rx_buf[250];
	unsigned char rec = 0;
	int i = 0;
     f36:	c0 e0       	ldi	r28, 0x00	; 0
     f38:	d0 e0       	ldi	r29, 0x00	; 0
	while (1){
		rec = USART_receive2();
     f3a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <USART_receive2>
		if (rec == 0x0A){
     f3e:	8a 30       	cpi	r24, 0x0A	; 10
     f40:	29 f0       	breq	.+10     	; 0xf4c <USART_receiveString2+0x22>
			rx_buf[i] = '\0';
			break;
		}
		rx_buf[i] = rec;
     f42:	f8 01       	movw	r30, r16
     f44:	81 93       	st	Z+, r24
     f46:	8f 01       	movw	r16, r30
		i++;
     f48:	21 96       	adiw	r28, 0x01	; 1
	}
     f4a:	f7 cf       	rjmp	.-18     	; 0xf3a <USART_receiveString2+0x10>
	unsigned char rec = 0;
	int i = 0;
	while (1){
		rec = USART_receive2();
		if (rec == 0x0A){
			rx_buf[i] = '\0';
     f4c:	cf 59       	subi	r28, 0x9F	; 159
     f4e:	db 4f       	sbci	r29, 0xFB	; 251
     f50:	18 82       	st	Y, r1
			break;
		}
		rx_buf[i] = rec;
		i++;
	}
	puts(rx_buf);
     f52:	81 e6       	ldi	r24, 0x61	; 97
     f54:	94 e0       	ldi	r25, 0x04	; 4
     f56:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <puts>
	return &rx_buf[0];
}
     f5a:	81 e6       	ldi	r24, 0x61	; 97
     f5c:	94 e0       	ldi	r25, 0x04	; 4
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	08 95       	ret

00000f68 <timers_init>:
		OCR1A = 31250;
		TIMSK1 |= (1 << OCIE1A);
	#endif

	#ifdef TIMER2
		TIMSK2 = 0;
     f68:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		ASSR = 0b00100000;
     f6c:	80 e2       	ldi	r24, 0x20	; 32
     f6e:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
     f72:	2f ef       	ldi	r18, 0xFF	; 255
     f74:	89 e6       	ldi	r24, 0x69	; 105
     f76:	98 e1       	ldi	r25, 0x18	; 24
     f78:	21 50       	subi	r18, 0x01	; 1
     f7a:	80 40       	sbci	r24, 0x00	; 0
     f7c:	90 40       	sbci	r25, 0x00	; 0
     f7e:	e1 f7       	brne	.-8      	; 0xf78 <timers_init+0x10>
     f80:	00 c0       	rjmp	.+0      	; 0xf82 <timers_init+0x1a>
     f82:	00 00       	nop
		_delay_ms(1000);
		TCCR2A = 0b00000000;
     f84:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		TCCR2B = 0b00000101;
     f88:	85 e0       	ldi	r24, 0x05	; 5
     f8a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		//Synchronize registers
		while (ASSR & ( (1 << TCN2UB) | (1 << TCR2AUB) | (1 << TCR2BUB) )) ;
     f8e:	e6 eb       	ldi	r30, 0xB6	; 182
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	83 71       	andi	r24, 0x13	; 19
     f96:	e9 f7       	brne	.-6      	; 0xf92 <timers_init+0x2a>
		TIFR2 = 0; //Clear interrupt flags
     f98:	17 ba       	out	0x17, r1	; 23
		TIMSK2 = (1 << TOIE2); //Enable overflow interrupt
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     fa0:	08 95       	ret

00000fa2 <enter_powerSave>:
}


void enter_powerSave(){
	#ifdef USART2_START_COND_INTERRUPT
	UCSR2D |= (1<<SFDE) | (0<<RXSIE);			// Enable start condition detection with interrupt on RXCIE
     fa2:	e3 ed       	ldi	r30, 0xD3	; 211
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 62       	ori	r24, 0x20	; 32
     faa:	80 83       	st	Z, r24
	#endif
	
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     fac:	83 b7       	in	r24, 0x33	; 51
     fae:	81 7f       	andi	r24, 0xF1	; 241
     fb0:	86 60       	ori	r24, 0x06	; 6
     fb2:	83 bf       	out	0x33, r24	; 51
	sleep_mode();
     fb4:	83 b7       	in	r24, 0x33	; 51
     fb6:	81 60       	ori	r24, 0x01	; 1
     fb8:	83 bf       	out	0x33, r24	; 51
     fba:	88 95       	sleep
     fbc:	83 b7       	in	r24, 0x33	; 51
     fbe:	8e 7f       	andi	r24, 0xFE	; 254
     fc0:	83 bf       	out	0x33, r24	; 51
     fc2:	2f e7       	ldi	r18, 0x7F	; 127
     fc4:	85 eb       	ldi	r24, 0xB5	; 181
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	21 50       	subi	r18, 0x01	; 1
     fca:	80 40       	sbci	r24, 0x00	; 0
     fcc:	90 40       	sbci	r25, 0x00	; 0
     fce:	e1 f7       	brne	.-8      	; 0xfc8 <enter_powerSave+0x26>
     fd0:	00 c0       	rjmp	.+0      	; 0xfd2 <enter_powerSave+0x30>
     fd2:	00 00       	nop
	_delay_ms(70);
	
	#ifdef USART2_START_COND_INTERRUPT
	UCSR2D &= ~(1<<SFDE);						// Disable start condition detection while awake.
     fd4:	80 81       	ld	r24, Z
     fd6:	8f 7d       	andi	r24, 0xDF	; 223
     fd8:	80 83       	st	Z, r24
     fda:	08 95       	ret

00000fdc <ascii_hex_decode>:
#include "USART.h"
#include <math.h>
#include <string.h>
//const char* test2 = "6363 3131 3535 6262 6666"; = "cc 11 55 bb ff" = "204 17 85 187 255"
//const char* test = "3565623838383532";
void ascii_hex_decode(const char *in, size_t len, uint8_t *out, int start){
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	e2 97       	sbiw	r28, 0x32	; 50
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	dc 01       	movw	r26, r24
     ffa:	79 01       	movw	r14, r18
	char buf[50];
	uint8_t i, t, j, h, hn, ln, p1, p2;
	for (t = 0, i = start; i<len; i+=2, t++){
     ffc:	32 2f       	mov	r19, r18
     ffe:	f7 01       	movw	r30, r14
    1000:	ff 27       	eor	r31, r31
    1002:	e6 17       	cp	r30, r22
    1004:	f7 07       	cpc	r31, r23
    1006:	c8 f4       	brcc	.+50     	; 0x103a <ascii_hex_decode+0x5e>
    1008:	80 e0       	ldi	r24, 0x00	; 0
		p1 = ((uint8_t)(in[i]) - '0')*16;
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
    100a:	01 e0       	ldi	r16, 0x01	; 1
    100c:	10 e0       	ldi	r17, 0x00	; 0
    100e:	0c 0f       	add	r16, r28
    1010:	1d 1f       	adc	r17, r29
    1012:	08 0f       	add	r16, r24
    1014:	11 1d       	adc	r17, r1
//const char* test = "3565623838383532";
void ascii_hex_decode(const char *in, size_t len, uint8_t *out, int start){
	char buf[50];
	uint8_t i, t, j, h, hn, ln, p1, p2;
	for (t = 0, i = start; i<len; i+=2, t++){
		p1 = ((uint8_t)(in[i]) - '0')*16;
    1016:	ea 0f       	add	r30, r26
    1018:	fb 1f       	adc	r31, r27
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
    101a:	20 81       	ld	r18, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	90 53       	subi	r25, 0x30	; 48
    1020:	e0 e1       	ldi	r30, 0x10	; 16
    1022:	2e 9f       	mul	r18, r30
    1024:	90 0d       	add	r25, r0
    1026:	11 24       	eor	r1, r1
    1028:	f8 01       	movw	r30, r16
    102a:	90 83       	st	Z, r25
//const char* test2 = "6363 3131 3535 6262 6666"; = "cc 11 55 bb ff" = "204 17 85 187 255"
//const char* test = "3565623838383532";
void ascii_hex_decode(const char *in, size_t len, uint8_t *out, int start){
	char buf[50];
	uint8_t i, t, j, h, hn, ln, p1, p2;
	for (t = 0, i = start; i<len; i+=2, t++){
    102c:	3e 5f       	subi	r19, 0xFE	; 254
    102e:	8f 5f       	subi	r24, 0xFF	; 255
    1030:	e3 2f       	mov	r30, r19
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	e6 17       	cp	r30, r22
    1036:	f7 07       	cpc	r31, r23
    1038:	40 f3       	brcs	.-48     	; 0x100a <ascii_hex_decode+0x2e>
		p1 = ((uint8_t)(in[i]) - '0')*16;
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
	}
	for (h= 0,j = 0; j<(len-start)/2; j+=2, h++){
    103a:	6e 19       	sub	r22, r14
    103c:	7f 09       	sbc	r23, r15
    103e:	7b 01       	movw	r14, r22
    1040:	f6 94       	lsr	r15
    1042:	e7 94       	ror	r14
    1044:	e1 14       	cp	r14, r1
    1046:	f1 04       	cpc	r15, r1
    1048:	99 f1       	breq	.+102    	; 0x10b0 <ascii_hex_decode+0xd4>
    104a:	e0 e0       	ldi	r30, 0x00	; 0
    104c:	70 e0       	ldi	r23, 0x00	; 0
		hn = buf[j] > '9' ? buf[j] - 'a' + 10 : buf[j] - '0';
    104e:	27 2f       	mov	r18, r23
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	8c 0f       	add	r24, r28
    1058:	9d 1f       	adc	r25, r29
    105a:	82 0f       	add	r24, r18
    105c:	93 1f       	adc	r25, r19
    105e:	dc 01       	movw	r26, r24
    1060:	8c 91       	ld	r24, X
    1062:	8a 33       	cpi	r24, 0x3A	; 58
    1064:	18 f0       	brcs	.+6      	; 0x106c <ascii_hex_decode+0x90>
    1066:	99 ea       	ldi	r25, 0xA9	; 169
    1068:	98 0f       	add	r25, r24
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <ascii_hex_decode+0x94>
    106c:	90 ed       	ldi	r25, 0xD0	; 208
    106e:	98 0f       	add	r25, r24
		ln = buf[j+1] > '9' ? buf[j+1] - 'a' + 10 : buf[j+1] - '0';
    1070:	a2 e0       	ldi	r26, 0x02	; 2
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ac 0f       	add	r26, r28
    1076:	bd 1f       	adc	r27, r29
    1078:	2a 0f       	add	r18, r26
    107a:	3b 1f       	adc	r19, r27
    107c:	d9 01       	movw	r26, r18
    107e:	8c 91       	ld	r24, X
    1080:	8a 33       	cpi	r24, 0x3A	; 58
    1082:	18 f0       	brcs	.+6      	; 0x108a <ascii_hex_decode+0xae>
    1084:	29 ea       	ldi	r18, 0xA9	; 169
    1086:	28 0f       	add	r18, r24
    1088:	02 c0       	rjmp	.+4      	; 0x108e <ascii_hex_decode+0xb2>
    108a:	20 ed       	ldi	r18, 0xD0	; 208
    108c:	28 0f       	add	r18, r24
		out[h] = (hn << 4) | ln;
    108e:	8a 01       	movw	r16, r20
    1090:	0e 0f       	add	r16, r30
    1092:	11 1d       	adc	r17, r1
    1094:	b0 e1       	ldi	r27, 0x10	; 16
    1096:	9b 9f       	mul	r25, r27
    1098:	c0 01       	movw	r24, r0
    109a:	11 24       	eor	r1, r1
    109c:	82 2b       	or	r24, r18
    109e:	d8 01       	movw	r26, r16
    10a0:	8c 93       	st	X, r24
	for (t = 0, i = start; i<len; i+=2, t++){
		p1 = ((uint8_t)(in[i]) - '0')*16;
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
	}
	for (h= 0,j = 0; j<(len-start)/2; j+=2, h++){
    10a2:	7e 5f       	subi	r23, 0xFE	; 254
    10a4:	ef 5f       	subi	r30, 0xFF	; 255
    10a6:	87 2f       	mov	r24, r23
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	8e 15       	cp	r24, r14
    10ac:	9f 05       	cpc	r25, r15
    10ae:	78 f2       	brcs	.-98     	; 0x104e <ascii_hex_decode+0x72>
		ln = buf[j+1] > '9' ? buf[j+1] - 'a' + 10 : buf[j+1] - '0';
		out[h] = (hn << 4) | ln;
		//printf("%02x", out[h]);
	}
	//puts("");
}
    10b0:	e2 96       	adiw	r28, 0x32	; 50
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	ff 90       	pop	r15
    10c6:	ef 90       	pop	r14
    10c8:	08 95       	ret

000010ca <hex_decode>:

uint8_t* hex_decode(const char *in, size_t len,uint8_t *out, int start){
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	ec 01       	movw	r28, r24
    10d4:	95 2f       	mov	r25, r21
	unsigned int i, t, hn, ln;
	for (t = 0,i = start; i < len; i+=2,++t) {
    10d6:	26 17       	cp	r18, r22
    10d8:	37 07       	cpc	r19, r23
    10da:	08 f5       	brcc	.+66     	; 0x111e <hex_decode+0x54>
    10dc:	c2 0f       	add	r28, r18
    10de:	d3 1f       	adc	r29, r19
    10e0:	04 2f       	mov	r16, r20
    10e2:	15 2f       	mov	r17, r21
    10e4:	fe 01       	movw	r30, r28
		hn = in[i] > '9' ? in[i] - 'A' + 10 : in[i] - '0';
    10e6:	a8 81       	ld	r26, Y
    10e8:	aa 33       	cpi	r26, 0x3A	; 58
    10ea:	18 f0       	brcs	.+6      	; 0x10f2 <hex_decode+0x28>
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	d7 97       	sbiw	r26, 0x37	; 55
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <hex_decode+0x2c>
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	d0 97       	sbiw	r26, 0x30	; 48
		ln = in[i+1] > '9' ? in[i+1] - 'A' + 10 : in[i+1] - '0';
    10f6:	e1 81       	ldd	r30, Z+1	; 0x01
    10f8:	ea 33       	cpi	r30, 0x3A	; 58
    10fa:	18 f0       	brcs	.+6      	; 0x1102 <hex_decode+0x38>
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	f7 97       	sbiw	r30, 0x37	; 55
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <hex_decode+0x3c>
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	f0 97       	sbiw	r30, 0x30	; 48
		out[t] = (hn << 4 ) | ln;
    1106:	a2 95       	swap	r26
    1108:	a0 7f       	andi	r26, 0xF0	; 240
    110a:	ea 2b       	or	r30, r26
    110c:	d8 01       	movw	r26, r16
    110e:	ed 93       	st	X+, r30
    1110:	8d 01       	movw	r16, r26
	//puts("");
}

uint8_t* hex_decode(const char *in, size_t len,uint8_t *out, int start){
	unsigned int i, t, hn, ln;
	for (t = 0,i = start; i < len; i+=2,++t) {
    1112:	2e 5f       	subi	r18, 0xFE	; 254
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
    1116:	22 96       	adiw	r28, 0x02	; 2
    1118:	26 17       	cp	r18, r22
    111a:	37 07       	cpc	r19, r23
    111c:	18 f3       	brcs	.-58     	; 0x10e4 <hex_decode+0x1a>
		hn = in[i] > '9' ? in[i] - 'A' + 10 : in[i] - '0';
		ln = in[i+1] > '9' ? in[i+1] - 'A' + 10 : in[i+1] - '0';
		out[t] = (hn << 4 ) | ln;
	}
	return out;
}
    111e:	84 2f       	mov	r24, r20
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	08 95       	ret

0000112a <hex_encode>:

//				1  2  3  4  5  6  7  8  9 10 11 byte pair
//  MSG STYLE: xx xx xx xx xx xx xx xx xx xx xx
//  1: frame, 2-5: timestamp, 6: battery, 7+8: bus voltage, 9+10: current

char* hex_encode(board_t board){
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
	char *msg = "";
	sprintf(msg, "%02X%08lX%02X%04X%04X", board.frame_counter, board.time_stamp, board.batteryLevel, board.ina219.bus_voltage, board.ina219.current);
    1132:	8e 85       	ldd	r24, Y+14	; 0x0e
    1134:	8f 93       	push	r24
    1136:	8d 85       	ldd	r24, Y+13	; 0x0d
    1138:	8f 93       	push	r24
    113a:	8c 85       	ldd	r24, Y+12	; 0x0c
    113c:	8f 93       	push	r24
    113e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1140:	8f 93       	push	r24
    1142:	8a 85       	ldd	r24, Y+10	; 0x0a
    1144:	1f 92       	push	r1
    1146:	8f 93       	push	r24
    1148:	89 85       	ldd	r24, Y+9	; 0x09
    114a:	8f 93       	push	r24
    114c:	88 85       	ldd	r24, Y+8	; 0x08
    114e:	8f 93       	push	r24
    1150:	8f 81       	ldd	r24, Y+7	; 0x07
    1152:	8f 93       	push	r24
    1154:	8e 81       	ldd	r24, Y+6	; 0x06
    1156:	8f 93       	push	r24
    1158:	8d 81       	ldd	r24, Y+5	; 0x05
    115a:	1f 92       	push	r1
    115c:	8f 93       	push	r24
    115e:	88 e4       	ldi	r24, 0x48	; 72
    1160:	94 e0       	ldi	r25, 0x04	; 4
    1162:	9f 93       	push	r25
    1164:	8f 93       	push	r24
    1166:	8f e0       	ldi	r24, 0x0F	; 15
    1168:	93 e0       	ldi	r25, 0x03	; 3
    116a:	9f 93       	push	r25
    116c:	8f 93       	push	r24
    116e:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <sprintf>
	return msg;
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
}
    117c:	8f e0       	ldi	r24, 0x0F	; 15
    117e:	93 e0       	ldi	r25, 0x03	; 3
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	08 95       	ret

00001186 <vfprintf>:
    1186:	a0 e1       	ldi	r26, 0x10	; 16
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e9 ec       	ldi	r30, 0xC9	; 201
    118c:	f8 e0       	ldi	r31, 0x08	; 8
    118e:	0c 94 62 0c 	jmp	0x18c4	; 0x18c4 <__prologue_saves__>
    1192:	7c 01       	movw	r14, r24
    1194:	1b 01       	movw	r2, r22
    1196:	6a 01       	movw	r12, r20
    1198:	fc 01       	movw	r30, r24
    119a:	17 82       	std	Z+7, r1	; 0x07
    119c:	16 82       	std	Z+6, r1	; 0x06
    119e:	83 81       	ldd	r24, Z+3	; 0x03
    11a0:	81 ff       	sbrs	r24, 1
    11a2:	44 c3       	rjmp	.+1672   	; 0x182c <vfprintf+0x6a6>
    11a4:	9e 01       	movw	r18, r28
    11a6:	2f 5f       	subi	r18, 0xFF	; 255
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255
    11aa:	39 01       	movw	r6, r18
    11ac:	f7 01       	movw	r30, r14
    11ae:	93 81       	ldd	r25, Z+3	; 0x03
    11b0:	f1 01       	movw	r30, r2
    11b2:	93 fd       	sbrc	r25, 3
    11b4:	85 91       	lpm	r24, Z+
    11b6:	93 ff       	sbrs	r25, 3
    11b8:	81 91       	ld	r24, Z+
    11ba:	1f 01       	movw	r2, r30
    11bc:	88 23       	and	r24, r24
    11be:	09 f4       	brne	.+2      	; 0x11c2 <vfprintf+0x3c>
    11c0:	31 c3       	rjmp	.+1634   	; 0x1824 <vfprintf+0x69e>
    11c2:	85 32       	cpi	r24, 0x25	; 37
    11c4:	39 f4       	brne	.+14     	; 0x11d4 <vfprintf+0x4e>
    11c6:	93 fd       	sbrc	r25, 3
    11c8:	85 91       	lpm	r24, Z+
    11ca:	93 ff       	sbrs	r25, 3
    11cc:	81 91       	ld	r24, Z+
    11ce:	1f 01       	movw	r2, r30
    11d0:	85 32       	cpi	r24, 0x25	; 37
    11d2:	39 f4       	brne	.+14     	; 0x11e2 <vfprintf+0x5c>
    11d4:	b7 01       	movw	r22, r14
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    11dc:	56 01       	movw	r10, r12
    11de:	65 01       	movw	r12, r10
    11e0:	e5 cf       	rjmp	.-54     	; 0x11ac <vfprintf+0x26>
    11e2:	10 e0       	ldi	r17, 0x00	; 0
    11e4:	51 2c       	mov	r5, r1
    11e6:	91 2c       	mov	r9, r1
    11e8:	ff e1       	ldi	r31, 0x1F	; 31
    11ea:	f9 15       	cp	r31, r9
    11ec:	d8 f0       	brcs	.+54     	; 0x1224 <vfprintf+0x9e>
    11ee:	8b 32       	cpi	r24, 0x2B	; 43
    11f0:	79 f0       	breq	.+30     	; 0x1210 <vfprintf+0x8a>
    11f2:	38 f4       	brcc	.+14     	; 0x1202 <vfprintf+0x7c>
    11f4:	80 32       	cpi	r24, 0x20	; 32
    11f6:	79 f0       	breq	.+30     	; 0x1216 <vfprintf+0x90>
    11f8:	83 32       	cpi	r24, 0x23	; 35
    11fa:	a1 f4       	brne	.+40     	; 0x1224 <vfprintf+0x9e>
    11fc:	f9 2d       	mov	r31, r9
    11fe:	f0 61       	ori	r31, 0x10	; 16
    1200:	2e c0       	rjmp	.+92     	; 0x125e <vfprintf+0xd8>
    1202:	8d 32       	cpi	r24, 0x2D	; 45
    1204:	61 f0       	breq	.+24     	; 0x121e <vfprintf+0x98>
    1206:	80 33       	cpi	r24, 0x30	; 48
    1208:	69 f4       	brne	.+26     	; 0x1224 <vfprintf+0x9e>
    120a:	29 2d       	mov	r18, r9
    120c:	21 60       	ori	r18, 0x01	; 1
    120e:	2d c0       	rjmp	.+90     	; 0x126a <vfprintf+0xe4>
    1210:	39 2d       	mov	r19, r9
    1212:	32 60       	ori	r19, 0x02	; 2
    1214:	93 2e       	mov	r9, r19
    1216:	89 2d       	mov	r24, r9
    1218:	84 60       	ori	r24, 0x04	; 4
    121a:	98 2e       	mov	r9, r24
    121c:	2a c0       	rjmp	.+84     	; 0x1272 <vfprintf+0xec>
    121e:	e9 2d       	mov	r30, r9
    1220:	e8 60       	ori	r30, 0x08	; 8
    1222:	15 c0       	rjmp	.+42     	; 0x124e <vfprintf+0xc8>
    1224:	97 fc       	sbrc	r9, 7
    1226:	2d c0       	rjmp	.+90     	; 0x1282 <vfprintf+0xfc>
    1228:	20 ed       	ldi	r18, 0xD0	; 208
    122a:	28 0f       	add	r18, r24
    122c:	2a 30       	cpi	r18, 0x0A	; 10
    122e:	88 f4       	brcc	.+34     	; 0x1252 <vfprintf+0xcc>
    1230:	96 fe       	sbrs	r9, 6
    1232:	06 c0       	rjmp	.+12     	; 0x1240 <vfprintf+0xba>
    1234:	3a e0       	ldi	r19, 0x0A	; 10
    1236:	13 9f       	mul	r17, r19
    1238:	20 0d       	add	r18, r0
    123a:	11 24       	eor	r1, r1
    123c:	12 2f       	mov	r17, r18
    123e:	19 c0       	rjmp	.+50     	; 0x1272 <vfprintf+0xec>
    1240:	8a e0       	ldi	r24, 0x0A	; 10
    1242:	58 9e       	mul	r5, r24
    1244:	20 0d       	add	r18, r0
    1246:	11 24       	eor	r1, r1
    1248:	52 2e       	mov	r5, r18
    124a:	e9 2d       	mov	r30, r9
    124c:	e0 62       	ori	r30, 0x20	; 32
    124e:	9e 2e       	mov	r9, r30
    1250:	10 c0       	rjmp	.+32     	; 0x1272 <vfprintf+0xec>
    1252:	8e 32       	cpi	r24, 0x2E	; 46
    1254:	31 f4       	brne	.+12     	; 0x1262 <vfprintf+0xdc>
    1256:	96 fc       	sbrc	r9, 6
    1258:	e5 c2       	rjmp	.+1482   	; 0x1824 <vfprintf+0x69e>
    125a:	f9 2d       	mov	r31, r9
    125c:	f0 64       	ori	r31, 0x40	; 64
    125e:	9f 2e       	mov	r9, r31
    1260:	08 c0       	rjmp	.+16     	; 0x1272 <vfprintf+0xec>
    1262:	8c 36       	cpi	r24, 0x6C	; 108
    1264:	21 f4       	brne	.+8      	; 0x126e <vfprintf+0xe8>
    1266:	29 2d       	mov	r18, r9
    1268:	20 68       	ori	r18, 0x80	; 128
    126a:	92 2e       	mov	r9, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <vfprintf+0xec>
    126e:	88 36       	cpi	r24, 0x68	; 104
    1270:	41 f4       	brne	.+16     	; 0x1282 <vfprintf+0xfc>
    1272:	f1 01       	movw	r30, r2
    1274:	93 fd       	sbrc	r25, 3
    1276:	85 91       	lpm	r24, Z+
    1278:	93 ff       	sbrs	r25, 3
    127a:	81 91       	ld	r24, Z+
    127c:	1f 01       	movw	r2, r30
    127e:	81 11       	cpse	r24, r1
    1280:	b3 cf       	rjmp	.-154    	; 0x11e8 <vfprintf+0x62>
    1282:	9b eb       	ldi	r25, 0xBB	; 187
    1284:	98 0f       	add	r25, r24
    1286:	93 30       	cpi	r25, 0x03	; 3
    1288:	20 f4       	brcc	.+8      	; 0x1292 <vfprintf+0x10c>
    128a:	99 2d       	mov	r25, r9
    128c:	90 61       	ori	r25, 0x10	; 16
    128e:	80 5e       	subi	r24, 0xE0	; 224
    1290:	07 c0       	rjmp	.+14     	; 0x12a0 <vfprintf+0x11a>
    1292:	9b e9       	ldi	r25, 0x9B	; 155
    1294:	98 0f       	add	r25, r24
    1296:	93 30       	cpi	r25, 0x03	; 3
    1298:	08 f0       	brcs	.+2      	; 0x129c <vfprintf+0x116>
    129a:	66 c1       	rjmp	.+716    	; 0x1568 <vfprintf+0x3e2>
    129c:	99 2d       	mov	r25, r9
    129e:	9f 7e       	andi	r25, 0xEF	; 239
    12a0:	96 ff       	sbrs	r25, 6
    12a2:	16 e0       	ldi	r17, 0x06	; 6
    12a4:	9f 73       	andi	r25, 0x3F	; 63
    12a6:	99 2e       	mov	r9, r25
    12a8:	85 36       	cpi	r24, 0x65	; 101
    12aa:	19 f4       	brne	.+6      	; 0x12b2 <vfprintf+0x12c>
    12ac:	90 64       	ori	r25, 0x40	; 64
    12ae:	99 2e       	mov	r9, r25
    12b0:	08 c0       	rjmp	.+16     	; 0x12c2 <vfprintf+0x13c>
    12b2:	86 36       	cpi	r24, 0x66	; 102
    12b4:	21 f4       	brne	.+8      	; 0x12be <vfprintf+0x138>
    12b6:	39 2f       	mov	r19, r25
    12b8:	30 68       	ori	r19, 0x80	; 128
    12ba:	93 2e       	mov	r9, r19
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <vfprintf+0x13c>
    12be:	11 11       	cpse	r17, r1
    12c0:	11 50       	subi	r17, 0x01	; 1
    12c2:	97 fe       	sbrs	r9, 7
    12c4:	07 c0       	rjmp	.+14     	; 0x12d4 <vfprintf+0x14e>
    12c6:	1c 33       	cpi	r17, 0x3C	; 60
    12c8:	50 f4       	brcc	.+20     	; 0x12de <vfprintf+0x158>
    12ca:	44 24       	eor	r4, r4
    12cc:	43 94       	inc	r4
    12ce:	41 0e       	add	r4, r17
    12d0:	27 e0       	ldi	r18, 0x07	; 7
    12d2:	0b c0       	rjmp	.+22     	; 0x12ea <vfprintf+0x164>
    12d4:	18 30       	cpi	r17, 0x08	; 8
    12d6:	38 f0       	brcs	.+14     	; 0x12e6 <vfprintf+0x160>
    12d8:	27 e0       	ldi	r18, 0x07	; 7
    12da:	17 e0       	ldi	r17, 0x07	; 7
    12dc:	05 c0       	rjmp	.+10     	; 0x12e8 <vfprintf+0x162>
    12de:	27 e0       	ldi	r18, 0x07	; 7
    12e0:	9c e3       	ldi	r25, 0x3C	; 60
    12e2:	49 2e       	mov	r4, r25
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <vfprintf+0x164>
    12e6:	21 2f       	mov	r18, r17
    12e8:	41 2c       	mov	r4, r1
    12ea:	56 01       	movw	r10, r12
    12ec:	84 e0       	ldi	r24, 0x04	; 4
    12ee:	a8 0e       	add	r10, r24
    12f0:	b1 1c       	adc	r11, r1
    12f2:	f6 01       	movw	r30, r12
    12f4:	60 81       	ld	r22, Z
    12f6:	71 81       	ldd	r23, Z+1	; 0x01
    12f8:	82 81       	ldd	r24, Z+2	; 0x02
    12fa:	93 81       	ldd	r25, Z+3	; 0x03
    12fc:	04 2d       	mov	r16, r4
    12fe:	a3 01       	movw	r20, r6
    1300:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__ftoa_engine>
    1304:	6c 01       	movw	r12, r24
    1306:	f9 81       	ldd	r31, Y+1	; 0x01
    1308:	fc 87       	std	Y+12, r31	; 0x0c
    130a:	f0 ff       	sbrs	r31, 0
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <vfprintf+0x18c>
    130e:	f3 ff       	sbrs	r31, 3
    1310:	06 c0       	rjmp	.+12     	; 0x131e <vfprintf+0x198>
    1312:	91 fc       	sbrc	r9, 1
    1314:	06 c0       	rjmp	.+12     	; 0x1322 <vfprintf+0x19c>
    1316:	92 fe       	sbrs	r9, 2
    1318:	06 c0       	rjmp	.+12     	; 0x1326 <vfprintf+0x1a0>
    131a:	00 e2       	ldi	r16, 0x20	; 32
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <vfprintf+0x1a2>
    131e:	0d e2       	ldi	r16, 0x2D	; 45
    1320:	03 c0       	rjmp	.+6      	; 0x1328 <vfprintf+0x1a2>
    1322:	0b e2       	ldi	r16, 0x2B	; 43
    1324:	01 c0       	rjmp	.+2      	; 0x1328 <vfprintf+0x1a2>
    1326:	00 e0       	ldi	r16, 0x00	; 0
    1328:	8c 85       	ldd	r24, Y+12	; 0x0c
    132a:	8c 70       	andi	r24, 0x0C	; 12
    132c:	19 f0       	breq	.+6      	; 0x1334 <vfprintf+0x1ae>
    132e:	01 11       	cpse	r16, r1
    1330:	5a c2       	rjmp	.+1204   	; 0x17e6 <vfprintf+0x660>
    1332:	9b c2       	rjmp	.+1334   	; 0x186a <vfprintf+0x6e4>
    1334:	97 fe       	sbrs	r9, 7
    1336:	10 c0       	rjmp	.+32     	; 0x1358 <vfprintf+0x1d2>
    1338:	4c 0c       	add	r4, r12
    133a:	fc 85       	ldd	r31, Y+12	; 0x0c
    133c:	f4 ff       	sbrs	r31, 4
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <vfprintf+0x1c2>
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	81 33       	cpi	r24, 0x31	; 49
    1344:	09 f4       	brne	.+2      	; 0x1348 <vfprintf+0x1c2>
    1346:	4a 94       	dec	r4
    1348:	14 14       	cp	r1, r4
    134a:	74 f5       	brge	.+92     	; 0x13a8 <vfprintf+0x222>
    134c:	28 e0       	ldi	r18, 0x08	; 8
    134e:	24 15       	cp	r18, r4
    1350:	78 f5       	brcc	.+94     	; 0x13b0 <vfprintf+0x22a>
    1352:	88 e0       	ldi	r24, 0x08	; 8
    1354:	48 2e       	mov	r4, r24
    1356:	2c c0       	rjmp	.+88     	; 0x13b0 <vfprintf+0x22a>
    1358:	96 fc       	sbrc	r9, 6
    135a:	2a c0       	rjmp	.+84     	; 0x13b0 <vfprintf+0x22a>
    135c:	81 2f       	mov	r24, r17
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	8c 15       	cp	r24, r12
    1362:	9d 05       	cpc	r25, r13
    1364:	9c f0       	brlt	.+38     	; 0x138c <vfprintf+0x206>
    1366:	3c ef       	ldi	r19, 0xFC	; 252
    1368:	c3 16       	cp	r12, r19
    136a:	3f ef       	ldi	r19, 0xFF	; 255
    136c:	d3 06       	cpc	r13, r19
    136e:	74 f0       	brlt	.+28     	; 0x138c <vfprintf+0x206>
    1370:	89 2d       	mov	r24, r9
    1372:	80 68       	ori	r24, 0x80	; 128
    1374:	98 2e       	mov	r9, r24
    1376:	0a c0       	rjmp	.+20     	; 0x138c <vfprintf+0x206>
    1378:	e2 e0       	ldi	r30, 0x02	; 2
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	ec 0f       	add	r30, r28
    137e:	fd 1f       	adc	r31, r29
    1380:	e1 0f       	add	r30, r17
    1382:	f1 1d       	adc	r31, r1
    1384:	80 81       	ld	r24, Z
    1386:	80 33       	cpi	r24, 0x30	; 48
    1388:	19 f4       	brne	.+6      	; 0x1390 <vfprintf+0x20a>
    138a:	11 50       	subi	r17, 0x01	; 1
    138c:	11 11       	cpse	r17, r1
    138e:	f4 cf       	rjmp	.-24     	; 0x1378 <vfprintf+0x1f2>
    1390:	97 fe       	sbrs	r9, 7
    1392:	0e c0       	rjmp	.+28     	; 0x13b0 <vfprintf+0x22a>
    1394:	44 24       	eor	r4, r4
    1396:	43 94       	inc	r4
    1398:	41 0e       	add	r4, r17
    139a:	81 2f       	mov	r24, r17
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	c8 16       	cp	r12, r24
    13a0:	d9 06       	cpc	r13, r25
    13a2:	2c f4       	brge	.+10     	; 0x13ae <vfprintf+0x228>
    13a4:	1c 19       	sub	r17, r12
    13a6:	04 c0       	rjmp	.+8      	; 0x13b0 <vfprintf+0x22a>
    13a8:	44 24       	eor	r4, r4
    13aa:	43 94       	inc	r4
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <vfprintf+0x22a>
    13ae:	10 e0       	ldi	r17, 0x00	; 0
    13b0:	97 fe       	sbrs	r9, 7
    13b2:	06 c0       	rjmp	.+12     	; 0x13c0 <vfprintf+0x23a>
    13b4:	1c 14       	cp	r1, r12
    13b6:	1d 04       	cpc	r1, r13
    13b8:	34 f4       	brge	.+12     	; 0x13c6 <vfprintf+0x240>
    13ba:	c6 01       	movw	r24, r12
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <vfprintf+0x244>
    13c0:	85 e0       	ldi	r24, 0x05	; 5
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <vfprintf+0x244>
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	01 11       	cpse	r16, r1
    13cc:	01 96       	adiw	r24, 0x01	; 1
    13ce:	11 23       	and	r17, r17
    13d0:	31 f0       	breq	.+12     	; 0x13de <vfprintf+0x258>
    13d2:	21 2f       	mov	r18, r17
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	2f 5f       	subi	r18, 0xFF	; 255
    13d8:	3f 4f       	sbci	r19, 0xFF	; 255
    13da:	82 0f       	add	r24, r18
    13dc:	93 1f       	adc	r25, r19
    13de:	25 2d       	mov	r18, r5
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	82 17       	cp	r24, r18
    13e4:	93 07       	cpc	r25, r19
    13e6:	14 f4       	brge	.+4      	; 0x13ec <vfprintf+0x266>
    13e8:	58 1a       	sub	r5, r24
    13ea:	01 c0       	rjmp	.+2      	; 0x13ee <vfprintf+0x268>
    13ec:	51 2c       	mov	r5, r1
    13ee:	89 2d       	mov	r24, r9
    13f0:	89 70       	andi	r24, 0x09	; 9
    13f2:	49 f4       	brne	.+18     	; 0x1406 <vfprintf+0x280>
    13f4:	55 20       	and	r5, r5
    13f6:	39 f0       	breq	.+14     	; 0x1406 <vfprintf+0x280>
    13f8:	b7 01       	movw	r22, r14
    13fa:	80 e2       	ldi	r24, 0x20	; 32
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    1402:	5a 94       	dec	r5
    1404:	f7 cf       	rjmp	.-18     	; 0x13f4 <vfprintf+0x26e>
    1406:	00 23       	and	r16, r16
    1408:	29 f0       	breq	.+10     	; 0x1414 <vfprintf+0x28e>
    140a:	b7 01       	movw	r22, r14
    140c:	80 2f       	mov	r24, r16
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    1414:	93 fc       	sbrc	r9, 3
    1416:	09 c0       	rjmp	.+18     	; 0x142a <vfprintf+0x2a4>
    1418:	55 20       	and	r5, r5
    141a:	39 f0       	breq	.+14     	; 0x142a <vfprintf+0x2a4>
    141c:	b7 01       	movw	r22, r14
    141e:	80 e3       	ldi	r24, 0x30	; 48
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    1426:	5a 94       	dec	r5
    1428:	f7 cf       	rjmp	.-18     	; 0x1418 <vfprintf+0x292>
    142a:	97 fe       	sbrs	r9, 7
    142c:	4c c0       	rjmp	.+152    	; 0x14c6 <vfprintf+0x340>
    142e:	46 01       	movw	r8, r12
    1430:	d7 fe       	sbrs	r13, 7
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <vfprintf+0x2b2>
    1434:	81 2c       	mov	r8, r1
    1436:	91 2c       	mov	r9, r1
    1438:	c6 01       	movw	r24, r12
    143a:	88 19       	sub	r24, r8
    143c:	99 09       	sbc	r25, r9
    143e:	f3 01       	movw	r30, r6
    1440:	e8 0f       	add	r30, r24
    1442:	f9 1f       	adc	r31, r25
    1444:	fe 87       	std	Y+14, r31	; 0x0e
    1446:	ed 87       	std	Y+13, r30	; 0x0d
    1448:	96 01       	movw	r18, r12
    144a:	24 19       	sub	r18, r4
    144c:	31 09       	sbc	r19, r1
    144e:	38 8b       	std	Y+16, r19	; 0x10
    1450:	2f 87       	std	Y+15, r18	; 0x0f
    1452:	01 2f       	mov	r16, r17
    1454:	10 e0       	ldi	r17, 0x00	; 0
    1456:	11 95       	neg	r17
    1458:	01 95       	neg	r16
    145a:	11 09       	sbc	r17, r1
    145c:	3f ef       	ldi	r19, 0xFF	; 255
    145e:	83 16       	cp	r8, r19
    1460:	93 06       	cpc	r9, r19
    1462:	29 f4       	brne	.+10     	; 0x146e <vfprintf+0x2e8>
    1464:	b7 01       	movw	r22, r14
    1466:	8e e2       	ldi	r24, 0x2E	; 46
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    146e:	c8 14       	cp	r12, r8
    1470:	d9 04       	cpc	r13, r9
    1472:	4c f0       	brlt	.+18     	; 0x1486 <vfprintf+0x300>
    1474:	8f 85       	ldd	r24, Y+15	; 0x0f
    1476:	98 89       	ldd	r25, Y+16	; 0x10
    1478:	88 15       	cp	r24, r8
    147a:	99 05       	cpc	r25, r9
    147c:	24 f4       	brge	.+8      	; 0x1486 <vfprintf+0x300>
    147e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1480:	fe 85       	ldd	r31, Y+14	; 0x0e
    1482:	81 81       	ldd	r24, Z+1	; 0x01
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <vfprintf+0x302>
    1486:	80 e3       	ldi	r24, 0x30	; 48
    1488:	f1 e0       	ldi	r31, 0x01	; 1
    148a:	8f 1a       	sub	r8, r31
    148c:	91 08       	sbc	r9, r1
    148e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1490:	3e 85       	ldd	r19, Y+14	; 0x0e
    1492:	2f 5f       	subi	r18, 0xFF	; 255
    1494:	3f 4f       	sbci	r19, 0xFF	; 255
    1496:	3e 87       	std	Y+14, r19	; 0x0e
    1498:	2d 87       	std	Y+13, r18	; 0x0d
    149a:	80 16       	cp	r8, r16
    149c:	91 06       	cpc	r9, r17
    149e:	2c f0       	brlt	.+10     	; 0x14aa <vfprintf+0x324>
    14a0:	b7 01       	movw	r22, r14
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    14a8:	d9 cf       	rjmp	.-78     	; 0x145c <vfprintf+0x2d6>
    14aa:	c8 14       	cp	r12, r8
    14ac:	d9 04       	cpc	r13, r9
    14ae:	41 f4       	brne	.+16     	; 0x14c0 <vfprintf+0x33a>
    14b0:	9a 81       	ldd	r25, Y+2	; 0x02
    14b2:	96 33       	cpi	r25, 0x36	; 54
    14b4:	20 f4       	brcc	.+8      	; 0x14be <vfprintf+0x338>
    14b6:	95 33       	cpi	r25, 0x35	; 53
    14b8:	19 f4       	brne	.+6      	; 0x14c0 <vfprintf+0x33a>
    14ba:	3c 85       	ldd	r19, Y+12	; 0x0c
    14bc:	34 ff       	sbrs	r19, 4
    14be:	81 e3       	ldi	r24, 0x31	; 49
    14c0:	b7 01       	movw	r22, r14
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	4e c0       	rjmp	.+156    	; 0x1562 <vfprintf+0x3dc>
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	81 33       	cpi	r24, 0x31	; 49
    14ca:	19 f0       	breq	.+6      	; 0x14d2 <vfprintf+0x34c>
    14cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    14ce:	9f 7e       	andi	r25, 0xEF	; 239
    14d0:	9c 87       	std	Y+12, r25	; 0x0c
    14d2:	b7 01       	movw	r22, r14
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    14da:	11 11       	cpse	r17, r1
    14dc:	05 c0       	rjmp	.+10     	; 0x14e8 <vfprintf+0x362>
    14de:	94 fc       	sbrc	r9, 4
    14e0:	18 c0       	rjmp	.+48     	; 0x1512 <vfprintf+0x38c>
    14e2:	85 e6       	ldi	r24, 0x65	; 101
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	17 c0       	rjmp	.+46     	; 0x1516 <vfprintf+0x390>
    14e8:	b7 01       	movw	r22, r14
    14ea:	8e e2       	ldi	r24, 0x2E	; 46
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    14f2:	1e 5f       	subi	r17, 0xFE	; 254
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	01 e0       	ldi	r16, 0x01	; 1
    14f8:	08 0f       	add	r16, r24
    14fa:	f3 01       	movw	r30, r6
    14fc:	e8 0f       	add	r30, r24
    14fe:	f1 1d       	adc	r31, r1
    1500:	80 81       	ld	r24, Z
    1502:	b7 01       	movw	r22, r14
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    150a:	80 2f       	mov	r24, r16
    150c:	01 13       	cpse	r16, r17
    150e:	f3 cf       	rjmp	.-26     	; 0x14f6 <vfprintf+0x370>
    1510:	e6 cf       	rjmp	.-52     	; 0x14de <vfprintf+0x358>
    1512:	85 e4       	ldi	r24, 0x45	; 69
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	b7 01       	movw	r22, r14
    1518:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    151c:	d7 fc       	sbrc	r13, 7
    151e:	06 c0       	rjmp	.+12     	; 0x152c <vfprintf+0x3a6>
    1520:	c1 14       	cp	r12, r1
    1522:	d1 04       	cpc	r13, r1
    1524:	41 f4       	brne	.+16     	; 0x1536 <vfprintf+0x3b0>
    1526:	ec 85       	ldd	r30, Y+12	; 0x0c
    1528:	e4 ff       	sbrs	r30, 4
    152a:	05 c0       	rjmp	.+10     	; 0x1536 <vfprintf+0x3b0>
    152c:	d1 94       	neg	r13
    152e:	c1 94       	neg	r12
    1530:	d1 08       	sbc	r13, r1
    1532:	8d e2       	ldi	r24, 0x2D	; 45
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <vfprintf+0x3b2>
    1536:	8b e2       	ldi	r24, 0x2B	; 43
    1538:	b7 01       	movw	r22, r14
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    1540:	80 e3       	ldi	r24, 0x30	; 48
    1542:	2a e0       	ldi	r18, 0x0A	; 10
    1544:	c2 16       	cp	r12, r18
    1546:	d1 04       	cpc	r13, r1
    1548:	2c f0       	brlt	.+10     	; 0x1554 <vfprintf+0x3ce>
    154a:	8f 5f       	subi	r24, 0xFF	; 255
    154c:	fa e0       	ldi	r31, 0x0A	; 10
    154e:	cf 1a       	sub	r12, r31
    1550:	d1 08       	sbc	r13, r1
    1552:	f7 cf       	rjmp	.-18     	; 0x1542 <vfprintf+0x3bc>
    1554:	b7 01       	movw	r22, r14
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    155c:	b7 01       	movw	r22, r14
    155e:	c6 01       	movw	r24, r12
    1560:	c0 96       	adiw	r24, 0x30	; 48
    1562:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    1566:	54 c1       	rjmp	.+680    	; 0x1810 <vfprintf+0x68a>
    1568:	83 36       	cpi	r24, 0x63	; 99
    156a:	31 f0       	breq	.+12     	; 0x1578 <vfprintf+0x3f2>
    156c:	83 37       	cpi	r24, 0x73	; 115
    156e:	79 f0       	breq	.+30     	; 0x158e <vfprintf+0x408>
    1570:	83 35       	cpi	r24, 0x53	; 83
    1572:	09 f0       	breq	.+2      	; 0x1576 <vfprintf+0x3f0>
    1574:	56 c0       	rjmp	.+172    	; 0x1622 <vfprintf+0x49c>
    1576:	20 c0       	rjmp	.+64     	; 0x15b8 <vfprintf+0x432>
    1578:	56 01       	movw	r10, r12
    157a:	32 e0       	ldi	r19, 0x02	; 2
    157c:	a3 0e       	add	r10, r19
    157e:	b1 1c       	adc	r11, r1
    1580:	f6 01       	movw	r30, r12
    1582:	80 81       	ld	r24, Z
    1584:	89 83       	std	Y+1, r24	; 0x01
    1586:	01 e0       	ldi	r16, 0x01	; 1
    1588:	10 e0       	ldi	r17, 0x00	; 0
    158a:	63 01       	movw	r12, r6
    158c:	12 c0       	rjmp	.+36     	; 0x15b2 <vfprintf+0x42c>
    158e:	56 01       	movw	r10, r12
    1590:	f2 e0       	ldi	r31, 0x02	; 2
    1592:	af 0e       	add	r10, r31
    1594:	b1 1c       	adc	r11, r1
    1596:	f6 01       	movw	r30, r12
    1598:	c0 80       	ld	r12, Z
    159a:	d1 80       	ldd	r13, Z+1	; 0x01
    159c:	96 fe       	sbrs	r9, 6
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <vfprintf+0x420>
    15a0:	61 2f       	mov	r22, r17
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <vfprintf+0x424>
    15a6:	6f ef       	ldi	r22, 0xFF	; 255
    15a8:	7f ef       	ldi	r23, 0xFF	; 255
    15aa:	c6 01       	movw	r24, r12
    15ac:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <strnlen>
    15b0:	8c 01       	movw	r16, r24
    15b2:	f9 2d       	mov	r31, r9
    15b4:	ff 77       	andi	r31, 0x7F	; 127
    15b6:	14 c0       	rjmp	.+40     	; 0x15e0 <vfprintf+0x45a>
    15b8:	56 01       	movw	r10, r12
    15ba:	22 e0       	ldi	r18, 0x02	; 2
    15bc:	a2 0e       	add	r10, r18
    15be:	b1 1c       	adc	r11, r1
    15c0:	f6 01       	movw	r30, r12
    15c2:	c0 80       	ld	r12, Z
    15c4:	d1 80       	ldd	r13, Z+1	; 0x01
    15c6:	96 fe       	sbrs	r9, 6
    15c8:	03 c0       	rjmp	.+6      	; 0x15d0 <vfprintf+0x44a>
    15ca:	61 2f       	mov	r22, r17
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <vfprintf+0x44e>
    15d0:	6f ef       	ldi	r22, 0xFF	; 255
    15d2:	7f ef       	ldi	r23, 0xFF	; 255
    15d4:	c6 01       	movw	r24, r12
    15d6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <strnlen_P>
    15da:	8c 01       	movw	r16, r24
    15dc:	f9 2d       	mov	r31, r9
    15de:	f0 68       	ori	r31, 0x80	; 128
    15e0:	9f 2e       	mov	r9, r31
    15e2:	f3 fd       	sbrc	r31, 3
    15e4:	1a c0       	rjmp	.+52     	; 0x161a <vfprintf+0x494>
    15e6:	85 2d       	mov	r24, r5
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	08 17       	cp	r16, r24
    15ec:	19 07       	cpc	r17, r25
    15ee:	a8 f4       	brcc	.+42     	; 0x161a <vfprintf+0x494>
    15f0:	b7 01       	movw	r22, r14
    15f2:	80 e2       	ldi	r24, 0x20	; 32
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    15fa:	5a 94       	dec	r5
    15fc:	f4 cf       	rjmp	.-24     	; 0x15e6 <vfprintf+0x460>
    15fe:	f6 01       	movw	r30, r12
    1600:	97 fc       	sbrc	r9, 7
    1602:	85 91       	lpm	r24, Z+
    1604:	97 fe       	sbrs	r9, 7
    1606:	81 91       	ld	r24, Z+
    1608:	6f 01       	movw	r12, r30
    160a:	b7 01       	movw	r22, r14
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    1612:	51 10       	cpse	r5, r1
    1614:	5a 94       	dec	r5
    1616:	01 50       	subi	r16, 0x01	; 1
    1618:	11 09       	sbc	r17, r1
    161a:	01 15       	cp	r16, r1
    161c:	11 05       	cpc	r17, r1
    161e:	79 f7       	brne	.-34     	; 0x15fe <vfprintf+0x478>
    1620:	f7 c0       	rjmp	.+494    	; 0x1810 <vfprintf+0x68a>
    1622:	84 36       	cpi	r24, 0x64	; 100
    1624:	11 f0       	breq	.+4      	; 0x162a <vfprintf+0x4a4>
    1626:	89 36       	cpi	r24, 0x69	; 105
    1628:	61 f5       	brne	.+88     	; 0x1682 <vfprintf+0x4fc>
    162a:	56 01       	movw	r10, r12
    162c:	97 fe       	sbrs	r9, 7
    162e:	09 c0       	rjmp	.+18     	; 0x1642 <vfprintf+0x4bc>
    1630:	24 e0       	ldi	r18, 0x04	; 4
    1632:	a2 0e       	add	r10, r18
    1634:	b1 1c       	adc	r11, r1
    1636:	f6 01       	movw	r30, r12
    1638:	60 81       	ld	r22, Z
    163a:	71 81       	ldd	r23, Z+1	; 0x01
    163c:	82 81       	ldd	r24, Z+2	; 0x02
    163e:	93 81       	ldd	r25, Z+3	; 0x03
    1640:	0a c0       	rjmp	.+20     	; 0x1656 <vfprintf+0x4d0>
    1642:	f2 e0       	ldi	r31, 0x02	; 2
    1644:	af 0e       	add	r10, r31
    1646:	b1 1c       	adc	r11, r1
    1648:	f6 01       	movw	r30, r12
    164a:	60 81       	ld	r22, Z
    164c:	71 81       	ldd	r23, Z+1	; 0x01
    164e:	07 2e       	mov	r0, r23
    1650:	00 0c       	add	r0, r0
    1652:	88 0b       	sbc	r24, r24
    1654:	99 0b       	sbc	r25, r25
    1656:	f9 2d       	mov	r31, r9
    1658:	ff 76       	andi	r31, 0x6F	; 111
    165a:	9f 2e       	mov	r9, r31
    165c:	97 ff       	sbrs	r25, 7
    165e:	09 c0       	rjmp	.+18     	; 0x1672 <vfprintf+0x4ec>
    1660:	90 95       	com	r25
    1662:	80 95       	com	r24
    1664:	70 95       	com	r23
    1666:	61 95       	neg	r22
    1668:	7f 4f       	sbci	r23, 0xFF	; 255
    166a:	8f 4f       	sbci	r24, 0xFF	; 255
    166c:	9f 4f       	sbci	r25, 0xFF	; 255
    166e:	f0 68       	ori	r31, 0x80	; 128
    1670:	9f 2e       	mov	r9, r31
    1672:	2a e0       	ldi	r18, 0x0A	; 10
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	a3 01       	movw	r20, r6
    1678:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__ultoa_invert>
    167c:	c8 2e       	mov	r12, r24
    167e:	c6 18       	sub	r12, r6
    1680:	3f c0       	rjmp	.+126    	; 0x1700 <vfprintf+0x57a>
    1682:	09 2d       	mov	r16, r9
    1684:	85 37       	cpi	r24, 0x75	; 117
    1686:	21 f4       	brne	.+8      	; 0x1690 <vfprintf+0x50a>
    1688:	0f 7e       	andi	r16, 0xEF	; 239
    168a:	2a e0       	ldi	r18, 0x0A	; 10
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	1d c0       	rjmp	.+58     	; 0x16ca <vfprintf+0x544>
    1690:	09 7f       	andi	r16, 0xF9	; 249
    1692:	8f 36       	cpi	r24, 0x6F	; 111
    1694:	91 f0       	breq	.+36     	; 0x16ba <vfprintf+0x534>
    1696:	18 f4       	brcc	.+6      	; 0x169e <vfprintf+0x518>
    1698:	88 35       	cpi	r24, 0x58	; 88
    169a:	59 f0       	breq	.+22     	; 0x16b2 <vfprintf+0x52c>
    169c:	c3 c0       	rjmp	.+390    	; 0x1824 <vfprintf+0x69e>
    169e:	80 37       	cpi	r24, 0x70	; 112
    16a0:	19 f0       	breq	.+6      	; 0x16a8 <vfprintf+0x522>
    16a2:	88 37       	cpi	r24, 0x78	; 120
    16a4:	11 f0       	breq	.+4      	; 0x16aa <vfprintf+0x524>
    16a6:	be c0       	rjmp	.+380    	; 0x1824 <vfprintf+0x69e>
    16a8:	00 61       	ori	r16, 0x10	; 16
    16aa:	04 ff       	sbrs	r16, 4
    16ac:	09 c0       	rjmp	.+18     	; 0x16c0 <vfprintf+0x53a>
    16ae:	04 60       	ori	r16, 0x04	; 4
    16b0:	07 c0       	rjmp	.+14     	; 0x16c0 <vfprintf+0x53a>
    16b2:	94 fe       	sbrs	r9, 4
    16b4:	08 c0       	rjmp	.+16     	; 0x16c6 <vfprintf+0x540>
    16b6:	06 60       	ori	r16, 0x06	; 6
    16b8:	06 c0       	rjmp	.+12     	; 0x16c6 <vfprintf+0x540>
    16ba:	28 e0       	ldi	r18, 0x08	; 8
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	05 c0       	rjmp	.+10     	; 0x16ca <vfprintf+0x544>
    16c0:	20 e1       	ldi	r18, 0x10	; 16
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <vfprintf+0x544>
    16c6:	20 e1       	ldi	r18, 0x10	; 16
    16c8:	32 e0       	ldi	r19, 0x02	; 2
    16ca:	56 01       	movw	r10, r12
    16cc:	07 ff       	sbrs	r16, 7
    16ce:	09 c0       	rjmp	.+18     	; 0x16e2 <vfprintf+0x55c>
    16d0:	84 e0       	ldi	r24, 0x04	; 4
    16d2:	a8 0e       	add	r10, r24
    16d4:	b1 1c       	adc	r11, r1
    16d6:	f6 01       	movw	r30, r12
    16d8:	60 81       	ld	r22, Z
    16da:	71 81       	ldd	r23, Z+1	; 0x01
    16dc:	82 81       	ldd	r24, Z+2	; 0x02
    16de:	93 81       	ldd	r25, Z+3	; 0x03
    16e0:	08 c0       	rjmp	.+16     	; 0x16f2 <vfprintf+0x56c>
    16e2:	f2 e0       	ldi	r31, 0x02	; 2
    16e4:	af 0e       	add	r10, r31
    16e6:	b1 1c       	adc	r11, r1
    16e8:	f6 01       	movw	r30, r12
    16ea:	60 81       	ld	r22, Z
    16ec:	71 81       	ldd	r23, Z+1	; 0x01
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a3 01       	movw	r20, r6
    16f4:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__ultoa_invert>
    16f8:	c8 2e       	mov	r12, r24
    16fa:	c6 18       	sub	r12, r6
    16fc:	0f 77       	andi	r16, 0x7F	; 127
    16fe:	90 2e       	mov	r9, r16
    1700:	96 fe       	sbrs	r9, 6
    1702:	0b c0       	rjmp	.+22     	; 0x171a <vfprintf+0x594>
    1704:	09 2d       	mov	r16, r9
    1706:	0e 7f       	andi	r16, 0xFE	; 254
    1708:	c1 16       	cp	r12, r17
    170a:	50 f4       	brcc	.+20     	; 0x1720 <vfprintf+0x59a>
    170c:	94 fe       	sbrs	r9, 4
    170e:	0a c0       	rjmp	.+20     	; 0x1724 <vfprintf+0x59e>
    1710:	92 fc       	sbrc	r9, 2
    1712:	08 c0       	rjmp	.+16     	; 0x1724 <vfprintf+0x59e>
    1714:	09 2d       	mov	r16, r9
    1716:	0e 7e       	andi	r16, 0xEE	; 238
    1718:	05 c0       	rjmp	.+10     	; 0x1724 <vfprintf+0x59e>
    171a:	dc 2c       	mov	r13, r12
    171c:	09 2d       	mov	r16, r9
    171e:	03 c0       	rjmp	.+6      	; 0x1726 <vfprintf+0x5a0>
    1720:	dc 2c       	mov	r13, r12
    1722:	01 c0       	rjmp	.+2      	; 0x1726 <vfprintf+0x5a0>
    1724:	d1 2e       	mov	r13, r17
    1726:	04 ff       	sbrs	r16, 4
    1728:	0d c0       	rjmp	.+26     	; 0x1744 <vfprintf+0x5be>
    172a:	fe 01       	movw	r30, r28
    172c:	ec 0d       	add	r30, r12
    172e:	f1 1d       	adc	r31, r1
    1730:	80 81       	ld	r24, Z
    1732:	80 33       	cpi	r24, 0x30	; 48
    1734:	11 f4       	brne	.+4      	; 0x173a <vfprintf+0x5b4>
    1736:	09 7e       	andi	r16, 0xE9	; 233
    1738:	09 c0       	rjmp	.+18     	; 0x174c <vfprintf+0x5c6>
    173a:	02 ff       	sbrs	r16, 2
    173c:	06 c0       	rjmp	.+12     	; 0x174a <vfprintf+0x5c4>
    173e:	d3 94       	inc	r13
    1740:	d3 94       	inc	r13
    1742:	04 c0       	rjmp	.+8      	; 0x174c <vfprintf+0x5c6>
    1744:	80 2f       	mov	r24, r16
    1746:	86 78       	andi	r24, 0x86	; 134
    1748:	09 f0       	breq	.+2      	; 0x174c <vfprintf+0x5c6>
    174a:	d3 94       	inc	r13
    174c:	03 fd       	sbrc	r16, 3
    174e:	11 c0       	rjmp	.+34     	; 0x1772 <vfprintf+0x5ec>
    1750:	00 ff       	sbrs	r16, 0
    1752:	06 c0       	rjmp	.+12     	; 0x1760 <vfprintf+0x5da>
    1754:	1c 2d       	mov	r17, r12
    1756:	d5 14       	cp	r13, r5
    1758:	80 f4       	brcc	.+32     	; 0x177a <vfprintf+0x5f4>
    175a:	15 0d       	add	r17, r5
    175c:	1d 19       	sub	r17, r13
    175e:	0d c0       	rjmp	.+26     	; 0x177a <vfprintf+0x5f4>
    1760:	d5 14       	cp	r13, r5
    1762:	58 f4       	brcc	.+22     	; 0x177a <vfprintf+0x5f4>
    1764:	b7 01       	movw	r22, r14
    1766:	80 e2       	ldi	r24, 0x20	; 32
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    176e:	d3 94       	inc	r13
    1770:	f7 cf       	rjmp	.-18     	; 0x1760 <vfprintf+0x5da>
    1772:	d5 14       	cp	r13, r5
    1774:	10 f4       	brcc	.+4      	; 0x177a <vfprintf+0x5f4>
    1776:	5d 18       	sub	r5, r13
    1778:	01 c0       	rjmp	.+2      	; 0x177c <vfprintf+0x5f6>
    177a:	51 2c       	mov	r5, r1
    177c:	04 ff       	sbrs	r16, 4
    177e:	10 c0       	rjmp	.+32     	; 0x17a0 <vfprintf+0x61a>
    1780:	b7 01       	movw	r22, r14
    1782:	80 e3       	ldi	r24, 0x30	; 48
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    178a:	02 ff       	sbrs	r16, 2
    178c:	17 c0       	rjmp	.+46     	; 0x17bc <vfprintf+0x636>
    178e:	01 fd       	sbrc	r16, 1
    1790:	03 c0       	rjmp	.+6      	; 0x1798 <vfprintf+0x612>
    1792:	88 e7       	ldi	r24, 0x78	; 120
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	02 c0       	rjmp	.+4      	; 0x179c <vfprintf+0x616>
    1798:	88 e5       	ldi	r24, 0x58	; 88
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	b7 01       	movw	r22, r14
    179e:	0c c0       	rjmp	.+24     	; 0x17b8 <vfprintf+0x632>
    17a0:	80 2f       	mov	r24, r16
    17a2:	86 78       	andi	r24, 0x86	; 134
    17a4:	59 f0       	breq	.+22     	; 0x17bc <vfprintf+0x636>
    17a6:	01 ff       	sbrs	r16, 1
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <vfprintf+0x628>
    17aa:	8b e2       	ldi	r24, 0x2B	; 43
    17ac:	01 c0       	rjmp	.+2      	; 0x17b0 <vfprintf+0x62a>
    17ae:	80 e2       	ldi	r24, 0x20	; 32
    17b0:	07 fd       	sbrc	r16, 7
    17b2:	8d e2       	ldi	r24, 0x2D	; 45
    17b4:	b7 01       	movw	r22, r14
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    17bc:	c1 16       	cp	r12, r17
    17be:	38 f4       	brcc	.+14     	; 0x17ce <vfprintf+0x648>
    17c0:	b7 01       	movw	r22, r14
    17c2:	80 e3       	ldi	r24, 0x30	; 48
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    17ca:	11 50       	subi	r17, 0x01	; 1
    17cc:	f7 cf       	rjmp	.-18     	; 0x17bc <vfprintf+0x636>
    17ce:	ca 94       	dec	r12
    17d0:	f3 01       	movw	r30, r6
    17d2:	ec 0d       	add	r30, r12
    17d4:	f1 1d       	adc	r31, r1
    17d6:	80 81       	ld	r24, Z
    17d8:	b7 01       	movw	r22, r14
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    17e0:	c1 10       	cpse	r12, r1
    17e2:	f5 cf       	rjmp	.-22     	; 0x17ce <vfprintf+0x648>
    17e4:	15 c0       	rjmp	.+42     	; 0x1810 <vfprintf+0x68a>
    17e6:	f4 e0       	ldi	r31, 0x04	; 4
    17e8:	f5 15       	cp	r31, r5
    17ea:	60 f5       	brcc	.+88     	; 0x1844 <vfprintf+0x6be>
    17ec:	84 e0       	ldi	r24, 0x04	; 4
    17ee:	58 1a       	sub	r5, r24
    17f0:	93 fe       	sbrs	r9, 3
    17f2:	1f c0       	rjmp	.+62     	; 0x1832 <vfprintf+0x6ac>
    17f4:	01 11       	cpse	r16, r1
    17f6:	27 c0       	rjmp	.+78     	; 0x1846 <vfprintf+0x6c0>
    17f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    17fa:	23 ff       	sbrs	r18, 3
    17fc:	2a c0       	rjmp	.+84     	; 0x1852 <vfprintf+0x6cc>
    17fe:	0c ec       	ldi	r16, 0xCC	; 204
    1800:	10 e0       	ldi	r17, 0x00	; 0
    1802:	39 2d       	mov	r19, r9
    1804:	30 71       	andi	r19, 0x10	; 16
    1806:	93 2e       	mov	r9, r19
    1808:	f8 01       	movw	r30, r16
    180a:	84 91       	lpm	r24, Z
    180c:	81 11       	cpse	r24, r1
    180e:	24 c0       	rjmp	.+72     	; 0x1858 <vfprintf+0x6d2>
    1810:	55 20       	and	r5, r5
    1812:	09 f4       	brne	.+2      	; 0x1816 <vfprintf+0x690>
    1814:	e4 cc       	rjmp	.-1592   	; 0x11de <vfprintf+0x58>
    1816:	b7 01       	movw	r22, r14
    1818:	80 e2       	ldi	r24, 0x20	; 32
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    1820:	5a 94       	dec	r5
    1822:	f6 cf       	rjmp	.-20     	; 0x1810 <vfprintf+0x68a>
    1824:	f7 01       	movw	r30, r14
    1826:	86 81       	ldd	r24, Z+6	; 0x06
    1828:	97 81       	ldd	r25, Z+7	; 0x07
    182a:	26 c0       	rjmp	.+76     	; 0x1878 <vfprintf+0x6f2>
    182c:	8f ef       	ldi	r24, 0xFF	; 255
    182e:	9f ef       	ldi	r25, 0xFF	; 255
    1830:	23 c0       	rjmp	.+70     	; 0x1878 <vfprintf+0x6f2>
    1832:	b7 01       	movw	r22, r14
    1834:	80 e2       	ldi	r24, 0x20	; 32
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    183c:	5a 94       	dec	r5
    183e:	51 10       	cpse	r5, r1
    1840:	f8 cf       	rjmp	.-16     	; 0x1832 <vfprintf+0x6ac>
    1842:	d8 cf       	rjmp	.-80     	; 0x17f4 <vfprintf+0x66e>
    1844:	51 2c       	mov	r5, r1
    1846:	b7 01       	movw	r22, r14
    1848:	80 2f       	mov	r24, r16
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    1850:	d3 cf       	rjmp	.-90     	; 0x17f8 <vfprintf+0x672>
    1852:	00 ed       	ldi	r16, 0xD0	; 208
    1854:	10 e0       	ldi	r17, 0x00	; 0
    1856:	d5 cf       	rjmp	.-86     	; 0x1802 <vfprintf+0x67c>
    1858:	91 10       	cpse	r9, r1
    185a:	80 52       	subi	r24, 0x20	; 32
    185c:	b7 01       	movw	r22, r14
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <fputc>
    1864:	0f 5f       	subi	r16, 0xFF	; 255
    1866:	1f 4f       	sbci	r17, 0xFF	; 255
    1868:	cf cf       	rjmp	.-98     	; 0x1808 <vfprintf+0x682>
    186a:	23 e0       	ldi	r18, 0x03	; 3
    186c:	25 15       	cp	r18, r5
    186e:	10 f4       	brcc	.+4      	; 0x1874 <vfprintf+0x6ee>
    1870:	83 e0       	ldi	r24, 0x03	; 3
    1872:	bd cf       	rjmp	.-134    	; 0x17ee <vfprintf+0x668>
    1874:	51 2c       	mov	r5, r1
    1876:	c0 cf       	rjmp	.-128    	; 0x17f8 <vfprintf+0x672>
    1878:	60 96       	adiw	r28, 0x10	; 16
    187a:	e2 e1       	ldi	r30, 0x12	; 18
    187c:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__epilogue_restores__>

00001880 <__udivmodsi4>:
    1880:	a1 e2       	ldi	r26, 0x21	; 33
    1882:	1a 2e       	mov	r1, r26
    1884:	aa 1b       	sub	r26, r26
    1886:	bb 1b       	sub	r27, r27
    1888:	fd 01       	movw	r30, r26
    188a:	0d c0       	rjmp	.+26     	; 0x18a6 <__udivmodsi4_ep>

0000188c <__udivmodsi4_loop>:
    188c:	aa 1f       	adc	r26, r26
    188e:	bb 1f       	adc	r27, r27
    1890:	ee 1f       	adc	r30, r30
    1892:	ff 1f       	adc	r31, r31
    1894:	a2 17       	cp	r26, r18
    1896:	b3 07       	cpc	r27, r19
    1898:	e4 07       	cpc	r30, r20
    189a:	f5 07       	cpc	r31, r21
    189c:	20 f0       	brcs	.+8      	; 0x18a6 <__udivmodsi4_ep>
    189e:	a2 1b       	sub	r26, r18
    18a0:	b3 0b       	sbc	r27, r19
    18a2:	e4 0b       	sbc	r30, r20
    18a4:	f5 0b       	sbc	r31, r21

000018a6 <__udivmodsi4_ep>:
    18a6:	66 1f       	adc	r22, r22
    18a8:	77 1f       	adc	r23, r23
    18aa:	88 1f       	adc	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	1a 94       	dec	r1
    18b0:	69 f7       	brne	.-38     	; 0x188c <__udivmodsi4_loop>
    18b2:	60 95       	com	r22
    18b4:	70 95       	com	r23
    18b6:	80 95       	com	r24
    18b8:	90 95       	com	r25
    18ba:	9b 01       	movw	r18, r22
    18bc:	ac 01       	movw	r20, r24
    18be:	bd 01       	movw	r22, r26
    18c0:	cf 01       	movw	r24, r30
    18c2:	08 95       	ret

000018c4 <__prologue_saves__>:
    18c4:	2f 92       	push	r2
    18c6:	3f 92       	push	r3
    18c8:	4f 92       	push	r4
    18ca:	5f 92       	push	r5
    18cc:	6f 92       	push	r6
    18ce:	7f 92       	push	r7
    18d0:	8f 92       	push	r8
    18d2:	9f 92       	push	r9
    18d4:	af 92       	push	r10
    18d6:	bf 92       	push	r11
    18d8:	cf 92       	push	r12
    18da:	df 92       	push	r13
    18dc:	ef 92       	push	r14
    18de:	ff 92       	push	r15
    18e0:	0f 93       	push	r16
    18e2:	1f 93       	push	r17
    18e4:	cf 93       	push	r28
    18e6:	df 93       	push	r29
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	ca 1b       	sub	r28, r26
    18ee:	db 0b       	sbc	r29, r27
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	09 94       	ijmp

000018fc <__epilogue_restores__>:
    18fc:	2a 88       	ldd	r2, Y+18	; 0x12
    18fe:	39 88       	ldd	r3, Y+17	; 0x11
    1900:	48 88       	ldd	r4, Y+16	; 0x10
    1902:	5f 84       	ldd	r5, Y+15	; 0x0f
    1904:	6e 84       	ldd	r6, Y+14	; 0x0e
    1906:	7d 84       	ldd	r7, Y+13	; 0x0d
    1908:	8c 84       	ldd	r8, Y+12	; 0x0c
    190a:	9b 84       	ldd	r9, Y+11	; 0x0b
    190c:	aa 84       	ldd	r10, Y+10	; 0x0a
    190e:	b9 84       	ldd	r11, Y+9	; 0x09
    1910:	c8 84       	ldd	r12, Y+8	; 0x08
    1912:	df 80       	ldd	r13, Y+7	; 0x07
    1914:	ee 80       	ldd	r14, Y+6	; 0x06
    1916:	fd 80       	ldd	r15, Y+5	; 0x05
    1918:	0c 81       	ldd	r16, Y+4	; 0x04
    191a:	1b 81       	ldd	r17, Y+3	; 0x03
    191c:	aa 81       	ldd	r26, Y+2	; 0x02
    191e:	b9 81       	ldd	r27, Y+1	; 0x01
    1920:	ce 0f       	add	r28, r30
    1922:	d1 1d       	adc	r29, r1
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	ed 01       	movw	r28, r26
    1930:	08 95       	ret

00001932 <__divsf3>:
    1932:	0e 94 ad 0c 	call	0x195a	; 0x195a <__divsf3x>
    1936:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <__fp_round>
    193a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__fp_pscB>
    193e:	58 f0       	brcs	.+22     	; 0x1956 <__divsf3+0x24>
    1940:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__fp_pscA>
    1944:	40 f0       	brcs	.+16     	; 0x1956 <__divsf3+0x24>
    1946:	29 f4       	brne	.+10     	; 0x1952 <__divsf3+0x20>
    1948:	5f 3f       	cpi	r21, 0xFF	; 255
    194a:	29 f0       	breq	.+10     	; 0x1956 <__divsf3+0x24>
    194c:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__fp_inf>
    1950:	51 11       	cpse	r21, r1
    1952:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__fp_szero>
    1956:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <__fp_nan>

0000195a <__divsf3x>:
    195a:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__fp_split3>
    195e:	68 f3       	brcs	.-38     	; 0x193a <__divsf3+0x8>

00001960 <__divsf3_pse>:
    1960:	99 23       	and	r25, r25
    1962:	b1 f3       	breq	.-20     	; 0x1950 <__divsf3+0x1e>
    1964:	55 23       	and	r21, r21
    1966:	91 f3       	breq	.-28     	; 0x194c <__divsf3+0x1a>
    1968:	95 1b       	sub	r25, r21
    196a:	55 0b       	sbc	r21, r21
    196c:	bb 27       	eor	r27, r27
    196e:	aa 27       	eor	r26, r26
    1970:	62 17       	cp	r22, r18
    1972:	73 07       	cpc	r23, r19
    1974:	84 07       	cpc	r24, r20
    1976:	38 f0       	brcs	.+14     	; 0x1986 <__divsf3_pse+0x26>
    1978:	9f 5f       	subi	r25, 0xFF	; 255
    197a:	5f 4f       	sbci	r21, 0xFF	; 255
    197c:	22 0f       	add	r18, r18
    197e:	33 1f       	adc	r19, r19
    1980:	44 1f       	adc	r20, r20
    1982:	aa 1f       	adc	r26, r26
    1984:	a9 f3       	breq	.-22     	; 0x1970 <__divsf3_pse+0x10>
    1986:	35 d0       	rcall	.+106    	; 0x19f2 <__divsf3_pse+0x92>
    1988:	0e 2e       	mov	r0, r30
    198a:	3a f0       	brmi	.+14     	; 0x199a <__divsf3_pse+0x3a>
    198c:	e0 e8       	ldi	r30, 0x80	; 128
    198e:	32 d0       	rcall	.+100    	; 0x19f4 <__divsf3_pse+0x94>
    1990:	91 50       	subi	r25, 0x01	; 1
    1992:	50 40       	sbci	r21, 0x00	; 0
    1994:	e6 95       	lsr	r30
    1996:	00 1c       	adc	r0, r0
    1998:	ca f7       	brpl	.-14     	; 0x198c <__divsf3_pse+0x2c>
    199a:	2b d0       	rcall	.+86     	; 0x19f2 <__divsf3_pse+0x92>
    199c:	fe 2f       	mov	r31, r30
    199e:	29 d0       	rcall	.+82     	; 0x19f2 <__divsf3_pse+0x92>
    19a0:	66 0f       	add	r22, r22
    19a2:	77 1f       	adc	r23, r23
    19a4:	88 1f       	adc	r24, r24
    19a6:	bb 1f       	adc	r27, r27
    19a8:	26 17       	cp	r18, r22
    19aa:	37 07       	cpc	r19, r23
    19ac:	48 07       	cpc	r20, r24
    19ae:	ab 07       	cpc	r26, r27
    19b0:	b0 e8       	ldi	r27, 0x80	; 128
    19b2:	09 f0       	breq	.+2      	; 0x19b6 <__divsf3_pse+0x56>
    19b4:	bb 0b       	sbc	r27, r27
    19b6:	80 2d       	mov	r24, r0
    19b8:	bf 01       	movw	r22, r30
    19ba:	ff 27       	eor	r31, r31
    19bc:	93 58       	subi	r25, 0x83	; 131
    19be:	5f 4f       	sbci	r21, 0xFF	; 255
    19c0:	3a f0       	brmi	.+14     	; 0x19d0 <__divsf3_pse+0x70>
    19c2:	9e 3f       	cpi	r25, 0xFE	; 254
    19c4:	51 05       	cpc	r21, r1
    19c6:	78 f0       	brcs	.+30     	; 0x19e6 <__divsf3_pse+0x86>
    19c8:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__fp_inf>
    19cc:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__fp_szero>
    19d0:	5f 3f       	cpi	r21, 0xFF	; 255
    19d2:	e4 f3       	brlt	.-8      	; 0x19cc <__divsf3_pse+0x6c>
    19d4:	98 3e       	cpi	r25, 0xE8	; 232
    19d6:	d4 f3       	brlt	.-12     	; 0x19cc <__divsf3_pse+0x6c>
    19d8:	86 95       	lsr	r24
    19da:	77 95       	ror	r23
    19dc:	67 95       	ror	r22
    19de:	b7 95       	ror	r27
    19e0:	f7 95       	ror	r31
    19e2:	9f 5f       	subi	r25, 0xFF	; 255
    19e4:	c9 f7       	brne	.-14     	; 0x19d8 <__divsf3_pse+0x78>
    19e6:	88 0f       	add	r24, r24
    19e8:	91 1d       	adc	r25, r1
    19ea:	96 95       	lsr	r25
    19ec:	87 95       	ror	r24
    19ee:	97 f9       	bld	r25, 7
    19f0:	08 95       	ret
    19f2:	e1 e0       	ldi	r30, 0x01	; 1
    19f4:	66 0f       	add	r22, r22
    19f6:	77 1f       	adc	r23, r23
    19f8:	88 1f       	adc	r24, r24
    19fa:	bb 1f       	adc	r27, r27
    19fc:	62 17       	cp	r22, r18
    19fe:	73 07       	cpc	r23, r19
    1a00:	84 07       	cpc	r24, r20
    1a02:	ba 07       	cpc	r27, r26
    1a04:	20 f0       	brcs	.+8      	; 0x1a0e <__divsf3_pse+0xae>
    1a06:	62 1b       	sub	r22, r18
    1a08:	73 0b       	sbc	r23, r19
    1a0a:	84 0b       	sbc	r24, r20
    1a0c:	ba 0b       	sbc	r27, r26
    1a0e:	ee 1f       	adc	r30, r30
    1a10:	88 f7       	brcc	.-30     	; 0x19f4 <__divsf3_pse+0x94>
    1a12:	e0 95       	com	r30
    1a14:	08 95       	ret

00001a16 <__fixsfsi>:
    1a16:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__fixunssfsi>
    1a1a:	68 94       	set
    1a1c:	b1 11       	cpse	r27, r1
    1a1e:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__fp_szero>
    1a22:	08 95       	ret

00001a24 <__fixunssfsi>:
    1a24:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__fp_splitA>
    1a28:	88 f0       	brcs	.+34     	; 0x1a4c <__fixunssfsi+0x28>
    1a2a:	9f 57       	subi	r25, 0x7F	; 127
    1a2c:	98 f0       	brcs	.+38     	; 0x1a54 <__fixunssfsi+0x30>
    1a2e:	b9 2f       	mov	r27, r25
    1a30:	99 27       	eor	r25, r25
    1a32:	b7 51       	subi	r27, 0x17	; 23
    1a34:	b0 f0       	brcs	.+44     	; 0x1a62 <__fixunssfsi+0x3e>
    1a36:	e1 f0       	breq	.+56     	; 0x1a70 <__fixunssfsi+0x4c>
    1a38:	66 0f       	add	r22, r22
    1a3a:	77 1f       	adc	r23, r23
    1a3c:	88 1f       	adc	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	1a f0       	brmi	.+6      	; 0x1a48 <__fixunssfsi+0x24>
    1a42:	ba 95       	dec	r27
    1a44:	c9 f7       	brne	.-14     	; 0x1a38 <__fixunssfsi+0x14>
    1a46:	14 c0       	rjmp	.+40     	; 0x1a70 <__fixunssfsi+0x4c>
    1a48:	b1 30       	cpi	r27, 0x01	; 1
    1a4a:	91 f0       	breq	.+36     	; 0x1a70 <__fixunssfsi+0x4c>
    1a4c:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__fp_zero>
    1a50:	b1 e0       	ldi	r27, 0x01	; 1
    1a52:	08 95       	ret
    1a54:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__fp_zero>
    1a58:	67 2f       	mov	r22, r23
    1a5a:	78 2f       	mov	r23, r24
    1a5c:	88 27       	eor	r24, r24
    1a5e:	b8 5f       	subi	r27, 0xF8	; 248
    1a60:	39 f0       	breq	.+14     	; 0x1a70 <__fixunssfsi+0x4c>
    1a62:	b9 3f       	cpi	r27, 0xF9	; 249
    1a64:	cc f3       	brlt	.-14     	; 0x1a58 <__fixunssfsi+0x34>
    1a66:	86 95       	lsr	r24
    1a68:	77 95       	ror	r23
    1a6a:	67 95       	ror	r22
    1a6c:	b3 95       	inc	r27
    1a6e:	d9 f7       	brne	.-10     	; 0x1a66 <__fixunssfsi+0x42>
    1a70:	3e f4       	brtc	.+14     	; 0x1a80 <__fixunssfsi+0x5c>
    1a72:	90 95       	com	r25
    1a74:	80 95       	com	r24
    1a76:	70 95       	com	r23
    1a78:	61 95       	neg	r22
    1a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a80:	08 95       	ret

00001a82 <__floatunsisf>:
    1a82:	e8 94       	clt
    1a84:	09 c0       	rjmp	.+18     	; 0x1a98 <__floatsisf+0x12>

00001a86 <__floatsisf>:
    1a86:	97 fb       	bst	r25, 7
    1a88:	3e f4       	brtc	.+14     	; 0x1a98 <__floatsisf+0x12>
    1a8a:	90 95       	com	r25
    1a8c:	80 95       	com	r24
    1a8e:	70 95       	com	r23
    1a90:	61 95       	neg	r22
    1a92:	7f 4f       	sbci	r23, 0xFF	; 255
    1a94:	8f 4f       	sbci	r24, 0xFF	; 255
    1a96:	9f 4f       	sbci	r25, 0xFF	; 255
    1a98:	99 23       	and	r25, r25
    1a9a:	a9 f0       	breq	.+42     	; 0x1ac6 <__floatsisf+0x40>
    1a9c:	f9 2f       	mov	r31, r25
    1a9e:	96 e9       	ldi	r25, 0x96	; 150
    1aa0:	bb 27       	eor	r27, r27
    1aa2:	93 95       	inc	r25
    1aa4:	f6 95       	lsr	r31
    1aa6:	87 95       	ror	r24
    1aa8:	77 95       	ror	r23
    1aaa:	67 95       	ror	r22
    1aac:	b7 95       	ror	r27
    1aae:	f1 11       	cpse	r31, r1
    1ab0:	f8 cf       	rjmp	.-16     	; 0x1aa2 <__floatsisf+0x1c>
    1ab2:	fa f4       	brpl	.+62     	; 0x1af2 <__floatsisf+0x6c>
    1ab4:	bb 0f       	add	r27, r27
    1ab6:	11 f4       	brne	.+4      	; 0x1abc <__floatsisf+0x36>
    1ab8:	60 ff       	sbrs	r22, 0
    1aba:	1b c0       	rjmp	.+54     	; 0x1af2 <__floatsisf+0x6c>
    1abc:	6f 5f       	subi	r22, 0xFF	; 255
    1abe:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac4:	16 c0       	rjmp	.+44     	; 0x1af2 <__floatsisf+0x6c>
    1ac6:	88 23       	and	r24, r24
    1ac8:	11 f0       	breq	.+4      	; 0x1ace <__floatsisf+0x48>
    1aca:	96 e9       	ldi	r25, 0x96	; 150
    1acc:	11 c0       	rjmp	.+34     	; 0x1af0 <__floatsisf+0x6a>
    1ace:	77 23       	and	r23, r23
    1ad0:	21 f0       	breq	.+8      	; 0x1ada <__floatsisf+0x54>
    1ad2:	9e e8       	ldi	r25, 0x8E	; 142
    1ad4:	87 2f       	mov	r24, r23
    1ad6:	76 2f       	mov	r23, r22
    1ad8:	05 c0       	rjmp	.+10     	; 0x1ae4 <__floatsisf+0x5e>
    1ada:	66 23       	and	r22, r22
    1adc:	71 f0       	breq	.+28     	; 0x1afa <__floatsisf+0x74>
    1ade:	96 e8       	ldi	r25, 0x86	; 134
    1ae0:	86 2f       	mov	r24, r22
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	60 e0       	ldi	r22, 0x00	; 0
    1ae6:	2a f0       	brmi	.+10     	; 0x1af2 <__floatsisf+0x6c>
    1ae8:	9a 95       	dec	r25
    1aea:	66 0f       	add	r22, r22
    1aec:	77 1f       	adc	r23, r23
    1aee:	88 1f       	adc	r24, r24
    1af0:	da f7       	brpl	.-10     	; 0x1ae8 <__floatsisf+0x62>
    1af2:	88 0f       	add	r24, r24
    1af4:	96 95       	lsr	r25
    1af6:	87 95       	ror	r24
    1af8:	97 f9       	bld	r25, 7
    1afa:	08 95       	ret

00001afc <__fp_inf>:
    1afc:	97 f9       	bld	r25, 7
    1afe:	9f 67       	ori	r25, 0x7F	; 127
    1b00:	80 e8       	ldi	r24, 0x80	; 128
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	60 e0       	ldi	r22, 0x00	; 0
    1b06:	08 95       	ret

00001b08 <__fp_nan>:
    1b08:	9f ef       	ldi	r25, 0xFF	; 255
    1b0a:	80 ec       	ldi	r24, 0xC0	; 192
    1b0c:	08 95       	ret

00001b0e <__fp_pscA>:
    1b0e:	00 24       	eor	r0, r0
    1b10:	0a 94       	dec	r0
    1b12:	16 16       	cp	r1, r22
    1b14:	17 06       	cpc	r1, r23
    1b16:	18 06       	cpc	r1, r24
    1b18:	09 06       	cpc	r0, r25
    1b1a:	08 95       	ret

00001b1c <__fp_pscB>:
    1b1c:	00 24       	eor	r0, r0
    1b1e:	0a 94       	dec	r0
    1b20:	12 16       	cp	r1, r18
    1b22:	13 06       	cpc	r1, r19
    1b24:	14 06       	cpc	r1, r20
    1b26:	05 06       	cpc	r0, r21
    1b28:	08 95       	ret

00001b2a <__fp_round>:
    1b2a:	09 2e       	mov	r0, r25
    1b2c:	03 94       	inc	r0
    1b2e:	00 0c       	add	r0, r0
    1b30:	11 f4       	brne	.+4      	; 0x1b36 <__fp_round+0xc>
    1b32:	88 23       	and	r24, r24
    1b34:	52 f0       	brmi	.+20     	; 0x1b4a <__fp_round+0x20>
    1b36:	bb 0f       	add	r27, r27
    1b38:	40 f4       	brcc	.+16     	; 0x1b4a <__fp_round+0x20>
    1b3a:	bf 2b       	or	r27, r31
    1b3c:	11 f4       	brne	.+4      	; 0x1b42 <__fp_round+0x18>
    1b3e:	60 ff       	sbrs	r22, 0
    1b40:	04 c0       	rjmp	.+8      	; 0x1b4a <__fp_round+0x20>
    1b42:	6f 5f       	subi	r22, 0xFF	; 255
    1b44:	7f 4f       	sbci	r23, 0xFF	; 255
    1b46:	8f 4f       	sbci	r24, 0xFF	; 255
    1b48:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4a:	08 95       	ret

00001b4c <__fp_split3>:
    1b4c:	57 fd       	sbrc	r21, 7
    1b4e:	90 58       	subi	r25, 0x80	; 128
    1b50:	44 0f       	add	r20, r20
    1b52:	55 1f       	adc	r21, r21
    1b54:	59 f0       	breq	.+22     	; 0x1b6c <__fp_splitA+0x10>
    1b56:	5f 3f       	cpi	r21, 0xFF	; 255
    1b58:	71 f0       	breq	.+28     	; 0x1b76 <__fp_splitA+0x1a>
    1b5a:	47 95       	ror	r20

00001b5c <__fp_splitA>:
    1b5c:	88 0f       	add	r24, r24
    1b5e:	97 fb       	bst	r25, 7
    1b60:	99 1f       	adc	r25, r25
    1b62:	61 f0       	breq	.+24     	; 0x1b7c <__fp_splitA+0x20>
    1b64:	9f 3f       	cpi	r25, 0xFF	; 255
    1b66:	79 f0       	breq	.+30     	; 0x1b86 <__fp_splitA+0x2a>
    1b68:	87 95       	ror	r24
    1b6a:	08 95       	ret
    1b6c:	12 16       	cp	r1, r18
    1b6e:	13 06       	cpc	r1, r19
    1b70:	14 06       	cpc	r1, r20
    1b72:	55 1f       	adc	r21, r21
    1b74:	f2 cf       	rjmp	.-28     	; 0x1b5a <__fp_split3+0xe>
    1b76:	46 95       	lsr	r20
    1b78:	f1 df       	rcall	.-30     	; 0x1b5c <__fp_splitA>
    1b7a:	08 c0       	rjmp	.+16     	; 0x1b8c <__fp_splitA+0x30>
    1b7c:	16 16       	cp	r1, r22
    1b7e:	17 06       	cpc	r1, r23
    1b80:	18 06       	cpc	r1, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	f1 cf       	rjmp	.-30     	; 0x1b68 <__fp_splitA+0xc>
    1b86:	86 95       	lsr	r24
    1b88:	71 05       	cpc	r23, r1
    1b8a:	61 05       	cpc	r22, r1
    1b8c:	08 94       	sec
    1b8e:	08 95       	ret

00001b90 <__fp_zero>:
    1b90:	e8 94       	clt

00001b92 <__fp_szero>:
    1b92:	bb 27       	eor	r27, r27
    1b94:	66 27       	eor	r22, r22
    1b96:	77 27       	eor	r23, r23
    1b98:	cb 01       	movw	r24, r22
    1b9a:	97 f9       	bld	r25, 7
    1b9c:	08 95       	ret

00001b9e <__mulsf3>:
    1b9e:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__mulsf3x>
    1ba2:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <__fp_round>
    1ba6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__fp_pscA>
    1baa:	38 f0       	brcs	.+14     	; 0x1bba <__mulsf3+0x1c>
    1bac:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__fp_pscB>
    1bb0:	20 f0       	brcs	.+8      	; 0x1bba <__mulsf3+0x1c>
    1bb2:	95 23       	and	r25, r21
    1bb4:	11 f0       	breq	.+4      	; 0x1bba <__mulsf3+0x1c>
    1bb6:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__fp_inf>
    1bba:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <__fp_nan>
    1bbe:	11 24       	eor	r1, r1
    1bc0:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__fp_szero>

00001bc4 <__mulsf3x>:
    1bc4:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__fp_split3>
    1bc8:	70 f3       	brcs	.-36     	; 0x1ba6 <__mulsf3+0x8>

00001bca <__mulsf3_pse>:
    1bca:	95 9f       	mul	r25, r21
    1bcc:	c1 f3       	breq	.-16     	; 0x1bbe <__mulsf3+0x20>
    1bce:	95 0f       	add	r25, r21
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	55 1f       	adc	r21, r21
    1bd4:	62 9f       	mul	r22, r18
    1bd6:	f0 01       	movw	r30, r0
    1bd8:	72 9f       	mul	r23, r18
    1bda:	bb 27       	eor	r27, r27
    1bdc:	f0 0d       	add	r31, r0
    1bde:	b1 1d       	adc	r27, r1
    1be0:	63 9f       	mul	r22, r19
    1be2:	aa 27       	eor	r26, r26
    1be4:	f0 0d       	add	r31, r0
    1be6:	b1 1d       	adc	r27, r1
    1be8:	aa 1f       	adc	r26, r26
    1bea:	64 9f       	mul	r22, r20
    1bec:	66 27       	eor	r22, r22
    1bee:	b0 0d       	add	r27, r0
    1bf0:	a1 1d       	adc	r26, r1
    1bf2:	66 1f       	adc	r22, r22
    1bf4:	82 9f       	mul	r24, r18
    1bf6:	22 27       	eor	r18, r18
    1bf8:	b0 0d       	add	r27, r0
    1bfa:	a1 1d       	adc	r26, r1
    1bfc:	62 1f       	adc	r22, r18
    1bfe:	73 9f       	mul	r23, r19
    1c00:	b0 0d       	add	r27, r0
    1c02:	a1 1d       	adc	r26, r1
    1c04:	62 1f       	adc	r22, r18
    1c06:	83 9f       	mul	r24, r19
    1c08:	a0 0d       	add	r26, r0
    1c0a:	61 1d       	adc	r22, r1
    1c0c:	22 1f       	adc	r18, r18
    1c0e:	74 9f       	mul	r23, r20
    1c10:	33 27       	eor	r19, r19
    1c12:	a0 0d       	add	r26, r0
    1c14:	61 1d       	adc	r22, r1
    1c16:	23 1f       	adc	r18, r19
    1c18:	84 9f       	mul	r24, r20
    1c1a:	60 0d       	add	r22, r0
    1c1c:	21 1d       	adc	r18, r1
    1c1e:	82 2f       	mov	r24, r18
    1c20:	76 2f       	mov	r23, r22
    1c22:	6a 2f       	mov	r22, r26
    1c24:	11 24       	eor	r1, r1
    1c26:	9f 57       	subi	r25, 0x7F	; 127
    1c28:	50 40       	sbci	r21, 0x00	; 0
    1c2a:	9a f0       	brmi	.+38     	; 0x1c52 <__mulsf3_pse+0x88>
    1c2c:	f1 f0       	breq	.+60     	; 0x1c6a <__mulsf3_pse+0xa0>
    1c2e:	88 23       	and	r24, r24
    1c30:	4a f0       	brmi	.+18     	; 0x1c44 <__mulsf3_pse+0x7a>
    1c32:	ee 0f       	add	r30, r30
    1c34:	ff 1f       	adc	r31, r31
    1c36:	bb 1f       	adc	r27, r27
    1c38:	66 1f       	adc	r22, r22
    1c3a:	77 1f       	adc	r23, r23
    1c3c:	88 1f       	adc	r24, r24
    1c3e:	91 50       	subi	r25, 0x01	; 1
    1c40:	50 40       	sbci	r21, 0x00	; 0
    1c42:	a9 f7       	brne	.-22     	; 0x1c2e <__mulsf3_pse+0x64>
    1c44:	9e 3f       	cpi	r25, 0xFE	; 254
    1c46:	51 05       	cpc	r21, r1
    1c48:	80 f0       	brcs	.+32     	; 0x1c6a <__mulsf3_pse+0xa0>
    1c4a:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__fp_inf>
    1c4e:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__fp_szero>
    1c52:	5f 3f       	cpi	r21, 0xFF	; 255
    1c54:	e4 f3       	brlt	.-8      	; 0x1c4e <__mulsf3_pse+0x84>
    1c56:	98 3e       	cpi	r25, 0xE8	; 232
    1c58:	d4 f3       	brlt	.-12     	; 0x1c4e <__mulsf3_pse+0x84>
    1c5a:	86 95       	lsr	r24
    1c5c:	77 95       	ror	r23
    1c5e:	67 95       	ror	r22
    1c60:	b7 95       	ror	r27
    1c62:	f7 95       	ror	r31
    1c64:	e7 95       	ror	r30
    1c66:	9f 5f       	subi	r25, 0xFF	; 255
    1c68:	c1 f7       	brne	.-16     	; 0x1c5a <__mulsf3_pse+0x90>
    1c6a:	fe 2b       	or	r31, r30
    1c6c:	88 0f       	add	r24, r24
    1c6e:	91 1d       	adc	r25, r1
    1c70:	96 95       	lsr	r25
    1c72:	87 95       	ror	r24
    1c74:	97 f9       	bld	r25, 7
    1c76:	08 95       	ret

00001c78 <__ftoa_engine>:
    1c78:	28 30       	cpi	r18, 0x08	; 8
    1c7a:	08 f0       	brcs	.+2      	; 0x1c7e <__ftoa_engine+0x6>
    1c7c:	27 e0       	ldi	r18, 0x07	; 7
    1c7e:	33 27       	eor	r19, r19
    1c80:	da 01       	movw	r26, r20
    1c82:	99 0f       	add	r25, r25
    1c84:	31 1d       	adc	r19, r1
    1c86:	87 fd       	sbrc	r24, 7
    1c88:	91 60       	ori	r25, 0x01	; 1
    1c8a:	00 96       	adiw	r24, 0x00	; 0
    1c8c:	61 05       	cpc	r22, r1
    1c8e:	71 05       	cpc	r23, r1
    1c90:	39 f4       	brne	.+14     	; 0x1ca0 <__ftoa_engine+0x28>
    1c92:	32 60       	ori	r19, 0x02	; 2
    1c94:	2e 5f       	subi	r18, 0xFE	; 254
    1c96:	3d 93       	st	X+, r19
    1c98:	30 e3       	ldi	r19, 0x30	; 48
    1c9a:	2a 95       	dec	r18
    1c9c:	e1 f7       	brne	.-8      	; 0x1c96 <__ftoa_engine+0x1e>
    1c9e:	08 95       	ret
    1ca0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ca2:	30 f0       	brcs	.+12     	; 0x1cb0 <__ftoa_engine+0x38>
    1ca4:	80 38       	cpi	r24, 0x80	; 128
    1ca6:	71 05       	cpc	r23, r1
    1ca8:	61 05       	cpc	r22, r1
    1caa:	09 f0       	breq	.+2      	; 0x1cae <__ftoa_engine+0x36>
    1cac:	3c 5f       	subi	r19, 0xFC	; 252
    1cae:	3c 5f       	subi	r19, 0xFC	; 252
    1cb0:	3d 93       	st	X+, r19
    1cb2:	91 30       	cpi	r25, 0x01	; 1
    1cb4:	08 f0       	brcs	.+2      	; 0x1cb8 <__ftoa_engine+0x40>
    1cb6:	80 68       	ori	r24, 0x80	; 128
    1cb8:	91 1d       	adc	r25, r1
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	1f 93       	push	r17
    1cc0:	0f 93       	push	r16
    1cc2:	ff 92       	push	r15
    1cc4:	ef 92       	push	r14
    1cc6:	19 2f       	mov	r17, r25
    1cc8:	98 7f       	andi	r25, 0xF8	; 248
    1cca:	96 95       	lsr	r25
    1ccc:	e9 2f       	mov	r30, r25
    1cce:	96 95       	lsr	r25
    1cd0:	96 95       	lsr	r25
    1cd2:	e9 0f       	add	r30, r25
    1cd4:	ff 27       	eor	r31, r31
    1cd6:	e2 5d       	subi	r30, 0xD2	; 210
    1cd8:	fe 4f       	sbci	r31, 0xFE	; 254
    1cda:	99 27       	eor	r25, r25
    1cdc:	33 27       	eor	r19, r19
    1cde:	ee 24       	eor	r14, r14
    1ce0:	ff 24       	eor	r15, r15
    1ce2:	a7 01       	movw	r20, r14
    1ce4:	e7 01       	movw	r28, r14
    1ce6:	05 90       	lpm	r0, Z+
    1ce8:	08 94       	sec
    1cea:	07 94       	ror	r0
    1cec:	28 f4       	brcc	.+10     	; 0x1cf8 <__ftoa_engine+0x80>
    1cee:	36 0f       	add	r19, r22
    1cf0:	e7 1e       	adc	r14, r23
    1cf2:	f8 1e       	adc	r15, r24
    1cf4:	49 1f       	adc	r20, r25
    1cf6:	51 1d       	adc	r21, r1
    1cf8:	66 0f       	add	r22, r22
    1cfa:	77 1f       	adc	r23, r23
    1cfc:	88 1f       	adc	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	06 94       	lsr	r0
    1d02:	a1 f7       	brne	.-24     	; 0x1cec <__ftoa_engine+0x74>
    1d04:	05 90       	lpm	r0, Z+
    1d06:	07 94       	ror	r0
    1d08:	28 f4       	brcc	.+10     	; 0x1d14 <__ftoa_engine+0x9c>
    1d0a:	e7 0e       	add	r14, r23
    1d0c:	f8 1e       	adc	r15, r24
    1d0e:	49 1f       	adc	r20, r25
    1d10:	56 1f       	adc	r21, r22
    1d12:	c1 1d       	adc	r28, r1
    1d14:	77 0f       	add	r23, r23
    1d16:	88 1f       	adc	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	66 1f       	adc	r22, r22
    1d1c:	06 94       	lsr	r0
    1d1e:	a1 f7       	brne	.-24     	; 0x1d08 <__ftoa_engine+0x90>
    1d20:	05 90       	lpm	r0, Z+
    1d22:	07 94       	ror	r0
    1d24:	28 f4       	brcc	.+10     	; 0x1d30 <__ftoa_engine+0xb8>
    1d26:	f8 0e       	add	r15, r24
    1d28:	49 1f       	adc	r20, r25
    1d2a:	56 1f       	adc	r21, r22
    1d2c:	c7 1f       	adc	r28, r23
    1d2e:	d1 1d       	adc	r29, r1
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	66 1f       	adc	r22, r22
    1d36:	77 1f       	adc	r23, r23
    1d38:	06 94       	lsr	r0
    1d3a:	a1 f7       	brne	.-24     	; 0x1d24 <__ftoa_engine+0xac>
    1d3c:	05 90       	lpm	r0, Z+
    1d3e:	07 94       	ror	r0
    1d40:	20 f4       	brcc	.+8      	; 0x1d4a <__ftoa_engine+0xd2>
    1d42:	49 0f       	add	r20, r25
    1d44:	56 1f       	adc	r21, r22
    1d46:	c7 1f       	adc	r28, r23
    1d48:	d8 1f       	adc	r29, r24
    1d4a:	99 0f       	add	r25, r25
    1d4c:	66 1f       	adc	r22, r22
    1d4e:	77 1f       	adc	r23, r23
    1d50:	88 1f       	adc	r24, r24
    1d52:	06 94       	lsr	r0
    1d54:	a9 f7       	brne	.-22     	; 0x1d40 <__ftoa_engine+0xc8>
    1d56:	84 91       	lpm	r24, Z
    1d58:	10 95       	com	r17
    1d5a:	17 70       	andi	r17, 0x07	; 7
    1d5c:	41 f0       	breq	.+16     	; 0x1d6e <__ftoa_engine+0xf6>
    1d5e:	d6 95       	lsr	r29
    1d60:	c7 95       	ror	r28
    1d62:	57 95       	ror	r21
    1d64:	47 95       	ror	r20
    1d66:	f7 94       	ror	r15
    1d68:	e7 94       	ror	r14
    1d6a:	1a 95       	dec	r17
    1d6c:	c1 f7       	brne	.-16     	; 0x1d5e <__ftoa_engine+0xe6>
    1d6e:	e4 ed       	ldi	r30, 0xD4	; 212
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	68 94       	set
    1d74:	15 90       	lpm	r1, Z+
    1d76:	15 91       	lpm	r17, Z+
    1d78:	35 91       	lpm	r19, Z+
    1d7a:	65 91       	lpm	r22, Z+
    1d7c:	95 91       	lpm	r25, Z+
    1d7e:	05 90       	lpm	r0, Z+
    1d80:	7f e2       	ldi	r23, 0x2F	; 47
    1d82:	73 95       	inc	r23
    1d84:	e1 18       	sub	r14, r1
    1d86:	f1 0a       	sbc	r15, r17
    1d88:	43 0b       	sbc	r20, r19
    1d8a:	56 0b       	sbc	r21, r22
    1d8c:	c9 0b       	sbc	r28, r25
    1d8e:	d0 09       	sbc	r29, r0
    1d90:	c0 f7       	brcc	.-16     	; 0x1d82 <__ftoa_engine+0x10a>
    1d92:	e1 0c       	add	r14, r1
    1d94:	f1 1e       	adc	r15, r17
    1d96:	43 1f       	adc	r20, r19
    1d98:	56 1f       	adc	r21, r22
    1d9a:	c9 1f       	adc	r28, r25
    1d9c:	d0 1d       	adc	r29, r0
    1d9e:	7e f4       	brtc	.+30     	; 0x1dbe <__ftoa_engine+0x146>
    1da0:	70 33       	cpi	r23, 0x30	; 48
    1da2:	11 f4       	brne	.+4      	; 0x1da8 <__ftoa_engine+0x130>
    1da4:	8a 95       	dec	r24
    1da6:	e6 cf       	rjmp	.-52     	; 0x1d74 <__ftoa_engine+0xfc>
    1da8:	e8 94       	clt
    1daa:	01 50       	subi	r16, 0x01	; 1
    1dac:	30 f0       	brcs	.+12     	; 0x1dba <__ftoa_engine+0x142>
    1dae:	08 0f       	add	r16, r24
    1db0:	0a f4       	brpl	.+2      	; 0x1db4 <__ftoa_engine+0x13c>
    1db2:	00 27       	eor	r16, r16
    1db4:	02 17       	cp	r16, r18
    1db6:	08 f4       	brcc	.+2      	; 0x1dba <__ftoa_engine+0x142>
    1db8:	20 2f       	mov	r18, r16
    1dba:	23 95       	inc	r18
    1dbc:	02 2f       	mov	r16, r18
    1dbe:	7a 33       	cpi	r23, 0x3A	; 58
    1dc0:	28 f0       	brcs	.+10     	; 0x1dcc <__ftoa_engine+0x154>
    1dc2:	79 e3       	ldi	r23, 0x39	; 57
    1dc4:	7d 93       	st	X+, r23
    1dc6:	2a 95       	dec	r18
    1dc8:	e9 f7       	brne	.-6      	; 0x1dc4 <__ftoa_engine+0x14c>
    1dca:	10 c0       	rjmp	.+32     	; 0x1dec <__ftoa_engine+0x174>
    1dcc:	7d 93       	st	X+, r23
    1dce:	2a 95       	dec	r18
    1dd0:	89 f6       	brne	.-94     	; 0x1d74 <__ftoa_engine+0xfc>
    1dd2:	06 94       	lsr	r0
    1dd4:	97 95       	ror	r25
    1dd6:	67 95       	ror	r22
    1dd8:	37 95       	ror	r19
    1dda:	17 95       	ror	r17
    1ddc:	17 94       	ror	r1
    1dde:	e1 18       	sub	r14, r1
    1de0:	f1 0a       	sbc	r15, r17
    1de2:	43 0b       	sbc	r20, r19
    1de4:	56 0b       	sbc	r21, r22
    1de6:	c9 0b       	sbc	r28, r25
    1de8:	d0 09       	sbc	r29, r0
    1dea:	98 f0       	brcs	.+38     	; 0x1e12 <__ftoa_engine+0x19a>
    1dec:	23 95       	inc	r18
    1dee:	7e 91       	ld	r23, -X
    1df0:	73 95       	inc	r23
    1df2:	7a 33       	cpi	r23, 0x3A	; 58
    1df4:	08 f0       	brcs	.+2      	; 0x1df8 <__ftoa_engine+0x180>
    1df6:	70 e3       	ldi	r23, 0x30	; 48
    1df8:	7c 93       	st	X, r23
    1dfa:	20 13       	cpse	r18, r16
    1dfc:	b8 f7       	brcc	.-18     	; 0x1dec <__ftoa_engine+0x174>
    1dfe:	7e 91       	ld	r23, -X
    1e00:	70 61       	ori	r23, 0x10	; 16
    1e02:	7d 93       	st	X+, r23
    1e04:	30 f0       	brcs	.+12     	; 0x1e12 <__ftoa_engine+0x19a>
    1e06:	83 95       	inc	r24
    1e08:	71 e3       	ldi	r23, 0x31	; 49
    1e0a:	7d 93       	st	X+, r23
    1e0c:	70 e3       	ldi	r23, 0x30	; 48
    1e0e:	2a 95       	dec	r18
    1e10:	e1 f7       	brne	.-8      	; 0x1e0a <__ftoa_engine+0x192>
    1e12:	11 24       	eor	r1, r1
    1e14:	ef 90       	pop	r14
    1e16:	ff 90       	pop	r15
    1e18:	0f 91       	pop	r16
    1e1a:	1f 91       	pop	r17
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	99 27       	eor	r25, r25
    1e22:	87 fd       	sbrc	r24, 7
    1e24:	90 95       	com	r25
    1e26:	08 95       	ret

00001e28 <strnlen_P>:
    1e28:	fc 01       	movw	r30, r24
    1e2a:	05 90       	lpm	r0, Z+
    1e2c:	61 50       	subi	r22, 0x01	; 1
    1e2e:	70 40       	sbci	r23, 0x00	; 0
    1e30:	01 10       	cpse	r0, r1
    1e32:	d8 f7       	brcc	.-10     	; 0x1e2a <strnlen_P+0x2>
    1e34:	80 95       	com	r24
    1e36:	90 95       	com	r25
    1e38:	8e 0f       	add	r24, r30
    1e3a:	9f 1f       	adc	r25, r31
    1e3c:	08 95       	ret

00001e3e <strcat>:
    1e3e:	fb 01       	movw	r30, r22
    1e40:	dc 01       	movw	r26, r24
    1e42:	0d 90       	ld	r0, X+
    1e44:	00 20       	and	r0, r0
    1e46:	e9 f7       	brne	.-6      	; 0x1e42 <strcat+0x4>
    1e48:	11 97       	sbiw	r26, 0x01	; 1
    1e4a:	01 90       	ld	r0, Z+
    1e4c:	0d 92       	st	X+, r0
    1e4e:	00 20       	and	r0, r0
    1e50:	e1 f7       	brne	.-8      	; 0x1e4a <strcat+0xc>
    1e52:	08 95       	ret

00001e54 <strcpy>:
    1e54:	fb 01       	movw	r30, r22
    1e56:	dc 01       	movw	r26, r24
    1e58:	01 90       	ld	r0, Z+
    1e5a:	0d 92       	st	X+, r0
    1e5c:	00 20       	and	r0, r0
    1e5e:	e1 f7       	brne	.-8      	; 0x1e58 <strcpy+0x4>
    1e60:	08 95       	ret

00001e62 <strncmp>:
    1e62:	fb 01       	movw	r30, r22
    1e64:	dc 01       	movw	r26, r24
    1e66:	41 50       	subi	r20, 0x01	; 1
    1e68:	50 40       	sbci	r21, 0x00	; 0
    1e6a:	30 f0       	brcs	.+12     	; 0x1e78 <strncmp+0x16>
    1e6c:	8d 91       	ld	r24, X+
    1e6e:	01 90       	ld	r0, Z+
    1e70:	80 19       	sub	r24, r0
    1e72:	19 f4       	brne	.+6      	; 0x1e7a <strncmp+0x18>
    1e74:	00 20       	and	r0, r0
    1e76:	b9 f7       	brne	.-18     	; 0x1e66 <strncmp+0x4>
    1e78:	88 1b       	sub	r24, r24
    1e7a:	99 0b       	sbc	r25, r25
    1e7c:	08 95       	ret

00001e7e <strnlen>:
    1e7e:	fc 01       	movw	r30, r24
    1e80:	61 50       	subi	r22, 0x01	; 1
    1e82:	70 40       	sbci	r23, 0x00	; 0
    1e84:	01 90       	ld	r0, Z+
    1e86:	01 10       	cpse	r0, r1
    1e88:	d8 f7       	brcc	.-10     	; 0x1e80 <strnlen+0x2>
    1e8a:	80 95       	com	r24
    1e8c:	90 95       	com	r25
    1e8e:	8e 0f       	add	r24, r30
    1e90:	9f 1f       	adc	r25, r31
    1e92:	08 95       	ret

00001e94 <fputc>:
    1e94:	0f 93       	push	r16
    1e96:	1f 93       	push	r17
    1e98:	cf 93       	push	r28
    1e9a:	df 93       	push	r29
    1e9c:	fb 01       	movw	r30, r22
    1e9e:	23 81       	ldd	r18, Z+3	; 0x03
    1ea0:	21 fd       	sbrc	r18, 1
    1ea2:	03 c0       	rjmp	.+6      	; 0x1eaa <fputc+0x16>
    1ea4:	8f ef       	ldi	r24, 0xFF	; 255
    1ea6:	9f ef       	ldi	r25, 0xFF	; 255
    1ea8:	2c c0       	rjmp	.+88     	; 0x1f02 <fputc+0x6e>
    1eaa:	22 ff       	sbrs	r18, 2
    1eac:	16 c0       	rjmp	.+44     	; 0x1eda <fputc+0x46>
    1eae:	46 81       	ldd	r20, Z+6	; 0x06
    1eb0:	57 81       	ldd	r21, Z+7	; 0x07
    1eb2:	24 81       	ldd	r18, Z+4	; 0x04
    1eb4:	35 81       	ldd	r19, Z+5	; 0x05
    1eb6:	42 17       	cp	r20, r18
    1eb8:	53 07       	cpc	r21, r19
    1eba:	44 f4       	brge	.+16     	; 0x1ecc <fputc+0x38>
    1ebc:	a0 81       	ld	r26, Z
    1ebe:	b1 81       	ldd	r27, Z+1	; 0x01
    1ec0:	9d 01       	movw	r18, r26
    1ec2:	2f 5f       	subi	r18, 0xFF	; 255
    1ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec6:	31 83       	std	Z+1, r19	; 0x01
    1ec8:	20 83       	st	Z, r18
    1eca:	8c 93       	st	X, r24
    1ecc:	26 81       	ldd	r18, Z+6	; 0x06
    1ece:	37 81       	ldd	r19, Z+7	; 0x07
    1ed0:	2f 5f       	subi	r18, 0xFF	; 255
    1ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed4:	37 83       	std	Z+7, r19	; 0x07
    1ed6:	26 83       	std	Z+6, r18	; 0x06
    1ed8:	14 c0       	rjmp	.+40     	; 0x1f02 <fputc+0x6e>
    1eda:	8b 01       	movw	r16, r22
    1edc:	ec 01       	movw	r28, r24
    1ede:	fb 01       	movw	r30, r22
    1ee0:	00 84       	ldd	r0, Z+8	; 0x08
    1ee2:	f1 85       	ldd	r31, Z+9	; 0x09
    1ee4:	e0 2d       	mov	r30, r0
    1ee6:	09 95       	icall
    1ee8:	89 2b       	or	r24, r25
    1eea:	e1 f6       	brne	.-72     	; 0x1ea4 <fputc+0x10>
    1eec:	d8 01       	movw	r26, r16
    1eee:	16 96       	adiw	r26, 0x06	; 6
    1ef0:	8d 91       	ld	r24, X+
    1ef2:	9c 91       	ld	r25, X
    1ef4:	17 97       	sbiw	r26, 0x07	; 7
    1ef6:	01 96       	adiw	r24, 0x01	; 1
    1ef8:	17 96       	adiw	r26, 0x07	; 7
    1efa:	9c 93       	st	X, r25
    1efc:	8e 93       	st	-X, r24
    1efe:	16 97       	sbiw	r26, 0x06	; 6
    1f00:	ce 01       	movw	r24, r28
    1f02:	df 91       	pop	r29
    1f04:	cf 91       	pop	r28
    1f06:	1f 91       	pop	r17
    1f08:	0f 91       	pop	r16
    1f0a:	08 95       	ret

00001f0c <puts>:
    1f0c:	0f 93       	push	r16
    1f0e:	1f 93       	push	r17
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	e0 91 65 05 	lds	r30, 0x0565	; 0x800565 <__iob+0x2>
    1f18:	f0 91 66 05 	lds	r31, 0x0566	; 0x800566 <__iob+0x3>
    1f1c:	23 81       	ldd	r18, Z+3	; 0x03
    1f1e:	21 ff       	sbrs	r18, 1
    1f20:	1b c0       	rjmp	.+54     	; 0x1f58 <puts+0x4c>
    1f22:	8c 01       	movw	r16, r24
    1f24:	d0 e0       	ldi	r29, 0x00	; 0
    1f26:	c0 e0       	ldi	r28, 0x00	; 0
    1f28:	f8 01       	movw	r30, r16
    1f2a:	81 91       	ld	r24, Z+
    1f2c:	8f 01       	movw	r16, r30
    1f2e:	60 91 65 05 	lds	r22, 0x0565	; 0x800565 <__iob+0x2>
    1f32:	70 91 66 05 	lds	r23, 0x0566	; 0x800566 <__iob+0x3>
    1f36:	db 01       	movw	r26, r22
    1f38:	18 96       	adiw	r26, 0x08	; 8
    1f3a:	ed 91       	ld	r30, X+
    1f3c:	fc 91       	ld	r31, X
    1f3e:	19 97       	sbiw	r26, 0x09	; 9
    1f40:	88 23       	and	r24, r24
    1f42:	31 f0       	breq	.+12     	; 0x1f50 <puts+0x44>
    1f44:	09 95       	icall
    1f46:	89 2b       	or	r24, r25
    1f48:	79 f3       	breq	.-34     	; 0x1f28 <puts+0x1c>
    1f4a:	df ef       	ldi	r29, 0xFF	; 255
    1f4c:	cf ef       	ldi	r28, 0xFF	; 255
    1f4e:	ec cf       	rjmp	.-40     	; 0x1f28 <puts+0x1c>
    1f50:	8a e0       	ldi	r24, 0x0A	; 10
    1f52:	09 95       	icall
    1f54:	89 2b       	or	r24, r25
    1f56:	19 f0       	breq	.+6      	; 0x1f5e <puts+0x52>
    1f58:	8f ef       	ldi	r24, 0xFF	; 255
    1f5a:	9f ef       	ldi	r25, 0xFF	; 255
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <puts+0x56>
    1f5e:	8d 2f       	mov	r24, r29
    1f60:	9c 2f       	mov	r25, r28
    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	1f 91       	pop	r17
    1f68:	0f 91       	pop	r16
    1f6a:	08 95       	ret

00001f6c <sprintf>:
    1f6c:	ae e0       	ldi	r26, 0x0E	; 14
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	ec eb       	ldi	r30, 0xBC	; 188
    1f72:	ff e0       	ldi	r31, 0x0F	; 15
    1f74:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__prologue_saves__+0x1c>
    1f78:	0d 89       	ldd	r16, Y+21	; 0x15
    1f7a:	1e 89       	ldd	r17, Y+22	; 0x16
    1f7c:	86 e0       	ldi	r24, 0x06	; 6
    1f7e:	8c 83       	std	Y+4, r24	; 0x04
    1f80:	1a 83       	std	Y+2, r17	; 0x02
    1f82:	09 83       	std	Y+1, r16	; 0x01
    1f84:	8f ef       	ldi	r24, 0xFF	; 255
    1f86:	9f e7       	ldi	r25, 0x7F	; 127
    1f88:	9e 83       	std	Y+6, r25	; 0x06
    1f8a:	8d 83       	std	Y+5, r24	; 0x05
    1f8c:	ae 01       	movw	r20, r28
    1f8e:	47 5e       	subi	r20, 0xE7	; 231
    1f90:	5f 4f       	sbci	r21, 0xFF	; 255
    1f92:	6f 89       	ldd	r22, Y+23	; 0x17
    1f94:	78 8d       	ldd	r23, Y+24	; 0x18
    1f96:	ce 01       	movw	r24, r28
    1f98:	01 96       	adiw	r24, 0x01	; 1
    1f9a:	0e 94 c3 08 	call	0x1186	; 0x1186 <vfprintf>
    1f9e:	ef 81       	ldd	r30, Y+7	; 0x07
    1fa0:	f8 85       	ldd	r31, Y+8	; 0x08
    1fa2:	e0 0f       	add	r30, r16
    1fa4:	f1 1f       	adc	r31, r17
    1fa6:	10 82       	st	Z, r1
    1fa8:	2e 96       	adiw	r28, 0x0e	; 14
    1faa:	e4 e0       	ldi	r30, 0x04	; 4
    1fac:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__epilogue_restores__+0x1c>

00001fb0 <__ultoa_invert>:
    1fb0:	fa 01       	movw	r30, r20
    1fb2:	aa 27       	eor	r26, r26
    1fb4:	28 30       	cpi	r18, 0x08	; 8
    1fb6:	51 f1       	breq	.+84     	; 0x200c <__ultoa_invert+0x5c>
    1fb8:	20 31       	cpi	r18, 0x10	; 16
    1fba:	81 f1       	breq	.+96     	; 0x201c <__ultoa_invert+0x6c>
    1fbc:	e8 94       	clt
    1fbe:	6f 93       	push	r22
    1fc0:	6e 7f       	andi	r22, 0xFE	; 254
    1fc2:	6e 5f       	subi	r22, 0xFE	; 254
    1fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc6:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fca:	af 4f       	sbci	r26, 0xFF	; 255
    1fcc:	b1 e0       	ldi	r27, 0x01	; 1
    1fce:	3e d0       	rcall	.+124    	; 0x204c <__ultoa_invert+0x9c>
    1fd0:	b4 e0       	ldi	r27, 0x04	; 4
    1fd2:	3c d0       	rcall	.+120    	; 0x204c <__ultoa_invert+0x9c>
    1fd4:	67 0f       	add	r22, r23
    1fd6:	78 1f       	adc	r23, r24
    1fd8:	89 1f       	adc	r24, r25
    1fda:	9a 1f       	adc	r25, r26
    1fdc:	a1 1d       	adc	r26, r1
    1fde:	68 0f       	add	r22, r24
    1fe0:	79 1f       	adc	r23, r25
    1fe2:	8a 1f       	adc	r24, r26
    1fe4:	91 1d       	adc	r25, r1
    1fe6:	a1 1d       	adc	r26, r1
    1fe8:	6a 0f       	add	r22, r26
    1fea:	71 1d       	adc	r23, r1
    1fec:	81 1d       	adc	r24, r1
    1fee:	91 1d       	adc	r25, r1
    1ff0:	a1 1d       	adc	r26, r1
    1ff2:	20 d0       	rcall	.+64     	; 0x2034 <__ultoa_invert+0x84>
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <__ultoa_invert+0x48>
    1ff6:	68 94       	set
    1ff8:	3f 91       	pop	r19
    1ffa:	2a e0       	ldi	r18, 0x0A	; 10
    1ffc:	26 9f       	mul	r18, r22
    1ffe:	11 24       	eor	r1, r1
    2000:	30 19       	sub	r19, r0
    2002:	30 5d       	subi	r19, 0xD0	; 208
    2004:	31 93       	st	Z+, r19
    2006:	de f6       	brtc	.-74     	; 0x1fbe <__ultoa_invert+0xe>
    2008:	cf 01       	movw	r24, r30
    200a:	08 95       	ret
    200c:	46 2f       	mov	r20, r22
    200e:	47 70       	andi	r20, 0x07	; 7
    2010:	40 5d       	subi	r20, 0xD0	; 208
    2012:	41 93       	st	Z+, r20
    2014:	b3 e0       	ldi	r27, 0x03	; 3
    2016:	0f d0       	rcall	.+30     	; 0x2036 <__ultoa_invert+0x86>
    2018:	c9 f7       	brne	.-14     	; 0x200c <__ultoa_invert+0x5c>
    201a:	f6 cf       	rjmp	.-20     	; 0x2008 <__ultoa_invert+0x58>
    201c:	46 2f       	mov	r20, r22
    201e:	4f 70       	andi	r20, 0x0F	; 15
    2020:	40 5d       	subi	r20, 0xD0	; 208
    2022:	4a 33       	cpi	r20, 0x3A	; 58
    2024:	18 f0       	brcs	.+6      	; 0x202c <__ultoa_invert+0x7c>
    2026:	49 5d       	subi	r20, 0xD9	; 217
    2028:	31 fd       	sbrc	r19, 1
    202a:	40 52       	subi	r20, 0x20	; 32
    202c:	41 93       	st	Z+, r20
    202e:	02 d0       	rcall	.+4      	; 0x2034 <__ultoa_invert+0x84>
    2030:	a9 f7       	brne	.-22     	; 0x201c <__ultoa_invert+0x6c>
    2032:	ea cf       	rjmp	.-44     	; 0x2008 <__ultoa_invert+0x58>
    2034:	b4 e0       	ldi	r27, 0x04	; 4
    2036:	a6 95       	lsr	r26
    2038:	97 95       	ror	r25
    203a:	87 95       	ror	r24
    203c:	77 95       	ror	r23
    203e:	67 95       	ror	r22
    2040:	ba 95       	dec	r27
    2042:	c9 f7       	brne	.-14     	; 0x2036 <__ultoa_invert+0x86>
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	61 05       	cpc	r22, r1
    2048:	71 05       	cpc	r23, r1
    204a:	08 95       	ret
    204c:	9b 01       	movw	r18, r22
    204e:	ac 01       	movw	r20, r24
    2050:	0a 2e       	mov	r0, r26
    2052:	06 94       	lsr	r0
    2054:	57 95       	ror	r21
    2056:	47 95       	ror	r20
    2058:	37 95       	ror	r19
    205a:	27 95       	ror	r18
    205c:	ba 95       	dec	r27
    205e:	c9 f7       	brne	.-14     	; 0x2052 <__ultoa_invert+0xa2>
    2060:	62 0f       	add	r22, r18
    2062:	73 1f       	adc	r23, r19
    2064:	84 1f       	adc	r24, r20
    2066:	95 1f       	adc	r25, r21
    2068:	a0 1d       	adc	r26, r0
    206a:	08 95       	ret

0000206c <_exit>:
    206c:	f8 94       	cli

0000206e <__stop_program>:
    206e:	ff cf       	rjmp	.-2      	; 0x206e <__stop_program>
