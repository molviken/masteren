
LoRa-node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004de  00800100  00002326  000023ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002326  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d8  008005de  008005de  00002898  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000028f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00002934  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003aa0  00000000  00000000  00002bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a62  00000000  00000000  0000668c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ece  00000000  00000000  000080ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000784  00000000  00000000  00009fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010dc  00000000  00000000  0000a740  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b7b  00000000  00000000  0000b81c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0000d397  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__ctors_end>
       4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
       8:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__vector_2>
       c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      10:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      14:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      18:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      1c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      20:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      24:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      28:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      2c:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__vector_11>
      30:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      34:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      38:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      3c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      40:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      44:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      48:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      4c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      50:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      54:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      58:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      5c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      60:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      64:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      68:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      6c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      70:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      74:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      78:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      7c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      80:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      84:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      88:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      8c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      90:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      94:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      98:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      9c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      a8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      ac:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      b8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      bc:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__vector_47>
      c0:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      c4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      c8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>

000000cc <__trampolines_end>:
      cc:	6e 61       	ori	r22, 0x1E	; 30
      ce:	6e 00       	.word	0x006e	; ????

000000d0 <__c.2332>:
      d0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      e0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      f0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     100:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     110:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     120:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     130:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     140:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     150:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     160:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     170:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     180:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     190:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1a0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1b0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1c0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001ce <__ctors_end>:
     1ce:	11 24       	eor	r1, r1
     1d0:	1f be       	out	0x3f, r1	; 63
     1d2:	cf ef       	ldi	r28, 0xFF	; 255
     1d4:	d8 e0       	ldi	r29, 0x08	; 8
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	cd bf       	out	0x3d, r28	; 61

000001da <__do_copy_data>:
     1da:	15 e0       	ldi	r17, 0x05	; 5
     1dc:	a0 e0       	ldi	r26, 0x00	; 0
     1de:	b1 e0       	ldi	r27, 0x01	; 1
     1e0:	e6 e2       	ldi	r30, 0x26	; 38
     1e2:	f3 e2       	ldi	r31, 0x23	; 35
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <__do_copy_data+0x10>
     1e6:	05 90       	lpm	r0, Z+
     1e8:	0d 92       	st	X+, r0
     1ea:	ae 3d       	cpi	r26, 0xDE	; 222
     1ec:	b1 07       	cpc	r27, r17
     1ee:	d9 f7       	brne	.-10     	; 0x1e6 <__do_copy_data+0xc>

000001f0 <__do_clear_bss>:
     1f0:	26 e0       	ldi	r18, 0x06	; 6
     1f2:	ae ed       	ldi	r26, 0xDE	; 222
     1f4:	b5 e0       	ldi	r27, 0x05	; 5
     1f6:	01 c0       	rjmp	.+2      	; 0x1fa <.do_clear_bss_start>

000001f8 <.do_clear_bss_loop>:
     1f8:	1d 92       	st	X+, r1

000001fa <.do_clear_bss_start>:
     1fa:	a6 3b       	cpi	r26, 0xB6	; 182
     1fc:	b2 07       	cpc	r27, r18
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <.do_clear_bss_loop>
     200:	0e 94 06 01 	call	0x20c	; 0x20c <main>
     204:	0c 94 91 11 	jmp	0x2322	; 0x2322 <_exit>

00000208 <__bad_interrupt>:
     208:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020c <main>:




int main(void){
	MCUSR &= ~(1 << WDRF);
     20c:	84 b7       	in	r24, 0x34	; 52
     20e:	87 7f       	andi	r24, 0xF7	; 247
     210:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	a8 95       	wdr
     218:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     21c:	88 61       	ori	r24, 0x18	; 24
     21e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     222:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     226:	0f be       	out	0x3f, r0	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     228:	2f ef       	ldi	r18, 0xFF	; 255
     22a:	83 ec       	ldi	r24, 0xC3	; 195
     22c:	99 e0       	ldi	r25, 0x09	; 9
     22e:	21 50       	subi	r18, 0x01	; 1
     230:	80 40       	sbci	r24, 0x00	; 0
     232:	90 40       	sbci	r25, 0x00	; 0
     234:	e1 f7       	brne	.-8      	; 0x22e <main+0x22>
     236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x2c>
     238:	00 00       	nop
	wdt_disable();
	_delay_ms(400); // Start-up time after pressing reset button
	
	#ifdef DEBUG_M
	set_bit(LEDS,LED3);
     23a:	2a 9a       	sbi	0x05, 2	; 5
	#endif
	FSM_run();
     23c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <FSM_run>
	puts("Program ended");
     240:	8e e0       	ldi	r24, 0x0E	; 14
     242:	92 e0       	ldi	r25, 0x02	; 2
     244:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <puts>
	return 0;
}
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	08 95       	ret

0000024e <adc_init>:




void adc_init(){
	ADMUX = 0;
     24e:	ac e7       	ldi	r26, 0x7C	; 124
     250:	b0 e0       	ldi	r27, 0x00	; 0
     252:	1c 92       	st	X, r1
	ADCSRA = 0;
     254:	ea e7       	ldi	r30, 0x7A	; 122
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	10 82       	st	Z, r1
	ADMUX |= ADC_VOLTAGE_REF_AVCC;											// Sets adc voltage reference
     25a:	8c 91       	ld	r24, X
     25c:	80 64       	ori	r24, 0x40	; 64
     25e:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESCALAR_128;											// ADC prescaler = 128 ---> 8MHz goes to 62.5 kHz
     260:	80 81       	ld	r24, Z
     262:	86 60       	ori	r24, 0x06	; 6
     264:	80 83       	st	Z, r24
	//ADCSRA |= (0 << ADIE);												// Enables ADC interrupt
	ADCSRA |= (1 << ADEN);													// Enabling the ADC
     266:	80 81       	ld	r24, Z
     268:	80 68       	ori	r24, 0x80	; 128
     26a:	80 83       	st	Z, r24
     26c:	08 95       	ret

0000026e <adc_read>:
}


uint16_t adc_read(){
	uint16_t val;					
	ADCSRA |= (1 << ADSC);													// Starts single conversion
     26e:	ea e7       	ldi	r30, 0x7A	; 122
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	80 64       	ori	r24, 0x40	; 64
     276:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));
     278:	80 81       	ld	r24, Z
     27a:	84 ff       	sbrs	r24, 4
     27c:	fd cf       	rjmp	.-6      	; 0x278 <adc_read+0xa>
	val = ADCW;
     27e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     282:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	if ((int)val > 1000){val = 1000;}
     286:	89 3e       	cpi	r24, 0xE9	; 233
     288:	23 e0       	ldi	r18, 0x03	; 3
     28a:	92 07       	cpc	r25, r18
     28c:	14 f0       	brlt	.+4      	; 0x292 <adc_read+0x24>
     28e:	88 ee       	ldi	r24, 0xE8	; 232
     290:	93 e0       	ldi	r25, 0x03	; 3
	return val;
}
     292:	08 95       	ret

00000294 <adc_change_channel>:

void adc_change_channel(uint8_t channel){
	ADMUX |= channel;														// Setting adc channel to be read
     294:	ec e7       	ldi	r30, 0x7C	; 124
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	90 81       	ld	r25, Z
     29a:	89 2b       	or	r24, r25
     29c:	80 83       	st	Z, r24
	adc_read();																// Discard first measurement after channel change
     29e:	0e 94 37 01 	call	0x26e	; 0x26e <adc_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a2:	8a e1       	ldi	r24, 0x1A	; 26
     2a4:	8a 95       	dec	r24
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <adc_change_channel+0x10>
     2a8:	00 c0       	rjmp	.+0      	; 0x2aa <adc_change_channel+0x16>
     2aa:	08 95       	ret

000002ac <board_charge>:
	DDRD |= (1 << DDRD4);	  // Set PD4 as output
	
}

void board_charge(int off){
	if (off){
     2ac:	89 2b       	or	r24, r25
     2ae:	11 f0       	breq	.+4      	; 0x2b4 <board_charge+0x8>
		clear_bit(PORTD, PORTD4);
     2b0:	5c 98       	cbi	0x0b, 4	; 11
     2b2:	08 95       	ret
		//clear_bit(LEDS, LED1);
	}
	else {
		set_bit(PORTD, PORTD4);
     2b4:	5c 9a       	sbi	0x0b, 4	; 11
     2b6:	08 95       	ret

000002b8 <board_setup>:
		//set_bit(LEDS, LED1);
	}
}

void board_setup(uint8_t *joined_err){
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	ec 01       	movw	r28, r24
	#ifndef LORA_NODE
	USART_init();
	#endif
	adc_init();
     2be:	0e 94 27 01 	call	0x24e	; 0x24e <adc_init>

static void board_dmy_btn_init();
static void board_gpio_init();

void board_dmy_btn_init(void){
	DDRD &= ~(1 << DDD3);     // Clear the PD2 pin
     2c2:	53 98       	cbi	0x0a, 3	; 10
	EICRA |= (1 << ISC11);    // set INT1 to trigger on falling edge
     2c4:	e9 e6       	ldi	r30, 0x69	; 105
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	88 60       	ori	r24, 0x08	; 8
     2cc:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);     // Turns on INT1
     2ce:	e9 9a       	sbi	0x1d, 1	; 29
}

void board_gpio_init(void){
	DDRD |= (1 << DDRD4);	  // Set PD4 as output
     2d0:	54 9a       	sbi	0x0a, 4	; 10
	USART_init();
	#endif
	adc_init();
	board_dmy_btn_init();
	board_gpio_init();
	board_charge(0);
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 56 01 	call	0x2ac	; 0x2ac <board_charge>
	#ifdef LORA_NODE
		lora_init(joined_err);
     2da:	ce 01       	movw	r24, r28
     2dc:	0e 94 ac 06 	call	0xd58	; 0xd58 <lora_init>
	#else
		*joined_err = 0;
	#endif

	i2c_init();
     2e0:	0e 94 99 03 	call	0x732	; 0x732 <i2c_init>
	INA219_init();
     2e4:	0e 94 74 05 	call	0xae8	; 0xae8 <INA219_init>
	timers_init();
     2e8:	0e 94 01 09 	call	0x1202	; 0x1202 <timers_init>
	sei();
     2ec:	78 94       	sei
}
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	08 95       	ret

000002f4 <board_get_battery_level>:
	
	r1 = 174;
	r2 = 255;
	battery_max = 4.2;
	
	adc_change_channel(VBAT);
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	0e 94 4a 01 	call	0x294	; 0x294 <adc_change_channel>
	val = adc_read();
     2fa:	0e 94 37 01 	call	0x26e	; 0x26e <adc_read>
	
	v_div_tick = (((r2)/(r1+r2))*battery_max) / 1024;
	vbat = v_div_tick*val*(r1+r2)/r2;
	bat_percentage = vbat*100/battery_max;
	
	return bat_percentage;
     2fe:	bc 01       	movw	r22, r24
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__floatunsisf>
     308:	26 eb       	ldi	r18, 0xB6	; 182
     30a:	36 ec       	ldi	r19, 0xC6	; 198
     30c:	4f e1       	ldi	r20, 0x1F	; 31
     30e:	5b e3       	ldi	r21, 0x3B	; 59
     310:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__mulsf3>
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e8       	ldi	r19, 0x80	; 128
     318:	46 ed       	ldi	r20, 0xD6	; 214
     31a:	53 e4       	ldi	r21, 0x43	; 67
     31c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__mulsf3>
     320:	20 e0       	ldi	r18, 0x00	; 0
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	4f e7       	ldi	r20, 0x7F	; 127
     326:	53 e4       	ldi	r21, 0x43	; 67
     328:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__divsf3>
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	48 ec       	ldi	r20, 0xC8	; 200
     332:	52 e4       	ldi	r21, 0x42	; 66
     334:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__mulsf3>
     338:	26 e6       	ldi	r18, 0x66	; 102
     33a:	36 e6       	ldi	r19, 0x66	; 102
     33c:	46 e8       	ldi	r20, 0x86	; 134
     33e:	50 e4       	ldi	r21, 0x40	; 64
     340:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__divsf3>
     344:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__fixsfsi>
     348:	86 2f       	mov	r24, r22
     34a:	08 95       	ret

0000034c <FSM_system_reset>:
	#ifdef DEBUG_M
	puts("Init complete, FSM running");
	#endif
}
void FSM_system_reset(){
	cli();	
     34c:	f8 94       	cli
	WDTCSR = 0x00;
     34e:	e0 e6       	ldi	r30, 0x60	; 96
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	10 82       	st	Z, r1
	WDTCSR = (1<<WDE);
     354:	88 e0       	ldi	r24, 0x08	; 8
     356:	80 83       	st	Z, r24
     358:	08 95       	ret

0000035a <FSM_assert_downlink>:
}
void FSM_assert_downlink(){
	uint32_t ts = 0;
	uint16_t sample_size_new;
	size_t str_len = strlen(downlink);
     35a:	e1 ee       	ldi	r30, 0xE1	; 225
     35c:	f5 e0       	ldi	r31, 0x05	; 5
     35e:	01 90       	ld	r0, Z+
     360:	00 20       	and	r0, r0
     362:	e9 f7       	brne	.-6      	; 0x35e <FSM_assert_downlink+0x4>
     364:	31 97       	sbiw	r30, 0x01	; 1
     366:	bf 01       	movw	r22, r30
     368:	61 5e       	subi	r22, 0xE1	; 225
     36a:	75 40       	sbci	r23, 0x05	; 5
	#ifdef LORA_NODE
		if (str_len > 28) ascii_hex_decode(downlink, str_len, downlink_pairs, LORA_RX_PAYLOAD_OFFSET);
     36c:	6d 31       	cpi	r22, 0x1D	; 29
     36e:	71 05       	cpc	r23, r1
     370:	48 f0       	brcs	.+18     	; 0x384 <FSM_assert_downlink+0x2a>
     372:	29 e0       	ldi	r18, 0x09	; 9
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	4b e4       	ldi	r20, 0x4B	; 75
     378:	56 e0       	ldi	r21, 0x06	; 6
     37a:	81 ee       	ldi	r24, 0xE1	; 225
     37c:	95 e0       	ldi	r25, 0x05	; 5
     37e:	0e 94 3b 09 	call	0x1276	; 0x1276 <ascii_hex_decode>
     382:	08 c0       	rjmp	.+16     	; 0x394 <FSM_assert_downlink+0x3a>
		else hex_decode(downlink, str_len, downlink_pairs, LORA_RX_PAYLOAD_OFFSET);
     384:	29 e0       	ldi	r18, 0x09	; 9
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	4b e4       	ldi	r20, 0x4B	; 75
     38a:	56 e0       	ldi	r21, 0x06	; 6
     38c:	81 ee       	ldi	r24, 0xE1	; 225
     38e:	95 e0       	ldi	r25, 0x05	; 5
     390:	0e 94 b2 09 	call	0x1364	; 0x1364 <hex_decode>
	
	#else
		hex_decode(downlink, str_len, downlink_pairs, 0);
	#endif
	//printf("%02X %02X %02X\n", downlink_pairs[0], downlink_pairs[1], downlink_pairs[2]);
	switch (downlink_pairs[0]){
     394:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <downlink_pairs>
     398:	82 32       	cpi	r24, 0x22	; 34
     39a:	e9 f0       	breq	.+58     	; 0x3d6 <FSM_assert_downlink+0x7c>
     39c:	89 39       	cpi	r24, 0x99	; 153
     39e:	49 f1       	breq	.+82     	; 0x3f2 <FSM_assert_downlink+0x98>
     3a0:	81 31       	cpi	r24, 0x11	; 17
     3a2:	49 f5       	brne	.+82     	; 0x3f6 <FSM_assert_downlink+0x9c>
		case 0x11:
			set_bit(LEDS,LED3);
     3a4:	2a 9a       	sbi	0x05, 2	; 5
			ts = (uint32_t)downlink_pairs[4] | ((uint32_t)downlink_pairs[3] << 8) | ((uint32_t)downlink_pairs[2] << 16) | ((uint32_t)downlink_pairs[1] << 24);
     3a6:	eb e4       	ldi	r30, 0x4B	; 75
     3a8:	f6 e0       	ldi	r31, 0x06	; 6
     3aa:	23 81       	ldd	r18, Z+3	; 0x03
     3ac:	82 81       	ldd	r24, Z+2	; 0x02
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	a0 e0       	ldi	r26, 0x00	; 0
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	dc 01       	movw	r26, r24
     3b6:	99 27       	eor	r25, r25
     3b8:	88 27       	eor	r24, r24
     3ba:	92 2b       	or	r25, r18
     3bc:	24 81       	ldd	r18, Z+4	; 0x04
     3be:	82 2b       	or	r24, r18
     3c0:	21 81       	ldd	r18, Z+1	; 0x01
     3c2:	b2 2b       	or	r27, r18
			current_time = ts;
     3c4:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <current_time>
     3c8:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <current_time+0x1>
     3cc:	a0 93 47 06 	sts	0x0647, r26	; 0x800647 <current_time+0x2>
     3d0:	b0 93 48 06 	sts	0x0648, r27	; 0x800648 <current_time+0x3>
			break;
     3d4:	08 95       	ret
		
		case 0x22:
			set_bit(LEDS,LED3);
     3d6:	2a 9a       	sbi	0x05, 2	; 5
			sample_size_new = (uint16_t)downlink_pairs[2] | ((uint16_t)downlink_pairs[1] << 8);
     3d8:	eb e4       	ldi	r30, 0x4B	; 75
     3da:	f6 e0       	ldi	r31, 0x06	; 6
			sample_size = sample_size_new;
     3dc:	81 81       	ldd	r24, Z+1	; 0x01
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	98 2f       	mov	r25, r24
     3e2:	88 27       	eor	r24, r24
     3e4:	22 81       	ldd	r18, Z+2	; 0x02
     3e6:	82 2b       	or	r24, r18
     3e8:	90 93 4a 06 	sts	0x064A, r25	; 0x80064a <sample_size+0x1>
     3ec:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <sample_size>
			break;
     3f0:	08 95       	ret
		
		case 0x99:
			//USART_putstring2("Resetting...");
			FSM_system_reset();
     3f2:	0e 94 a6 01 	call	0x34c	; 0x34c <FSM_system_reset>
     3f6:	08 95       	ret

000003f8 <FSM_run>:
			break;
	}
}

void FSM_run(void){
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	63 97       	sbiw	r28, 0x13	; 19
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
	data_receive_flag = 0;
     40c:	10 92 af 06 	sts	0x06AF, r1	; 0x8006af <data_receive_flag>
	sample_size = BOARD_SAMPLE_SIZE;
     410:	8e e1       	ldi	r24, 0x1E	; 30
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	90 93 4a 06 	sts	0x064A, r25	; 0x80064a <sample_size+0x1>
     418:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <sample_size>
	board_t board1 = {0, 100, {0, 0, 0, 0}, 0, sample_size, ""};
     41c:	19 82       	std	Y+1, r1	; 0x01
     41e:	24 e6       	ldi	r18, 0x64	; 100
     420:	2a 83       	std	Y+2, r18	; 0x02
     422:	1c 82       	std	Y+4, r1	; 0x04
     424:	1b 82       	std	Y+3, r1	; 0x03
     426:	1e 82       	std	Y+6, r1	; 0x06
     428:	1d 82       	std	Y+5, r1	; 0x05
     42a:	1f 82       	std	Y+7, r1	; 0x07
     42c:	18 86       	std	Y+8, r1	; 0x08
     42e:	19 86       	std	Y+9, r1	; 0x09
     430:	1a 86       	std	Y+10, r1	; 0x0a
     432:	1b 86       	std	Y+11, r1	; 0x0b
     434:	1c 86       	std	Y+12, r1	; 0x0c
     436:	1d 86       	std	Y+13, r1	; 0x0d
     438:	1e 86       	std	Y+14, r1	; 0x0e
     43a:	1f 86       	std	Y+15, r1	; 0x0f
     43c:	99 8b       	std	Y+17, r25	; 0x11
     43e:	88 8b       	std	Y+16, r24	; 0x10
     440:	86 ec       	ldi	r24, 0xC6	; 198
     442:	95 e0       	ldi	r25, 0x05	; 5
     444:	9b 8b       	std	Y+19, r25	; 0x13
     446:	8a 8b       	std	Y+18, r24	; 0x12
		
	int rejoin_attempts = 0;
     448:	00 e0       	ldi	r16, 0x00	; 0
     44a:	10 e0       	ldi	r17, 0x00	; 0
			
			case ST_DATA_RECEIVED:
				
			
			case ST_ACTIVE:
				PORTB ^= (1<<LED2);
     44c:	68 94       	set
     44e:	ee 24       	eor	r14, r14
     450:	e1 f8       	bld	r14, 1
						lora_transmit(board1.msg);
					#endif
					board1.ina219.bus_voltage_avg = 0;
					board1.ina219.current_avg = 0;
				}
				nextState = ST_SLEEP;
     452:	ff 24       	eor	r15, r15
     454:	f3 94       	inc	r15
		}
		switch (nextState){
			
			case ST_INIT:
				FSM_system_init(&board1.lora_joined_err);
				if (board1.lora_joined_err) nextState = ST_NOT_JOINED;
     456:	0f 2e       	mov	r0, r31
     458:	f3 e0       	ldi	r31, 0x03	; 3
     45a:	df 2e       	mov	r13, r31
     45c:	f0 2d       	mov	r31, r0
		
	int rejoin_attempts = 0;
	uint8_t lora_wait_rejoin_minutes = 3;
	
	while (1){
		if (data_receive_flag){
     45e:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <data_receive_flag>
     462:	88 23       	and	r24, r24
     464:	21 f0       	breq	.+8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
			data_receive_flag = 0;
     466:	10 92 af 06 	sts	0x06AF, r1	; 0x8006af <data_receive_flag>
			FSM_assert_downlink();
     46a:	0e 94 ad 01 	call	0x35a	; 0x35a <FSM_assert_downlink>
			
		}
		if (tx_test_flag){
     46e:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <__data_end>
     472:	88 23       	and	r24, r24
     474:	51 f0       	breq	.+20     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
			tx_test_flag = 0;
     476:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <__data_end>
			printf("Transmit test\n");
     47a:	8c e1       	ldi	r24, 0x1C	; 28
     47c:	92 e0       	ldi	r25, 0x02	; 2
     47e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <puts>
			#ifdef LORA_NODE
				lora_transmit("025403210876");
     482:	8a e2       	ldi	r24, 0x2A	; 42
     484:	92 e0       	ldi	r25, 0x02	; 2
     486:	0e 94 24 08 	call	0x1048	; 0x1048 <lora_transmit>
			#else
				USART_putstring2("025403210876");
			#endif
		}
		switch (nextState){
     48a:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <nextState>
     48e:	82 30       	cpi	r24, 0x02	; 2
     490:	91 f1       	breq	.+100    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     492:	30 f4       	brcc	.+12     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     494:	88 23       	and	r24, r24
     496:	49 f0       	breq	.+18     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     498:	81 30       	cpi	r24, 0x01	; 1
     49a:	09 f4       	brne	.+2      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     49c:	de c0       	rjmp	.+444    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
     49e:	df cf       	rjmp	.-66     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     4a0:	83 30       	cpi	r24, 0x03	; 3
     4a2:	a1 f0       	breq	.+40     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4a4:	84 30       	cpi	r24, 0x04	; 4
     4a6:	39 f1       	breq	.+78     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4a8:	da cf       	rjmp	.-76     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
static volatile int rec_flag = 0;
static void FSM_system_init(uint8_t *joined_flag);
static uint8_t tx_test_flag;

void FSM_system_init(uint8_t *joined_flag){
	board_setup(joined_flag);
     4aa:	ce 01       	movw	r24, r28
     4ac:	0f 96       	adiw	r24, 0x0f	; 15
     4ae:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <board_setup>
	#ifdef DEBUG_M
	puts("Init complete, FSM running");
     4b2:	87 e3       	ldi	r24, 0x37	; 55
     4b4:	92 e0       	ldi	r25, 0x02	; 2
     4b6:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <puts>
		}
		switch (nextState){
			
			case ST_INIT:
				FSM_system_init(&board1.lora_joined_err);
				if (board1.lora_joined_err) nextState = ST_NOT_JOINED;
     4ba:	8f 85       	ldd	r24, Y+15	; 0x0f
     4bc:	88 23       	and	r24, r24
     4be:	19 f0       	breq	.+6      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4c0:	d0 92 e0 05 	sts	0x05E0, r13	; 0x8005e0 <nextState>
     4c4:	cc cf       	rjmp	.-104    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
				else nextState = ST_ACTIVE;
     4c6:	e0 92 e0 05 	sts	0x05E0, r14	; 0x8005e0 <nextState>
     4ca:	c9 cf       	rjmp	.-110    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
				break;
			
			case ST_NOT_JOINED:
				#ifdef DEBUG_M
					puts("Not joined");
     4cc:	82 e5       	ldi	r24, 0x52	; 82
     4ce:	92 e0       	ldi	r25, 0x02	; 2
     4d0:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <puts>
				#endif
				
				rejoin_attempts++;
     4d4:	0f 5f       	subi	r16, 0xFF	; 255
     4d6:	1f 4f       	sbci	r17, 0xFF	; 255
				if (rejoin_attempts < 3) board1.lora_joined_err = lora_join_OTAA();
     4d8:	03 30       	cpi	r16, 0x03	; 3
     4da:	11 05       	cpc	r17, r1
     4dc:	24 f4       	brge	.+8      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4de:	0e 94 87 06 	call	0xd0e	; 0xd0e <lora_join_OTAA>
     4e2:	8f 87       	std	Y+15, r24	; 0x0f
     4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
				else if (rejoin_attempts >= lora_wait_rejoin_minutes*60) rejoin_attempts = 0;
     4e6:	04 3b       	cpi	r16, 0xB4	; 180
     4e8:	11 05       	cpc	r17, r1
     4ea:	14 f0       	brlt	.+4      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4ec:	00 e0       	ldi	r16, 0x00	; 0
     4ee:	10 e0       	ldi	r17, 0x00	; 0

				nextState = ST_SLEEP;
     4f0:	f0 92 e0 05 	sts	0x05E0, r15	; 0x8005e0 <nextState>
				break;
     4f4:	b4 cf       	rjmp	.-152    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			
			case ST_DATA_RECEIVED:
				
			
			case ST_ACTIVE:
				PORTB ^= (1<<LED2);
     4f6:	85 b1       	in	r24, 0x05	; 5
     4f8:	8e 25       	eor	r24, r14
     4fa:	85 b9       	out	0x05, r24	; 5
				#ifdef DEBUG_M
					//puts("Active");
				#endif
				board1.ina219.bus_voltage_avg	+= INA219_readBusVoltageReg();
     4fc:	0e 94 f5 04 	call	0x9ea	; 0x9ea <INA219_readBusVoltageReg>
     500:	09 2e       	mov	r0, r25
     502:	00 0c       	add	r0, r0
     504:	aa 0b       	sbc	r26, r26
     506:	bb 0b       	sbc	r27, r27
     508:	4f 81       	ldd	r20, Y+7	; 0x07
     50a:	58 85       	ldd	r21, Y+8	; 0x08
     50c:	69 85       	ldd	r22, Y+9	; 0x09
     50e:	7a 85       	ldd	r23, Y+10	; 0x0a
     510:	84 0f       	add	r24, r20
     512:	95 1f       	adc	r25, r21
     514:	a6 1f       	adc	r26, r22
     516:	b7 1f       	adc	r27, r23
     518:	8f 83       	std	Y+7, r24	; 0x07
     51a:	98 87       	std	Y+8, r25	; 0x08
     51c:	a9 87       	std	Y+9, r26	; 0x09
     51e:	ba 87       	std	Y+10, r27	; 0x0a
				board1.ina219.current_avg		+= INA219_readCurrentReg();
     520:	0e 94 37 05 	call	0xa6e	; 0xa6e <INA219_readCurrentReg>
     524:	4b 85       	ldd	r20, Y+11	; 0x0b
     526:	5c 85       	ldd	r21, Y+12	; 0x0c
     528:	6d 85       	ldd	r22, Y+13	; 0x0d
     52a:	7e 85       	ldd	r23, Y+14	; 0x0e
     52c:	48 0f       	add	r20, r24
     52e:	59 1f       	adc	r21, r25
     530:	61 1d       	adc	r22, r1
     532:	71 1d       	adc	r23, r1
     534:	4b 87       	std	Y+11, r20	; 0x0b
     536:	5c 87       	std	Y+12, r21	; 0x0c
     538:	6d 87       	std	Y+13, r22	; 0x0d
     53a:	7e 87       	std	Y+14, r23	; 0x0e
				board1.batteryLevel = board_get_battery_level();
     53c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <board_get_battery_level>
     540:	8a 83       	std	Y+2, r24	; 0x02
				board1.sample_size = sample_size;
     542:	20 91 49 06 	lds	r18, 0x0649	; 0x800649 <sample_size>
     546:	30 91 4a 06 	lds	r19, 0x064A	; 0x80064a <sample_size+0x1>
     54a:	39 8b       	std	Y+17, r19	; 0x11
     54c:	28 8b       	std	Y+16, r18	; 0x10
				if (board1.batteryLevel < 70) board_charge(BOARD_CHARGE_ON);
     54e:	86 34       	cpi	r24, 0x46	; 70
     550:	28 f4       	brcc	.+10     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 56 01 	call	0x2ac	; 0x2ac <board_charge>
     55a:	06 c0       	rjmp	.+12     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
				else if (board1.batteryLevel > 95) board_charge(BOARD_CHARGE_OFF);
     55c:	80 36       	cpi	r24, 0x60	; 96
     55e:	20 f0       	brcs	.+8      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 56 01 	call	0x2ac	; 0x2ac <board_charge>
				if(!(current_time%board1.sample_size) && (current_time != 0)){
     568:	60 91 45 06 	lds	r22, 0x0645	; 0x800645 <current_time>
     56c:	70 91 46 06 	lds	r23, 0x0646	; 0x800646 <current_time+0x1>
     570:	80 91 47 06 	lds	r24, 0x0647	; 0x800647 <current_time+0x2>
     574:	90 91 48 06 	lds	r25, 0x0648	; 0x800648 <current_time+0x3>
     578:	28 89       	ldd	r18, Y+16	; 0x10
     57a:	39 89       	ldd	r19, Y+17	; 0x11
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__udivmodsi4>
     584:	67 2b       	or	r22, r23
     586:	68 2b       	or	r22, r24
     588:	69 2b       	or	r22, r25
     58a:	09 f0       	breq	.+2      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
     58c:	63 c0       	rjmp	.+198    	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     58e:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <current_time>
     592:	90 91 46 06 	lds	r25, 0x0646	; 0x800646 <current_time+0x1>
     596:	a0 91 47 06 	lds	r26, 0x0647	; 0x800647 <current_time+0x2>
     59a:	b0 91 48 06 	lds	r27, 0x0648	; 0x800648 <current_time+0x3>
     59e:	89 2b       	or	r24, r25
     5a0:	8a 2b       	or	r24, r26
     5a2:	8b 2b       	or	r24, r27
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
     5a6:	56 c0       	rjmp	.+172    	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
					#ifdef DEBUG_M
						puts("It's time");
     5a8:	8d e5       	ldi	r24, 0x5D	; 93
     5aa:	92 e0       	ldi	r25, 0x02	; 2
     5ac:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <puts>
					#endif
					if (frame_counter == 0xFF) frame_counter = 0;
     5b0:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <frame_counter>
     5b4:	8f 3f       	cpi	r24, 0xFF	; 255
     5b6:	11 f4       	brne	.+4      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     5b8:	10 92 df 05 	sts	0x05DF, r1	; 0x8005df <frame_counter>
					board1.frame_counter = frame_counter++;
     5bc:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <frame_counter>
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	98 0f       	add	r25, r24
     5c4:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <frame_counter>
     5c8:	89 83       	std	Y+1, r24	; 0x01
					board1.ina219.bus_voltage	= board1.ina219.bus_voltage_avg / board1.sample_size;
     5ca:	88 88       	ldd	r8, Y+16	; 0x10
     5cc:	99 88       	ldd	r9, Y+17	; 0x11
     5ce:	a1 2c       	mov	r10, r1
     5d0:	b1 2c       	mov	r11, r1
     5d2:	6f 81       	ldd	r22, Y+7	; 0x07
     5d4:	78 85       	ldd	r23, Y+8	; 0x08
     5d6:	89 85       	ldd	r24, Y+9	; 0x09
     5d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     5da:	a5 01       	movw	r20, r10
     5dc:	94 01       	movw	r18, r8
     5de:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__udivmodsi4>
     5e2:	3c 83       	std	Y+4, r19	; 0x04
     5e4:	2b 83       	std	Y+3, r18	; 0x03
					board1.ina219.current		= board1.ina219.current_avg / board1.sample_size;
     5e6:	6b 85       	ldd	r22, Y+11	; 0x0b
     5e8:	7c 85       	ldd	r23, Y+12	; 0x0c
     5ea:	8d 85       	ldd	r24, Y+13	; 0x0d
     5ec:	9e 85       	ldd	r25, Y+14	; 0x0e
     5ee:	a5 01       	movw	r20, r10
     5f0:	94 01       	movw	r18, r8
     5f2:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__udivmodsi4>
     5f6:	3e 83       	std	Y+6, r19	; 0x06
     5f8:	2d 83       	std	Y+5, r18	; 0x05
					board1.msg = hex_encode(board1);
     5fa:	8d b7       	in	r24, 0x3d	; 61
     5fc:	9e b7       	in	r25, 0x3e	; 62
     5fe:	43 97       	sbiw	r24, 0x13	; 19
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	f8 94       	cli
     604:	9e bf       	out	0x3e, r25	; 62
     606:	0f be       	out	0x3f, r0	; 63
     608:	8d bf       	out	0x3d, r24	; 61
     60a:	ad b7       	in	r26, 0x3d	; 61
     60c:	be b7       	in	r27, 0x3e	; 62
     60e:	11 96       	adiw	r26, 0x01	; 1
     610:	83 e1       	ldi	r24, 0x13	; 19
     612:	fe 01       	movw	r30, r28
     614:	31 96       	adiw	r30, 0x01	; 1
     616:	01 90       	ld	r0, Z+
     618:	0d 92       	st	X+, r0
     61a:	8a 95       	dec	r24
     61c:	e1 f7       	brne	.-8      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
     61e:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <hex_encode>
     622:	9b 8b       	std	Y+19, r25	; 0x13
     624:	8a 8b       	std	Y+18, r24	; 0x12
     626:	8f e1       	ldi	r24, 0x1F	; 31
     628:	9e e4       	ldi	r25, 0x4E	; 78
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     630:	00 00       	nop
						USART_transmit2(0x0A);
					#else 
						#ifdef DEBUG_M
						//puts(board1.msg);
						#endif
						lora_transmit(board1.msg);
     632:	8a 89       	ldd	r24, Y+18	; 0x12
     634:	9b 89       	ldd	r25, Y+19	; 0x13
     636:	0e 94 24 08 	call	0x1048	; 0x1048 <lora_transmit>
					#endif
					board1.ina219.bus_voltage_avg = 0;
     63a:	1f 82       	std	Y+7, r1	; 0x07
     63c:	18 86       	std	Y+8, r1	; 0x08
     63e:	19 86       	std	Y+9, r1	; 0x09
     640:	1a 86       	std	Y+10, r1	; 0x0a
					board1.ina219.current_avg = 0;
     642:	1b 86       	std	Y+11, r1	; 0x0b
     644:	1c 86       	std	Y+12, r1	; 0x0c
     646:	1d 86       	std	Y+13, r1	; 0x0d
     648:	1e 86       	std	Y+14, r1	; 0x0e
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
				}
				nextState = ST_SLEEP;
     654:	f0 92 e0 05 	sts	0x05E0, r15	; 0x8005e0 <nextState>
				break;
     658:	02 cf       	rjmp	.-508    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     65a:	8f e9       	ldi	r24, 0x9F	; 159
     65c:	9f e0       	ldi	r25, 0x0F	; 15
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	f1 f7       	brne	.-4      	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
     662:	00 c0       	rjmp	.+0      	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
     664:	00 00       	nop
				_delay_ms(2); // Delay to allow a print to be written over serial before sleep
				
				#ifndef TIMER2
				_delay_ms(1000);
				#else
				enter_powerSave();
     666:	0e 94 1e 09 	call	0x123c	; 0x123c <enter_powerSave>
				#endif

				if(board1.lora_joined_err) nextState = ST_NOT_JOINED;
     66a:	8f 85       	ldd	r24, Y+15	; 0x0f
     66c:	88 23       	and	r24, r24
     66e:	19 f0       	breq	.+6      	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     670:	d0 92 e0 05 	sts	0x05E0, r13	; 0x8005e0 <nextState>
     674:	f4 ce       	rjmp	.-536    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
				else nextState = ST_ACTIVE;
     676:	e0 92 e0 05 	sts	0x05E0, r14	; 0x8005e0 <nextState>
     67a:	f1 ce       	rjmp	.-542    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>

0000067c <__vector_2>:
		}
	}
}

ISR (INT1_vect)          //External interrupt_zero ISR
{	
     67c:	1f 92       	push	r1
     67e:	0f 92       	push	r0
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	0f 92       	push	r0
     684:	11 24       	eor	r1, r1
     686:	8f 93       	push	r24
	tx_test_flag = 1;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <__data_end>
}
     68e:	8f 91       	pop	r24
     690:	0f 90       	pop	r0
     692:	0f be       	out	0x3f, r0	; 63
     694:	0f 90       	pop	r0
     696:	1f 90       	pop	r1
     698:	18 95       	reti

0000069a <__vector_47>:

ISR (USART2_RX_vect){
     69a:	1f 92       	push	r1
     69c:	0f 92       	push	r0
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	0f 92       	push	r0
     6a2:	11 24       	eor	r1, r1
     6a4:	2f 93       	push	r18
     6a6:	3f 93       	push	r19
     6a8:	4f 93       	push	r20
     6aa:	5f 93       	push	r21
     6ac:	6f 93       	push	r22
     6ae:	7f 93       	push	r23
     6b0:	8f 93       	push	r24
     6b2:	9f 93       	push	r25
     6b4:	af 93       	push	r26
     6b6:	bf 93       	push	r27
     6b8:	ef 93       	push	r30
     6ba:	ff 93       	push	r31
	USART_receiveString2();
     6bc:	0e 94 bd 08 	call	0x117a	; 0x117a <USART_receiveString2>
	data_receive_flag = 1;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <data_receive_flag>
}
     6c6:	ff 91       	pop	r31
     6c8:	ef 91       	pop	r30
     6ca:	bf 91       	pop	r27
     6cc:	af 91       	pop	r26
     6ce:	9f 91       	pop	r25
     6d0:	8f 91       	pop	r24
     6d2:	7f 91       	pop	r23
     6d4:	6f 91       	pop	r22
     6d6:	5f 91       	pop	r21
     6d8:	4f 91       	pop	r20
     6da:	3f 91       	pop	r19
     6dc:	2f 91       	pop	r18
     6de:	0f 90       	pop	r0
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	0f 90       	pop	r0
     6e4:	1f 90       	pop	r1
     6e6:	18 95       	reti

000006e8 <__vector_11>:


ISR(TIMER2_OVF_vect){
     6e8:	1f 92       	push	r1
     6ea:	0f 92       	push	r0
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	0f 92       	push	r0
     6f0:	11 24       	eor	r1, r1
     6f2:	8f 93       	push	r24
     6f4:	9f 93       	push	r25
     6f6:	af 93       	push	r26
     6f8:	bf 93       	push	r27
	current_time ++;
     6fa:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <current_time>
     6fe:	90 91 46 06 	lds	r25, 0x0646	; 0x800646 <current_time+0x1>
     702:	a0 91 47 06 	lds	r26, 0x0647	; 0x800647 <current_time+0x2>
     706:	b0 91 48 06 	lds	r27, 0x0648	; 0x800648 <current_time+0x3>
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	a1 1d       	adc	r26, r1
     70e:	b1 1d       	adc	r27, r1
     710:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <current_time>
     714:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <current_time+0x1>
     718:	a0 93 47 06 	sts	0x0647, r26	; 0x800647 <current_time+0x2>
     71c:	b0 93 48 06 	sts	0x0648, r27	; 0x800648 <current_time+0x3>
     720:	bf 91       	pop	r27
     722:	af 91       	pop	r26
     724:	9f 91       	pop	r25
     726:	8f 91       	pop	r24
     728:	0f 90       	pop	r0
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	0f 90       	pop	r0
     72e:	1f 90       	pop	r1
     730:	18 95       	reti

00000732 <i2c_init>:
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address){
    return i2c_start( address );

}
     732:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     736:	80 e2       	ldi	r24, 0x20	; 32
     738:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     73c:	08 95       	ret

0000073e <i2c_sync>:
     73e:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     742:	88 23       	and	r24, r24
     744:	bc f0       	brlt	.+46     	; 0x774 <i2c_sync+0x36>
     746:	24 e6       	ldi	r18, 0x64	; 100
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	ec ed       	ldi	r30, 0xDC	; 220
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	8a 95       	dec	r24
     752:	f1 f7       	brne	.-4      	; 0x750 <i2c_sync+0x12>
     754:	00 c0       	rjmp	.+0      	; 0x756 <i2c_sync+0x18>
     756:	21 50       	subi	r18, 0x01	; 1
     758:	31 09       	sbc	r19, r1
     75a:	80 81       	ld	r24, Z
     75c:	88 23       	and	r24, r24
     75e:	24 f0       	brlt	.+8      	; 0x768 <i2c_sync+0x2a>
     760:	21 15       	cp	r18, r1
     762:	31 05       	cpc	r19, r1
     764:	a1 f7       	brne	.-24     	; 0x74e <i2c_sync+0x10>
     766:	03 c0       	rjmp	.+6      	; 0x76e <i2c_sync+0x30>
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	29 f4       	brne	.+10     	; 0x778 <i2c_sync+0x3a>
     76e:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     772:	02 c0       	rjmp	.+4      	; 0x778 <i2c_sync+0x3a>
     774:	24 e6       	ldi	r18, 0x64	; 100
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	23 2b       	or	r18, r19
     77c:	09 f4       	brne	.+2      	; 0x780 <i2c_sync+0x42>
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	08 95       	ret

00000782 <i2c_waitStop>:
     782:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     786:	84 ff       	sbrs	r24, 4
     788:	17 c0       	rjmp	.+46     	; 0x7b8 <i2c_waitStop+0x36>
     78a:	24 e6       	ldi	r18, 0x64	; 100
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	ec ed       	ldi	r30, 0xDC	; 220
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	8a 95       	dec	r24
     796:	f1 f7       	brne	.-4      	; 0x794 <i2c_waitStop+0x12>
     798:	00 c0       	rjmp	.+0      	; 0x79a <i2c_waitStop+0x18>
     79a:	21 50       	subi	r18, 0x01	; 1
     79c:	31 09       	sbc	r19, r1
     79e:	80 81       	ld	r24, Z
     7a0:	84 ff       	sbrs	r24, 4
     7a2:	04 c0       	rjmp	.+8      	; 0x7ac <i2c_waitStop+0x2a>
     7a4:	21 15       	cp	r18, r1
     7a6:	31 05       	cpc	r19, r1
     7a8:	a1 f7       	brne	.-24     	; 0x792 <i2c_waitStop+0x10>
     7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <i2c_waitStop+0x30>
     7ac:	21 15       	cp	r18, r1
     7ae:	31 05       	cpc	r19, r1
     7b0:	29 f4       	brne	.+10     	; 0x7bc <i2c_waitStop+0x3a>
     7b2:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <i2c_waitStop+0x3a>
     7b8:	24 e6       	ldi	r18, 0x64	; 100
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	23 2b       	or	r18, r19
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <i2c_waitStop+0x42>
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	08 95       	ret

000007c6 <i2c_start>:
     7c6:	cf 93       	push	r28
     7c8:	c8 2f       	mov	r28, r24
     7ca:	84 ea       	ldi	r24, 0xA4	; 164
     7cc:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     7d0:	0e 94 9f 03 	call	0x73e	; 0x73e <i2c_sync>
     7d4:	88 23       	and	r24, r24
     7d6:	e9 f0       	breq	.+58     	; 0x812 <i2c_start+0x4c>
     7d8:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     7dc:	88 7f       	andi	r24, 0xF8	; 248
     7de:	88 30       	cpi	r24, 0x08	; 8
     7e0:	11 f0       	breq	.+4      	; 0x7e6 <i2c_start+0x20>
     7e2:	80 31       	cpi	r24, 0x10	; 16
     7e4:	99 f4       	brne	.+38     	; 0x80c <i2c_start+0x46>
     7e6:	c0 93 db 00 	sts	0x00DB, r28	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
     7ea:	84 e8       	ldi	r24, 0x84	; 132
     7ec:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     7f0:	0e 94 9f 03 	call	0x73e	; 0x73e <i2c_sync>
     7f4:	88 23       	and	r24, r24
     7f6:	69 f0       	breq	.+26     	; 0x812 <i2c_start+0x4c>
     7f8:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     7fc:	98 7f       	andi	r25, 0xF8	; 248
     7fe:	98 31       	cpi	r25, 0x18	; 24
     800:	39 f0       	breq	.+14     	; 0x810 <i2c_start+0x4a>
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 34       	cpi	r25, 0x40	; 64
     806:	29 f4       	brne	.+10     	; 0x812 <i2c_start+0x4c>
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	03 c0       	rjmp	.+6      	; 0x812 <i2c_start+0x4c>
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	01 c0       	rjmp	.+2      	; 0x812 <i2c_start+0x4c>
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	cf 91       	pop	r28
     814:	08 95       	ret

00000816 <i2c_stop>:
/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void){
    /* send stop condition */
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     816:	84 e9       	ldi	r24, 0x94	; 148
     818:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	
	// wait until stop condition is executed and bus released
	i2c_waitStop(); 
     81c:	0e 94 c1 03 	call	0x782	; 0x782 <i2c_waitStop>
     820:	08 95       	ret

00000822 <i2c_write>:
*************************************************************************/
unsigned char i2c_write( unsigned char data ){	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR1 = data;
     822:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	TWCR1 = (1<<TWINT) | (1<<TWEN);
     826:	84 e8       	ldi	r24, 0x84	; 132
     828:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

	// wait until transmission completed
	i2c_sync();
     82c:	0e 94 9f 03 	call	0x73e	; 0x73e <i2c_sync>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     830:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     834:	98 7f       	andi	r25, 0xF8	; 248
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	98 32       	cpi	r25, 0x28	; 40
     83a:	09 f4       	brne	.+2      	; 0x83e <i2c_write+0x1c>
     83c:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}
     83e:	08 95       	ret

00000840 <i2c_readAck>:
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void){
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     840:	84 ec       	ldi	r24, 0xC4	; 196
     842:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	i2c_sync();    
     846:	0e 94 9f 03 	call	0x73e	; 0x73e <i2c_sync>
	return TWDR1;
     84a:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
}
     84e:	08 95       	ret

00000850 <i2c_readNak>:
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void){
	TWCR1 = (1<<TWINT) | (1<<TWEN);
     850:	84 e8       	ldi	r24, 0x84	; 132
     852:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	i2c_sync(); 
     856:	0e 94 9f 03 	call	0x73e	; 0x73e <i2c_sync>
	return TWDR1;
     85a:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
}
     85e:	08 95       	ret

00000860 <i2c_read2ByteRegister>:
  
  Input:    device address, register address, buffer for storage
  Return:   0 write successful 
            1 write failed
*************************************************************************/
uint8_t i2c_read2ByteRegister(uint8_t adr, uint8_t regAddr, uint8_t *data){
     860:	ff 92       	push	r15
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	d8 2f       	mov	r29, r24
     86c:	f6 2e       	mov	r15, r22
     86e:	8a 01       	movw	r16, r20
	uint8_t error = 0;
	error += i2c_start(adr | I2C_WRITE);
     870:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <i2c_start>
     874:	c8 2f       	mov	r28, r24
	error += i2c_write(regAddr);
     876:	8f 2d       	mov	r24, r15
     878:	0e 94 11 04 	call	0x822	; 0x822 <i2c_write>
     87c:	c8 0f       	add	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     87e:	8a e1       	ldi	r24, 0x1A	; 26
     880:	8a 95       	dec	r24
     882:	f1 f7       	brne	.-4      	; 0x880 <i2c_read2ByteRegister+0x20>
     884:	00 c0       	rjmp	.+0      	; 0x886 <i2c_read2ByteRegister+0x26>
	_delay_us(10);
	//read data
	error += i2c_start(adr | I2C_READ);
     886:	8d 2f       	mov	r24, r29
     888:	81 60       	ori	r24, 0x01	; 1
     88a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <i2c_start>
     88e:	c8 0f       	add	r28, r24
	data[1] = i2c_readAck();
     890:	0e 94 20 04 	call	0x840	; 0x840 <i2c_readAck>
     894:	f8 01       	movw	r30, r16
     896:	81 83       	std	Z+1, r24	; 0x01
	data[0] = i2c_readNak();
     898:	0e 94 28 04 	call	0x850	; 0x850 <i2c_readNak>
     89c:	f8 01       	movw	r30, r16
     89e:	80 83       	st	Z, r24
	i2c_stop();
     8a0:	0e 94 0b 04 	call	0x816	; 0x816 <i2c_stop>
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	c1 11       	cpse	r28, r1
     8a8:	01 c0       	rjmp	.+2      	; 0x8ac <i2c_read2ByteRegister+0x4c>
     8aa:	80 e0       	ldi	r24, 0x00	; 0
	
	if (error) return 1;
	else return 0;
}
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	ff 90       	pop	r15
     8b6:	08 95       	ret

000008b8 <i2c_write2ByteRegister>:
  
  Input:    device address, register address, bytes to be transfered 
  Return:   0 write successful
			1 write failed
*************************************************************************/
uint8_t i2c_write2ByteRegister(uint8_t adr, uint8_t regAddr, uint16_t data){
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	06 2f       	mov	r16, r22
     8c2:	d4 2f       	mov	r29, r20
     8c4:	15 2f       	mov	r17, r21
	uint8_t error = 0;
	error += i2c_start(adr | I2C_WRITE);
     8c6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <i2c_start>
     8ca:	c8 2f       	mov	r28, r24
	error += i2c_write(regAddr);
     8cc:	80 2f       	mov	r24, r16
     8ce:	0e 94 11 04 	call	0x822	; 0x822 <i2c_write>
     8d2:	c8 0f       	add	r28, r24
     8d4:	8a e1       	ldi	r24, 0x1A	; 26
     8d6:	8a 95       	dec	r24
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <i2c_write2ByteRegister+0x1e>
     8da:	00 c0       	rjmp	.+0      	; 0x8dc <i2c_write2ByteRegister+0x24>
	_delay_us(10);
	error += i2c_write((uint8_t)(data >> 8));
     8dc:	81 2f       	mov	r24, r17
     8de:	0e 94 11 04 	call	0x822	; 0x822 <i2c_write>
     8e2:	c8 0f       	add	r28, r24
	error += i2c_write((uint8_t)(data & 0xFF));
     8e4:	8d 2f       	mov	r24, r29
     8e6:	0e 94 11 04 	call	0x822	; 0x822 <i2c_write>
     8ea:	c8 0f       	add	r28, r24
	i2c_stop();
     8ec:	0e 94 0b 04 	call	0x816	; 0x816 <i2c_stop>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	c1 11       	cpse	r28, r1
     8f4:	01 c0       	rjmp	.+2      	; 0x8f8 <i2c_write2ByteRegister+0x40>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
	if (error) return 1;
	else return 0;
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	08 95       	ret

00000902 <INA219_trigger_oneshow_conversion>:

uint16_t INA219_readShuntVoltageReg(){ // Not operational
	uint8_t value[2];
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_SHUNTVOLTAGE, value)) return 1;
	return ((value[1] << 8) | value[0]);
}
     902:	4b e9       	ldi	r20, 0x9B	; 155
     904:	51 e0       	ldi	r21, 0x01	; 1
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	80 e8       	ldi	r24, 0x80	; 128
     90a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <i2c_write2ByteRegister>
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	81 11       	cpse	r24, r1
     912:	01 c0       	rjmp	.+2      	; 0x916 <INA219_trigger_oneshow_conversion+0x14>
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	89 2f       	mov	r24, r25
     918:	08 95       	ret

0000091a <INA219_readCalibrationReg>:
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	00 d0       	rcall	.+0      	; 0x922 <INA219_readCalibrationReg+0x8>
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	ae 01       	movw	r20, r28
     928:	4f 5f       	subi	r20, 0xFF	; 255
     92a:	5f 4f       	sbci	r21, 0xFF	; 255
     92c:	65 e0       	ldi	r22, 0x05	; 5
     92e:	80 e8       	ldi	r24, 0x80	; 128
     930:	0e 94 30 04 	call	0x860	; 0x860 <i2c_read2ByteRegister>
     934:	18 2f       	mov	r17, r24
     936:	8a 81       	ldd	r24, Y+2	; 0x02
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	98 2f       	mov	r25, r24
     93c:	88 27       	eor	r24, r24
     93e:	29 81       	ldd	r18, Y+1	; 0x01
     940:	82 2b       	or	r24, r18
     942:	9f 93       	push	r25
     944:	8f 93       	push	r24
     946:	87 e6       	ldi	r24, 0x67	; 103
     948:	92 e0       	ldi	r25, 0x02	; 2
     94a:	9f 93       	push	r25
     94c:	8f 93       	push	r24
     94e:	0e 94 cb 10 	call	0x2196	; 0x2196 <printf>
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	11 11       	cpse	r17, r1
     95e:	01 c0       	rjmp	.+2      	; 0x962 <INA219_readCalibrationReg+0x48>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	08 95       	ret

0000096e <INA219_readConfigReg>:
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	00 d0       	rcall	.+0      	; 0x976 <INA219_readConfigReg+0x8>
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
     97a:	ae 01       	movw	r20, r28
     97c:	4f 5f       	subi	r20, 0xFF	; 255
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	80 e8       	ldi	r24, 0x80	; 128
     984:	0e 94 30 04 	call	0x860	; 0x860 <i2c_read2ByteRegister>
     988:	18 2f       	mov	r17, r24
     98a:	8a 81       	ldd	r24, Y+2	; 0x02
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	98 2f       	mov	r25, r24
     990:	88 27       	eor	r24, r24
     992:	29 81       	ldd	r18, Y+1	; 0x01
     994:	82 2b       	or	r24, r18
     996:	9f 93       	push	r25
     998:	8f 93       	push	r24
     99a:	86 e7       	ldi	r24, 0x76	; 118
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	9f 93       	push	r25
     9a0:	8f 93       	push	r24
     9a2:	0e 94 cb 10 	call	0x2196	; 0x2196 <printf>
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	11 11       	cpse	r17, r1
     9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <INA219_readConfigReg+0x48>
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	08 95       	ret

000009c2 <INA219_setCalibration_16V_400mA>:
     9c2:	cf 93       	push	r28
     9c4:	40 e8       	ldi	r20, 0x80	; 128
     9c6:	5a e6       	ldi	r21, 0x6A	; 106
     9c8:	65 e0       	ldi	r22, 0x05	; 5
     9ca:	80 e8       	ldi	r24, 0x80	; 128
     9cc:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <i2c_write2ByteRegister>
     9d0:	c8 2f       	mov	r28, r24
     9d2:	4b e9       	ldi	r20, 0x9B	; 155
     9d4:	51 e0       	ldi	r21, 0x01	; 1
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	80 e8       	ldi	r24, 0x80	; 128
     9da:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <i2c_write2ByteRegister>
     9de:	c8 0f       	add	r28, r24
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <INA219_setCalibration_16V_400mA+0x24>
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	cf 91       	pop	r28
     9e8:	08 95       	ret

000009ea <INA219_readBusVoltageReg>:
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <INA219_readBusVoltageReg+0xa>
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	0e 94 81 04 	call	0x902	; 0x902 <INA219_trigger_oneshow_conversion>
     9fc:	8f ea       	ldi	r24, 0xAF	; 175
     9fe:	94 e0       	ldi	r25, 0x04	; 4
     a00:	01 97       	sbiw	r24, 0x01	; 1
     a02:	f1 f7       	brne	.-4      	; 0xa00 <INA219_readBusVoltageReg+0x16>
     a04:	00 c0       	rjmp	.+0      	; 0xa06 <INA219_readBusVoltageReg+0x1c>
     a06:	00 00       	nop
     a08:	ae 01       	movw	r20, r28
     a0a:	4f 5f       	subi	r20, 0xFF	; 255
     a0c:	5f 4f       	sbci	r21, 0xFF	; 255
     a0e:	62 e0       	ldi	r22, 0x02	; 2
     a10:	80 e8       	ldi	r24, 0x80	; 128
     a12:	0e 94 30 04 	call	0x860	; 0x860 <i2c_read2ByteRegister>
     a16:	81 11       	cpse	r24, r1
     a18:	1d c0       	rjmp	.+58     	; 0xa54 <INA219_readBusVoltageReg+0x6a>
     a1a:	0a 81       	ldd	r16, Y+2	; 0x02
     a1c:	10 e0       	ldi	r17, 0x00	; 0
     a1e:	10 2f       	mov	r17, r16
     a20:	00 27       	eor	r16, r16
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	08 2b       	or	r16, r24
     a26:	15 95       	asr	r17
     a28:	07 95       	ror	r16
     a2a:	15 95       	asr	r17
     a2c:	07 95       	ror	r16
     a2e:	15 95       	asr	r17
     a30:	07 95       	ror	r16
     a32:	1f 93       	push	r17
     a34:	0f 93       	push	r16
     a36:	86 e8       	ldi	r24, 0x86	; 134
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	9f 93       	push	r25
     a3c:	8f 93       	push	r24
     a3e:	0e 94 cb 10 	call	0x2196	; 0x2196 <printf>
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	01 30       	cpi	r16, 0x01	; 1
     a4c:	90 e1       	ldi	r25, 0x10	; 16
     a4e:	19 07       	cpc	r17, r25
     a50:	30 f0       	brcs	.+12     	; 0xa5e <INA219_readBusVoltageReg+0x74>
     a52:	03 c0       	rjmp	.+6      	; 0xa5a <INA219_readBusVoltageReg+0x70>
     a54:	00 e0       	ldi	r16, 0x00	; 0
     a56:	10 e0       	ldi	r17, 0x00	; 0
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <INA219_readBusVoltageReg+0x74>
     a5a:	00 e0       	ldi	r16, 0x00	; 0
     a5c:	10 e0       	ldi	r17, 0x00	; 0
     a5e:	c8 01       	movw	r24, r16
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	08 95       	ret

00000a6e <INA219_readCurrentReg>:
uint16_t INA219_readCurrentReg(){
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	00 d0       	rcall	.+0      	; 0xa78 <INA219_readCurrentReg+0xa>
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
	uint8_t value[2];
	INA219_trigger_oneshow_conversion();
     a7c:	0e 94 81 04 	call	0x902	; 0x902 <INA219_trigger_oneshow_conversion>
     a80:	8f ea       	ldi	r24, 0xAF	; 175
     a82:	94 e0       	ldi	r25, 0x04	; 4
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	f1 f7       	brne	.-4      	; 0xa84 <INA219_readCurrentReg+0x16>
     a88:	00 c0       	rjmp	.+0      	; 0xa8a <INA219_readCurrentReg+0x1c>
     a8a:	00 00       	nop
	_delay_us(600);
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_CURRENT, value)) return 0;
     a8c:	ae 01       	movw	r20, r28
     a8e:	4f 5f       	subi	r20, 0xFF	; 255
     a90:	5f 4f       	sbci	r21, 0xFF	; 255
     a92:	64 e0       	ldi	r22, 0x04	; 4
     a94:	80 e8       	ldi	r24, 0x80	; 128
     a96:	0e 94 30 04 	call	0x860	; 0x860 <i2c_read2ByteRegister>
     a9a:	81 11       	cpse	r24, r1
     a9c:	19 c0       	rjmp	.+50     	; 0xad0 <INA219_readCurrentReg+0x62>
	uint16_t total = (value[1] << 8) | value[0];
     a9e:	0a 81       	ldd	r16, Y+2	; 0x02
     aa0:	10 e0       	ldi	r17, 0x00	; 0
     aa2:	10 2f       	mov	r17, r16
     aa4:	00 27       	eor	r16, r16
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	08 2b       	or	r16, r24
	#ifdef DEBUG_M
	printf("curr: %u\n", total);
     aaa:	1f 93       	push	r17
     aac:	0f 93       	push	r16
     aae:	80 e9       	ldi	r24, 0x90	; 144
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	9f 93       	push	r25
     ab4:	8f 93       	push	r24
     ab6:	0e 94 cb 10 	call	0x2196	; 0x2196 <printf>
	#endif
	if(total>0x8000) return 0x00;  // Remove possibility of corruption with a bug where total is above 0xFFAE with no connected source.
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	01 30       	cpi	r16, 0x01	; 1
     ac4:	90 e8       	ldi	r25, 0x80	; 128
     ac6:	19 07       	cpc	r17, r25
     ac8:	30 f4       	brcc	.+12     	; 0xad6 <INA219_readCurrentReg+0x68>
	return total;
     aca:	80 2f       	mov	r24, r16
     acc:	91 2f       	mov	r25, r17
     ace:	05 c0       	rjmp	.+10     	; 0xada <INA219_readCurrentReg+0x6c>
}
uint16_t INA219_readCurrentReg(){
	uint8_t value[2];
	INA219_trigger_oneshow_conversion();
	_delay_us(600);
	if (i2c_read2ByteRegister(INA219_ADDRESS, INA219_REG_CURRENT, value)) return 0;
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	02 c0       	rjmp	.+4      	; 0xada <INA219_readCurrentReg+0x6c>
	uint16_t total = (value[1] << 8) | value[0];
	#ifdef DEBUG_M
	printf("curr: %u\n", total);
	#endif
	if(total>0x8000) return 0x00;  // Remove possibility of corruption with a bug where total is above 0xFFAE with no connected source.
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
	return total;
}
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	08 95       	ret

00000ae8 <INA219_init>:


uint8_t INA219_init(){
     ae8:	cf 93       	push	r28
	if (INA219_setCalibration_16V_400mA()) {
     aea:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <INA219_setCalibration_16V_400mA>
     aee:	c8 2f       	mov	r28, r24
     af0:	88 23       	and	r24, r24
     af2:	31 f0       	breq	.+12     	; 0xb00 <INA219_init+0x18>
		#ifdef DEBUG_M
		printf("Setting calibration failed...\n");
     af4:	8a e9       	ldi	r24, 0x9A	; 154
     af6:	92 e0       	ldi	r25, 0x02	; 2
     af8:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <puts>
		#endif
		return 1;
     afc:	c1 e0       	ldi	r28, 0x01	; 1
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <INA219_init+0x20>
	}
	else{
		#ifdef DEBUG_M
		INA219_readCalibrationReg();
     b00:	0e 94 8d 04 	call	0x91a	; 0x91a <INA219_readCalibrationReg>
		INA219_readConfigReg();
     b04:	0e 94 b7 04 	call	0x96e	; 0x96e <INA219_readConfigReg>
		#endif
		return 0;
	}
     b08:	8c 2f       	mov	r24, r28
     b0a:	cf 91       	pop	r28
     b0c:	08 95       	ret

00000b0e <lora_send_command>:
		//printf("Join result: ");
		//err = lora_receive_response();
	//}
	//else printf("Failed sendint join cmd: %02x\n", err);
	////lora_transmit("deadbeef");
}
     b0e:	0e 94 90 08 	call	0x1120	; 0x1120 <USART_putstring0>
     b12:	8d e0       	ldi	r24, 0x0D	; 13
     b14:	0e 94 88 08 	call	0x1110	; 0x1110 <USART_transmit0>
     b18:	8a e0       	ldi	r24, 0x0A	; 10
     b1a:	0e 94 88 08 	call	0x1110	; 0x1110 <USART_transmit0>
     b1e:	08 95       	ret

00000b20 <lora_assert_response>:
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	ec 01       	movw	r28, r24
     b26:	42 e0       	ldi	r20, 0x02	; 2
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	68 ec       	ldi	r22, 0xC8	; 200
     b2c:	72 e0       	ldi	r23, 0x02	; 2
     b2e:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     b32:	89 2b       	or	r24, r25
     b34:	09 f4       	brne	.+2      	; 0xb38 <lora_assert_response+0x18>
     b36:	8f c0       	rjmp	.+286    	; 0xc56 <lora_assert_response+0x136>
     b38:	48 e0       	ldi	r20, 0x08	; 8
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	68 eb       	ldi	r22, 0xB8	; 184
     b3e:	72 e0       	ldi	r23, 0x02	; 2
     b40:	ce 01       	movw	r24, r28
     b42:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     b46:	89 2b       	or	r24, r25
     b48:	09 f4       	brne	.+2      	; 0xb4c <lora_assert_response+0x2c>
     b4a:	87 c0       	rjmp	.+270    	; 0xc5a <lora_assert_response+0x13a>
     b4c:	49 e0       	ldi	r20, 0x09	; 9
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	61 ec       	ldi	r22, 0xC1	; 193
     b52:	72 e0       	ldi	r23, 0x02	; 2
     b54:	ce 01       	movw	r24, r28
     b56:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     b5a:	89 2b       	or	r24, r25
     b5c:	09 f4       	brne	.+2      	; 0xb60 <lora_assert_response+0x40>
     b5e:	7f c0       	rjmp	.+254    	; 0xc5e <lora_assert_response+0x13e>
     b60:	47 e0       	ldi	r20, 0x07	; 7
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	6b ec       	ldi	r22, 0xCB	; 203
     b66:	72 e0       	ldi	r23, 0x02	; 2
     b68:	ce 01       	movw	r24, r28
     b6a:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     b6e:	89 2b       	or	r24, r25
     b70:	39 f4       	brne	.+14     	; 0xb80 <lora_assert_response+0x60>
     b72:	be 01       	movw	r22, r28
     b74:	81 ee       	ldi	r24, 0xE1	; 225
     b76:	95 e0       	ldi	r25, 0x05	; 5
     b78:	0e 94 6f 10 	call	0x20de	; 0x20de <strcpy>
     b7c:	81 e1       	ldi	r24, 0x11	; 17
     b7e:	86 c0       	rjmp	.+268    	; 0xc8c <lora_assert_response+0x16c>
     b80:	46 e0       	ldi	r20, 0x06	; 6
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	63 ed       	ldi	r22, 0xD3	; 211
     b86:	72 e0       	ldi	r23, 0x02	; 2
     b88:	ce 01       	movw	r24, r28
     b8a:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     b8e:	89 2b       	or	r24, r25
     b90:	09 f4       	brne	.+2      	; 0xb94 <lora_assert_response+0x74>
     b92:	67 c0       	rjmp	.+206    	; 0xc62 <lora_assert_response+0x142>
     b94:	4d e0       	ldi	r20, 0x0D	; 13
     b96:	50 e0       	ldi	r21, 0x00	; 0
     b98:	6a ed       	ldi	r22, 0xDA	; 218
     b9a:	72 e0       	ldi	r23, 0x02	; 2
     b9c:	ce 01       	movw	r24, r28
     b9e:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     ba2:	89 2b       	or	r24, r25
     ba4:	09 f4       	brne	.+2      	; 0xba8 <lora_assert_response+0x88>
     ba6:	5f c0       	rjmp	.+190    	; 0xc66 <lora_assert_response+0x146>
     ba8:	4c e0       	ldi	r20, 0x0C	; 12
     baa:	50 e0       	ldi	r21, 0x00	; 0
     bac:	68 ee       	ldi	r22, 0xE8	; 232
     bae:	72 e0       	ldi	r23, 0x02	; 2
     bb0:	ce 01       	movw	r24, r28
     bb2:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     bb6:	89 2b       	or	r24, r25
     bb8:	09 f4       	brne	.+2      	; 0xbbc <lora_assert_response+0x9c>
     bba:	57 c0       	rjmp	.+174    	; 0xc6a <lora_assert_response+0x14a>
     bbc:	46 e0       	ldi	r20, 0x06	; 6
     bbe:	50 e0       	ldi	r21, 0x00	; 0
     bc0:	65 ef       	ldi	r22, 0xF5	; 245
     bc2:	72 e0       	ldi	r23, 0x02	; 2
     bc4:	ce 01       	movw	r24, r28
     bc6:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     bca:	89 2b       	or	r24, r25
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <lora_assert_response+0xb0>
     bce:	4f c0       	rjmp	.+158    	; 0xc6e <lora_assert_response+0x14e>
     bd0:	44 e0       	ldi	r20, 0x04	; 4
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	6c ef       	ldi	r22, 0xFC	; 252
     bd6:	72 e0       	ldi	r23, 0x02	; 2
     bd8:	ce 01       	movw	r24, r28
     bda:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     bde:	89 2b       	or	r24, r25
     be0:	09 f4       	brne	.+2      	; 0xbe4 <lora_assert_response+0xc4>
     be2:	47 c0       	rjmp	.+142    	; 0xc72 <lora_assert_response+0x152>
     be4:	4a e0       	ldi	r20, 0x0A	; 10
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	61 e0       	ldi	r22, 0x01	; 1
     bea:	73 e0       	ldi	r23, 0x03	; 3
     bec:	ce 01       	movw	r24, r28
     bee:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     bf2:	89 2b       	or	r24, r25
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <lora_assert_response+0xd8>
     bf6:	3f c0       	rjmp	.+126    	; 0xc76 <lora_assert_response+0x156>
     bf8:	4d e0       	ldi	r20, 0x0D	; 13
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	6c e0       	ldi	r22, 0x0C	; 12
     bfe:	73 e0       	ldi	r23, 0x03	; 3
     c00:	ce 01       	movw	r24, r28
     c02:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     c06:	89 2b       	or	r24, r25
     c08:	c1 f1       	breq	.+112    	; 0xc7a <lora_assert_response+0x15a>
     c0a:	4a e0       	ldi	r20, 0x0A	; 10
     c0c:	50 e0       	ldi	r21, 0x00	; 0
     c0e:	6a e1       	ldi	r22, 0x1A	; 26
     c10:	73 e0       	ldi	r23, 0x03	; 3
     c12:	ce 01       	movw	r24, r28
     c14:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     c18:	89 2b       	or	r24, r25
     c1a:	89 f1       	breq	.+98     	; 0xc7e <lora_assert_response+0x15e>
     c1c:	4f e1       	ldi	r20, 0x1F	; 31
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	65 e2       	ldi	r22, 0x25	; 37
     c22:	73 e0       	ldi	r23, 0x03	; 3
     c24:	ce 01       	movw	r24, r28
     c26:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     c2a:	89 2b       	or	r24, r25
     c2c:	51 f1       	breq	.+84     	; 0xc82 <lora_assert_response+0x162>
     c2e:	40 e1       	ldi	r20, 0x10	; 16
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	65 e4       	ldi	r22, 0x45	; 69
     c34:	73 e0       	ldi	r23, 0x03	; 3
     c36:	ce 01       	movw	r24, r28
     c38:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     c3c:	89 2b       	or	r24, r25
     c3e:	19 f1       	breq	.+70     	; 0xc86 <lora_assert_response+0x166>
     c40:	47 e0       	ldi	r20, 0x07	; 7
     c42:	50 e0       	ldi	r21, 0x00	; 0
     c44:	66 e5       	ldi	r22, 0x56	; 86
     c46:	73 e0       	ldi	r23, 0x03	; 3
     c48:	ce 01       	movw	r24, r28
     c4a:	0e 94 76 10 	call	0x20ec	; 0x20ec <strncmp>
     c4e:	89 2b       	or	r24, r25
     c50:	e1 f0       	breq	.+56     	; 0xc8a <lora_assert_response+0x16a>
     c52:	8a ea       	ldi	r24, 0xAA	; 170
     c54:	1b c0       	rjmp	.+54     	; 0xc8c <lora_assert_response+0x16c>
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	19 c0       	rjmp	.+50     	; 0xc8c <lora_assert_response+0x16c>
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	17 c0       	rjmp	.+46     	; 0xc8c <lora_assert_response+0x16c>
     c5e:	80 e1       	ldi	r24, 0x10	; 16
     c60:	15 c0       	rjmp	.+42     	; 0xc8c <lora_assert_response+0x16c>
     c62:	8a e0       	ldi	r24, 0x0A	; 10
     c64:	13 c0       	rjmp	.+38     	; 0xc8c <lora_assert_response+0x16c>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	11 c0       	rjmp	.+34     	; 0xc8c <lora_assert_response+0x16c>
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	0f c0       	rjmp	.+30     	; 0xc8c <lora_assert_response+0x16c>
     c6e:	83 e0       	ldi	r24, 0x03	; 3
     c70:	0d c0       	rjmp	.+26     	; 0xc8c <lora_assert_response+0x16c>
     c72:	84 e0       	ldi	r24, 0x04	; 4
     c74:	0b c0       	rjmp	.+22     	; 0xc8c <lora_assert_response+0x16c>
     c76:	85 e0       	ldi	r24, 0x05	; 5
     c78:	09 c0       	rjmp	.+18     	; 0xc8c <lora_assert_response+0x16c>
     c7a:	86 e0       	ldi	r24, 0x06	; 6
     c7c:	07 c0       	rjmp	.+14     	; 0xc8c <lora_assert_response+0x16c>
     c7e:	87 e0       	ldi	r24, 0x07	; 7
     c80:	05 c0       	rjmp	.+10     	; 0xc8c <lora_assert_response+0x16c>
     c82:	88 e0       	ldi	r24, 0x08	; 8
     c84:	03 c0       	rjmp	.+6      	; 0xc8c <lora_assert_response+0x16c>
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	01 c0       	rjmp	.+2      	; 0xc8c <lora_assert_response+0x16c>
     c8a:	8d e0       	ldi	r24, 0x0D	; 13
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	08 95       	ret

00000c92 <lora_receive_response>:
     c92:	ef 92       	push	r14
     c94:	ff 92       	push	r15
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	ca 5f       	subi	r28, 0xFA	; 250
     ca4:	d1 09       	sbc	r29, r1
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	ce 01       	movw	r24, r28
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	7c 01       	movw	r14, r24
     cb6:	00 e0       	ldi	r16, 0x00	; 0
     cb8:	10 e0       	ldi	r17, 0x00	; 0
     cba:	0e 94 80 08 	call	0x1100	; 0x1100 <USART_receive0>
     cbe:	8d 30       	cpi	r24, 0x0D	; 13
     cc0:	91 f4       	brne	.+36     	; 0xce6 <lora_receive_response+0x54>
     cc2:	0e 94 80 08 	call	0x1100	; 0x1100 <USART_receive0>
     cc6:	e1 e0       	ldi	r30, 0x01	; 1
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	ec 0f       	add	r30, r28
     ccc:	fd 1f       	adc	r31, r29
     cce:	e0 0f       	add	r30, r16
     cd0:	f1 1f       	adc	r31, r17
     cd2:	10 82       	st	Z, r1
     cd4:	ce 01       	movw	r24, r28
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <puts>
     cdc:	ce 01       	movw	r24, r28
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	0e 94 90 05 	call	0xb20	; 0xb20 <lora_assert_response>
     ce4:	06 c0       	rjmp	.+12     	; 0xcf2 <lora_receive_response+0x60>
     ce6:	f7 01       	movw	r30, r14
     ce8:	81 93       	st	Z+, r24
     cea:	7f 01       	movw	r14, r30
     cec:	0f 5f       	subi	r16, 0xFF	; 255
     cee:	1f 4f       	sbci	r17, 0xFF	; 255
     cf0:	e4 cf       	rjmp	.-56     	; 0xcba <lora_receive_response+0x28>
     cf2:	c6 50       	subi	r28, 0x06	; 6
     cf4:	df 4f       	sbci	r29, 0xFF	; 255
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	08 95       	ret

00000d0e <lora_join_OTAA>:
     d0e:	88 e6       	ldi	r24, 0x68	; 104
     d10:	93 e0       	ldi	r25, 0x03	; 3
     d12:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <puts>
     d16:	88 e7       	ldi	r24, 0x78	; 120
     d18:	93 e0       	ldi	r25, 0x03	; 3
     d1a:	9f 93       	push	r25
     d1c:	8f 93       	push	r24
     d1e:	0e 94 cb 10 	call	0x2196	; 0x2196 <printf>
     d22:	8b e8       	ldi	r24, 0x8B	; 139
     d24:	93 e0       	ldi	r25, 0x03	; 3
     d26:	0e 94 87 05 	call	0xb0e	; 0xb0e <lora_send_command>
     d2a:	0e 94 49 06 	call	0xc92	; 0xc92 <lora_receive_response>
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	81 11       	cpse	r24, r1
     d34:	0d c0       	rjmp	.+26     	; 0xd50 <lora_join_OTAA+0x42>
     d36:	89 e9       	ldi	r24, 0x99	; 153
     d38:	93 e0       	ldi	r25, 0x03	; 3
     d3a:	9f 93       	push	r25
     d3c:	8f 93       	push	r24
     d3e:	0e 94 cb 10 	call	0x2196	; 0x2196 <printf>
     d42:	0e 94 49 06 	call	0xc92	; 0xc92 <lora_receive_response>
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	81 11       	cpse	r24, r1
     d4c:	03 c0       	rjmp	.+6      	; 0xd54 <lora_join_OTAA+0x46>
     d4e:	08 95       	ret
     d50:	82 e2       	ldi	r24, 0x22	; 34
     d52:	08 95       	ret
     d54:	83 e2       	ldi	r24, 0x23	; 35
     d56:	08 95       	ret

00000d58 <lora_init>:



uint8_t lora_init(uint8_t *joined_err){
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	e2 97       	sbiw	r28, 0x32	; 50
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	7c 01       	movw	r14, r24

static uint8_t lora_set_dcycle(void);
static uint8_t lora_save_settings(void);

void lora_auto_baud_detect(void){
	DDRD |= (1<<PORTD1);
     d76:	51 9a       	sbi	0x0a, 1	; 10
	PORTD &= ~(1<<PORTD1);
     d78:	59 98       	cbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d7a:	8f e1       	ldi	r24, 0x1F	; 31
     d7c:	9e e4       	ldi	r25, 0x4E	; 78
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <lora_init+0x26>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <lora_init+0x2c>
     d84:	00 00       	nop
	_delay_ms(10);
	DDRD = 0x00;
     d86:	1a b8       	out	0x0a, r1	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d88:	9a e1       	ldi	r25, 0x1A	; 26
     d8a:	9a 95       	dec	r25
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <lora_init+0x32>
     d8e:	00 c0       	rjmp	.+0      	; 0xd90 <lora_init+0x38>
	_delay_us(10);
	USART_init();
     d90:	0e 94 60 08 	call	0x10c0	; 0x10c0 <USART_init>
	USART_transmit0(0x55);
     d94:	85 e5       	ldi	r24, 0x55	; 85
     d96:	0e 94 88 08 	call	0x1110	; 0x1110 <USART_transmit0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d9a:	af ef       	ldi	r26, 0xFF	; 255
     d9c:	b0 e7       	ldi	r27, 0x70	; 112
     d9e:	e2 e0       	ldi	r30, 0x02	; 2
     da0:	a1 50       	subi	r26, 0x01	; 1
     da2:	b0 40       	sbci	r27, 0x00	; 0
     da4:	e0 40       	sbci	r30, 0x00	; 0
     da6:	e1 f7       	brne	.-8      	; 0xda0 <lora_init+0x48>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <lora_init+0x52>
     daa:	00 00       	nop
	lora_auto_baud_detect();
	uint8_t err = 0;
	
	
	#ifdef DEBUG_M
	puts("Lora init...");
     dac:	8d ed       	ldi	r24, 0xDD	; 221
     dae:	93 e0       	ldi	r25, 0x03	; 3
     db0:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <puts>

uint8_t lora_reset_to_band(){

	char cmd[20];
	#ifdef LORA_BAND
		sprintf(cmd, "mac reset %d", LORA_BAND);
     db4:	83 e0       	ldi	r24, 0x03	; 3
     db6:	8f 93       	push	r24
     db8:	84 e6       	ldi	r24, 0x64	; 100
     dba:	8f 93       	push	r24
     dbc:	8a ee       	ldi	r24, 0xEA	; 234
     dbe:	93 e0       	ldi	r25, 0x03	; 3
     dc0:	9f 93       	push	r25
     dc2:	8f 93       	push	r24
     dc4:	8e 01       	movw	r16, r28
     dc6:	0f 5f       	subi	r16, 0xFF	; 255
     dc8:	1f 4f       	sbci	r17, 0xFF	; 255
     dca:	1f 93       	push	r17
     dcc:	0f 93       	push	r16
     dce:	0e 94 11 11 	call	0x2222	; 0x2222 <sprintf>
	#endif
	
	#ifdef DEBUG_M
		printf("%s: ",cmd);
     dd2:	1f 93       	push	r17
     dd4:	0f 93       	push	r16
     dd6:	87 ef       	ldi	r24, 0xF7	; 247
     dd8:	93 e0       	ldi	r25, 0x03	; 3
     dda:	9f 93       	push	r25
     ddc:	8f 93       	push	r24
     dde:	0e 94 cb 10 	call	0x2196	; 0x2196 <printf>
	#endif
	lora_send_command(cmd);
     de2:	c8 01       	movw	r24, r16
     de4:	0e 94 87 05 	call	0xb0e	; 0xb0e <lora_send_command>
	return lora_receive_response();
     de8:	0e 94 49 06 	call	0xc92	; 0xc92 <lora_receive_response>
	#endif	
	


	err = lora_reset_to_band();
	if (err) return 1;
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	cd bf       	out	0x3d, r28	; 61
     df6:	81 11       	cpse	r24, r1
     df8:	10 c1       	rjmp	.+544    	; 0x101a <lora_init+0x2c2>
	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_set_adr(){
	#ifdef DEBUG_M
		printf("Set ADR: ");
     dfa:	8c ef       	ldi	r24, 0xFC	; 252
     dfc:	93 e0       	ldi	r25, 0x03	; 3
     dfe:	9f 93       	push	r25
     e00:	8f 93       	push	r24
     e02:	0e 94 cb 10 	call	0x2196	; 0x2196 <printf>
	#endif
	
	#ifdef LORA_ADR
		lora_send_command("mac set adr on");
     e06:	86 e0       	ldi	r24, 0x06	; 6
     e08:	94 e0       	ldi	r25, 0x04	; 4
     e0a:	0e 94 87 05 	call	0xb0e	; 0xb0e <lora_send_command>
	#else
		lora_send_command("mac set adr off");
	#endif
	return lora_receive_response();
     e0e:	0e 94 49 06 	call	0xc92	; 0xc92 <lora_receive_response>
	err = lora_reset_to_band();
	if (err) return 1;
	
		
	err = lora_set_adr() ;
	if (err) return 2;
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	81 11       	cpse	r24, r1
     e18:	02 c1       	rjmp	.+516    	; 0x101e <lora_init+0x2c6>
	return lora_receive_response();
}
uint8_t lora_set_dr(){
	char cmd[20];
	#ifdef LORA_DR
	sprintf(cmd, "mac set dr %d",LORA_DR);
     e1a:	1f 92       	push	r1
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	8f 93       	push	r24
     e20:	85 e1       	ldi	r24, 0x15	; 21
     e22:	94 e0       	ldi	r25, 0x04	; 4
     e24:	9f 93       	push	r25
     e26:	8f 93       	push	r24
     e28:	1f 93       	push	r17
     e2a:	0f 93       	push	r16
     e2c:	0e 94 11 11 	call	0x2222	; 0x2222 <sprintf>
	#endif
	#ifdef DEBUG_M
		printf("%s: ",cmd);
     e30:	1f 93       	push	r17
     e32:	0f 93       	push	r16
     e34:	87 ef       	ldi	r24, 0xF7	; 247
     e36:	93 e0       	ldi	r25, 0x03	; 3
     e38:	9f 93       	push	r25
     e3a:	8f 93       	push	r24
     e3c:	0e 94 cb 10 	call	0x2196	; 0x2196 <printf>
	#endif
	lora_send_command(cmd);
     e40:	c8 01       	movw	r24, r16
     e42:	0e 94 87 05 	call	0xb0e	; 0xb0e <lora_send_command>
	return lora_receive_response();
     e46:	0e 94 49 06 	call	0xc92	; 0xc92 <lora_receive_response>
	err = lora_set_adr() ;
	if (err) return 2;
	
		
	err = lora_set_dr();
	if (err) return 3;
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	81 11       	cpse	r24, r1
     e56:	e5 c0       	rjmp	.+458    	; 0x1022 <lora_init+0x2ca>
}
uint8_t lora_set_pwridx(){
	
	char cmd[20];
	#ifdef LORA_PWRIDX
	sprintf(cmd, "mac set pwridx %d",LORA_PWRIDX);
     e58:	1f 92       	push	r1
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	8f 93       	push	r24
     e5e:	83 e2       	ldi	r24, 0x23	; 35
     e60:	94 e0       	ldi	r25, 0x04	; 4
     e62:	9f 93       	push	r25
     e64:	8f 93       	push	r24
     e66:	1f 93       	push	r17
     e68:	0f 93       	push	r16
     e6a:	0e 94 11 11 	call	0x2222	; 0x2222 <sprintf>
	#endif
	#ifdef DEBUG_M
		printf("%s: ",cmd);
     e6e:	1f 93       	push	r17
     e70:	0f 93       	push	r16
     e72:	87 ef       	ldi	r24, 0xF7	; 247
     e74:	93 e0       	ldi	r25, 0x03	; 3
     e76:	9f 93       	push	r25
     e78:	8f 93       	push	r24
     e7a:	0e 94 cb 10 	call	0x2196	; 0x2196 <printf>
	#endif
	lora_send_command(cmd);
     e7e:	c8 01       	movw	r24, r16
     e80:	0e 94 87 05 	call	0xb0e	; 0xb0e <lora_send_command>
	return lora_receive_response();
     e84:	0e 94 49 06 	call	0xc92	; 0xc92 <lora_receive_response>
	err = lora_set_dr();
	if (err) return 3;
	
	
	err = lora_set_pwridx();
	if (err) return 4;
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	81 11       	cpse	r24, r1
     e94:	c8 c0       	rjmp	.+400    	; 0x1026 <lora_init+0x2ce>
}

uint8_t lora_set_dcycle(void){
	uint8_t err;
	#ifdef DEBUG_M
		printf("Setting dcycle for ch 0: ");
     e96:	85 e3       	ldi	r24, 0x35	; 53
     e98:	94 e0       	ldi	r25, 0x04	; 4
     e9a:	9f 93       	push	r25
     e9c:	8f 93       	push	r24
     e9e:	0e 94 cb 10 	call	0x2196	; 0x2196 <printf>
	#endif
	lora_send_command("mac set ch dcycle 0 9");
     ea2:	8f e4       	ldi	r24, 0x4F	; 79
     ea4:	94 e0       	ldi	r25, 0x04	; 4
     ea6:	0e 94 87 05 	call	0xb0e	; 0xb0e <lora_send_command>
	err = lora_receive_response();
     eaa:	0e 94 49 06 	call	0xc92	; 0xc92 <lora_receive_response>
	if (err) return 0xB1;
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	81 11       	cpse	r24, r1
     eb4:	1e c0       	rjmp	.+60     	; 0xef2 <lora_init+0x19a>
	
	#ifdef DEBUG_M
	printf("Setting dcycle for ch 1: ");
     eb6:	85 e6       	ldi	r24, 0x65	; 101
     eb8:	94 e0       	ldi	r25, 0x04	; 4
     eba:	9f 93       	push	r25
     ebc:	8f 93       	push	r24
     ebe:	0e 94 cb 10 	call	0x2196	; 0x2196 <printf>
	#endif
	lora_send_command("mac set ch dcycle 1 9");
     ec2:	8f e7       	ldi	r24, 0x7F	; 127
     ec4:	94 e0       	ldi	r25, 0x04	; 4
     ec6:	0e 94 87 05 	call	0xb0e	; 0xb0e <lora_send_command>
	err = lora_receive_response();
     eca:	0e 94 49 06 	call	0xc92	; 0xc92 <lora_receive_response>
	if (err) return 0xB2;
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	81 11       	cpse	r24, r1
     ed4:	0e c0       	rjmp	.+28     	; 0xef2 <lora_init+0x19a>
	
	#ifdef DEBUG_M
	printf("Setting dcycle for ch 2: ");
     ed6:	85 e9       	ldi	r24, 0x95	; 149
     ed8:	94 e0       	ldi	r25, 0x04	; 4
     eda:	9f 93       	push	r25
     edc:	8f 93       	push	r24
     ede:	0e 94 cb 10 	call	0x2196	; 0x2196 <printf>
	#endif
	lora_send_command("mac set ch dcycle 2 9");
     ee2:	8f ea       	ldi	r24, 0xAF	; 175
     ee4:	94 e0       	ldi	r25, 0x04	; 4
     ee6:	0e 94 87 05 	call	0xb0e	; 0xb0e <lora_send_command>
	err = lora_receive_response();
     eea:	0e 94 49 06 	call	0xc92	; 0xc92 <lora_receive_response>
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_set_OTAA_settings(uint8_t *joined_err){
	#ifdef DEBUG_M
		puts("Loading OTAA settings...");
     ef2:	85 ec       	ldi	r24, 0xC5	; 197
     ef4:	94 e0       	ldi	r25, 0x04	; 4
     ef6:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <puts>
#endif

uint8_t lora_set_deveui(){

	
	char cmd[50] = "mac set deveui ";
     efa:	80 e1       	ldi	r24, 0x10	; 16
     efc:	e4 e1       	ldi	r30, 0x14	; 20
     efe:	f1 e0       	ldi	r31, 0x01	; 1
     f00:	8e 01       	movw	r16, r28
     f02:	0f 5f       	subi	r16, 0xFF	; 255
     f04:	1f 4f       	sbci	r17, 0xFF	; 255
     f06:	d8 01       	movw	r26, r16
     f08:	01 90       	ld	r0, Z+
     f0a:	0d 92       	st	X+, r0
     f0c:	8a 95       	dec	r24
     f0e:	e1 f7       	brne	.-8      	; 0xf08 <lora_init+0x1b0>
     f10:	fe 01       	movw	r30, r28
     f12:	71 96       	adiw	r30, 0x11	; 17
     f14:	82 e2       	ldi	r24, 0x22	; 34
     f16:	df 01       	movw	r26, r30
     f18:	1d 92       	st	X+, r1
     f1a:	8a 95       	dec	r24
     f1c:	e9 f7       	brne	.-6      	; 0xf18 <lora_init+0x1c0>
	strcat(cmd, devEui);
     f1e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <devEui>
     f22:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <devEui+0x1>
     f26:	c8 01       	movw	r24, r16
     f28:	0e 94 64 10 	call	0x20c8	; 0x20c8 <strcat>
	
	#ifdef DEBUG_M
		printf("%s:  ", cmd);
     f2c:	1f 93       	push	r17
     f2e:	0f 93       	push	r16
     f30:	8e ed       	ldi	r24, 0xDE	; 222
     f32:	94 e0       	ldi	r25, 0x04	; 4
     f34:	9f 93       	push	r25
     f36:	8f 93       	push	r24
     f38:	0e 94 cb 10 	call	0x2196	; 0x2196 <printf>
	#endif
	lora_send_command(cmd);
     f3c:	c8 01       	movw	r24, r16
     f3e:	0e 94 87 05 	call	0xb0e	; 0xb0e <lora_send_command>
	return lora_receive_response();
     f42:	0e 94 49 06 	call	0xc92	; 0xc92 <lora_receive_response>
		puts("Loading OTAA settings...");
	#endif
	uint8_t err = 0;
	
	err = lora_set_deveui();
	if (err) return 7;
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	81 11       	cpse	r24, r1
     f50:	6c c0       	rjmp	.+216    	; 0x102a <lora_init+0x2d2>
	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_set_appeui(){
	#ifdef DEBUG_M
		printf("Set appeui: ");
     f52:	84 ee       	ldi	r24, 0xE4	; 228
     f54:	94 e0       	ldi	r25, 0x04	; 4
     f56:	9f 93       	push	r25
     f58:	8f 93       	push	r24
     f5a:	0e 94 cb 10 	call	0x2196	; 0x2196 <printf>
	#endif	
	
	char cmd[50] = "mac set appeui ";
     f5e:	80 e1       	ldi	r24, 0x10	; 16
     f60:	e6 e4       	ldi	r30, 0x46	; 70
     f62:	f1 e0       	ldi	r31, 0x01	; 1
     f64:	d8 01       	movw	r26, r16
     f66:	01 90       	ld	r0, Z+
     f68:	0d 92       	st	X+, r0
     f6a:	8a 95       	dec	r24
     f6c:	e1 f7       	brne	.-8      	; 0xf66 <lora_init+0x20e>
     f6e:	fe 01       	movw	r30, r28
     f70:	71 96       	adiw	r30, 0x11	; 17
     f72:	82 e2       	ldi	r24, 0x22	; 34
     f74:	df 01       	movw	r26, r30
     f76:	1d 92       	st	X+, r1
     f78:	8a 95       	dec	r24
     f7a:	e9 f7       	brne	.-6      	; 0xf76 <lora_init+0x21e>
 	strcat(cmd, appEui);
     f7c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <appEui>
     f80:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <appEui+0x1>
     f84:	c8 01       	movw	r24, r16
     f86:	0e 94 64 10 	call	0x20c8	; 0x20c8 <strcat>
 	lora_send_command(cmd);
     f8a:	c8 01       	movw	r24, r16
     f8c:	0e 94 87 05 	call	0xb0e	; 0xb0e <lora_send_command>
	return lora_receive_response();
     f90:	0e 94 49 06 	call	0xc92	; 0xc92 <lora_receive_response>
	
	err = lora_set_deveui();
	if (err) return 7;
		
	err = lora_set_appeui();
	if (err) return 8;
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	81 11       	cpse	r24, r1
     f9a:	47 c0       	rjmp	.+142    	; 0x102a <lora_init+0x2d2>
 	strcat(cmd, appEui);
 	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_set_appkey(){
	char cmd[50] = "mac set appkey ";
     f9c:	80 e1       	ldi	r24, 0x10	; 16
     f9e:	e8 e7       	ldi	r30, 0x78	; 120
     fa0:	f1 e0       	ldi	r31, 0x01	; 1
     fa2:	d8 01       	movw	r26, r16
     fa4:	01 90       	ld	r0, Z+
     fa6:	0d 92       	st	X+, r0
     fa8:	8a 95       	dec	r24
     faa:	e1 f7       	brne	.-8      	; 0xfa4 <lora_init+0x24c>
     fac:	fe 01       	movw	r30, r28
     fae:	71 96       	adiw	r30, 0x11	; 17
     fb0:	82 e2       	ldi	r24, 0x22	; 34
     fb2:	df 01       	movw	r26, r30
     fb4:	1d 92       	st	X+, r1
     fb6:	8a 95       	dec	r24
     fb8:	e9 f7       	brne	.-6      	; 0xfb4 <lora_init+0x25c>
	strcat(cmd, appKey);
     fba:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     fbe:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     fc2:	c8 01       	movw	r24, r16
     fc4:	0e 94 64 10 	call	0x20c8	; 0x20c8 <strcat>
	#ifdef DEBUG_M
		printf("mac set appkey ****: ");
     fc8:	81 ef       	ldi	r24, 0xF1	; 241
     fca:	94 e0       	ldi	r25, 0x04	; 4
     fcc:	9f 93       	push	r25
     fce:	8f 93       	push	r24
     fd0:	0e 94 cb 10 	call	0x2196	; 0x2196 <printf>
	#endif
	lora_send_command(cmd);
     fd4:	c8 01       	movw	r24, r16
     fd6:	0e 94 87 05 	call	0xb0e	; 0xb0e <lora_send_command>
	return lora_receive_response();
     fda:	0e 94 49 06 	call	0xc92	; 0xc92 <lora_receive_response>
		
	err = lora_set_appeui();
	if (err) return 8;
			
	err = lora_set_appkey();
	if (err) return 9;
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	81 11       	cpse	r24, r1
     fe4:	22 c0       	rjmp	.+68     	; 0x102a <lora_init+0x2d2>
	lora_send_command(cmd);
	return lora_receive_response();
}
uint8_t lora_save_settings(){
	#ifdef DEBUG_M
		printf("Save settings: ");
     fe6:	87 e0       	ldi	r24, 0x07	; 7
     fe8:	95 e0       	ldi	r25, 0x05	; 5
     fea:	9f 93       	push	r25
     fec:	8f 93       	push	r24
     fee:	0e 94 cb 10 	call	0x2196	; 0x2196 <printf>
	#endif
	
	lora_send_command("mac save");
     ff2:	87 e1       	ldi	r24, 0x17	; 23
     ff4:	95 e0       	ldi	r25, 0x05	; 5
     ff6:	0e 94 87 05 	call	0xb0e	; 0xb0e <lora_send_command>
	return lora_receive_response();
     ffa:	0e 94 49 06 	call	0xc92	; 0xc92 <lora_receive_response>
     ffe:	18 2f       	mov	r17, r24
			
	err = lora_set_appkey();
	if (err) return 9;

	err = lora_save_settings();
	if (err) return 10;
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	81 11       	cpse	r24, r1
    1006:	11 c0       	rjmp	.+34     	; 0x102a <lora_init+0x2d2>
	
	*joined_err = lora_join_OTAA();
    1008:	0e 94 87 06 	call	0xd0e	; 0xd0e <lora_join_OTAA>
    100c:	f7 01       	movw	r30, r14
    100e:	80 83       	st	Z, r24
		if (err) return 6;
	#endif
	
	
	#ifdef DEBUG_M
	puts("Init success");
    1010:	80 e2       	ldi	r24, 0x20	; 32
    1012:	95 e0       	ldi	r25, 0x05	; 5
    1014:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <puts>
	#endif
	
	return 0;
    1018:	09 c0       	rjmp	.+18     	; 0x102c <lora_init+0x2d4>
	#endif	
	


	err = lora_reset_to_band();
	if (err) return 1;
    101a:	11 e0       	ldi	r17, 0x01	; 1
    101c:	07 c0       	rjmp	.+14     	; 0x102c <lora_init+0x2d4>
	
		
	err = lora_set_adr() ;
	if (err) return 2;
    101e:	12 e0       	ldi	r17, 0x02	; 2
    1020:	05 c0       	rjmp	.+10     	; 0x102c <lora_init+0x2d4>
	
		
	err = lora_set_dr();
	if (err) return 3;
    1022:	13 e0       	ldi	r17, 0x03	; 3
    1024:	03 c0       	rjmp	.+6      	; 0x102c <lora_init+0x2d4>
	
	
	err = lora_set_pwridx();
	if (err) return 4;
    1026:	14 e0       	ldi	r17, 0x04	; 4
    1028:	01 c0       	rjmp	.+2      	; 0x102c <lora_init+0x2d4>
	lora_set_dcycle();
// 	lora_send_command("mac set ch dcycle 0 9");
// 	lora_receive_response();
	#ifdef OTAA
		err = lora_set_OTAA_settings(joined_err);
		if (err) return 5;	
    102a:	15 e0       	ldi	r17, 0x05	; 5
	puts("Init success");
	#endif
	
	return 0;

}
    102c:	81 2f       	mov	r24, r17
    102e:	e2 96       	adiw	r28, 0x32	; 50
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	ff 90       	pop	r15
    1044:	ef 90       	pop	r14
    1046:	08 95       	ret

00001048 <lora_transmit>:
void lora_transmit(const char *payload){
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	c4 56       	subi	r28, 0x64	; 100
    1052:	d1 09       	sbc	r29, r1
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	bc 01       	movw	r22, r24
	uint8_t err;
	char buf[100] = "mac tx uncnf 3 ";
    1060:	90 e1       	ldi	r25, 0x10	; 16
    1062:	ea ea       	ldi	r30, 0xAA	; 170
    1064:	f1 e0       	ldi	r31, 0x01	; 1
    1066:	de 01       	movw	r26, r28
    1068:	11 96       	adiw	r26, 0x01	; 1
    106a:	01 90       	ld	r0, Z+
    106c:	0d 92       	st	X+, r0
    106e:	9a 95       	dec	r25
    1070:	e1 f7       	brne	.-8      	; 0x106a <lora_transmit+0x22>
    1072:	fe 01       	movw	r30, r28
    1074:	71 96       	adiw	r30, 0x11	; 17
    1076:	84 e5       	ldi	r24, 0x54	; 84
    1078:	df 01       	movw	r26, r30
    107a:	1d 92       	st	X+, r1
    107c:	8a 95       	dec	r24
    107e:	e9 f7       	brne	.-6      	; 0x107a <lora_transmit+0x32>
	strcat(buf, payload);
    1080:	ce 01       	movw	r24, r28
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	0e 94 64 10 	call	0x20c8	; 0x20c8 <strcat>

	lora_send_command(buf);
    1088:	ce 01       	movw	r24, r28
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	0e 94 87 05 	call	0xb0e	; 0xb0e <lora_send_command>
	err = lora_receive_response();
    1090:	0e 94 49 06 	call	0xc92	; 0xc92 <lora_receive_response>
	if (!err){
    1094:	81 11       	cpse	r24, r1
    1096:	09 c0       	rjmp	.+18     	; 0x10aa <lora_transmit+0x62>
		clear_bit(LEDS,LED3);
    1098:	2a 98       	cbi	0x05, 2	; 5
		err = lora_receive_response();
    109a:	0e 94 49 06 	call	0xc92	; 0xc92 <lora_receive_response>
		if(err == RESP_MAC_RX_INC){
    109e:	81 31       	cpi	r24, 0x11	; 17
    10a0:	29 f4       	brne	.+10     	; 0x10ac <lora_transmit+0x64>
			data_receive_flag = 1;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <data_receive_flag>
    10a8:	01 c0       	rjmp	.+2      	; 0x10ac <lora_transmit+0x64>
		}
	}
	else set_bit(LEDS,LED3);
    10aa:	2a 9a       	sbi	0x05, 2	; 5
}
    10ac:	cc 59       	subi	r28, 0x9C	; 156
    10ae:	df 4f       	sbci	r29, 0xFF	; 255
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	08 95       	ret

000010c0 <USART_init>:
	for(; *string; ++string){
		USART_transmit2(*string);
	}
	//USART_transmit2(0x0D);
	USART_transmit2(0x0A);
}
    10c0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    10c4:	93 e3       	ldi	r25, 0x33	; 51
    10c6:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    10ca:	88 e1       	ldi	r24, 0x18	; 24
    10cc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    10d0:	e2 ec       	ldi	r30, 0xC2	; 194
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	86 60       	ori	r24, 0x06	; 6
    10d8:	80 83       	st	Z, r24
    10da:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7e00d5>
    10de:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7e00d4>
    10e2:	88 e9       	ldi	r24, 0x98	; 152
    10e4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
    10e8:	e2 ed       	ldi	r30, 0xD2	; 210
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	86 60       	ori	r24, 0x06	; 6
    10f0:	80 83       	st	Z, r24
    10f2:	86 e0       	ldi	r24, 0x06	; 6
    10f4:	91 e0       	ldi	r25, 0x01	; 1
    10f6:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <__iob+0x3>
    10fa:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <__iob+0x2>
    10fe:	08 95       	ret

00001100 <USART_receive0>:
    1100:	e0 ec       	ldi	r30, 0xC0	; 192
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	88 23       	and	r24, r24
    1108:	ec f7       	brge	.-6      	; 0x1104 <USART_receive0+0x4>
    110a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    110e:	08 95       	ret

00001110 <USART_transmit0>:
    1110:	e0 ec       	ldi	r30, 0xC0	; 192
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	90 81       	ld	r25, Z
    1116:	95 ff       	sbrs	r25, 5
    1118:	fd cf       	rjmp	.-6      	; 0x1114 <USART_transmit0+0x4>
    111a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    111e:	08 95       	ret

00001120 <USART_putstring0>:
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	ec 01       	movw	r28, r24
    1126:	88 81       	ld	r24, Y
    1128:	88 23       	and	r24, r24
    112a:	31 f0       	breq	.+12     	; 0x1138 <USART_putstring0+0x18>
    112c:	21 96       	adiw	r28, 0x01	; 1
    112e:	0e 94 88 08 	call	0x1110	; 0x1110 <USART_transmit0>
    1132:	89 91       	ld	r24, Y+
    1134:	81 11       	cpse	r24, r1
    1136:	fb cf       	rjmp	.-10     	; 0x112e <USART_putstring0+0xe>
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <USART_transmit2>:
    113e:	e0 ed       	ldi	r30, 0xD0	; 208
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	90 81       	ld	r25, Z
    1144:	95 ff       	sbrs	r25, 5
    1146:	fd cf       	rjmp	.-6      	; 0x1142 <USART_transmit2+0x4>
    1148:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
    114c:	08 95       	ret

0000114e <USART_TRANSMIT_printf>:
    114e:	cf 93       	push	r28
    1150:	c8 2f       	mov	r28, r24
    1152:	8a 30       	cpi	r24, 0x0A	; 10
    1154:	19 f4       	brne	.+6      	; 0x115c <USART_TRANSMIT_printf+0xe>
    1156:	8d e0       	ldi	r24, 0x0D	; 13
    1158:	0e 94 9f 08 	call	0x113e	; 0x113e <USART_transmit2>
    115c:	8c 2f       	mov	r24, r28
    115e:	0e 94 9f 08 	call	0x113e	; 0x113e <USART_transmit2>
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	cf 91       	pop	r28
    1168:	08 95       	ret

0000116a <USART_receive2>:
    116a:	e0 ed       	ldi	r30, 0xD0	; 208
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	88 23       	and	r24, r24
    1172:	ec f7       	brge	.-6      	; 0x116e <USART_receive2+0x4>
    1174:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
    1178:	08 95       	ret

0000117a <USART_receiveString2>:

void USART_receiveString2(void){
    117a:	ef 92       	push	r14
    117c:	ff 92       	push	r15
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	ca 5f       	subi	r28, 0xFA	; 250
    118c:	d1 09       	sbc	r29, r1
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	ce 01       	movw	r24, r28
    119a:	01 96       	adiw	r24, 0x01	; 1
    119c:	7c 01       	movw	r14, r24
	char rx_buf[250];
	unsigned char rec = 0;
	int i = 0;
    119e:	00 e0       	ldi	r16, 0x00	; 0
    11a0:	10 e0       	ldi	r17, 0x00	; 0
	while (1){
		rec = USART_receive2();
    11a2:	0e 94 b5 08 	call	0x116a	; 0x116a <USART_receive2>
		if (rec == 0x0A){
    11a6:	8a 30       	cpi	r24, 0x0A	; 10
    11a8:	c1 f4       	brne	.+48     	; 0x11da <USART_receiveString2+0x60>
			rx_buf[i] = '\0';
    11aa:	fe 01       	movw	r30, r28
    11ac:	31 96       	adiw	r30, 0x01	; 1
    11ae:	7f 01       	movw	r14, r30
    11b0:	e0 0f       	add	r30, r16
    11b2:	f1 1f       	adc	r31, r17
    11b4:	10 82       	st	Z, r1
		}
		rx_buf[i] = rec;
		i++;
	}
	#ifdef DEBUG_M
	printf("rx int: %s\n", rx_buf);
    11b6:	ff 92       	push	r15
    11b8:	ef 92       	push	r14
    11ba:	8b eb       	ldi	r24, 0xBB	; 187
    11bc:	95 e0       	ldi	r25, 0x05	; 5
    11be:	9f 93       	push	r25
    11c0:	8f 93       	push	r24
    11c2:	0e 94 cb 10 	call	0x2196	; 0x2196 <printf>
	#endif
	strcpy(downlink, rx_buf);
    11c6:	b7 01       	movw	r22, r14
    11c8:	81 ee       	ldi	r24, 0xE1	; 225
    11ca:	95 e0       	ldi	r25, 0x05	; 5
    11cc:	0e 94 6f 10 	call	0x20de	; 0x20de <strcpy>
}
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	06 c0       	rjmp	.+12     	; 0x11e6 <USART_receiveString2+0x6c>
		rec = USART_receive2();
		if (rec == 0x0A){
			rx_buf[i] = '\0';
			break;
		}
		rx_buf[i] = rec;
    11da:	f7 01       	movw	r30, r14
    11dc:	81 93       	st	Z+, r24
    11de:	7f 01       	movw	r14, r30
		i++;
    11e0:	0f 5f       	subi	r16, 0xFF	; 255
    11e2:	1f 4f       	sbci	r17, 0xFF	; 255
	}
    11e4:	de cf       	rjmp	.-68     	; 0x11a2 <USART_receiveString2+0x28>
	#ifdef DEBUG_M
	printf("rx int: %s\n", rx_buf);
	#endif
	strcpy(downlink, rx_buf);
}
    11e6:	c6 50       	subi	r28, 0x06	; 6
    11e8:	df 4f       	sbci	r29, 0xFF	; 255
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	ff 90       	pop	r15
    11fe:	ef 90       	pop	r14
    1200:	08 95       	ret

00001202 <timers_init>:
		OCR1A = 31250;
		TIMSK1 |= (1 << OCIE1A);
	#endif

	#ifdef TIMER2
		TIMSK2 = 0;
    1202:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		ASSR = 0b00100000;
    1206:	80 e2       	ldi	r24, 0x20	; 32
    1208:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
    120c:	2f ef       	ldi	r18, 0xFF	; 255
    120e:	89 e6       	ldi	r24, 0x69	; 105
    1210:	98 e1       	ldi	r25, 0x18	; 24
    1212:	21 50       	subi	r18, 0x01	; 1
    1214:	80 40       	sbci	r24, 0x00	; 0
    1216:	90 40       	sbci	r25, 0x00	; 0
    1218:	e1 f7       	brne	.-8      	; 0x1212 <timers_init+0x10>
    121a:	00 c0       	rjmp	.+0      	; 0x121c <timers_init+0x1a>
    121c:	00 00       	nop
		_delay_ms(1000);
		TCCR2A = 0b00000000;
    121e:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		TCCR2B = 0b00000101;
    1222:	85 e0       	ldi	r24, 0x05	; 5
    1224:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		//Synchronize registers
		while (ASSR & ( (1 << TCN2UB) | (1 << TCR2AUB) | (1 << TCR2BUB) )) ;
    1228:	e6 eb       	ldi	r30, 0xB6	; 182
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	83 71       	andi	r24, 0x13	; 19
    1230:	e9 f7       	brne	.-6      	; 0x122c <timers_init+0x2a>
		TIFR2 = 0; //Clear interrupt flags
    1232:	17 ba       	out	0x17, r1	; 23
		TIMSK2 = (1 << TOIE2); //Enable overflow interrupt
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    123a:	08 95       	ret

0000123c <enter_powerSave>:
}


void enter_powerSave(){
	#ifdef USART2_START_COND_INTERRUPT
	UCSR2D |= (1<<SFDE) | (0<<RXSIE);			// Enable start condition detection with interrupt on RXCIE
    123c:	e3 ed       	ldi	r30, 0xD3	; 211
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	80 62       	ori	r24, 0x20	; 32
    1244:	80 83       	st	Z, r24
	#endif
	
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
    1246:	83 b7       	in	r24, 0x33	; 51
    1248:	81 7f       	andi	r24, 0xF1	; 241
    124a:	86 60       	ori	r24, 0x06	; 6
    124c:	83 bf       	out	0x33, r24	; 51
	sleep_mode();
    124e:	83 b7       	in	r24, 0x33	; 51
    1250:	81 60       	ori	r24, 0x01	; 1
    1252:	83 bf       	out	0x33, r24	; 51
    1254:	88 95       	sleep
    1256:	83 b7       	in	r24, 0x33	; 51
    1258:	8e 7f       	andi	r24, 0xFE	; 254
    125a:	83 bf       	out	0x33, r24	; 51
    125c:	2f e7       	ldi	r18, 0x7F	; 127
    125e:	85 eb       	ldi	r24, 0xB5	; 181
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	21 50       	subi	r18, 0x01	; 1
    1264:	80 40       	sbci	r24, 0x00	; 0
    1266:	90 40       	sbci	r25, 0x00	; 0
    1268:	e1 f7       	brne	.-8      	; 0x1262 <enter_powerSave+0x26>
    126a:	00 c0       	rjmp	.+0      	; 0x126c <enter_powerSave+0x30>
    126c:	00 00       	nop
	_delay_ms(70);
	
	#ifdef USART2_START_COND_INTERRUPT
	UCSR2D &= ~(1<<SFDE);						// Disable start condition detection while awake.
    126e:	80 81       	ld	r24, Z
    1270:	8f 7d       	andi	r24, 0xDF	; 223
    1272:	80 83       	st	Z, r24
    1274:	08 95       	ret

00001276 <ascii_hex_decode>:
#include "USART.h"
#include <math.h>
#include <string.h>
//const char* test2 = "6363 3131 3535 6262 6666"; = "cc 11 55 bb ff" = "204 17 85 187 255"
//const char* test = "3565623838383532";
void ascii_hex_decode(const char *in, size_t len, uint8_t *out, int start){
    1276:	ef 92       	push	r14
    1278:	ff 92       	push	r15
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	e2 97       	sbiw	r28, 0x32	; 50
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	dc 01       	movw	r26, r24
    1294:	79 01       	movw	r14, r18
	char buf[50];
	uint8_t i, t, j, h, hn, ln, p1, p2;
	for (t = 0, i = start; i<len; i+=2, t++){
    1296:	32 2f       	mov	r19, r18
    1298:	f7 01       	movw	r30, r14
    129a:	ff 27       	eor	r31, r31
    129c:	e6 17       	cp	r30, r22
    129e:	f7 07       	cpc	r31, r23
    12a0:	c8 f4       	brcc	.+50     	; 0x12d4 <ascii_hex_decode+0x5e>
    12a2:	80 e0       	ldi	r24, 0x00	; 0
		p1 = ((uint8_t)(in[i]) - '0')*16;
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
    12a4:	01 e0       	ldi	r16, 0x01	; 1
    12a6:	10 e0       	ldi	r17, 0x00	; 0
    12a8:	0c 0f       	add	r16, r28
    12aa:	1d 1f       	adc	r17, r29
    12ac:	08 0f       	add	r16, r24
    12ae:	11 1d       	adc	r17, r1
//const char* test = "3565623838383532";
void ascii_hex_decode(const char *in, size_t len, uint8_t *out, int start){
	char buf[50];
	uint8_t i, t, j, h, hn, ln, p1, p2;
	for (t = 0, i = start; i<len; i+=2, t++){
		p1 = ((uint8_t)(in[i]) - '0')*16;
    12b0:	ea 0f       	add	r30, r26
    12b2:	fb 1f       	adc	r31, r27
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
    12b4:	20 81       	ld	r18, Z
    12b6:	91 81       	ldd	r25, Z+1	; 0x01
    12b8:	90 53       	subi	r25, 0x30	; 48
    12ba:	e0 e1       	ldi	r30, 0x10	; 16
    12bc:	2e 9f       	mul	r18, r30
    12be:	90 0d       	add	r25, r0
    12c0:	11 24       	eor	r1, r1
    12c2:	f8 01       	movw	r30, r16
    12c4:	90 83       	st	Z, r25
//const char* test2 = "6363 3131 3535 6262 6666"; = "cc 11 55 bb ff" = "204 17 85 187 255"
//const char* test = "3565623838383532";
void ascii_hex_decode(const char *in, size_t len, uint8_t *out, int start){
	char buf[50];
	uint8_t i, t, j, h, hn, ln, p1, p2;
	for (t = 0, i = start; i<len; i+=2, t++){
    12c6:	3e 5f       	subi	r19, 0xFE	; 254
    12c8:	8f 5f       	subi	r24, 0xFF	; 255
    12ca:	e3 2f       	mov	r30, r19
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	e6 17       	cp	r30, r22
    12d0:	f7 07       	cpc	r31, r23
    12d2:	40 f3       	brcs	.-48     	; 0x12a4 <ascii_hex_decode+0x2e>
		p1 = ((uint8_t)(in[i]) - '0')*16;
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
	}
	for (h= 0,j = 0; j<(len-start)/2; j+=2, h++){
    12d4:	6e 19       	sub	r22, r14
    12d6:	7f 09       	sbc	r23, r15
    12d8:	7b 01       	movw	r14, r22
    12da:	f6 94       	lsr	r15
    12dc:	e7 94       	ror	r14
    12de:	e1 14       	cp	r14, r1
    12e0:	f1 04       	cpc	r15, r1
    12e2:	99 f1       	breq	.+102    	; 0x134a <ascii_hex_decode+0xd4>
    12e4:	e0 e0       	ldi	r30, 0x00	; 0
    12e6:	70 e0       	ldi	r23, 0x00	; 0
		hn = buf[j] > '9' ? buf[j] - 'a' + 10 : buf[j] - '0';
    12e8:	27 2f       	mov	r18, r23
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	8c 0f       	add	r24, r28
    12f2:	9d 1f       	adc	r25, r29
    12f4:	82 0f       	add	r24, r18
    12f6:	93 1f       	adc	r25, r19
    12f8:	dc 01       	movw	r26, r24
    12fa:	8c 91       	ld	r24, X
    12fc:	8a 33       	cpi	r24, 0x3A	; 58
    12fe:	18 f0       	brcs	.+6      	; 0x1306 <ascii_hex_decode+0x90>
    1300:	99 ea       	ldi	r25, 0xA9	; 169
    1302:	98 0f       	add	r25, r24
    1304:	02 c0       	rjmp	.+4      	; 0x130a <ascii_hex_decode+0x94>
    1306:	90 ed       	ldi	r25, 0xD0	; 208
    1308:	98 0f       	add	r25, r24
		ln = buf[j+1] > '9' ? buf[j+1] - 'a' + 10 : buf[j+1] - '0';
    130a:	a2 e0       	ldi	r26, 0x02	; 2
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ac 0f       	add	r26, r28
    1310:	bd 1f       	adc	r27, r29
    1312:	2a 0f       	add	r18, r26
    1314:	3b 1f       	adc	r19, r27
    1316:	d9 01       	movw	r26, r18
    1318:	8c 91       	ld	r24, X
    131a:	8a 33       	cpi	r24, 0x3A	; 58
    131c:	18 f0       	brcs	.+6      	; 0x1324 <ascii_hex_decode+0xae>
    131e:	29 ea       	ldi	r18, 0xA9	; 169
    1320:	28 0f       	add	r18, r24
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <ascii_hex_decode+0xb2>
    1324:	20 ed       	ldi	r18, 0xD0	; 208
    1326:	28 0f       	add	r18, r24
		out[h] = (hn << 4) | ln;
    1328:	8a 01       	movw	r16, r20
    132a:	0e 0f       	add	r16, r30
    132c:	11 1d       	adc	r17, r1
    132e:	b0 e1       	ldi	r27, 0x10	; 16
    1330:	9b 9f       	mul	r25, r27
    1332:	c0 01       	movw	r24, r0
    1334:	11 24       	eor	r1, r1
    1336:	82 2b       	or	r24, r18
    1338:	d8 01       	movw	r26, r16
    133a:	8c 93       	st	X, r24
	for (t = 0, i = start; i<len; i+=2, t++){
		p1 = ((uint8_t)(in[i]) - '0')*16;
		p2 = (uint8_t)(in[i+1]) - '0';
		buf[t] = p1+p2;
	}
	for (h= 0,j = 0; j<(len-start)/2; j+=2, h++){
    133c:	7e 5f       	subi	r23, 0xFE	; 254
    133e:	ef 5f       	subi	r30, 0xFF	; 255
    1340:	87 2f       	mov	r24, r23
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	8e 15       	cp	r24, r14
    1346:	9f 05       	cpc	r25, r15
    1348:	78 f2       	brcs	.-98     	; 0x12e8 <ascii_hex_decode+0x72>
		hn = buf[j] > '9' ? buf[j] - 'a' + 10 : buf[j] - '0';
		ln = buf[j+1] > '9' ? buf[j+1] - 'a' + 10 : buf[j+1] - '0';
		out[h] = (hn << 4) | ln;
	}
	//puts("");
}
    134a:	e2 96       	adiw	r28, 0x32	; 50
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	ff 90       	pop	r15
    1360:	ef 90       	pop	r14
    1362:	08 95       	ret

00001364 <hex_decode>:

uint8_t* hex_decode(const char *in, size_t len,uint8_t *out, int start){
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	ec 01       	movw	r28, r24
    136e:	95 2f       	mov	r25, r21
	unsigned int i, t, hn, ln;
	for (t = 0,i = start; i < len; i+=2,++t) {
    1370:	26 17       	cp	r18, r22
    1372:	37 07       	cpc	r19, r23
    1374:	08 f5       	brcc	.+66     	; 0x13b8 <hex_decode+0x54>
    1376:	c2 0f       	add	r28, r18
    1378:	d3 1f       	adc	r29, r19
    137a:	04 2f       	mov	r16, r20
    137c:	15 2f       	mov	r17, r21
    137e:	fe 01       	movw	r30, r28
		hn = in[i] > '9' ? in[i] - 'A' + 10 : in[i] - '0';
    1380:	a8 81       	ld	r26, Y
    1382:	aa 33       	cpi	r26, 0x3A	; 58
    1384:	18 f0       	brcs	.+6      	; 0x138c <hex_decode+0x28>
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	d7 97       	sbiw	r26, 0x37	; 55
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <hex_decode+0x2c>
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	d0 97       	sbiw	r26, 0x30	; 48
		ln = in[i+1] > '9' ? in[i+1] - 'A' + 10 : in[i+1] - '0';
    1390:	e1 81       	ldd	r30, Z+1	; 0x01
    1392:	ea 33       	cpi	r30, 0x3A	; 58
    1394:	18 f0       	brcs	.+6      	; 0x139c <hex_decode+0x38>
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	f7 97       	sbiw	r30, 0x37	; 55
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <hex_decode+0x3c>
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	f0 97       	sbiw	r30, 0x30	; 48
		out[t] = (hn << 4 ) | ln;
    13a0:	a2 95       	swap	r26
    13a2:	a0 7f       	andi	r26, 0xF0	; 240
    13a4:	ea 2b       	or	r30, r26
    13a6:	d8 01       	movw	r26, r16
    13a8:	ed 93       	st	X+, r30
    13aa:	8d 01       	movw	r16, r26
	//puts("");
}

uint8_t* hex_decode(const char *in, size_t len,uint8_t *out, int start){
	unsigned int i, t, hn, ln;
	for (t = 0,i = start; i < len; i+=2,++t) {
    13ac:	2e 5f       	subi	r18, 0xFE	; 254
    13ae:	3f 4f       	sbci	r19, 0xFF	; 255
    13b0:	22 96       	adiw	r28, 0x02	; 2
    13b2:	26 17       	cp	r18, r22
    13b4:	37 07       	cpc	r19, r23
    13b6:	18 f3       	brcs	.-58     	; 0x137e <hex_decode+0x1a>
		hn = in[i] > '9' ? in[i] - 'A' + 10 : in[i] - '0';
		ln = in[i+1] > '9' ? in[i+1] - 'A' + 10 : in[i+1] - '0';
		out[t] = (hn << 4 ) | ln;
	}
	return out;
}
    13b8:	84 2f       	mov	r24, r20
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	08 95       	ret

000013c4 <hex_encode>:

//				1  2  3  4  5  6  7  8  9 10 11 byte pair
//  MSG STYLE: xx xx xx xx xx xx xx xx xx xx xx
//  1: frame, 2-5: timestamp, 6: battery, 7+8: bus voltage, 9+10: current

char* hex_encode(board_t board){
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
	char *msg = "";
	sprintf(msg, "%02X%02X%04X%04X", board.frame_counter, board.batteryLevel, board.ina219.bus_voltage, board.ina219.current);
    13cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ce:	8f 93       	push	r24
    13d0:	89 85       	ldd	r24, Y+9	; 0x09
    13d2:	8f 93       	push	r24
    13d4:	88 85       	ldd	r24, Y+8	; 0x08
    13d6:	8f 93       	push	r24
    13d8:	8f 81       	ldd	r24, Y+7	; 0x07
    13da:	8f 93       	push	r24
    13dc:	8e 81       	ldd	r24, Y+6	; 0x06
    13de:	1f 92       	push	r1
    13e0:	8f 93       	push	r24
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	1f 92       	push	r1
    13e6:	8f 93       	push	r24
    13e8:	8c ec       	ldi	r24, 0xCC	; 204
    13ea:	95 e0       	ldi	r25, 0x05	; 5
    13ec:	9f 93       	push	r25
    13ee:	8f 93       	push	r24
    13f0:	86 ec       	ldi	r24, 0xC6	; 198
    13f2:	95 e0       	ldi	r25, 0x05	; 5
    13f4:	9f 93       	push	r25
    13f6:	8f 93       	push	r24
    13f8:	0e 94 11 11 	call	0x2222	; 0x2222 <sprintf>
	return msg;
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
}
    1406:	86 ec       	ldi	r24, 0xC6	; 198
    1408:	95 e0       	ldi	r25, 0x05	; 5
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	08 95       	ret

00001410 <vfprintf>:
    1410:	a0 e1       	ldi	r26, 0x10	; 16
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ee e0       	ldi	r30, 0x0E	; 14
    1416:	fa e0       	ldi	r31, 0x0A	; 10
    1418:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__prologue_saves__>
    141c:	7c 01       	movw	r14, r24
    141e:	1b 01       	movw	r2, r22
    1420:	6a 01       	movw	r12, r20
    1422:	fc 01       	movw	r30, r24
    1424:	17 82       	std	Z+7, r1	; 0x07
    1426:	16 82       	std	Z+6, r1	; 0x06
    1428:	83 81       	ldd	r24, Z+3	; 0x03
    142a:	81 ff       	sbrs	r24, 1
    142c:	44 c3       	rjmp	.+1672   	; 0x1ab6 <vfprintf+0x6a6>
    142e:	9e 01       	movw	r18, r28
    1430:	2f 5f       	subi	r18, 0xFF	; 255
    1432:	3f 4f       	sbci	r19, 0xFF	; 255
    1434:	39 01       	movw	r6, r18
    1436:	f7 01       	movw	r30, r14
    1438:	93 81       	ldd	r25, Z+3	; 0x03
    143a:	f1 01       	movw	r30, r2
    143c:	93 fd       	sbrc	r25, 3
    143e:	85 91       	lpm	r24, Z+
    1440:	93 ff       	sbrs	r25, 3
    1442:	81 91       	ld	r24, Z+
    1444:	1f 01       	movw	r2, r30
    1446:	88 23       	and	r24, r24
    1448:	09 f4       	brne	.+2      	; 0x144c <vfprintf+0x3c>
    144a:	31 c3       	rjmp	.+1634   	; 0x1aae <vfprintf+0x69e>
    144c:	85 32       	cpi	r24, 0x25	; 37
    144e:	39 f4       	brne	.+14     	; 0x145e <vfprintf+0x4e>
    1450:	93 fd       	sbrc	r25, 3
    1452:	85 91       	lpm	r24, Z+
    1454:	93 ff       	sbrs	r25, 3
    1456:	81 91       	ld	r24, Z+
    1458:	1f 01       	movw	r2, r30
    145a:	85 32       	cpi	r24, 0x25	; 37
    145c:	39 f4       	brne	.+14     	; 0x146c <vfprintf+0x5c>
    145e:	b7 01       	movw	r22, r14
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1466:	56 01       	movw	r10, r12
    1468:	65 01       	movw	r12, r10
    146a:	e5 cf       	rjmp	.-54     	; 0x1436 <vfprintf+0x26>
    146c:	10 e0       	ldi	r17, 0x00	; 0
    146e:	51 2c       	mov	r5, r1
    1470:	91 2c       	mov	r9, r1
    1472:	ff e1       	ldi	r31, 0x1F	; 31
    1474:	f9 15       	cp	r31, r9
    1476:	d8 f0       	brcs	.+54     	; 0x14ae <vfprintf+0x9e>
    1478:	8b 32       	cpi	r24, 0x2B	; 43
    147a:	79 f0       	breq	.+30     	; 0x149a <vfprintf+0x8a>
    147c:	38 f4       	brcc	.+14     	; 0x148c <vfprintf+0x7c>
    147e:	80 32       	cpi	r24, 0x20	; 32
    1480:	79 f0       	breq	.+30     	; 0x14a0 <vfprintf+0x90>
    1482:	83 32       	cpi	r24, 0x23	; 35
    1484:	a1 f4       	brne	.+40     	; 0x14ae <vfprintf+0x9e>
    1486:	f9 2d       	mov	r31, r9
    1488:	f0 61       	ori	r31, 0x10	; 16
    148a:	2e c0       	rjmp	.+92     	; 0x14e8 <vfprintf+0xd8>
    148c:	8d 32       	cpi	r24, 0x2D	; 45
    148e:	61 f0       	breq	.+24     	; 0x14a8 <vfprintf+0x98>
    1490:	80 33       	cpi	r24, 0x30	; 48
    1492:	69 f4       	brne	.+26     	; 0x14ae <vfprintf+0x9e>
    1494:	29 2d       	mov	r18, r9
    1496:	21 60       	ori	r18, 0x01	; 1
    1498:	2d c0       	rjmp	.+90     	; 0x14f4 <vfprintf+0xe4>
    149a:	39 2d       	mov	r19, r9
    149c:	32 60       	ori	r19, 0x02	; 2
    149e:	93 2e       	mov	r9, r19
    14a0:	89 2d       	mov	r24, r9
    14a2:	84 60       	ori	r24, 0x04	; 4
    14a4:	98 2e       	mov	r9, r24
    14a6:	2a c0       	rjmp	.+84     	; 0x14fc <vfprintf+0xec>
    14a8:	e9 2d       	mov	r30, r9
    14aa:	e8 60       	ori	r30, 0x08	; 8
    14ac:	15 c0       	rjmp	.+42     	; 0x14d8 <vfprintf+0xc8>
    14ae:	97 fc       	sbrc	r9, 7
    14b0:	2d c0       	rjmp	.+90     	; 0x150c <vfprintf+0xfc>
    14b2:	20 ed       	ldi	r18, 0xD0	; 208
    14b4:	28 0f       	add	r18, r24
    14b6:	2a 30       	cpi	r18, 0x0A	; 10
    14b8:	88 f4       	brcc	.+34     	; 0x14dc <vfprintf+0xcc>
    14ba:	96 fe       	sbrs	r9, 6
    14bc:	06 c0       	rjmp	.+12     	; 0x14ca <vfprintf+0xba>
    14be:	3a e0       	ldi	r19, 0x0A	; 10
    14c0:	13 9f       	mul	r17, r19
    14c2:	20 0d       	add	r18, r0
    14c4:	11 24       	eor	r1, r1
    14c6:	12 2f       	mov	r17, r18
    14c8:	19 c0       	rjmp	.+50     	; 0x14fc <vfprintf+0xec>
    14ca:	8a e0       	ldi	r24, 0x0A	; 10
    14cc:	58 9e       	mul	r5, r24
    14ce:	20 0d       	add	r18, r0
    14d0:	11 24       	eor	r1, r1
    14d2:	52 2e       	mov	r5, r18
    14d4:	e9 2d       	mov	r30, r9
    14d6:	e0 62       	ori	r30, 0x20	; 32
    14d8:	9e 2e       	mov	r9, r30
    14da:	10 c0       	rjmp	.+32     	; 0x14fc <vfprintf+0xec>
    14dc:	8e 32       	cpi	r24, 0x2E	; 46
    14de:	31 f4       	brne	.+12     	; 0x14ec <vfprintf+0xdc>
    14e0:	96 fc       	sbrc	r9, 6
    14e2:	e5 c2       	rjmp	.+1482   	; 0x1aae <vfprintf+0x69e>
    14e4:	f9 2d       	mov	r31, r9
    14e6:	f0 64       	ori	r31, 0x40	; 64
    14e8:	9f 2e       	mov	r9, r31
    14ea:	08 c0       	rjmp	.+16     	; 0x14fc <vfprintf+0xec>
    14ec:	8c 36       	cpi	r24, 0x6C	; 108
    14ee:	21 f4       	brne	.+8      	; 0x14f8 <vfprintf+0xe8>
    14f0:	29 2d       	mov	r18, r9
    14f2:	20 68       	ori	r18, 0x80	; 128
    14f4:	92 2e       	mov	r9, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <vfprintf+0xec>
    14f8:	88 36       	cpi	r24, 0x68	; 104
    14fa:	41 f4       	brne	.+16     	; 0x150c <vfprintf+0xfc>
    14fc:	f1 01       	movw	r30, r2
    14fe:	93 fd       	sbrc	r25, 3
    1500:	85 91       	lpm	r24, Z+
    1502:	93 ff       	sbrs	r25, 3
    1504:	81 91       	ld	r24, Z+
    1506:	1f 01       	movw	r2, r30
    1508:	81 11       	cpse	r24, r1
    150a:	b3 cf       	rjmp	.-154    	; 0x1472 <vfprintf+0x62>
    150c:	9b eb       	ldi	r25, 0xBB	; 187
    150e:	98 0f       	add	r25, r24
    1510:	93 30       	cpi	r25, 0x03	; 3
    1512:	20 f4       	brcc	.+8      	; 0x151c <vfprintf+0x10c>
    1514:	99 2d       	mov	r25, r9
    1516:	90 61       	ori	r25, 0x10	; 16
    1518:	80 5e       	subi	r24, 0xE0	; 224
    151a:	07 c0       	rjmp	.+14     	; 0x152a <vfprintf+0x11a>
    151c:	9b e9       	ldi	r25, 0x9B	; 155
    151e:	98 0f       	add	r25, r24
    1520:	93 30       	cpi	r25, 0x03	; 3
    1522:	08 f0       	brcs	.+2      	; 0x1526 <vfprintf+0x116>
    1524:	66 c1       	rjmp	.+716    	; 0x17f2 <vfprintf+0x3e2>
    1526:	99 2d       	mov	r25, r9
    1528:	9f 7e       	andi	r25, 0xEF	; 239
    152a:	96 ff       	sbrs	r25, 6
    152c:	16 e0       	ldi	r17, 0x06	; 6
    152e:	9f 73       	andi	r25, 0x3F	; 63
    1530:	99 2e       	mov	r9, r25
    1532:	85 36       	cpi	r24, 0x65	; 101
    1534:	19 f4       	brne	.+6      	; 0x153c <vfprintf+0x12c>
    1536:	90 64       	ori	r25, 0x40	; 64
    1538:	99 2e       	mov	r9, r25
    153a:	08 c0       	rjmp	.+16     	; 0x154c <vfprintf+0x13c>
    153c:	86 36       	cpi	r24, 0x66	; 102
    153e:	21 f4       	brne	.+8      	; 0x1548 <vfprintf+0x138>
    1540:	39 2f       	mov	r19, r25
    1542:	30 68       	ori	r19, 0x80	; 128
    1544:	93 2e       	mov	r9, r19
    1546:	02 c0       	rjmp	.+4      	; 0x154c <vfprintf+0x13c>
    1548:	11 11       	cpse	r17, r1
    154a:	11 50       	subi	r17, 0x01	; 1
    154c:	97 fe       	sbrs	r9, 7
    154e:	07 c0       	rjmp	.+14     	; 0x155e <vfprintf+0x14e>
    1550:	1c 33       	cpi	r17, 0x3C	; 60
    1552:	50 f4       	brcc	.+20     	; 0x1568 <vfprintf+0x158>
    1554:	44 24       	eor	r4, r4
    1556:	43 94       	inc	r4
    1558:	41 0e       	add	r4, r17
    155a:	27 e0       	ldi	r18, 0x07	; 7
    155c:	0b c0       	rjmp	.+22     	; 0x1574 <vfprintf+0x164>
    155e:	18 30       	cpi	r17, 0x08	; 8
    1560:	38 f0       	brcs	.+14     	; 0x1570 <vfprintf+0x160>
    1562:	27 e0       	ldi	r18, 0x07	; 7
    1564:	17 e0       	ldi	r17, 0x07	; 7
    1566:	05 c0       	rjmp	.+10     	; 0x1572 <vfprintf+0x162>
    1568:	27 e0       	ldi	r18, 0x07	; 7
    156a:	9c e3       	ldi	r25, 0x3C	; 60
    156c:	49 2e       	mov	r4, r25
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <vfprintf+0x164>
    1570:	21 2f       	mov	r18, r17
    1572:	41 2c       	mov	r4, r1
    1574:	56 01       	movw	r10, r12
    1576:	84 e0       	ldi	r24, 0x04	; 4
    1578:	a8 0e       	add	r10, r24
    157a:	b1 1c       	adc	r11, r1
    157c:	f6 01       	movw	r30, r12
    157e:	60 81       	ld	r22, Z
    1580:	71 81       	ldd	r23, Z+1	; 0x01
    1582:	82 81       	ldd	r24, Z+2	; 0x02
    1584:	93 81       	ldd	r25, Z+3	; 0x03
    1586:	04 2d       	mov	r16, r4
    1588:	a3 01       	movw	r20, r6
    158a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__ftoa_engine>
    158e:	6c 01       	movw	r12, r24
    1590:	f9 81       	ldd	r31, Y+1	; 0x01
    1592:	fc 87       	std	Y+12, r31	; 0x0c
    1594:	f0 ff       	sbrs	r31, 0
    1596:	02 c0       	rjmp	.+4      	; 0x159c <vfprintf+0x18c>
    1598:	f3 ff       	sbrs	r31, 3
    159a:	06 c0       	rjmp	.+12     	; 0x15a8 <vfprintf+0x198>
    159c:	91 fc       	sbrc	r9, 1
    159e:	06 c0       	rjmp	.+12     	; 0x15ac <vfprintf+0x19c>
    15a0:	92 fe       	sbrs	r9, 2
    15a2:	06 c0       	rjmp	.+12     	; 0x15b0 <vfprintf+0x1a0>
    15a4:	00 e2       	ldi	r16, 0x20	; 32
    15a6:	05 c0       	rjmp	.+10     	; 0x15b2 <vfprintf+0x1a2>
    15a8:	0d e2       	ldi	r16, 0x2D	; 45
    15aa:	03 c0       	rjmp	.+6      	; 0x15b2 <vfprintf+0x1a2>
    15ac:	0b e2       	ldi	r16, 0x2B	; 43
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <vfprintf+0x1a2>
    15b0:	00 e0       	ldi	r16, 0x00	; 0
    15b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    15b4:	8c 70       	andi	r24, 0x0C	; 12
    15b6:	19 f0       	breq	.+6      	; 0x15be <vfprintf+0x1ae>
    15b8:	01 11       	cpse	r16, r1
    15ba:	5a c2       	rjmp	.+1204   	; 0x1a70 <vfprintf+0x660>
    15bc:	9b c2       	rjmp	.+1334   	; 0x1af4 <vfprintf+0x6e4>
    15be:	97 fe       	sbrs	r9, 7
    15c0:	10 c0       	rjmp	.+32     	; 0x15e2 <vfprintf+0x1d2>
    15c2:	4c 0c       	add	r4, r12
    15c4:	fc 85       	ldd	r31, Y+12	; 0x0c
    15c6:	f4 ff       	sbrs	r31, 4
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <vfprintf+0x1c2>
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	81 33       	cpi	r24, 0x31	; 49
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <vfprintf+0x1c2>
    15d0:	4a 94       	dec	r4
    15d2:	14 14       	cp	r1, r4
    15d4:	74 f5       	brge	.+92     	; 0x1632 <vfprintf+0x222>
    15d6:	28 e0       	ldi	r18, 0x08	; 8
    15d8:	24 15       	cp	r18, r4
    15da:	78 f5       	brcc	.+94     	; 0x163a <vfprintf+0x22a>
    15dc:	88 e0       	ldi	r24, 0x08	; 8
    15de:	48 2e       	mov	r4, r24
    15e0:	2c c0       	rjmp	.+88     	; 0x163a <vfprintf+0x22a>
    15e2:	96 fc       	sbrc	r9, 6
    15e4:	2a c0       	rjmp	.+84     	; 0x163a <vfprintf+0x22a>
    15e6:	81 2f       	mov	r24, r17
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	8c 15       	cp	r24, r12
    15ec:	9d 05       	cpc	r25, r13
    15ee:	9c f0       	brlt	.+38     	; 0x1616 <vfprintf+0x206>
    15f0:	3c ef       	ldi	r19, 0xFC	; 252
    15f2:	c3 16       	cp	r12, r19
    15f4:	3f ef       	ldi	r19, 0xFF	; 255
    15f6:	d3 06       	cpc	r13, r19
    15f8:	74 f0       	brlt	.+28     	; 0x1616 <vfprintf+0x206>
    15fa:	89 2d       	mov	r24, r9
    15fc:	80 68       	ori	r24, 0x80	; 128
    15fe:	98 2e       	mov	r9, r24
    1600:	0a c0       	rjmp	.+20     	; 0x1616 <vfprintf+0x206>
    1602:	e2 e0       	ldi	r30, 0x02	; 2
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	ec 0f       	add	r30, r28
    1608:	fd 1f       	adc	r31, r29
    160a:	e1 0f       	add	r30, r17
    160c:	f1 1d       	adc	r31, r1
    160e:	80 81       	ld	r24, Z
    1610:	80 33       	cpi	r24, 0x30	; 48
    1612:	19 f4       	brne	.+6      	; 0x161a <vfprintf+0x20a>
    1614:	11 50       	subi	r17, 0x01	; 1
    1616:	11 11       	cpse	r17, r1
    1618:	f4 cf       	rjmp	.-24     	; 0x1602 <vfprintf+0x1f2>
    161a:	97 fe       	sbrs	r9, 7
    161c:	0e c0       	rjmp	.+28     	; 0x163a <vfprintf+0x22a>
    161e:	44 24       	eor	r4, r4
    1620:	43 94       	inc	r4
    1622:	41 0e       	add	r4, r17
    1624:	81 2f       	mov	r24, r17
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	c8 16       	cp	r12, r24
    162a:	d9 06       	cpc	r13, r25
    162c:	2c f4       	brge	.+10     	; 0x1638 <vfprintf+0x228>
    162e:	1c 19       	sub	r17, r12
    1630:	04 c0       	rjmp	.+8      	; 0x163a <vfprintf+0x22a>
    1632:	44 24       	eor	r4, r4
    1634:	43 94       	inc	r4
    1636:	01 c0       	rjmp	.+2      	; 0x163a <vfprintf+0x22a>
    1638:	10 e0       	ldi	r17, 0x00	; 0
    163a:	97 fe       	sbrs	r9, 7
    163c:	06 c0       	rjmp	.+12     	; 0x164a <vfprintf+0x23a>
    163e:	1c 14       	cp	r1, r12
    1640:	1d 04       	cpc	r1, r13
    1642:	34 f4       	brge	.+12     	; 0x1650 <vfprintf+0x240>
    1644:	c6 01       	movw	r24, r12
    1646:	01 96       	adiw	r24, 0x01	; 1
    1648:	05 c0       	rjmp	.+10     	; 0x1654 <vfprintf+0x244>
    164a:	85 e0       	ldi	r24, 0x05	; 5
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <vfprintf+0x244>
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	01 11       	cpse	r16, r1
    1656:	01 96       	adiw	r24, 0x01	; 1
    1658:	11 23       	and	r17, r17
    165a:	31 f0       	breq	.+12     	; 0x1668 <vfprintf+0x258>
    165c:	21 2f       	mov	r18, r17
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	2f 5f       	subi	r18, 0xFF	; 255
    1662:	3f 4f       	sbci	r19, 0xFF	; 255
    1664:	82 0f       	add	r24, r18
    1666:	93 1f       	adc	r25, r19
    1668:	25 2d       	mov	r18, r5
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	82 17       	cp	r24, r18
    166e:	93 07       	cpc	r25, r19
    1670:	14 f4       	brge	.+4      	; 0x1676 <vfprintf+0x266>
    1672:	58 1a       	sub	r5, r24
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <vfprintf+0x268>
    1676:	51 2c       	mov	r5, r1
    1678:	89 2d       	mov	r24, r9
    167a:	89 70       	andi	r24, 0x09	; 9
    167c:	49 f4       	brne	.+18     	; 0x1690 <vfprintf+0x280>
    167e:	55 20       	and	r5, r5
    1680:	39 f0       	breq	.+14     	; 0x1690 <vfprintf+0x280>
    1682:	b7 01       	movw	r22, r14
    1684:	80 e2       	ldi	r24, 0x20	; 32
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    168c:	5a 94       	dec	r5
    168e:	f7 cf       	rjmp	.-18     	; 0x167e <vfprintf+0x26e>
    1690:	00 23       	and	r16, r16
    1692:	29 f0       	breq	.+10     	; 0x169e <vfprintf+0x28e>
    1694:	b7 01       	movw	r22, r14
    1696:	80 2f       	mov	r24, r16
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    169e:	93 fc       	sbrc	r9, 3
    16a0:	09 c0       	rjmp	.+18     	; 0x16b4 <vfprintf+0x2a4>
    16a2:	55 20       	and	r5, r5
    16a4:	39 f0       	breq	.+14     	; 0x16b4 <vfprintf+0x2a4>
    16a6:	b7 01       	movw	r22, r14
    16a8:	80 e3       	ldi	r24, 0x30	; 48
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    16b0:	5a 94       	dec	r5
    16b2:	f7 cf       	rjmp	.-18     	; 0x16a2 <vfprintf+0x292>
    16b4:	97 fe       	sbrs	r9, 7
    16b6:	4c c0       	rjmp	.+152    	; 0x1750 <vfprintf+0x340>
    16b8:	46 01       	movw	r8, r12
    16ba:	d7 fe       	sbrs	r13, 7
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <vfprintf+0x2b2>
    16be:	81 2c       	mov	r8, r1
    16c0:	91 2c       	mov	r9, r1
    16c2:	c6 01       	movw	r24, r12
    16c4:	88 19       	sub	r24, r8
    16c6:	99 09       	sbc	r25, r9
    16c8:	f3 01       	movw	r30, r6
    16ca:	e8 0f       	add	r30, r24
    16cc:	f9 1f       	adc	r31, r25
    16ce:	fe 87       	std	Y+14, r31	; 0x0e
    16d0:	ed 87       	std	Y+13, r30	; 0x0d
    16d2:	96 01       	movw	r18, r12
    16d4:	24 19       	sub	r18, r4
    16d6:	31 09       	sbc	r19, r1
    16d8:	38 8b       	std	Y+16, r19	; 0x10
    16da:	2f 87       	std	Y+15, r18	; 0x0f
    16dc:	01 2f       	mov	r16, r17
    16de:	10 e0       	ldi	r17, 0x00	; 0
    16e0:	11 95       	neg	r17
    16e2:	01 95       	neg	r16
    16e4:	11 09       	sbc	r17, r1
    16e6:	3f ef       	ldi	r19, 0xFF	; 255
    16e8:	83 16       	cp	r8, r19
    16ea:	93 06       	cpc	r9, r19
    16ec:	29 f4       	brne	.+10     	; 0x16f8 <vfprintf+0x2e8>
    16ee:	b7 01       	movw	r22, r14
    16f0:	8e e2       	ldi	r24, 0x2E	; 46
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    16f8:	c8 14       	cp	r12, r8
    16fa:	d9 04       	cpc	r13, r9
    16fc:	4c f0       	brlt	.+18     	; 0x1710 <vfprintf+0x300>
    16fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1700:	98 89       	ldd	r25, Y+16	; 0x10
    1702:	88 15       	cp	r24, r8
    1704:	99 05       	cpc	r25, r9
    1706:	24 f4       	brge	.+8      	; 0x1710 <vfprintf+0x300>
    1708:	ed 85       	ldd	r30, Y+13	; 0x0d
    170a:	fe 85       	ldd	r31, Y+14	; 0x0e
    170c:	81 81       	ldd	r24, Z+1	; 0x01
    170e:	01 c0       	rjmp	.+2      	; 0x1712 <vfprintf+0x302>
    1710:	80 e3       	ldi	r24, 0x30	; 48
    1712:	f1 e0       	ldi	r31, 0x01	; 1
    1714:	8f 1a       	sub	r8, r31
    1716:	91 08       	sbc	r9, r1
    1718:	2d 85       	ldd	r18, Y+13	; 0x0d
    171a:	3e 85       	ldd	r19, Y+14	; 0x0e
    171c:	2f 5f       	subi	r18, 0xFF	; 255
    171e:	3f 4f       	sbci	r19, 0xFF	; 255
    1720:	3e 87       	std	Y+14, r19	; 0x0e
    1722:	2d 87       	std	Y+13, r18	; 0x0d
    1724:	80 16       	cp	r8, r16
    1726:	91 06       	cpc	r9, r17
    1728:	2c f0       	brlt	.+10     	; 0x1734 <vfprintf+0x324>
    172a:	b7 01       	movw	r22, r14
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1732:	d9 cf       	rjmp	.-78     	; 0x16e6 <vfprintf+0x2d6>
    1734:	c8 14       	cp	r12, r8
    1736:	d9 04       	cpc	r13, r9
    1738:	41 f4       	brne	.+16     	; 0x174a <vfprintf+0x33a>
    173a:	9a 81       	ldd	r25, Y+2	; 0x02
    173c:	96 33       	cpi	r25, 0x36	; 54
    173e:	20 f4       	brcc	.+8      	; 0x1748 <vfprintf+0x338>
    1740:	95 33       	cpi	r25, 0x35	; 53
    1742:	19 f4       	brne	.+6      	; 0x174a <vfprintf+0x33a>
    1744:	3c 85       	ldd	r19, Y+12	; 0x0c
    1746:	34 ff       	sbrs	r19, 4
    1748:	81 e3       	ldi	r24, 0x31	; 49
    174a:	b7 01       	movw	r22, r14
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	4e c0       	rjmp	.+156    	; 0x17ec <vfprintf+0x3dc>
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	81 33       	cpi	r24, 0x31	; 49
    1754:	19 f0       	breq	.+6      	; 0x175c <vfprintf+0x34c>
    1756:	9c 85       	ldd	r25, Y+12	; 0x0c
    1758:	9f 7e       	andi	r25, 0xEF	; 239
    175a:	9c 87       	std	Y+12, r25	; 0x0c
    175c:	b7 01       	movw	r22, r14
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1764:	11 11       	cpse	r17, r1
    1766:	05 c0       	rjmp	.+10     	; 0x1772 <vfprintf+0x362>
    1768:	94 fc       	sbrc	r9, 4
    176a:	18 c0       	rjmp	.+48     	; 0x179c <vfprintf+0x38c>
    176c:	85 e6       	ldi	r24, 0x65	; 101
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	17 c0       	rjmp	.+46     	; 0x17a0 <vfprintf+0x390>
    1772:	b7 01       	movw	r22, r14
    1774:	8e e2       	ldi	r24, 0x2E	; 46
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    177c:	1e 5f       	subi	r17, 0xFE	; 254
    177e:	82 e0       	ldi	r24, 0x02	; 2
    1780:	01 e0       	ldi	r16, 0x01	; 1
    1782:	08 0f       	add	r16, r24
    1784:	f3 01       	movw	r30, r6
    1786:	e8 0f       	add	r30, r24
    1788:	f1 1d       	adc	r31, r1
    178a:	80 81       	ld	r24, Z
    178c:	b7 01       	movw	r22, r14
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1794:	80 2f       	mov	r24, r16
    1796:	01 13       	cpse	r16, r17
    1798:	f3 cf       	rjmp	.-26     	; 0x1780 <vfprintf+0x370>
    179a:	e6 cf       	rjmp	.-52     	; 0x1768 <vfprintf+0x358>
    179c:	85 e4       	ldi	r24, 0x45	; 69
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	b7 01       	movw	r22, r14
    17a2:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    17a6:	d7 fc       	sbrc	r13, 7
    17a8:	06 c0       	rjmp	.+12     	; 0x17b6 <vfprintf+0x3a6>
    17aa:	c1 14       	cp	r12, r1
    17ac:	d1 04       	cpc	r13, r1
    17ae:	41 f4       	brne	.+16     	; 0x17c0 <vfprintf+0x3b0>
    17b0:	ec 85       	ldd	r30, Y+12	; 0x0c
    17b2:	e4 ff       	sbrs	r30, 4
    17b4:	05 c0       	rjmp	.+10     	; 0x17c0 <vfprintf+0x3b0>
    17b6:	d1 94       	neg	r13
    17b8:	c1 94       	neg	r12
    17ba:	d1 08       	sbc	r13, r1
    17bc:	8d e2       	ldi	r24, 0x2D	; 45
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <vfprintf+0x3b2>
    17c0:	8b e2       	ldi	r24, 0x2B	; 43
    17c2:	b7 01       	movw	r22, r14
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    17ca:	80 e3       	ldi	r24, 0x30	; 48
    17cc:	2a e0       	ldi	r18, 0x0A	; 10
    17ce:	c2 16       	cp	r12, r18
    17d0:	d1 04       	cpc	r13, r1
    17d2:	2c f0       	brlt	.+10     	; 0x17de <vfprintf+0x3ce>
    17d4:	8f 5f       	subi	r24, 0xFF	; 255
    17d6:	fa e0       	ldi	r31, 0x0A	; 10
    17d8:	cf 1a       	sub	r12, r31
    17da:	d1 08       	sbc	r13, r1
    17dc:	f7 cf       	rjmp	.-18     	; 0x17cc <vfprintf+0x3bc>
    17de:	b7 01       	movw	r22, r14
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    17e6:	b7 01       	movw	r22, r14
    17e8:	c6 01       	movw	r24, r12
    17ea:	c0 96       	adiw	r24, 0x30	; 48
    17ec:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    17f0:	54 c1       	rjmp	.+680    	; 0x1a9a <vfprintf+0x68a>
    17f2:	83 36       	cpi	r24, 0x63	; 99
    17f4:	31 f0       	breq	.+12     	; 0x1802 <vfprintf+0x3f2>
    17f6:	83 37       	cpi	r24, 0x73	; 115
    17f8:	79 f0       	breq	.+30     	; 0x1818 <vfprintf+0x408>
    17fa:	83 35       	cpi	r24, 0x53	; 83
    17fc:	09 f0       	breq	.+2      	; 0x1800 <vfprintf+0x3f0>
    17fe:	56 c0       	rjmp	.+172    	; 0x18ac <vfprintf+0x49c>
    1800:	20 c0       	rjmp	.+64     	; 0x1842 <vfprintf+0x432>
    1802:	56 01       	movw	r10, r12
    1804:	32 e0       	ldi	r19, 0x02	; 2
    1806:	a3 0e       	add	r10, r19
    1808:	b1 1c       	adc	r11, r1
    180a:	f6 01       	movw	r30, r12
    180c:	80 81       	ld	r24, Z
    180e:	89 83       	std	Y+1, r24	; 0x01
    1810:	01 e0       	ldi	r16, 0x01	; 1
    1812:	10 e0       	ldi	r17, 0x00	; 0
    1814:	63 01       	movw	r12, r6
    1816:	12 c0       	rjmp	.+36     	; 0x183c <vfprintf+0x42c>
    1818:	56 01       	movw	r10, r12
    181a:	f2 e0       	ldi	r31, 0x02	; 2
    181c:	af 0e       	add	r10, r31
    181e:	b1 1c       	adc	r11, r1
    1820:	f6 01       	movw	r30, r12
    1822:	c0 80       	ld	r12, Z
    1824:	d1 80       	ldd	r13, Z+1	; 0x01
    1826:	96 fe       	sbrs	r9, 6
    1828:	03 c0       	rjmp	.+6      	; 0x1830 <vfprintf+0x420>
    182a:	61 2f       	mov	r22, r17
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <vfprintf+0x424>
    1830:	6f ef       	ldi	r22, 0xFF	; 255
    1832:	7f ef       	ldi	r23, 0xFF	; 255
    1834:	c6 01       	movw	r24, r12
    1836:	0e 94 84 10 	call	0x2108	; 0x2108 <strnlen>
    183a:	8c 01       	movw	r16, r24
    183c:	f9 2d       	mov	r31, r9
    183e:	ff 77       	andi	r31, 0x7F	; 127
    1840:	14 c0       	rjmp	.+40     	; 0x186a <vfprintf+0x45a>
    1842:	56 01       	movw	r10, r12
    1844:	22 e0       	ldi	r18, 0x02	; 2
    1846:	a2 0e       	add	r10, r18
    1848:	b1 1c       	adc	r11, r1
    184a:	f6 01       	movw	r30, r12
    184c:	c0 80       	ld	r12, Z
    184e:	d1 80       	ldd	r13, Z+1	; 0x01
    1850:	96 fe       	sbrs	r9, 6
    1852:	03 c0       	rjmp	.+6      	; 0x185a <vfprintf+0x44a>
    1854:	61 2f       	mov	r22, r17
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	02 c0       	rjmp	.+4      	; 0x185e <vfprintf+0x44e>
    185a:	6f ef       	ldi	r22, 0xFF	; 255
    185c:	7f ef       	ldi	r23, 0xFF	; 255
    185e:	c6 01       	movw	r24, r12
    1860:	0e 94 59 10 	call	0x20b2	; 0x20b2 <strnlen_P>
    1864:	8c 01       	movw	r16, r24
    1866:	f9 2d       	mov	r31, r9
    1868:	f0 68       	ori	r31, 0x80	; 128
    186a:	9f 2e       	mov	r9, r31
    186c:	f3 fd       	sbrc	r31, 3
    186e:	1a c0       	rjmp	.+52     	; 0x18a4 <vfprintf+0x494>
    1870:	85 2d       	mov	r24, r5
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	08 17       	cp	r16, r24
    1876:	19 07       	cpc	r17, r25
    1878:	a8 f4       	brcc	.+42     	; 0x18a4 <vfprintf+0x494>
    187a:	b7 01       	movw	r22, r14
    187c:	80 e2       	ldi	r24, 0x20	; 32
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1884:	5a 94       	dec	r5
    1886:	f4 cf       	rjmp	.-24     	; 0x1870 <vfprintf+0x460>
    1888:	f6 01       	movw	r30, r12
    188a:	97 fc       	sbrc	r9, 7
    188c:	85 91       	lpm	r24, Z+
    188e:	97 fe       	sbrs	r9, 7
    1890:	81 91       	ld	r24, Z+
    1892:	6f 01       	movw	r12, r30
    1894:	b7 01       	movw	r22, r14
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    189c:	51 10       	cpse	r5, r1
    189e:	5a 94       	dec	r5
    18a0:	01 50       	subi	r16, 0x01	; 1
    18a2:	11 09       	sbc	r17, r1
    18a4:	01 15       	cp	r16, r1
    18a6:	11 05       	cpc	r17, r1
    18a8:	79 f7       	brne	.-34     	; 0x1888 <vfprintf+0x478>
    18aa:	f7 c0       	rjmp	.+494    	; 0x1a9a <vfprintf+0x68a>
    18ac:	84 36       	cpi	r24, 0x64	; 100
    18ae:	11 f0       	breq	.+4      	; 0x18b4 <vfprintf+0x4a4>
    18b0:	89 36       	cpi	r24, 0x69	; 105
    18b2:	61 f5       	brne	.+88     	; 0x190c <vfprintf+0x4fc>
    18b4:	56 01       	movw	r10, r12
    18b6:	97 fe       	sbrs	r9, 7
    18b8:	09 c0       	rjmp	.+18     	; 0x18cc <vfprintf+0x4bc>
    18ba:	24 e0       	ldi	r18, 0x04	; 4
    18bc:	a2 0e       	add	r10, r18
    18be:	b1 1c       	adc	r11, r1
    18c0:	f6 01       	movw	r30, r12
    18c2:	60 81       	ld	r22, Z
    18c4:	71 81       	ldd	r23, Z+1	; 0x01
    18c6:	82 81       	ldd	r24, Z+2	; 0x02
    18c8:	93 81       	ldd	r25, Z+3	; 0x03
    18ca:	0a c0       	rjmp	.+20     	; 0x18e0 <vfprintf+0x4d0>
    18cc:	f2 e0       	ldi	r31, 0x02	; 2
    18ce:	af 0e       	add	r10, r31
    18d0:	b1 1c       	adc	r11, r1
    18d2:	f6 01       	movw	r30, r12
    18d4:	60 81       	ld	r22, Z
    18d6:	71 81       	ldd	r23, Z+1	; 0x01
    18d8:	07 2e       	mov	r0, r23
    18da:	00 0c       	add	r0, r0
    18dc:	88 0b       	sbc	r24, r24
    18de:	99 0b       	sbc	r25, r25
    18e0:	f9 2d       	mov	r31, r9
    18e2:	ff 76       	andi	r31, 0x6F	; 111
    18e4:	9f 2e       	mov	r9, r31
    18e6:	97 ff       	sbrs	r25, 7
    18e8:	09 c0       	rjmp	.+18     	; 0x18fc <vfprintf+0x4ec>
    18ea:	90 95       	com	r25
    18ec:	80 95       	com	r24
    18ee:	70 95       	com	r23
    18f0:	61 95       	neg	r22
    18f2:	7f 4f       	sbci	r23, 0xFF	; 255
    18f4:	8f 4f       	sbci	r24, 0xFF	; 255
    18f6:	9f 4f       	sbci	r25, 0xFF	; 255
    18f8:	f0 68       	ori	r31, 0x80	; 128
    18fa:	9f 2e       	mov	r9, r31
    18fc:	2a e0       	ldi	r18, 0x0A	; 10
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	a3 01       	movw	r20, r6
    1902:	0e 94 33 11 	call	0x2266	; 0x2266 <__ultoa_invert>
    1906:	c8 2e       	mov	r12, r24
    1908:	c6 18       	sub	r12, r6
    190a:	3f c0       	rjmp	.+126    	; 0x198a <vfprintf+0x57a>
    190c:	09 2d       	mov	r16, r9
    190e:	85 37       	cpi	r24, 0x75	; 117
    1910:	21 f4       	brne	.+8      	; 0x191a <vfprintf+0x50a>
    1912:	0f 7e       	andi	r16, 0xEF	; 239
    1914:	2a e0       	ldi	r18, 0x0A	; 10
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	1d c0       	rjmp	.+58     	; 0x1954 <vfprintf+0x544>
    191a:	09 7f       	andi	r16, 0xF9	; 249
    191c:	8f 36       	cpi	r24, 0x6F	; 111
    191e:	91 f0       	breq	.+36     	; 0x1944 <vfprintf+0x534>
    1920:	18 f4       	brcc	.+6      	; 0x1928 <vfprintf+0x518>
    1922:	88 35       	cpi	r24, 0x58	; 88
    1924:	59 f0       	breq	.+22     	; 0x193c <vfprintf+0x52c>
    1926:	c3 c0       	rjmp	.+390    	; 0x1aae <vfprintf+0x69e>
    1928:	80 37       	cpi	r24, 0x70	; 112
    192a:	19 f0       	breq	.+6      	; 0x1932 <vfprintf+0x522>
    192c:	88 37       	cpi	r24, 0x78	; 120
    192e:	11 f0       	breq	.+4      	; 0x1934 <vfprintf+0x524>
    1930:	be c0       	rjmp	.+380    	; 0x1aae <vfprintf+0x69e>
    1932:	00 61       	ori	r16, 0x10	; 16
    1934:	04 ff       	sbrs	r16, 4
    1936:	09 c0       	rjmp	.+18     	; 0x194a <vfprintf+0x53a>
    1938:	04 60       	ori	r16, 0x04	; 4
    193a:	07 c0       	rjmp	.+14     	; 0x194a <vfprintf+0x53a>
    193c:	94 fe       	sbrs	r9, 4
    193e:	08 c0       	rjmp	.+16     	; 0x1950 <vfprintf+0x540>
    1940:	06 60       	ori	r16, 0x06	; 6
    1942:	06 c0       	rjmp	.+12     	; 0x1950 <vfprintf+0x540>
    1944:	28 e0       	ldi	r18, 0x08	; 8
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	05 c0       	rjmp	.+10     	; 0x1954 <vfprintf+0x544>
    194a:	20 e1       	ldi	r18, 0x10	; 16
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <vfprintf+0x544>
    1950:	20 e1       	ldi	r18, 0x10	; 16
    1952:	32 e0       	ldi	r19, 0x02	; 2
    1954:	56 01       	movw	r10, r12
    1956:	07 ff       	sbrs	r16, 7
    1958:	09 c0       	rjmp	.+18     	; 0x196c <vfprintf+0x55c>
    195a:	84 e0       	ldi	r24, 0x04	; 4
    195c:	a8 0e       	add	r10, r24
    195e:	b1 1c       	adc	r11, r1
    1960:	f6 01       	movw	r30, r12
    1962:	60 81       	ld	r22, Z
    1964:	71 81       	ldd	r23, Z+1	; 0x01
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	08 c0       	rjmp	.+16     	; 0x197c <vfprintf+0x56c>
    196c:	f2 e0       	ldi	r31, 0x02	; 2
    196e:	af 0e       	add	r10, r31
    1970:	b1 1c       	adc	r11, r1
    1972:	f6 01       	movw	r30, r12
    1974:	60 81       	ld	r22, Z
    1976:	71 81       	ldd	r23, Z+1	; 0x01
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	a3 01       	movw	r20, r6
    197e:	0e 94 33 11 	call	0x2266	; 0x2266 <__ultoa_invert>
    1982:	c8 2e       	mov	r12, r24
    1984:	c6 18       	sub	r12, r6
    1986:	0f 77       	andi	r16, 0x7F	; 127
    1988:	90 2e       	mov	r9, r16
    198a:	96 fe       	sbrs	r9, 6
    198c:	0b c0       	rjmp	.+22     	; 0x19a4 <vfprintf+0x594>
    198e:	09 2d       	mov	r16, r9
    1990:	0e 7f       	andi	r16, 0xFE	; 254
    1992:	c1 16       	cp	r12, r17
    1994:	50 f4       	brcc	.+20     	; 0x19aa <vfprintf+0x59a>
    1996:	94 fe       	sbrs	r9, 4
    1998:	0a c0       	rjmp	.+20     	; 0x19ae <vfprintf+0x59e>
    199a:	92 fc       	sbrc	r9, 2
    199c:	08 c0       	rjmp	.+16     	; 0x19ae <vfprintf+0x59e>
    199e:	09 2d       	mov	r16, r9
    19a0:	0e 7e       	andi	r16, 0xEE	; 238
    19a2:	05 c0       	rjmp	.+10     	; 0x19ae <vfprintf+0x59e>
    19a4:	dc 2c       	mov	r13, r12
    19a6:	09 2d       	mov	r16, r9
    19a8:	03 c0       	rjmp	.+6      	; 0x19b0 <vfprintf+0x5a0>
    19aa:	dc 2c       	mov	r13, r12
    19ac:	01 c0       	rjmp	.+2      	; 0x19b0 <vfprintf+0x5a0>
    19ae:	d1 2e       	mov	r13, r17
    19b0:	04 ff       	sbrs	r16, 4
    19b2:	0d c0       	rjmp	.+26     	; 0x19ce <vfprintf+0x5be>
    19b4:	fe 01       	movw	r30, r28
    19b6:	ec 0d       	add	r30, r12
    19b8:	f1 1d       	adc	r31, r1
    19ba:	80 81       	ld	r24, Z
    19bc:	80 33       	cpi	r24, 0x30	; 48
    19be:	11 f4       	brne	.+4      	; 0x19c4 <vfprintf+0x5b4>
    19c0:	09 7e       	andi	r16, 0xE9	; 233
    19c2:	09 c0       	rjmp	.+18     	; 0x19d6 <vfprintf+0x5c6>
    19c4:	02 ff       	sbrs	r16, 2
    19c6:	06 c0       	rjmp	.+12     	; 0x19d4 <vfprintf+0x5c4>
    19c8:	d3 94       	inc	r13
    19ca:	d3 94       	inc	r13
    19cc:	04 c0       	rjmp	.+8      	; 0x19d6 <vfprintf+0x5c6>
    19ce:	80 2f       	mov	r24, r16
    19d0:	86 78       	andi	r24, 0x86	; 134
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <vfprintf+0x5c6>
    19d4:	d3 94       	inc	r13
    19d6:	03 fd       	sbrc	r16, 3
    19d8:	11 c0       	rjmp	.+34     	; 0x19fc <vfprintf+0x5ec>
    19da:	00 ff       	sbrs	r16, 0
    19dc:	06 c0       	rjmp	.+12     	; 0x19ea <vfprintf+0x5da>
    19de:	1c 2d       	mov	r17, r12
    19e0:	d5 14       	cp	r13, r5
    19e2:	80 f4       	brcc	.+32     	; 0x1a04 <vfprintf+0x5f4>
    19e4:	15 0d       	add	r17, r5
    19e6:	1d 19       	sub	r17, r13
    19e8:	0d c0       	rjmp	.+26     	; 0x1a04 <vfprintf+0x5f4>
    19ea:	d5 14       	cp	r13, r5
    19ec:	58 f4       	brcc	.+22     	; 0x1a04 <vfprintf+0x5f4>
    19ee:	b7 01       	movw	r22, r14
    19f0:	80 e2       	ldi	r24, 0x20	; 32
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    19f8:	d3 94       	inc	r13
    19fa:	f7 cf       	rjmp	.-18     	; 0x19ea <vfprintf+0x5da>
    19fc:	d5 14       	cp	r13, r5
    19fe:	10 f4       	brcc	.+4      	; 0x1a04 <vfprintf+0x5f4>
    1a00:	5d 18       	sub	r5, r13
    1a02:	01 c0       	rjmp	.+2      	; 0x1a06 <vfprintf+0x5f6>
    1a04:	51 2c       	mov	r5, r1
    1a06:	04 ff       	sbrs	r16, 4
    1a08:	10 c0       	rjmp	.+32     	; 0x1a2a <vfprintf+0x61a>
    1a0a:	b7 01       	movw	r22, r14
    1a0c:	80 e3       	ldi	r24, 0x30	; 48
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1a14:	02 ff       	sbrs	r16, 2
    1a16:	17 c0       	rjmp	.+46     	; 0x1a46 <vfprintf+0x636>
    1a18:	01 fd       	sbrc	r16, 1
    1a1a:	03 c0       	rjmp	.+6      	; 0x1a22 <vfprintf+0x612>
    1a1c:	88 e7       	ldi	r24, 0x78	; 120
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <vfprintf+0x616>
    1a22:	88 e5       	ldi	r24, 0x58	; 88
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	b7 01       	movw	r22, r14
    1a28:	0c c0       	rjmp	.+24     	; 0x1a42 <vfprintf+0x632>
    1a2a:	80 2f       	mov	r24, r16
    1a2c:	86 78       	andi	r24, 0x86	; 134
    1a2e:	59 f0       	breq	.+22     	; 0x1a46 <vfprintf+0x636>
    1a30:	01 ff       	sbrs	r16, 1
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <vfprintf+0x628>
    1a34:	8b e2       	ldi	r24, 0x2B	; 43
    1a36:	01 c0       	rjmp	.+2      	; 0x1a3a <vfprintf+0x62a>
    1a38:	80 e2       	ldi	r24, 0x20	; 32
    1a3a:	07 fd       	sbrc	r16, 7
    1a3c:	8d e2       	ldi	r24, 0x2D	; 45
    1a3e:	b7 01       	movw	r22, r14
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1a46:	c1 16       	cp	r12, r17
    1a48:	38 f4       	brcc	.+14     	; 0x1a58 <vfprintf+0x648>
    1a4a:	b7 01       	movw	r22, r14
    1a4c:	80 e3       	ldi	r24, 0x30	; 48
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1a54:	11 50       	subi	r17, 0x01	; 1
    1a56:	f7 cf       	rjmp	.-18     	; 0x1a46 <vfprintf+0x636>
    1a58:	ca 94       	dec	r12
    1a5a:	f3 01       	movw	r30, r6
    1a5c:	ec 0d       	add	r30, r12
    1a5e:	f1 1d       	adc	r31, r1
    1a60:	80 81       	ld	r24, Z
    1a62:	b7 01       	movw	r22, r14
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1a6a:	c1 10       	cpse	r12, r1
    1a6c:	f5 cf       	rjmp	.-22     	; 0x1a58 <vfprintf+0x648>
    1a6e:	15 c0       	rjmp	.+42     	; 0x1a9a <vfprintf+0x68a>
    1a70:	f4 e0       	ldi	r31, 0x04	; 4
    1a72:	f5 15       	cp	r31, r5
    1a74:	60 f5       	brcc	.+88     	; 0x1ace <vfprintf+0x6be>
    1a76:	84 e0       	ldi	r24, 0x04	; 4
    1a78:	58 1a       	sub	r5, r24
    1a7a:	93 fe       	sbrs	r9, 3
    1a7c:	1f c0       	rjmp	.+62     	; 0x1abc <vfprintf+0x6ac>
    1a7e:	01 11       	cpse	r16, r1
    1a80:	27 c0       	rjmp	.+78     	; 0x1ad0 <vfprintf+0x6c0>
    1a82:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a84:	23 ff       	sbrs	r18, 3
    1a86:	2a c0       	rjmp	.+84     	; 0x1adc <vfprintf+0x6cc>
    1a88:	0c ec       	ldi	r16, 0xCC	; 204
    1a8a:	10 e0       	ldi	r17, 0x00	; 0
    1a8c:	39 2d       	mov	r19, r9
    1a8e:	30 71       	andi	r19, 0x10	; 16
    1a90:	93 2e       	mov	r9, r19
    1a92:	f8 01       	movw	r30, r16
    1a94:	84 91       	lpm	r24, Z
    1a96:	81 11       	cpse	r24, r1
    1a98:	24 c0       	rjmp	.+72     	; 0x1ae2 <vfprintf+0x6d2>
    1a9a:	55 20       	and	r5, r5
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <vfprintf+0x690>
    1a9e:	e4 cc       	rjmp	.-1592   	; 0x1468 <vfprintf+0x58>
    1aa0:	b7 01       	movw	r22, r14
    1aa2:	80 e2       	ldi	r24, 0x20	; 32
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1aaa:	5a 94       	dec	r5
    1aac:	f6 cf       	rjmp	.-20     	; 0x1a9a <vfprintf+0x68a>
    1aae:	f7 01       	movw	r30, r14
    1ab0:	86 81       	ldd	r24, Z+6	; 0x06
    1ab2:	97 81       	ldd	r25, Z+7	; 0x07
    1ab4:	26 c0       	rjmp	.+76     	; 0x1b02 <vfprintf+0x6f2>
    1ab6:	8f ef       	ldi	r24, 0xFF	; 255
    1ab8:	9f ef       	ldi	r25, 0xFF	; 255
    1aba:	23 c0       	rjmp	.+70     	; 0x1b02 <vfprintf+0x6f2>
    1abc:	b7 01       	movw	r22, r14
    1abe:	80 e2       	ldi	r24, 0x20	; 32
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1ac6:	5a 94       	dec	r5
    1ac8:	51 10       	cpse	r5, r1
    1aca:	f8 cf       	rjmp	.-16     	; 0x1abc <vfprintf+0x6ac>
    1acc:	d8 cf       	rjmp	.-80     	; 0x1a7e <vfprintf+0x66e>
    1ace:	51 2c       	mov	r5, r1
    1ad0:	b7 01       	movw	r22, r14
    1ad2:	80 2f       	mov	r24, r16
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1ada:	d3 cf       	rjmp	.-90     	; 0x1a82 <vfprintf+0x672>
    1adc:	00 ed       	ldi	r16, 0xD0	; 208
    1ade:	10 e0       	ldi	r17, 0x00	; 0
    1ae0:	d5 cf       	rjmp	.-86     	; 0x1a8c <vfprintf+0x67c>
    1ae2:	91 10       	cpse	r9, r1
    1ae4:	80 52       	subi	r24, 0x20	; 32
    1ae6:	b7 01       	movw	r22, r14
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0e 94 8f 10 	call	0x211e	; 0x211e <fputc>
    1aee:	0f 5f       	subi	r16, 0xFF	; 255
    1af0:	1f 4f       	sbci	r17, 0xFF	; 255
    1af2:	cf cf       	rjmp	.-98     	; 0x1a92 <vfprintf+0x682>
    1af4:	23 e0       	ldi	r18, 0x03	; 3
    1af6:	25 15       	cp	r18, r5
    1af8:	10 f4       	brcc	.+4      	; 0x1afe <vfprintf+0x6ee>
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	bd cf       	rjmp	.-134    	; 0x1a78 <vfprintf+0x668>
    1afe:	51 2c       	mov	r5, r1
    1b00:	c0 cf       	rjmp	.-128    	; 0x1a82 <vfprintf+0x672>
    1b02:	60 96       	adiw	r28, 0x10	; 16
    1b04:	e2 e1       	ldi	r30, 0x12	; 18
    1b06:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__epilogue_restores__>

00001b0a <__udivmodsi4>:
    1b0a:	a1 e2       	ldi	r26, 0x21	; 33
    1b0c:	1a 2e       	mov	r1, r26
    1b0e:	aa 1b       	sub	r26, r26
    1b10:	bb 1b       	sub	r27, r27
    1b12:	fd 01       	movw	r30, r26
    1b14:	0d c0       	rjmp	.+26     	; 0x1b30 <__udivmodsi4_ep>

00001b16 <__udivmodsi4_loop>:
    1b16:	aa 1f       	adc	r26, r26
    1b18:	bb 1f       	adc	r27, r27
    1b1a:	ee 1f       	adc	r30, r30
    1b1c:	ff 1f       	adc	r31, r31
    1b1e:	a2 17       	cp	r26, r18
    1b20:	b3 07       	cpc	r27, r19
    1b22:	e4 07       	cpc	r30, r20
    1b24:	f5 07       	cpc	r31, r21
    1b26:	20 f0       	brcs	.+8      	; 0x1b30 <__udivmodsi4_ep>
    1b28:	a2 1b       	sub	r26, r18
    1b2a:	b3 0b       	sbc	r27, r19
    1b2c:	e4 0b       	sbc	r30, r20
    1b2e:	f5 0b       	sbc	r31, r21

00001b30 <__udivmodsi4_ep>:
    1b30:	66 1f       	adc	r22, r22
    1b32:	77 1f       	adc	r23, r23
    1b34:	88 1f       	adc	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	1a 94       	dec	r1
    1b3a:	69 f7       	brne	.-38     	; 0x1b16 <__udivmodsi4_loop>
    1b3c:	60 95       	com	r22
    1b3e:	70 95       	com	r23
    1b40:	80 95       	com	r24
    1b42:	90 95       	com	r25
    1b44:	9b 01       	movw	r18, r22
    1b46:	ac 01       	movw	r20, r24
    1b48:	bd 01       	movw	r22, r26
    1b4a:	cf 01       	movw	r24, r30
    1b4c:	08 95       	ret

00001b4e <__prologue_saves__>:
    1b4e:	2f 92       	push	r2
    1b50:	3f 92       	push	r3
    1b52:	4f 92       	push	r4
    1b54:	5f 92       	push	r5
    1b56:	6f 92       	push	r6
    1b58:	7f 92       	push	r7
    1b5a:	8f 92       	push	r8
    1b5c:	9f 92       	push	r9
    1b5e:	af 92       	push	r10
    1b60:	bf 92       	push	r11
    1b62:	cf 92       	push	r12
    1b64:	df 92       	push	r13
    1b66:	ef 92       	push	r14
    1b68:	ff 92       	push	r15
    1b6a:	0f 93       	push	r16
    1b6c:	1f 93       	push	r17
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	ca 1b       	sub	r28, r26
    1b78:	db 0b       	sbc	r29, r27
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	de bf       	out	0x3e, r29	; 62
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	09 94       	ijmp

00001b86 <__epilogue_restores__>:
    1b86:	2a 88       	ldd	r2, Y+18	; 0x12
    1b88:	39 88       	ldd	r3, Y+17	; 0x11
    1b8a:	48 88       	ldd	r4, Y+16	; 0x10
    1b8c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b8e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b90:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b92:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b94:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b96:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b98:	b9 84       	ldd	r11, Y+9	; 0x09
    1b9a:	c8 84       	ldd	r12, Y+8	; 0x08
    1b9c:	df 80       	ldd	r13, Y+7	; 0x07
    1b9e:	ee 80       	ldd	r14, Y+6	; 0x06
    1ba0:	fd 80       	ldd	r15, Y+5	; 0x05
    1ba2:	0c 81       	ldd	r16, Y+4	; 0x04
    1ba4:	1b 81       	ldd	r17, Y+3	; 0x03
    1ba6:	aa 81       	ldd	r26, Y+2	; 0x02
    1ba8:	b9 81       	ldd	r27, Y+1	; 0x01
    1baa:	ce 0f       	add	r28, r30
    1bac:	d1 1d       	adc	r29, r1
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	ed 01       	movw	r28, r26
    1bba:	08 95       	ret

00001bbc <__divsf3>:
    1bbc:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__divsf3x>
    1bc0:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__fp_round>
    1bc4:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__fp_pscB>
    1bc8:	58 f0       	brcs	.+22     	; 0x1be0 <__divsf3+0x24>
    1bca:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fp_pscA>
    1bce:	40 f0       	brcs	.+16     	; 0x1be0 <__divsf3+0x24>
    1bd0:	29 f4       	brne	.+10     	; 0x1bdc <__divsf3+0x20>
    1bd2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bd4:	29 f0       	breq	.+10     	; 0x1be0 <__divsf3+0x24>
    1bd6:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <__fp_inf>
    1bda:	51 11       	cpse	r21, r1
    1bdc:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__fp_szero>
    1be0:	0c 94 c9 0e 	jmp	0x1d92	; 0x1d92 <__fp_nan>

00001be4 <__divsf3x>:
    1be4:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__fp_split3>
    1be8:	68 f3       	brcs	.-38     	; 0x1bc4 <__divsf3+0x8>

00001bea <__divsf3_pse>:
    1bea:	99 23       	and	r25, r25
    1bec:	b1 f3       	breq	.-20     	; 0x1bda <__divsf3+0x1e>
    1bee:	55 23       	and	r21, r21
    1bf0:	91 f3       	breq	.-28     	; 0x1bd6 <__divsf3+0x1a>
    1bf2:	95 1b       	sub	r25, r21
    1bf4:	55 0b       	sbc	r21, r21
    1bf6:	bb 27       	eor	r27, r27
    1bf8:	aa 27       	eor	r26, r26
    1bfa:	62 17       	cp	r22, r18
    1bfc:	73 07       	cpc	r23, r19
    1bfe:	84 07       	cpc	r24, r20
    1c00:	38 f0       	brcs	.+14     	; 0x1c10 <__divsf3_pse+0x26>
    1c02:	9f 5f       	subi	r25, 0xFF	; 255
    1c04:	5f 4f       	sbci	r21, 0xFF	; 255
    1c06:	22 0f       	add	r18, r18
    1c08:	33 1f       	adc	r19, r19
    1c0a:	44 1f       	adc	r20, r20
    1c0c:	aa 1f       	adc	r26, r26
    1c0e:	a9 f3       	breq	.-22     	; 0x1bfa <__divsf3_pse+0x10>
    1c10:	35 d0       	rcall	.+106    	; 0x1c7c <__divsf3_pse+0x92>
    1c12:	0e 2e       	mov	r0, r30
    1c14:	3a f0       	brmi	.+14     	; 0x1c24 <__divsf3_pse+0x3a>
    1c16:	e0 e8       	ldi	r30, 0x80	; 128
    1c18:	32 d0       	rcall	.+100    	; 0x1c7e <__divsf3_pse+0x94>
    1c1a:	91 50       	subi	r25, 0x01	; 1
    1c1c:	50 40       	sbci	r21, 0x00	; 0
    1c1e:	e6 95       	lsr	r30
    1c20:	00 1c       	adc	r0, r0
    1c22:	ca f7       	brpl	.-14     	; 0x1c16 <__divsf3_pse+0x2c>
    1c24:	2b d0       	rcall	.+86     	; 0x1c7c <__divsf3_pse+0x92>
    1c26:	fe 2f       	mov	r31, r30
    1c28:	29 d0       	rcall	.+82     	; 0x1c7c <__divsf3_pse+0x92>
    1c2a:	66 0f       	add	r22, r22
    1c2c:	77 1f       	adc	r23, r23
    1c2e:	88 1f       	adc	r24, r24
    1c30:	bb 1f       	adc	r27, r27
    1c32:	26 17       	cp	r18, r22
    1c34:	37 07       	cpc	r19, r23
    1c36:	48 07       	cpc	r20, r24
    1c38:	ab 07       	cpc	r26, r27
    1c3a:	b0 e8       	ldi	r27, 0x80	; 128
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <__divsf3_pse+0x56>
    1c3e:	bb 0b       	sbc	r27, r27
    1c40:	80 2d       	mov	r24, r0
    1c42:	bf 01       	movw	r22, r30
    1c44:	ff 27       	eor	r31, r31
    1c46:	93 58       	subi	r25, 0x83	; 131
    1c48:	5f 4f       	sbci	r21, 0xFF	; 255
    1c4a:	3a f0       	brmi	.+14     	; 0x1c5a <__divsf3_pse+0x70>
    1c4c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c4e:	51 05       	cpc	r21, r1
    1c50:	78 f0       	brcs	.+30     	; 0x1c70 <__divsf3_pse+0x86>
    1c52:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <__fp_inf>
    1c56:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__fp_szero>
    1c5a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c5c:	e4 f3       	brlt	.-8      	; 0x1c56 <__divsf3_pse+0x6c>
    1c5e:	98 3e       	cpi	r25, 0xE8	; 232
    1c60:	d4 f3       	brlt	.-12     	; 0x1c56 <__divsf3_pse+0x6c>
    1c62:	86 95       	lsr	r24
    1c64:	77 95       	ror	r23
    1c66:	67 95       	ror	r22
    1c68:	b7 95       	ror	r27
    1c6a:	f7 95       	ror	r31
    1c6c:	9f 5f       	subi	r25, 0xFF	; 255
    1c6e:	c9 f7       	brne	.-14     	; 0x1c62 <__divsf3_pse+0x78>
    1c70:	88 0f       	add	r24, r24
    1c72:	91 1d       	adc	r25, r1
    1c74:	96 95       	lsr	r25
    1c76:	87 95       	ror	r24
    1c78:	97 f9       	bld	r25, 7
    1c7a:	08 95       	ret
    1c7c:	e1 e0       	ldi	r30, 0x01	; 1
    1c7e:	66 0f       	add	r22, r22
    1c80:	77 1f       	adc	r23, r23
    1c82:	88 1f       	adc	r24, r24
    1c84:	bb 1f       	adc	r27, r27
    1c86:	62 17       	cp	r22, r18
    1c88:	73 07       	cpc	r23, r19
    1c8a:	84 07       	cpc	r24, r20
    1c8c:	ba 07       	cpc	r27, r26
    1c8e:	20 f0       	brcs	.+8      	; 0x1c98 <__divsf3_pse+0xae>
    1c90:	62 1b       	sub	r22, r18
    1c92:	73 0b       	sbc	r23, r19
    1c94:	84 0b       	sbc	r24, r20
    1c96:	ba 0b       	sbc	r27, r26
    1c98:	ee 1f       	adc	r30, r30
    1c9a:	88 f7       	brcc	.-30     	; 0x1c7e <__divsf3_pse+0x94>
    1c9c:	e0 95       	com	r30
    1c9e:	08 95       	ret

00001ca0 <__fixsfsi>:
    1ca0:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__fixunssfsi>
    1ca4:	68 94       	set
    1ca6:	b1 11       	cpse	r27, r1
    1ca8:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__fp_szero>
    1cac:	08 95       	ret

00001cae <__fixunssfsi>:
    1cae:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__fp_splitA>
    1cb2:	88 f0       	brcs	.+34     	; 0x1cd6 <__fixunssfsi+0x28>
    1cb4:	9f 57       	subi	r25, 0x7F	; 127
    1cb6:	98 f0       	brcs	.+38     	; 0x1cde <__fixunssfsi+0x30>
    1cb8:	b9 2f       	mov	r27, r25
    1cba:	99 27       	eor	r25, r25
    1cbc:	b7 51       	subi	r27, 0x17	; 23
    1cbe:	b0 f0       	brcs	.+44     	; 0x1cec <__fixunssfsi+0x3e>
    1cc0:	e1 f0       	breq	.+56     	; 0x1cfa <__fixunssfsi+0x4c>
    1cc2:	66 0f       	add	r22, r22
    1cc4:	77 1f       	adc	r23, r23
    1cc6:	88 1f       	adc	r24, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	1a f0       	brmi	.+6      	; 0x1cd2 <__fixunssfsi+0x24>
    1ccc:	ba 95       	dec	r27
    1cce:	c9 f7       	brne	.-14     	; 0x1cc2 <__fixunssfsi+0x14>
    1cd0:	14 c0       	rjmp	.+40     	; 0x1cfa <__fixunssfsi+0x4c>
    1cd2:	b1 30       	cpi	r27, 0x01	; 1
    1cd4:	91 f0       	breq	.+36     	; 0x1cfa <__fixunssfsi+0x4c>
    1cd6:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fp_zero>
    1cda:	b1 e0       	ldi	r27, 0x01	; 1
    1cdc:	08 95       	ret
    1cde:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <__fp_zero>
    1ce2:	67 2f       	mov	r22, r23
    1ce4:	78 2f       	mov	r23, r24
    1ce6:	88 27       	eor	r24, r24
    1ce8:	b8 5f       	subi	r27, 0xF8	; 248
    1cea:	39 f0       	breq	.+14     	; 0x1cfa <__fixunssfsi+0x4c>
    1cec:	b9 3f       	cpi	r27, 0xF9	; 249
    1cee:	cc f3       	brlt	.-14     	; 0x1ce2 <__fixunssfsi+0x34>
    1cf0:	86 95       	lsr	r24
    1cf2:	77 95       	ror	r23
    1cf4:	67 95       	ror	r22
    1cf6:	b3 95       	inc	r27
    1cf8:	d9 f7       	brne	.-10     	; 0x1cf0 <__fixunssfsi+0x42>
    1cfa:	3e f4       	brtc	.+14     	; 0x1d0a <__fixunssfsi+0x5c>
    1cfc:	90 95       	com	r25
    1cfe:	80 95       	com	r24
    1d00:	70 95       	com	r23
    1d02:	61 95       	neg	r22
    1d04:	7f 4f       	sbci	r23, 0xFF	; 255
    1d06:	8f 4f       	sbci	r24, 0xFF	; 255
    1d08:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0a:	08 95       	ret

00001d0c <__floatunsisf>:
    1d0c:	e8 94       	clt
    1d0e:	09 c0       	rjmp	.+18     	; 0x1d22 <__floatsisf+0x12>

00001d10 <__floatsisf>:
    1d10:	97 fb       	bst	r25, 7
    1d12:	3e f4       	brtc	.+14     	; 0x1d22 <__floatsisf+0x12>
    1d14:	90 95       	com	r25
    1d16:	80 95       	com	r24
    1d18:	70 95       	com	r23
    1d1a:	61 95       	neg	r22
    1d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d20:	9f 4f       	sbci	r25, 0xFF	; 255
    1d22:	99 23       	and	r25, r25
    1d24:	a9 f0       	breq	.+42     	; 0x1d50 <__floatsisf+0x40>
    1d26:	f9 2f       	mov	r31, r25
    1d28:	96 e9       	ldi	r25, 0x96	; 150
    1d2a:	bb 27       	eor	r27, r27
    1d2c:	93 95       	inc	r25
    1d2e:	f6 95       	lsr	r31
    1d30:	87 95       	ror	r24
    1d32:	77 95       	ror	r23
    1d34:	67 95       	ror	r22
    1d36:	b7 95       	ror	r27
    1d38:	f1 11       	cpse	r31, r1
    1d3a:	f8 cf       	rjmp	.-16     	; 0x1d2c <__floatsisf+0x1c>
    1d3c:	fa f4       	brpl	.+62     	; 0x1d7c <__floatsisf+0x6c>
    1d3e:	bb 0f       	add	r27, r27
    1d40:	11 f4       	brne	.+4      	; 0x1d46 <__floatsisf+0x36>
    1d42:	60 ff       	sbrs	r22, 0
    1d44:	1b c0       	rjmp	.+54     	; 0x1d7c <__floatsisf+0x6c>
    1d46:	6f 5f       	subi	r22, 0xFF	; 255
    1d48:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4e:	16 c0       	rjmp	.+44     	; 0x1d7c <__floatsisf+0x6c>
    1d50:	88 23       	and	r24, r24
    1d52:	11 f0       	breq	.+4      	; 0x1d58 <__floatsisf+0x48>
    1d54:	96 e9       	ldi	r25, 0x96	; 150
    1d56:	11 c0       	rjmp	.+34     	; 0x1d7a <__floatsisf+0x6a>
    1d58:	77 23       	and	r23, r23
    1d5a:	21 f0       	breq	.+8      	; 0x1d64 <__floatsisf+0x54>
    1d5c:	9e e8       	ldi	r25, 0x8E	; 142
    1d5e:	87 2f       	mov	r24, r23
    1d60:	76 2f       	mov	r23, r22
    1d62:	05 c0       	rjmp	.+10     	; 0x1d6e <__floatsisf+0x5e>
    1d64:	66 23       	and	r22, r22
    1d66:	71 f0       	breq	.+28     	; 0x1d84 <__floatsisf+0x74>
    1d68:	96 e8       	ldi	r25, 0x86	; 134
    1d6a:	86 2f       	mov	r24, r22
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
    1d70:	2a f0       	brmi	.+10     	; 0x1d7c <__floatsisf+0x6c>
    1d72:	9a 95       	dec	r25
    1d74:	66 0f       	add	r22, r22
    1d76:	77 1f       	adc	r23, r23
    1d78:	88 1f       	adc	r24, r24
    1d7a:	da f7       	brpl	.-10     	; 0x1d72 <__floatsisf+0x62>
    1d7c:	88 0f       	add	r24, r24
    1d7e:	96 95       	lsr	r25
    1d80:	87 95       	ror	r24
    1d82:	97 f9       	bld	r25, 7
    1d84:	08 95       	ret

00001d86 <__fp_inf>:
    1d86:	97 f9       	bld	r25, 7
    1d88:	9f 67       	ori	r25, 0x7F	; 127
    1d8a:	80 e8       	ldi	r24, 0x80	; 128
    1d8c:	70 e0       	ldi	r23, 0x00	; 0
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	08 95       	ret

00001d92 <__fp_nan>:
    1d92:	9f ef       	ldi	r25, 0xFF	; 255
    1d94:	80 ec       	ldi	r24, 0xC0	; 192
    1d96:	08 95       	ret

00001d98 <__fp_pscA>:
    1d98:	00 24       	eor	r0, r0
    1d9a:	0a 94       	dec	r0
    1d9c:	16 16       	cp	r1, r22
    1d9e:	17 06       	cpc	r1, r23
    1da0:	18 06       	cpc	r1, r24
    1da2:	09 06       	cpc	r0, r25
    1da4:	08 95       	ret

00001da6 <__fp_pscB>:
    1da6:	00 24       	eor	r0, r0
    1da8:	0a 94       	dec	r0
    1daa:	12 16       	cp	r1, r18
    1dac:	13 06       	cpc	r1, r19
    1dae:	14 06       	cpc	r1, r20
    1db0:	05 06       	cpc	r0, r21
    1db2:	08 95       	ret

00001db4 <__fp_round>:
    1db4:	09 2e       	mov	r0, r25
    1db6:	03 94       	inc	r0
    1db8:	00 0c       	add	r0, r0
    1dba:	11 f4       	brne	.+4      	; 0x1dc0 <__fp_round+0xc>
    1dbc:	88 23       	and	r24, r24
    1dbe:	52 f0       	brmi	.+20     	; 0x1dd4 <__fp_round+0x20>
    1dc0:	bb 0f       	add	r27, r27
    1dc2:	40 f4       	brcc	.+16     	; 0x1dd4 <__fp_round+0x20>
    1dc4:	bf 2b       	or	r27, r31
    1dc6:	11 f4       	brne	.+4      	; 0x1dcc <__fp_round+0x18>
    1dc8:	60 ff       	sbrs	r22, 0
    1dca:	04 c0       	rjmp	.+8      	; 0x1dd4 <__fp_round+0x20>
    1dcc:	6f 5f       	subi	r22, 0xFF	; 255
    1dce:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd4:	08 95       	ret

00001dd6 <__fp_split3>:
    1dd6:	57 fd       	sbrc	r21, 7
    1dd8:	90 58       	subi	r25, 0x80	; 128
    1dda:	44 0f       	add	r20, r20
    1ddc:	55 1f       	adc	r21, r21
    1dde:	59 f0       	breq	.+22     	; 0x1df6 <__fp_splitA+0x10>
    1de0:	5f 3f       	cpi	r21, 0xFF	; 255
    1de2:	71 f0       	breq	.+28     	; 0x1e00 <__fp_splitA+0x1a>
    1de4:	47 95       	ror	r20

00001de6 <__fp_splitA>:
    1de6:	88 0f       	add	r24, r24
    1de8:	97 fb       	bst	r25, 7
    1dea:	99 1f       	adc	r25, r25
    1dec:	61 f0       	breq	.+24     	; 0x1e06 <__fp_splitA+0x20>
    1dee:	9f 3f       	cpi	r25, 0xFF	; 255
    1df0:	79 f0       	breq	.+30     	; 0x1e10 <__fp_splitA+0x2a>
    1df2:	87 95       	ror	r24
    1df4:	08 95       	ret
    1df6:	12 16       	cp	r1, r18
    1df8:	13 06       	cpc	r1, r19
    1dfa:	14 06       	cpc	r1, r20
    1dfc:	55 1f       	adc	r21, r21
    1dfe:	f2 cf       	rjmp	.-28     	; 0x1de4 <__fp_split3+0xe>
    1e00:	46 95       	lsr	r20
    1e02:	f1 df       	rcall	.-30     	; 0x1de6 <__fp_splitA>
    1e04:	08 c0       	rjmp	.+16     	; 0x1e16 <__fp_splitA+0x30>
    1e06:	16 16       	cp	r1, r22
    1e08:	17 06       	cpc	r1, r23
    1e0a:	18 06       	cpc	r1, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	f1 cf       	rjmp	.-30     	; 0x1df2 <__fp_splitA+0xc>
    1e10:	86 95       	lsr	r24
    1e12:	71 05       	cpc	r23, r1
    1e14:	61 05       	cpc	r22, r1
    1e16:	08 94       	sec
    1e18:	08 95       	ret

00001e1a <__fp_zero>:
    1e1a:	e8 94       	clt

00001e1c <__fp_szero>:
    1e1c:	bb 27       	eor	r27, r27
    1e1e:	66 27       	eor	r22, r22
    1e20:	77 27       	eor	r23, r23
    1e22:	cb 01       	movw	r24, r22
    1e24:	97 f9       	bld	r25, 7
    1e26:	08 95       	ret

00001e28 <__mulsf3>:
    1e28:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__mulsf3x>
    1e2c:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__fp_round>
    1e30:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fp_pscA>
    1e34:	38 f0       	brcs	.+14     	; 0x1e44 <__mulsf3+0x1c>
    1e36:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__fp_pscB>
    1e3a:	20 f0       	brcs	.+8      	; 0x1e44 <__mulsf3+0x1c>
    1e3c:	95 23       	and	r25, r21
    1e3e:	11 f0       	breq	.+4      	; 0x1e44 <__mulsf3+0x1c>
    1e40:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <__fp_inf>
    1e44:	0c 94 c9 0e 	jmp	0x1d92	; 0x1d92 <__fp_nan>
    1e48:	11 24       	eor	r1, r1
    1e4a:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__fp_szero>

00001e4e <__mulsf3x>:
    1e4e:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__fp_split3>
    1e52:	70 f3       	brcs	.-36     	; 0x1e30 <__mulsf3+0x8>

00001e54 <__mulsf3_pse>:
    1e54:	95 9f       	mul	r25, r21
    1e56:	c1 f3       	breq	.-16     	; 0x1e48 <__mulsf3+0x20>
    1e58:	95 0f       	add	r25, r21
    1e5a:	50 e0       	ldi	r21, 0x00	; 0
    1e5c:	55 1f       	adc	r21, r21
    1e5e:	62 9f       	mul	r22, r18
    1e60:	f0 01       	movw	r30, r0
    1e62:	72 9f       	mul	r23, r18
    1e64:	bb 27       	eor	r27, r27
    1e66:	f0 0d       	add	r31, r0
    1e68:	b1 1d       	adc	r27, r1
    1e6a:	63 9f       	mul	r22, r19
    1e6c:	aa 27       	eor	r26, r26
    1e6e:	f0 0d       	add	r31, r0
    1e70:	b1 1d       	adc	r27, r1
    1e72:	aa 1f       	adc	r26, r26
    1e74:	64 9f       	mul	r22, r20
    1e76:	66 27       	eor	r22, r22
    1e78:	b0 0d       	add	r27, r0
    1e7a:	a1 1d       	adc	r26, r1
    1e7c:	66 1f       	adc	r22, r22
    1e7e:	82 9f       	mul	r24, r18
    1e80:	22 27       	eor	r18, r18
    1e82:	b0 0d       	add	r27, r0
    1e84:	a1 1d       	adc	r26, r1
    1e86:	62 1f       	adc	r22, r18
    1e88:	73 9f       	mul	r23, r19
    1e8a:	b0 0d       	add	r27, r0
    1e8c:	a1 1d       	adc	r26, r1
    1e8e:	62 1f       	adc	r22, r18
    1e90:	83 9f       	mul	r24, r19
    1e92:	a0 0d       	add	r26, r0
    1e94:	61 1d       	adc	r22, r1
    1e96:	22 1f       	adc	r18, r18
    1e98:	74 9f       	mul	r23, r20
    1e9a:	33 27       	eor	r19, r19
    1e9c:	a0 0d       	add	r26, r0
    1e9e:	61 1d       	adc	r22, r1
    1ea0:	23 1f       	adc	r18, r19
    1ea2:	84 9f       	mul	r24, r20
    1ea4:	60 0d       	add	r22, r0
    1ea6:	21 1d       	adc	r18, r1
    1ea8:	82 2f       	mov	r24, r18
    1eaa:	76 2f       	mov	r23, r22
    1eac:	6a 2f       	mov	r22, r26
    1eae:	11 24       	eor	r1, r1
    1eb0:	9f 57       	subi	r25, 0x7F	; 127
    1eb2:	50 40       	sbci	r21, 0x00	; 0
    1eb4:	9a f0       	brmi	.+38     	; 0x1edc <__mulsf3_pse+0x88>
    1eb6:	f1 f0       	breq	.+60     	; 0x1ef4 <__mulsf3_pse+0xa0>
    1eb8:	88 23       	and	r24, r24
    1eba:	4a f0       	brmi	.+18     	; 0x1ece <__mulsf3_pse+0x7a>
    1ebc:	ee 0f       	add	r30, r30
    1ebe:	ff 1f       	adc	r31, r31
    1ec0:	bb 1f       	adc	r27, r27
    1ec2:	66 1f       	adc	r22, r22
    1ec4:	77 1f       	adc	r23, r23
    1ec6:	88 1f       	adc	r24, r24
    1ec8:	91 50       	subi	r25, 0x01	; 1
    1eca:	50 40       	sbci	r21, 0x00	; 0
    1ecc:	a9 f7       	brne	.-22     	; 0x1eb8 <__mulsf3_pse+0x64>
    1ece:	9e 3f       	cpi	r25, 0xFE	; 254
    1ed0:	51 05       	cpc	r21, r1
    1ed2:	80 f0       	brcs	.+32     	; 0x1ef4 <__mulsf3_pse+0xa0>
    1ed4:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <__fp_inf>
    1ed8:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__fp_szero>
    1edc:	5f 3f       	cpi	r21, 0xFF	; 255
    1ede:	e4 f3       	brlt	.-8      	; 0x1ed8 <__mulsf3_pse+0x84>
    1ee0:	98 3e       	cpi	r25, 0xE8	; 232
    1ee2:	d4 f3       	brlt	.-12     	; 0x1ed8 <__mulsf3_pse+0x84>
    1ee4:	86 95       	lsr	r24
    1ee6:	77 95       	ror	r23
    1ee8:	67 95       	ror	r22
    1eea:	b7 95       	ror	r27
    1eec:	f7 95       	ror	r31
    1eee:	e7 95       	ror	r30
    1ef0:	9f 5f       	subi	r25, 0xFF	; 255
    1ef2:	c1 f7       	brne	.-16     	; 0x1ee4 <__mulsf3_pse+0x90>
    1ef4:	fe 2b       	or	r31, r30
    1ef6:	88 0f       	add	r24, r24
    1ef8:	91 1d       	adc	r25, r1
    1efa:	96 95       	lsr	r25
    1efc:	87 95       	ror	r24
    1efe:	97 f9       	bld	r25, 7
    1f00:	08 95       	ret

00001f02 <__ftoa_engine>:
    1f02:	28 30       	cpi	r18, 0x08	; 8
    1f04:	08 f0       	brcs	.+2      	; 0x1f08 <__ftoa_engine+0x6>
    1f06:	27 e0       	ldi	r18, 0x07	; 7
    1f08:	33 27       	eor	r19, r19
    1f0a:	da 01       	movw	r26, r20
    1f0c:	99 0f       	add	r25, r25
    1f0e:	31 1d       	adc	r19, r1
    1f10:	87 fd       	sbrc	r24, 7
    1f12:	91 60       	ori	r25, 0x01	; 1
    1f14:	00 96       	adiw	r24, 0x00	; 0
    1f16:	61 05       	cpc	r22, r1
    1f18:	71 05       	cpc	r23, r1
    1f1a:	39 f4       	brne	.+14     	; 0x1f2a <__ftoa_engine+0x28>
    1f1c:	32 60       	ori	r19, 0x02	; 2
    1f1e:	2e 5f       	subi	r18, 0xFE	; 254
    1f20:	3d 93       	st	X+, r19
    1f22:	30 e3       	ldi	r19, 0x30	; 48
    1f24:	2a 95       	dec	r18
    1f26:	e1 f7       	brne	.-8      	; 0x1f20 <__ftoa_engine+0x1e>
    1f28:	08 95       	ret
    1f2a:	9f 3f       	cpi	r25, 0xFF	; 255
    1f2c:	30 f0       	brcs	.+12     	; 0x1f3a <__ftoa_engine+0x38>
    1f2e:	80 38       	cpi	r24, 0x80	; 128
    1f30:	71 05       	cpc	r23, r1
    1f32:	61 05       	cpc	r22, r1
    1f34:	09 f0       	breq	.+2      	; 0x1f38 <__ftoa_engine+0x36>
    1f36:	3c 5f       	subi	r19, 0xFC	; 252
    1f38:	3c 5f       	subi	r19, 0xFC	; 252
    1f3a:	3d 93       	st	X+, r19
    1f3c:	91 30       	cpi	r25, 0x01	; 1
    1f3e:	08 f0       	brcs	.+2      	; 0x1f42 <__ftoa_engine+0x40>
    1f40:	80 68       	ori	r24, 0x80	; 128
    1f42:	91 1d       	adc	r25, r1
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	1f 93       	push	r17
    1f4a:	0f 93       	push	r16
    1f4c:	ff 92       	push	r15
    1f4e:	ef 92       	push	r14
    1f50:	19 2f       	mov	r17, r25
    1f52:	98 7f       	andi	r25, 0xF8	; 248
    1f54:	96 95       	lsr	r25
    1f56:	e9 2f       	mov	r30, r25
    1f58:	96 95       	lsr	r25
    1f5a:	96 95       	lsr	r25
    1f5c:	e9 0f       	add	r30, r25
    1f5e:	ff 27       	eor	r31, r31
    1f60:	e2 5d       	subi	r30, 0xD2	; 210
    1f62:	fe 4f       	sbci	r31, 0xFE	; 254
    1f64:	99 27       	eor	r25, r25
    1f66:	33 27       	eor	r19, r19
    1f68:	ee 24       	eor	r14, r14
    1f6a:	ff 24       	eor	r15, r15
    1f6c:	a7 01       	movw	r20, r14
    1f6e:	e7 01       	movw	r28, r14
    1f70:	05 90       	lpm	r0, Z+
    1f72:	08 94       	sec
    1f74:	07 94       	ror	r0
    1f76:	28 f4       	brcc	.+10     	; 0x1f82 <__ftoa_engine+0x80>
    1f78:	36 0f       	add	r19, r22
    1f7a:	e7 1e       	adc	r14, r23
    1f7c:	f8 1e       	adc	r15, r24
    1f7e:	49 1f       	adc	r20, r25
    1f80:	51 1d       	adc	r21, r1
    1f82:	66 0f       	add	r22, r22
    1f84:	77 1f       	adc	r23, r23
    1f86:	88 1f       	adc	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	06 94       	lsr	r0
    1f8c:	a1 f7       	brne	.-24     	; 0x1f76 <__ftoa_engine+0x74>
    1f8e:	05 90       	lpm	r0, Z+
    1f90:	07 94       	ror	r0
    1f92:	28 f4       	brcc	.+10     	; 0x1f9e <__ftoa_engine+0x9c>
    1f94:	e7 0e       	add	r14, r23
    1f96:	f8 1e       	adc	r15, r24
    1f98:	49 1f       	adc	r20, r25
    1f9a:	56 1f       	adc	r21, r22
    1f9c:	c1 1d       	adc	r28, r1
    1f9e:	77 0f       	add	r23, r23
    1fa0:	88 1f       	adc	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	66 1f       	adc	r22, r22
    1fa6:	06 94       	lsr	r0
    1fa8:	a1 f7       	brne	.-24     	; 0x1f92 <__ftoa_engine+0x90>
    1faa:	05 90       	lpm	r0, Z+
    1fac:	07 94       	ror	r0
    1fae:	28 f4       	brcc	.+10     	; 0x1fba <__ftoa_engine+0xb8>
    1fb0:	f8 0e       	add	r15, r24
    1fb2:	49 1f       	adc	r20, r25
    1fb4:	56 1f       	adc	r21, r22
    1fb6:	c7 1f       	adc	r28, r23
    1fb8:	d1 1d       	adc	r29, r1
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	66 1f       	adc	r22, r22
    1fc0:	77 1f       	adc	r23, r23
    1fc2:	06 94       	lsr	r0
    1fc4:	a1 f7       	brne	.-24     	; 0x1fae <__ftoa_engine+0xac>
    1fc6:	05 90       	lpm	r0, Z+
    1fc8:	07 94       	ror	r0
    1fca:	20 f4       	brcc	.+8      	; 0x1fd4 <__ftoa_engine+0xd2>
    1fcc:	49 0f       	add	r20, r25
    1fce:	56 1f       	adc	r21, r22
    1fd0:	c7 1f       	adc	r28, r23
    1fd2:	d8 1f       	adc	r29, r24
    1fd4:	99 0f       	add	r25, r25
    1fd6:	66 1f       	adc	r22, r22
    1fd8:	77 1f       	adc	r23, r23
    1fda:	88 1f       	adc	r24, r24
    1fdc:	06 94       	lsr	r0
    1fde:	a9 f7       	brne	.-22     	; 0x1fca <__ftoa_engine+0xc8>
    1fe0:	84 91       	lpm	r24, Z
    1fe2:	10 95       	com	r17
    1fe4:	17 70       	andi	r17, 0x07	; 7
    1fe6:	41 f0       	breq	.+16     	; 0x1ff8 <__ftoa_engine+0xf6>
    1fe8:	d6 95       	lsr	r29
    1fea:	c7 95       	ror	r28
    1fec:	57 95       	ror	r21
    1fee:	47 95       	ror	r20
    1ff0:	f7 94       	ror	r15
    1ff2:	e7 94       	ror	r14
    1ff4:	1a 95       	dec	r17
    1ff6:	c1 f7       	brne	.-16     	; 0x1fe8 <__ftoa_engine+0xe6>
    1ff8:	e4 ed       	ldi	r30, 0xD4	; 212
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	68 94       	set
    1ffe:	15 90       	lpm	r1, Z+
    2000:	15 91       	lpm	r17, Z+
    2002:	35 91       	lpm	r19, Z+
    2004:	65 91       	lpm	r22, Z+
    2006:	95 91       	lpm	r25, Z+
    2008:	05 90       	lpm	r0, Z+
    200a:	7f e2       	ldi	r23, 0x2F	; 47
    200c:	73 95       	inc	r23
    200e:	e1 18       	sub	r14, r1
    2010:	f1 0a       	sbc	r15, r17
    2012:	43 0b       	sbc	r20, r19
    2014:	56 0b       	sbc	r21, r22
    2016:	c9 0b       	sbc	r28, r25
    2018:	d0 09       	sbc	r29, r0
    201a:	c0 f7       	brcc	.-16     	; 0x200c <__ftoa_engine+0x10a>
    201c:	e1 0c       	add	r14, r1
    201e:	f1 1e       	adc	r15, r17
    2020:	43 1f       	adc	r20, r19
    2022:	56 1f       	adc	r21, r22
    2024:	c9 1f       	adc	r28, r25
    2026:	d0 1d       	adc	r29, r0
    2028:	7e f4       	brtc	.+30     	; 0x2048 <__ftoa_engine+0x146>
    202a:	70 33       	cpi	r23, 0x30	; 48
    202c:	11 f4       	brne	.+4      	; 0x2032 <__ftoa_engine+0x130>
    202e:	8a 95       	dec	r24
    2030:	e6 cf       	rjmp	.-52     	; 0x1ffe <__ftoa_engine+0xfc>
    2032:	e8 94       	clt
    2034:	01 50       	subi	r16, 0x01	; 1
    2036:	30 f0       	brcs	.+12     	; 0x2044 <__ftoa_engine+0x142>
    2038:	08 0f       	add	r16, r24
    203a:	0a f4       	brpl	.+2      	; 0x203e <__ftoa_engine+0x13c>
    203c:	00 27       	eor	r16, r16
    203e:	02 17       	cp	r16, r18
    2040:	08 f4       	brcc	.+2      	; 0x2044 <__ftoa_engine+0x142>
    2042:	20 2f       	mov	r18, r16
    2044:	23 95       	inc	r18
    2046:	02 2f       	mov	r16, r18
    2048:	7a 33       	cpi	r23, 0x3A	; 58
    204a:	28 f0       	brcs	.+10     	; 0x2056 <__ftoa_engine+0x154>
    204c:	79 e3       	ldi	r23, 0x39	; 57
    204e:	7d 93       	st	X+, r23
    2050:	2a 95       	dec	r18
    2052:	e9 f7       	brne	.-6      	; 0x204e <__ftoa_engine+0x14c>
    2054:	10 c0       	rjmp	.+32     	; 0x2076 <__ftoa_engine+0x174>
    2056:	7d 93       	st	X+, r23
    2058:	2a 95       	dec	r18
    205a:	89 f6       	brne	.-94     	; 0x1ffe <__ftoa_engine+0xfc>
    205c:	06 94       	lsr	r0
    205e:	97 95       	ror	r25
    2060:	67 95       	ror	r22
    2062:	37 95       	ror	r19
    2064:	17 95       	ror	r17
    2066:	17 94       	ror	r1
    2068:	e1 18       	sub	r14, r1
    206a:	f1 0a       	sbc	r15, r17
    206c:	43 0b       	sbc	r20, r19
    206e:	56 0b       	sbc	r21, r22
    2070:	c9 0b       	sbc	r28, r25
    2072:	d0 09       	sbc	r29, r0
    2074:	98 f0       	brcs	.+38     	; 0x209c <__ftoa_engine+0x19a>
    2076:	23 95       	inc	r18
    2078:	7e 91       	ld	r23, -X
    207a:	73 95       	inc	r23
    207c:	7a 33       	cpi	r23, 0x3A	; 58
    207e:	08 f0       	brcs	.+2      	; 0x2082 <__ftoa_engine+0x180>
    2080:	70 e3       	ldi	r23, 0x30	; 48
    2082:	7c 93       	st	X, r23
    2084:	20 13       	cpse	r18, r16
    2086:	b8 f7       	brcc	.-18     	; 0x2076 <__ftoa_engine+0x174>
    2088:	7e 91       	ld	r23, -X
    208a:	70 61       	ori	r23, 0x10	; 16
    208c:	7d 93       	st	X+, r23
    208e:	30 f0       	brcs	.+12     	; 0x209c <__ftoa_engine+0x19a>
    2090:	83 95       	inc	r24
    2092:	71 e3       	ldi	r23, 0x31	; 49
    2094:	7d 93       	st	X+, r23
    2096:	70 e3       	ldi	r23, 0x30	; 48
    2098:	2a 95       	dec	r18
    209a:	e1 f7       	brne	.-8      	; 0x2094 <__ftoa_engine+0x192>
    209c:	11 24       	eor	r1, r1
    209e:	ef 90       	pop	r14
    20a0:	ff 90       	pop	r15
    20a2:	0f 91       	pop	r16
    20a4:	1f 91       	pop	r17
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	99 27       	eor	r25, r25
    20ac:	87 fd       	sbrc	r24, 7
    20ae:	90 95       	com	r25
    20b0:	08 95       	ret

000020b2 <strnlen_P>:
    20b2:	fc 01       	movw	r30, r24
    20b4:	05 90       	lpm	r0, Z+
    20b6:	61 50       	subi	r22, 0x01	; 1
    20b8:	70 40       	sbci	r23, 0x00	; 0
    20ba:	01 10       	cpse	r0, r1
    20bc:	d8 f7       	brcc	.-10     	; 0x20b4 <strnlen_P+0x2>
    20be:	80 95       	com	r24
    20c0:	90 95       	com	r25
    20c2:	8e 0f       	add	r24, r30
    20c4:	9f 1f       	adc	r25, r31
    20c6:	08 95       	ret

000020c8 <strcat>:
    20c8:	fb 01       	movw	r30, r22
    20ca:	dc 01       	movw	r26, r24
    20cc:	0d 90       	ld	r0, X+
    20ce:	00 20       	and	r0, r0
    20d0:	e9 f7       	brne	.-6      	; 0x20cc <strcat+0x4>
    20d2:	11 97       	sbiw	r26, 0x01	; 1
    20d4:	01 90       	ld	r0, Z+
    20d6:	0d 92       	st	X+, r0
    20d8:	00 20       	and	r0, r0
    20da:	e1 f7       	brne	.-8      	; 0x20d4 <strcat+0xc>
    20dc:	08 95       	ret

000020de <strcpy>:
    20de:	fb 01       	movw	r30, r22
    20e0:	dc 01       	movw	r26, r24
    20e2:	01 90       	ld	r0, Z+
    20e4:	0d 92       	st	X+, r0
    20e6:	00 20       	and	r0, r0
    20e8:	e1 f7       	brne	.-8      	; 0x20e2 <strcpy+0x4>
    20ea:	08 95       	ret

000020ec <strncmp>:
    20ec:	fb 01       	movw	r30, r22
    20ee:	dc 01       	movw	r26, r24
    20f0:	41 50       	subi	r20, 0x01	; 1
    20f2:	50 40       	sbci	r21, 0x00	; 0
    20f4:	30 f0       	brcs	.+12     	; 0x2102 <strncmp+0x16>
    20f6:	8d 91       	ld	r24, X+
    20f8:	01 90       	ld	r0, Z+
    20fa:	80 19       	sub	r24, r0
    20fc:	19 f4       	brne	.+6      	; 0x2104 <strncmp+0x18>
    20fe:	00 20       	and	r0, r0
    2100:	b9 f7       	brne	.-18     	; 0x20f0 <strncmp+0x4>
    2102:	88 1b       	sub	r24, r24
    2104:	99 0b       	sbc	r25, r25
    2106:	08 95       	ret

00002108 <strnlen>:
    2108:	fc 01       	movw	r30, r24
    210a:	61 50       	subi	r22, 0x01	; 1
    210c:	70 40       	sbci	r23, 0x00	; 0
    210e:	01 90       	ld	r0, Z+
    2110:	01 10       	cpse	r0, r1
    2112:	d8 f7       	brcc	.-10     	; 0x210a <strnlen+0x2>
    2114:	80 95       	com	r24
    2116:	90 95       	com	r25
    2118:	8e 0f       	add	r24, r30
    211a:	9f 1f       	adc	r25, r31
    211c:	08 95       	ret

0000211e <fputc>:
    211e:	0f 93       	push	r16
    2120:	1f 93       	push	r17
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	fb 01       	movw	r30, r22
    2128:	23 81       	ldd	r18, Z+3	; 0x03
    212a:	21 fd       	sbrc	r18, 1
    212c:	03 c0       	rjmp	.+6      	; 0x2134 <fputc+0x16>
    212e:	8f ef       	ldi	r24, 0xFF	; 255
    2130:	9f ef       	ldi	r25, 0xFF	; 255
    2132:	2c c0       	rjmp	.+88     	; 0x218c <fputc+0x6e>
    2134:	22 ff       	sbrs	r18, 2
    2136:	16 c0       	rjmp	.+44     	; 0x2164 <fputc+0x46>
    2138:	46 81       	ldd	r20, Z+6	; 0x06
    213a:	57 81       	ldd	r21, Z+7	; 0x07
    213c:	24 81       	ldd	r18, Z+4	; 0x04
    213e:	35 81       	ldd	r19, Z+5	; 0x05
    2140:	42 17       	cp	r20, r18
    2142:	53 07       	cpc	r21, r19
    2144:	44 f4       	brge	.+16     	; 0x2156 <fputc+0x38>
    2146:	a0 81       	ld	r26, Z
    2148:	b1 81       	ldd	r27, Z+1	; 0x01
    214a:	9d 01       	movw	r18, r26
    214c:	2f 5f       	subi	r18, 0xFF	; 255
    214e:	3f 4f       	sbci	r19, 0xFF	; 255
    2150:	31 83       	std	Z+1, r19	; 0x01
    2152:	20 83       	st	Z, r18
    2154:	8c 93       	st	X, r24
    2156:	26 81       	ldd	r18, Z+6	; 0x06
    2158:	37 81       	ldd	r19, Z+7	; 0x07
    215a:	2f 5f       	subi	r18, 0xFF	; 255
    215c:	3f 4f       	sbci	r19, 0xFF	; 255
    215e:	37 83       	std	Z+7, r19	; 0x07
    2160:	26 83       	std	Z+6, r18	; 0x06
    2162:	14 c0       	rjmp	.+40     	; 0x218c <fputc+0x6e>
    2164:	8b 01       	movw	r16, r22
    2166:	ec 01       	movw	r28, r24
    2168:	fb 01       	movw	r30, r22
    216a:	00 84       	ldd	r0, Z+8	; 0x08
    216c:	f1 85       	ldd	r31, Z+9	; 0x09
    216e:	e0 2d       	mov	r30, r0
    2170:	09 95       	icall
    2172:	89 2b       	or	r24, r25
    2174:	e1 f6       	brne	.-72     	; 0x212e <fputc+0x10>
    2176:	d8 01       	movw	r26, r16
    2178:	16 96       	adiw	r26, 0x06	; 6
    217a:	8d 91       	ld	r24, X+
    217c:	9c 91       	ld	r25, X
    217e:	17 97       	sbiw	r26, 0x07	; 7
    2180:	01 96       	adiw	r24, 0x01	; 1
    2182:	17 96       	adiw	r26, 0x07	; 7
    2184:	9c 93       	st	X, r25
    2186:	8e 93       	st	-X, r24
    2188:	16 97       	sbiw	r26, 0x06	; 6
    218a:	ce 01       	movw	r24, r28
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	08 95       	ret

00002196 <printf>:
    2196:	a0 e0       	ldi	r26, 0x00	; 0
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e1 ed       	ldi	r30, 0xD1	; 209
    219c:	f0 e1       	ldi	r31, 0x10	; 16
    219e:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <__prologue_saves__+0x20>
    21a2:	ae 01       	movw	r20, r28
    21a4:	4b 5f       	subi	r20, 0xFB	; 251
    21a6:	5f 4f       	sbci	r21, 0xFF	; 255
    21a8:	fa 01       	movw	r30, r20
    21aa:	61 91       	ld	r22, Z+
    21ac:	71 91       	ld	r23, Z+
    21ae:	af 01       	movw	r20, r30
    21b0:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <__iob+0x2>
    21b4:	90 91 b3 06 	lds	r25, 0x06B3	; 0x8006b3 <__iob+0x3>
    21b8:	0e 94 08 0a 	call	0x1410	; 0x1410 <vfprintf>
    21bc:	e2 e0       	ldi	r30, 0x02	; 2
    21be:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <__epilogue_restores__+0x20>

000021c2 <puts>:
    21c2:	0f 93       	push	r16
    21c4:	1f 93       	push	r17
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
    21ca:	e0 91 b2 06 	lds	r30, 0x06B2	; 0x8006b2 <__iob+0x2>
    21ce:	f0 91 b3 06 	lds	r31, 0x06B3	; 0x8006b3 <__iob+0x3>
    21d2:	23 81       	ldd	r18, Z+3	; 0x03
    21d4:	21 ff       	sbrs	r18, 1
    21d6:	1b c0       	rjmp	.+54     	; 0x220e <puts+0x4c>
    21d8:	8c 01       	movw	r16, r24
    21da:	d0 e0       	ldi	r29, 0x00	; 0
    21dc:	c0 e0       	ldi	r28, 0x00	; 0
    21de:	f8 01       	movw	r30, r16
    21e0:	81 91       	ld	r24, Z+
    21e2:	8f 01       	movw	r16, r30
    21e4:	60 91 b2 06 	lds	r22, 0x06B2	; 0x8006b2 <__iob+0x2>
    21e8:	70 91 b3 06 	lds	r23, 0x06B3	; 0x8006b3 <__iob+0x3>
    21ec:	db 01       	movw	r26, r22
    21ee:	18 96       	adiw	r26, 0x08	; 8
    21f0:	ed 91       	ld	r30, X+
    21f2:	fc 91       	ld	r31, X
    21f4:	19 97       	sbiw	r26, 0x09	; 9
    21f6:	88 23       	and	r24, r24
    21f8:	31 f0       	breq	.+12     	; 0x2206 <puts+0x44>
    21fa:	09 95       	icall
    21fc:	89 2b       	or	r24, r25
    21fe:	79 f3       	breq	.-34     	; 0x21de <puts+0x1c>
    2200:	df ef       	ldi	r29, 0xFF	; 255
    2202:	cf ef       	ldi	r28, 0xFF	; 255
    2204:	ec cf       	rjmp	.-40     	; 0x21de <puts+0x1c>
    2206:	8a e0       	ldi	r24, 0x0A	; 10
    2208:	09 95       	icall
    220a:	89 2b       	or	r24, r25
    220c:	19 f0       	breq	.+6      	; 0x2214 <puts+0x52>
    220e:	8f ef       	ldi	r24, 0xFF	; 255
    2210:	9f ef       	ldi	r25, 0xFF	; 255
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <puts+0x56>
    2214:	8d 2f       	mov	r24, r29
    2216:	9c 2f       	mov	r25, r28
    2218:	df 91       	pop	r29
    221a:	cf 91       	pop	r28
    221c:	1f 91       	pop	r17
    221e:	0f 91       	pop	r16
    2220:	08 95       	ret

00002222 <sprintf>:
    2222:	ae e0       	ldi	r26, 0x0E	; 14
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e7 e1       	ldi	r30, 0x17	; 23
    2228:	f1 e1       	ldi	r31, 0x11	; 17
    222a:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__prologue_saves__+0x1c>
    222e:	0d 89       	ldd	r16, Y+21	; 0x15
    2230:	1e 89       	ldd	r17, Y+22	; 0x16
    2232:	86 e0       	ldi	r24, 0x06	; 6
    2234:	8c 83       	std	Y+4, r24	; 0x04
    2236:	1a 83       	std	Y+2, r17	; 0x02
    2238:	09 83       	std	Y+1, r16	; 0x01
    223a:	8f ef       	ldi	r24, 0xFF	; 255
    223c:	9f e7       	ldi	r25, 0x7F	; 127
    223e:	9e 83       	std	Y+6, r25	; 0x06
    2240:	8d 83       	std	Y+5, r24	; 0x05
    2242:	ae 01       	movw	r20, r28
    2244:	47 5e       	subi	r20, 0xE7	; 231
    2246:	5f 4f       	sbci	r21, 0xFF	; 255
    2248:	6f 89       	ldd	r22, Y+23	; 0x17
    224a:	78 8d       	ldd	r23, Y+24	; 0x18
    224c:	ce 01       	movw	r24, r28
    224e:	01 96       	adiw	r24, 0x01	; 1
    2250:	0e 94 08 0a 	call	0x1410	; 0x1410 <vfprintf>
    2254:	ef 81       	ldd	r30, Y+7	; 0x07
    2256:	f8 85       	ldd	r31, Y+8	; 0x08
    2258:	e0 0f       	add	r30, r16
    225a:	f1 1f       	adc	r31, r17
    225c:	10 82       	st	Z, r1
    225e:	2e 96       	adiw	r28, 0x0e	; 14
    2260:	e4 e0       	ldi	r30, 0x04	; 4
    2262:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__epilogue_restores__+0x1c>

00002266 <__ultoa_invert>:
    2266:	fa 01       	movw	r30, r20
    2268:	aa 27       	eor	r26, r26
    226a:	28 30       	cpi	r18, 0x08	; 8
    226c:	51 f1       	breq	.+84     	; 0x22c2 <__ultoa_invert+0x5c>
    226e:	20 31       	cpi	r18, 0x10	; 16
    2270:	81 f1       	breq	.+96     	; 0x22d2 <__ultoa_invert+0x6c>
    2272:	e8 94       	clt
    2274:	6f 93       	push	r22
    2276:	6e 7f       	andi	r22, 0xFE	; 254
    2278:	6e 5f       	subi	r22, 0xFE	; 254
    227a:	7f 4f       	sbci	r23, 0xFF	; 255
    227c:	8f 4f       	sbci	r24, 0xFF	; 255
    227e:	9f 4f       	sbci	r25, 0xFF	; 255
    2280:	af 4f       	sbci	r26, 0xFF	; 255
    2282:	b1 e0       	ldi	r27, 0x01	; 1
    2284:	3e d0       	rcall	.+124    	; 0x2302 <__ultoa_invert+0x9c>
    2286:	b4 e0       	ldi	r27, 0x04	; 4
    2288:	3c d0       	rcall	.+120    	; 0x2302 <__ultoa_invert+0x9c>
    228a:	67 0f       	add	r22, r23
    228c:	78 1f       	adc	r23, r24
    228e:	89 1f       	adc	r24, r25
    2290:	9a 1f       	adc	r25, r26
    2292:	a1 1d       	adc	r26, r1
    2294:	68 0f       	add	r22, r24
    2296:	79 1f       	adc	r23, r25
    2298:	8a 1f       	adc	r24, r26
    229a:	91 1d       	adc	r25, r1
    229c:	a1 1d       	adc	r26, r1
    229e:	6a 0f       	add	r22, r26
    22a0:	71 1d       	adc	r23, r1
    22a2:	81 1d       	adc	r24, r1
    22a4:	91 1d       	adc	r25, r1
    22a6:	a1 1d       	adc	r26, r1
    22a8:	20 d0       	rcall	.+64     	; 0x22ea <__ultoa_invert+0x84>
    22aa:	09 f4       	brne	.+2      	; 0x22ae <__ultoa_invert+0x48>
    22ac:	68 94       	set
    22ae:	3f 91       	pop	r19
    22b0:	2a e0       	ldi	r18, 0x0A	; 10
    22b2:	26 9f       	mul	r18, r22
    22b4:	11 24       	eor	r1, r1
    22b6:	30 19       	sub	r19, r0
    22b8:	30 5d       	subi	r19, 0xD0	; 208
    22ba:	31 93       	st	Z+, r19
    22bc:	de f6       	brtc	.-74     	; 0x2274 <__ultoa_invert+0xe>
    22be:	cf 01       	movw	r24, r30
    22c0:	08 95       	ret
    22c2:	46 2f       	mov	r20, r22
    22c4:	47 70       	andi	r20, 0x07	; 7
    22c6:	40 5d       	subi	r20, 0xD0	; 208
    22c8:	41 93       	st	Z+, r20
    22ca:	b3 e0       	ldi	r27, 0x03	; 3
    22cc:	0f d0       	rcall	.+30     	; 0x22ec <__ultoa_invert+0x86>
    22ce:	c9 f7       	brne	.-14     	; 0x22c2 <__ultoa_invert+0x5c>
    22d0:	f6 cf       	rjmp	.-20     	; 0x22be <__ultoa_invert+0x58>
    22d2:	46 2f       	mov	r20, r22
    22d4:	4f 70       	andi	r20, 0x0F	; 15
    22d6:	40 5d       	subi	r20, 0xD0	; 208
    22d8:	4a 33       	cpi	r20, 0x3A	; 58
    22da:	18 f0       	brcs	.+6      	; 0x22e2 <__ultoa_invert+0x7c>
    22dc:	49 5d       	subi	r20, 0xD9	; 217
    22de:	31 fd       	sbrc	r19, 1
    22e0:	40 52       	subi	r20, 0x20	; 32
    22e2:	41 93       	st	Z+, r20
    22e4:	02 d0       	rcall	.+4      	; 0x22ea <__ultoa_invert+0x84>
    22e6:	a9 f7       	brne	.-22     	; 0x22d2 <__ultoa_invert+0x6c>
    22e8:	ea cf       	rjmp	.-44     	; 0x22be <__ultoa_invert+0x58>
    22ea:	b4 e0       	ldi	r27, 0x04	; 4
    22ec:	a6 95       	lsr	r26
    22ee:	97 95       	ror	r25
    22f0:	87 95       	ror	r24
    22f2:	77 95       	ror	r23
    22f4:	67 95       	ror	r22
    22f6:	ba 95       	dec	r27
    22f8:	c9 f7       	brne	.-14     	; 0x22ec <__ultoa_invert+0x86>
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	61 05       	cpc	r22, r1
    22fe:	71 05       	cpc	r23, r1
    2300:	08 95       	ret
    2302:	9b 01       	movw	r18, r22
    2304:	ac 01       	movw	r20, r24
    2306:	0a 2e       	mov	r0, r26
    2308:	06 94       	lsr	r0
    230a:	57 95       	ror	r21
    230c:	47 95       	ror	r20
    230e:	37 95       	ror	r19
    2310:	27 95       	ror	r18
    2312:	ba 95       	dec	r27
    2314:	c9 f7       	brne	.-14     	; 0x2308 <__ultoa_invert+0xa2>
    2316:	62 0f       	add	r22, r18
    2318:	73 1f       	adc	r23, r19
    231a:	84 1f       	adc	r24, r20
    231c:	95 1f       	adc	r25, r21
    231e:	a0 1d       	adc	r26, r0
    2320:	08 95       	ret

00002322 <_exit>:
    2322:	f8 94       	cli

00002324 <__stop_program>:
    2324:	ff cf       	rjmp	.-2      	; 0x2324 <__stop_program>
